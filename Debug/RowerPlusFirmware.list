
RowerPlusFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d2ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800d450  0800d450  0001d450  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d87c  0800d87c  000202b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d87c  0800d87c  0001d87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d884  0800d884  000202b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d884  0800d884  0001d884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d888  0800d888  0001d888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b4  20000000  0800d88c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ef0  200002b4  0800db40  000202b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200041a4  0800db40  000241a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c422  00000000  00000000  000202e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000430e  00000000  00000000  0003c704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  00040a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f0  00000000  00000000  000421b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b885  00000000  00000000  000437a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e299  00000000  00000000  0005f02d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000967f4  00000000  00000000  0007d2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  00113aba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000725c  00000000  00000000  00113b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00001360  00000000  00000000  0011add8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002b4 	.word	0x200002b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d434 	.word	0x0800d434

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002b8 	.word	0x200002b8
 80001dc:	0800d434 	.word	0x0800d434

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <storage_write>:
} storage_internal_data_t;

storage_internal_data_t int_data = {0};

void storage_write(storage_data_t* data)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af04      	add	r7, sp, #16
 8000f62:	6078      	str	r0, [r7, #4]
	memset(&int_data, 0, sizeof(storage_internal_data_t));
 8000f64:	2210      	movs	r2, #16
 8000f66:	2100      	movs	r1, #0
 8000f68:	481f      	ldr	r0, [pc, #124]	; (8000fe8 <storage_write+0x8c>)
 8000f6a:	f009 fc8f 	bl	800a88c <memset>
	int_data.ka = data->ka;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <storage_write+0x8c>)
 8000f74:	6013      	str	r3, [r2, #0]
	int_data.km = data->km;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <storage_write+0x8c>)
 8000f7c:	6053      	str	r3, [r2, #4]
	int_data.ks = data->ks;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <storage_write+0x8c>)
 8000f84:	6093      	str	r3, [r2, #8]

	for(uint32_t i = 0; i < sizeof(storage_internal_data_t); i++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	e013      	b.n	8000fb4 <storage_write+0x58>
	{
		if(i != 12 && i != 13)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2b0c      	cmp	r3, #12
 8000f90:	d00d      	beq.n	8000fae <storage_write+0x52>
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2b0d      	cmp	r3, #13
 8000f96:	d00a      	beq.n	8000fae <storage_write+0x52>
		{
			int_data.checksum += ((char*)&int_data)[i];
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <storage_write+0x8c>)
 8000f9a:	899a      	ldrh	r2, [r3, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4912      	ldr	r1, [pc, #72]	; (8000fe8 <storage_write+0x8c>)
 8000fa0:	440b      	add	r3, r1
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <storage_write+0x8c>)
 8000fac:	819a      	strh	r2, [r3, #12]
	for(uint32_t i = 0; i < sizeof(storage_internal_data_t); i++)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b0f      	cmp	r3, #15
 8000fb8:	d9e8      	bls.n	8000f8c <storage_write+0x30>
		}
	}

	int_data.checksum += 10;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <storage_write+0x8c>)
 8000fbc:	899b      	ldrh	r3, [r3, #12]
 8000fbe:	330a      	adds	r3, #10
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <storage_write+0x8c>)
 8000fc4:	819a      	strh	r2, [r3, #12]

	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, 0, 2, &int_data, sizeof(storage_internal_data_t), 100);
 8000fc6:	2364      	movs	r3, #100	; 0x64
 8000fc8:	9302      	str	r3, [sp, #8]
 8000fca:	2310      	movs	r3, #16
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <storage_write+0x8c>)
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	21a0      	movs	r1, #160	; 0xa0
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <storage_write+0x90>)
 8000fda:	f001 ff21 	bl	8002e20 <HAL_I2C_Mem_Write>
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200002d0 	.word	0x200002d0
 8000fec:	20002660 	.word	0x20002660

08000ff0 <storage_read>:

BOOL storage_read(storage_data_t* output)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	6078      	str	r0, [r7, #4]
	memset(&int_data, 0, sizeof(storage_internal_data_t));
 8000ff8:	2210      	movs	r2, #16
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4821      	ldr	r0, [pc, #132]	; (8001084 <storage_read+0x94>)
 8000ffe:	f009 fc45 	bl	800a88c <memset>
	if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, 0, 2, &int_data, sizeof(storage_internal_data_t), 100) == HAL_OK)
 8001002:	2364      	movs	r3, #100	; 0x64
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	2310      	movs	r3, #16
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <storage_read+0x94>)
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2302      	movs	r3, #2
 8001010:	2200      	movs	r2, #0
 8001012:	21a0      	movs	r1, #160	; 0xa0
 8001014:	481c      	ldr	r0, [pc, #112]	; (8001088 <storage_read+0x98>)
 8001016:	f001 fffd 	bl	8003014 <HAL_I2C_Mem_Read>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d12b      	bne.n	8001078 <storage_read+0x88>
	{
		uint16_t checksum = 10;
 8001020:	230a      	movs	r3, #10
 8001022:	81fb      	strh	r3, [r7, #14]

		for(uint32_t i = 0; i < sizeof(storage_internal_data_t); i++)
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	e010      	b.n	800104c <storage_read+0x5c>
		{
			if(i != 12 && i != 13)
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	2b0c      	cmp	r3, #12
 800102e:	d00a      	beq.n	8001046 <storage_read+0x56>
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b0d      	cmp	r3, #13
 8001034:	d007      	beq.n	8001046 <storage_read+0x56>
			{
				checksum += ((char*)&int_data)[i];
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	4a12      	ldr	r2, [pc, #72]	; (8001084 <storage_read+0x94>)
 800103a:	4413      	add	r3, r2
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b29a      	uxth	r2, r3
 8001040:	89fb      	ldrh	r3, [r7, #14]
 8001042:	4413      	add	r3, r2
 8001044:	81fb      	strh	r3, [r7, #14]
		for(uint32_t i = 0; i < sizeof(storage_internal_data_t); i++)
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	3301      	adds	r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	2b0f      	cmp	r3, #15
 8001050:	d9eb      	bls.n	800102a <storage_read+0x3a>
			}
		}

		if(checksum == int_data.checksum)
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <storage_read+0x94>)
 8001054:	899b      	ldrh	r3, [r3, #12]
 8001056:	89fa      	ldrh	r2, [r7, #14]
 8001058:	429a      	cmp	r2, r3
 800105a:	d10d      	bne.n	8001078 <storage_read+0x88>
		{
			output->ka = int_data.ka;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <storage_read+0x94>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	601a      	str	r2, [r3, #0]
			output->km = int_data.km;
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <storage_read+0x94>)
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	605a      	str	r2, [r3, #4]
			output->ks = int_data.ks;
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <storage_read+0x94>)
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	609a      	str	r2, [r3, #8]

			return TRUE;
 8001074:	2301      	movs	r3, #1
 8001076:	e000      	b.n	800107a <storage_read+0x8a>
		}
	}

	return FALSE;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200002d0 	.word	0x200002d0
 8001088:	20002660 	.word	0x20002660

0800108c <hall_parser_init>:
extern TIM_HandleTypeDef htim2;

ergometer_stroke_params_t stroke_params = {0};

void hall_parser_init()
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af02      	add	r7, sp, #8
	arm_fir_init_f32(&fir_instance, ANGULAR_VELOCITY_FIR_COEFFS_SIZE, fir_coefficients, fir_state_buffer, FIR_BLOCK_SIZE);
 8001092:	2340      	movs	r3, #64	; 0x40
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <hall_parser_init+0x1c>)
 8001098:	4a04      	ldr	r2, [pc, #16]	; (80010ac <hall_parser_init+0x20>)
 800109a:	2104      	movs	r1, #4
 800109c:	4804      	ldr	r0, [pc, #16]	; (80010b0 <hall_parser_init+0x24>)
 800109e:	f009 fbab 	bl	800a7f8 <arm_fir_init_f32>
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200002ec 	.word	0x200002ec
 80010ac:	20000000 	.word	0x20000000
 80010b0:	200002e0 	.word	0x200002e0

080010b4 <shift_array_left_f>:
		arr[i-1] = arr[i];
	}
}

static inline void shift_array_left_f(float* arr, uint32_t size)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 1; i < size; i++)
 80010be:	2301      	movs	r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	e00f      	b.n	80010e4 <shift_array_left_f+0x30>
	{
		arr[i-1] = arr[i];
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	441a      	add	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010d2:	3b01      	subs	r3, #1
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	440b      	add	r3, r1
 80010da:	6812      	ldr	r2, [r2, #0]
 80010dc:	601a      	str	r2, [r3, #0]
	for(uint32_t i = 1; i < size; i++)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	3301      	adds	r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d3eb      	bcc.n	80010c4 <shift_array_left_f+0x10>
	}
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <shift_array_left_st>:

static inline void shift_array_left_st(systemtime_t* arr, uint32_t size)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b085      	sub	sp, #20
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 1; i < size; i++)
 8001104:	2301      	movs	r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	e012      	b.n	8001130 <shift_array_left_st+0x36>
	{
		arr[i-1] = arr[i];
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	18d1      	adds	r1, r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001118:	3b01      	subs	r3, #1
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	4413      	add	r3, r2
 8001120:	460a      	mov	r2, r1
 8001122:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001126:	e883 0003 	stmia.w	r3, {r0, r1}
	for(uint32_t i = 1; i < size; i++)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3301      	adds	r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d3e8      	bcc.n	800110a <shift_array_left_st+0x10>
	}
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <hall_parser_push_trigger>:
		arr[i] = arr[i-1];
	}
}

void hall_parser_push_trigger(hall_parser_t* parser)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_RAW_HALL
	char buffer[] = "0\r\n1\r\n0\r\n";
	HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 100);
#else
	systemtime_get_time(&system_time);
 8001150:	482e      	ldr	r0, [pc, #184]	; (800120c <hall_parser_push_trigger+0xc4>)
 8001152:	f001 f967 	bl	8002424 <systemtime_get_time>

	uint32_t delta_t = systemtime_time_diff_us(&system_time, &parser->angular_velocities_times[ANGULAR_VELOCITIES_BUFFER_SIZE - 1]);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f603 430c 	addw	r3, r3, #3084	; 0xc0c
 800115c:	4619      	mov	r1, r3
 800115e:	482b      	ldr	r0, [pc, #172]	; (800120c <hall_parser_push_trigger+0xc4>)
 8001160:	f001 f978 	bl	8002454 <systemtime_time_diff_us>
 8001164:	60f8      	str	r0, [r7, #12]
			parser->angular_velocities_times[ANGULAR_VELOCITIES_BUFFER_SIZE - 1].ms,
			parser->angular_velocities_times[ANGULAR_VELOCITIES_BUFFER_SIZE - 1].us);
	HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 100);
#endif

	float w = (float)ANG_VEL_NUMERATOR/delta_t;
 8001166:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001210 <hall_parser_push_trigger+0xc8>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001178:	edc7 7a02 	vstr	s15, [r7, #8]

	if(w > ANGULAR_VELOCITY_LIMIT)
 800117c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001180:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001214 <hall_parser_push_trigger+0xcc>
 8001184:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118c:	dc39      	bgt.n	8001202 <hall_parser_push_trigger+0xba>
	{
		return;
	}

	parser->angular_velocity_callback(w);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001196:	ed97 0a02 	vldr	s0, [r7, #8]
 800119a:	4798      	blx	r3

	shift_array_left_f(parser->angular_velocities, ANGULAR_VELOCITIES_BUFFER_SIZE);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3314      	adds	r3, #20
 80011a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff85 	bl	80010b4 <shift_array_left_f>
	shift_array_left_st(parser->angular_velocities_times, ANGULAR_VELOCITIES_BUFFER_SIZE);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f203 4314 	addw	r3, r3, #1044	; 0x414
 80011b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ffa0 	bl	80010fa <shift_array_left_st>

	parser->base_point--;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f8d3 3c14 	ldr.w	r3, [r3, #3092]	; 0xc14
 80011c0:	1e5a      	subs	r2, r3, #1
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
	parser->turning_point--;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 80011ce:	1e5a      	subs	r2, r3, #1
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f8c3 2c18 	str.w	r2, [r3, #3096]	; 0xc18
	parser->angular_velocities[ANGULAR_VELOCITIES_BUFFER_SIZE - 1] = w;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	601a      	str	r2, [r3, #0]
	memcpy(&parser->angular_velocities_times[ANGULAR_VELOCITIES_BUFFER_SIZE - 1], &system_time, sizeof(systemtime_t));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f603 430c 	addw	r3, r3, #3084	; 0xc0c
 80011e6:	2208      	movs	r2, #8
 80011e8:	4908      	ldr	r1, [pc, #32]	; (800120c <hall_parser_push_trigger+0xc4>)
 80011ea:	4618      	mov	r0, r3
 80011ec:	f009 fb40 	bl	800a870 <memcpy>

	if(parser->angular_velocities_times[ANGULAR_VELOCITIES_BUFFER_SIZE - 2].ms > 0)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d004      	beq.n	8001204 <hall_parser_push_trigger+0xbc>
	{
		angular_velocity_measurement_received(parser);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 f80c 	bl	8001218 <angular_velocity_measurement_received>
 8001200:	e000      	b.n	8001204 <hall_parser_push_trigger+0xbc>
		return;
 8001202:	bf00      	nop
	}
#endif
}
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200007f8 	.word	0x200007f8
 8001210:	49bfbf63 	.word	0x49bfbf63
 8001214:	437a0000 	.word	0x437a0000

08001218 <angular_velocity_measurement_received>:

static inline void angular_velocity_measurement_received(hall_parser_t* parser)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	// Apply filter (just averaging the last measurement with the previous one to remove zig-zag from curve)
	shift_array_left_f(parser->angular_velocities_filtered, ANGULAR_VELOCITIES_BUFFER_SIZE);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f603 431c 	addw	r3, r3, #3100	; 0xc1c
 8001226:	f44f 7180 	mov.w	r1, #256	; 0x100
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff ff42 	bl	80010b4 <shift_array_left_f>
	parser->angular_velocities_filtered[ANGULAR_VELOCITIES_BUFFER_SIZE-1] =
			get_angular_velocity_filtered(parser);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 fa8b 	bl	800174c <get_angular_velocity_filtered>
 8001236:	eef0 7a40 	vmov.f32	s15, s0
	parser->angular_velocities_filtered[ANGULAR_VELOCITIES_BUFFER_SIZE-1] =
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001240:	edc3 7a06 	vstr	s15, [r3, #24]

	STROKE_STATE new_state = get_stroke_state(parser);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 f818 	bl	800127a <get_stroke_state>
 800124a:	4603      	mov	r3, r0
 800124c:	73fb      	strb	r3, [r7, #15]
	{
		buffer = "REST\r\n";
	}
	HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 100);
#else
	if(new_state == DECELERATING)
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d104      	bne.n	800125e <angular_velocity_measurement_received+0x46>
	{
		parser->turning_point = ANGULAR_VELOCITIES_BUFFER_SIZE-ANGULAR_VELOCITIES_LAG;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	22fd      	movs	r2, #253	; 0xfd
 8001258:	f8c3 2c18 	str.w	r2, [r3, #3096]	; 0xc18
	}

	parser->stroke_state = new_state;
	*/
#endif
}
 800125c:	e009      	b.n	8001272 <angular_velocity_measurement_received+0x5a>
	} else if (new_state == PULLING)
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	2b02      	cmp	r3, #2
 8001262:	d106      	bne.n	8001272 <angular_velocity_measurement_received+0x5a>
		compute_stroke(parser);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 f82d 	bl	80012c4 <compute_stroke>
		parser->base_point = ANGULAR_VELOCITIES_BUFFER_SIZE-ANGULAR_VELOCITIES_LAG;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	22fd      	movs	r2, #253	; 0xfd
 800126e:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
}
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <get_stroke_state>:

static inline STROKE_STATE get_stroke_state(hall_parser_t* parser)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
	if(parser->angular_velocities[ANGULAR_VELOCITIES_BUFFER_SIZE-ANGULAR_VELOCITIES_LAG] > ANGULAR_VELOCITY_ACTIVATION_TRESHOLD)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001288:	edd3 7a00 	vldr	s15, [r3]
 800128c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001290:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001298:	dd0f      	ble.n	80012ba <get_stroke_state+0x40>
		/*
		 * We operate on filtered data to remove the noise that would make the detection
		 * of slope change more difficult
		 */
		//apply_fir(&fir_instance, parser->angular_velocities, parser->angular_velocities_filtered, ANGULAR_VELOCITIES_BUFFER_SIZE);
		if(is_w_a_maximum(parser))
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 fac1 	bl	8001822 <is_w_a_maximum>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <get_stroke_state+0x30>
		{
			return DECELERATING;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e008      	b.n	80012bc <get_stroke_state+0x42>
		} else if(is_w_a_minimum(parser))
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 fa88 	bl	80017c0 <is_w_a_minimum>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <get_stroke_state+0x40>
		{
			return PULLING;
 80012b6:	2302      	movs	r3, #2
 80012b8:	e000      	b.n	80012bc <get_stroke_state+0x42>
		}
	}

	return REST;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <compute_stroke>:
		arm_fir_f32(instance, data + i * FIR_BLOCK_SIZE, out_data + i * FIR_BLOCK_SIZE, FIR_BLOCK_SIZE);
	}
}

void compute_stroke(hall_parser_t* parser)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	ed2d 8b02 	vpush	{d8}
 80012ca:	b08e      	sub	sp, #56	; 0x38
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	if(parser->base_point < ANGULAR_VELOCITIES_BUFFER_SIZE && parser->turning_point < ANGULAR_VELOCITIES_BUFFER_SIZE &&
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f8d3 3c14 	ldr.w	r3, [r3, #3092]	; 0xc14
 80012d6:	2bff      	cmp	r3, #255	; 0xff
 80012d8:	f200 8173 	bhi.w	80015c2 <compute_stroke+0x2fe>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 80012e2:	2bff      	cmp	r3, #255	; 0xff
 80012e4:	f200 816d 	bhi.w	80015c2 <compute_stroke+0x2fe>
			parser->turning_point > parser->base_point && ANGULAR_VELOCITIES_BUFFER_SIZE - parser->turning_point > STROKE_DECEL_MIN_POINTS &&
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f8d3 3c14 	ldr.w	r3, [r3, #3092]	; 0xc14
	if(parser->base_point < ANGULAR_VELOCITIES_BUFFER_SIZE && parser->turning_point < ANGULAR_VELOCITIES_BUFFER_SIZE &&
 80012f4:	429a      	cmp	r2, r3
 80012f6:	f240 8164 	bls.w	80015c2 <compute_stroke+0x2fe>
			parser->turning_point > parser->base_point && ANGULAR_VELOCITIES_BUFFER_SIZE - parser->turning_point > STROKE_DECEL_MIN_POINTS &&
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 8001300:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001304:	2b07      	cmp	r3, #7
 8001306:	f240 815c 	bls.w	80015c2 <compute_stroke+0x2fe>
			parser->turning_point - parser->base_point > STROKE_PULL_MIN_POINTS)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f8d3 3c14 	ldr.w	r3, [r3, #3092]	; 0xc14
 8001316:	1ad3      	subs	r3, r2, r3
			parser->turning_point > parser->base_point && ANGULAR_VELOCITIES_BUFFER_SIZE - parser->turning_point > STROKE_DECEL_MIN_POINTS &&
 8001318:	2b04      	cmp	r3, #4
 800131a:	f240 8152 	bls.w	80015c2 <compute_stroke+0x2fe>
	{
		// If we don't have damping params (kA and kM) we can't go on
		if(parser->damping_constants.has_params == TRUE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	791b      	ldrb	r3, [r3, #4]
 8001322:	2b01      	cmp	r3, #1
 8001324:	f040 80c0 	bne.w	80014a8 <compute_stroke+0x1e4>
		{
			// Compute the energy spent
			float energy = 0.0f;
 8001328:	f04f 0300 	mov.w	r3, #0
 800132c:	637b      	str	r3, [r7, #52]	; 0x34
			float distance = 0.0f;
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	633b      	str	r3, [r7, #48]	; 0x30

			float ka_c = parser->damping_constants.ka / DISTANCE_CORRELATION_COEFFICIENT;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	ed93 7a02 	vldr	s14, [r3, #8]
 800133a:	eddf 6aa5 	vldr	s13, [pc, #660]	; 80015d0 <compute_stroke+0x30c>
 800133e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001342:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			float km_c = parser->damping_constants.km / DISTANCE_CORRELATION_COEFFICIENT;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	ed93 7a03 	vldr	s14, [r3, #12]
 800134c:	eddf 6aa0 	vldr	s13, [pc, #640]	; 80015d0 <compute_stroke+0x30c>
 8001350:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001354:	edc7 7a08 	vstr	s15, [r7, #32]
			float ks_c = parser->damping_constants.ks / DISTANCE_CORRELATION_COEFFICIENT;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	ed93 7a04 	vldr	s14, [r3, #16]
 800135e:	eddf 6a9c 	vldr	s13, [pc, #624]	; 80015d0 <compute_stroke+0x30c>
 8001362:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001366:	edc7 7a07 	vstr	s15, [r7, #28]

			for(uint32_t i = parser->base_point; i < parser->turning_point; i++)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f8d3 3c14 	ldr.w	r3, [r3, #3092]	; 0xc14
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001372:	e053      	b.n	800141c <compute_stroke+0x158>
			{
				energy += -compute_energy(parser, parser->angular_velocities_filtered[i], parser->angular_velocities_filtered[i-1],
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001378:	f203 3306 	addw	r3, r3, #774	; 0x306
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	3304      	adds	r3, #4
 8001382:	edd3 7a00 	vldr	s15, [r3]
 8001386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001388:	3b01      	subs	r3, #1
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	f203 3306 	addw	r3, r3, #774	; 0x306
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	4413      	add	r3, r2
 8001394:	3304      	adds	r3, #4
 8001396:	ed93 7a00 	vldr	s14, [r3]
 800139a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800139c:	3382      	adds	r3, #130	; 0x82
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	4413      	add	r3, r2
 80013a4:	1d19      	adds	r1, r3, #4
						&parser->angular_velocities_times[i], &parser->angular_velocities_times[i-1]);
 80013a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a8:	3b01      	subs	r3, #1
				energy += -compute_energy(parser, parser->angular_velocities_filtered[i], parser->angular_velocities_filtered[i-1],
 80013aa:	3382      	adds	r3, #130	; 0x82
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	3304      	adds	r3, #4
 80013b4:	461a      	mov	r2, r3
 80013b6:	eef0 0a47 	vmov.f32	s1, s14
 80013ba:	eeb0 0a67 	vmov.f32	s0, s15
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f95a 	bl	8001678 <compute_energy>
 80013c4:	eef0 7a40 	vmov.f32	s15, s0
 80013c8:	eef1 7a67 	vneg.f32	s15, s15
 80013cc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80013d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013d4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
				distance += -compute_distance(M_PI_2, parser->angular_velocities_filtered[i], ka_c, km_c, ks_c);
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013dc:	f203 3306 	addw	r3, r3, #774	; 0x306
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	3304      	adds	r3, #4
 80013e6:	edd3 7a00 	vldr	s15, [r3]
 80013ea:	ed97 2a07 	vldr	s4, [r7, #28]
 80013ee:	edd7 1a08 	vldr	s3, [r7, #32]
 80013f2:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 80013f6:	eef0 0a67 	vmov.f32	s1, s15
 80013fa:	ed9f 0a76 	vldr	s0, [pc, #472]	; 80015d4 <compute_stroke+0x310>
 80013fe:	f000 f8f5 	bl	80015ec <compute_distance>
 8001402:	eef0 7a40 	vmov.f32	s15, s0
 8001406:	eef1 7a67 	vneg.f32	s15, s15
 800140a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800140e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001412:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			for(uint32_t i = parser->base_point; i < parser->turning_point; i++)
 8001416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001418:	3301      	adds	r3, #1
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 8001422:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001424:	429a      	cmp	r2, r3
 8001426:	d3a5      	bcc.n	8001374 <compute_stroke+0xb0>
			}

			// Compute other variables
			float mean_power = (float)(1e6*energy) / systemtime_time_diff_us(&parser->angular_velocities_times[parser->turning_point-1], &parser->angular_velocities_times[parser->base_point]);
 8001428:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800142c:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80015d8 <compute_stroke+0x314>
 8001430:	ee27 8a87 	vmul.f32	s16, s15, s14
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 800143a:	3b01      	subs	r3, #1
 800143c:	3382      	adds	r3, #130	; 0x82
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	1d18      	adds	r0, r3, #4
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f8d3 3c14 	ldr.w	r3, [r3, #3092]	; 0xc14
 800144c:	3382      	adds	r3, #130	; 0x82
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	4413      	add	r3, r2
 8001454:	3304      	adds	r3, #4
 8001456:	4619      	mov	r1, r3
 8001458:	f000 fffc 	bl	8002454 <systemtime_time_diff_us>
 800145c:	ee07 0a90 	vmov	s15, r0
 8001460:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001464:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001468:	edc7 7a06 	vstr	s15, [r7, #24]
			uint32_t stroke_time = systemtime_time_diff_us(&parser->angular_velocities_times[ANGULAR_VELOCITIES_BUFFER_SIZE-2], &parser->angular_velocities_times[parser->turning_point]);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f603 4004 	addw	r0, r3, #3076	; 0xc04
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 8001478:	3382      	adds	r3, #130	; 0x82
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	4413      	add	r3, r2
 8001480:	3304      	adds	r3, #4
 8001482:	4619      	mov	r1, r3
 8001484:	f000 ffe6 	bl	8002454 <systemtime_time_diff_us>
 8001488:	6178      	str	r0, [r7, #20]

			// Send the stroke results
			stroke_params.energy_j = energy;
 800148a:	4a54      	ldr	r2, [pc, #336]	; (80015dc <compute_stroke+0x318>)
 800148c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800148e:	6013      	str	r3, [r2, #0]
			stroke_params.mean_power = mean_power;
 8001490:	4a52      	ldr	r2, [pc, #328]	; (80015dc <compute_stroke+0x318>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	6053      	str	r3, [r2, #4]
			stroke_params.distance = distance;
 8001496:	4a51      	ldr	r2, [pc, #324]	; (80015dc <compute_stroke+0x318>)
 8001498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800149a:	6093      	str	r3, [r2, #8]
			parser->callback(&stroke_params);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	484d      	ldr	r0, [pc, #308]	; (80015dc <compute_stroke+0x318>)
 80014a6:	4798      	blx	r3
		 * so we can update the kA and kM values after every stroke, taking into account
		 * every modification to the environment that could have happened
		 *
		 * Or we could fit to a quadratic equation
		 */
		uint32_t regression_count = ANGULAR_VELOCITIES_BUFFER_SIZE - parser->turning_point - 9;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 80014ae:	f1c3 03f7 	rsb	r3, r3, #247	; 0xf7
 80014b2:	613b      	str	r3, [r7, #16]

		if(regression_count > REGRESSION_MIN_POINTS)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	2b18      	cmp	r3, #24
 80014b8:	f240 8083 	bls.w	80015c2 <compute_stroke+0x2fe>
		{
			for(uint32_t i = parser->turning_point + 4; i < ANGULAR_VELOCITIES_BUFFER_SIZE-5; i++)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 80014c2:	3304      	adds	r3, #4
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80014c6:	e04e      	b.n	8001566 <compute_stroke+0x2a2>
			{
				regression_y[i - parser->turning_point - 4] = 1e6f*(parser->angular_velocities_filtered[i] - parser->angular_velocities_filtered[i-1])
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014cc:	f203 3306 	addw	r3, r3, #774	; 0x306
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	3304      	adds	r3, #4
 80014d6:	ed93 7a00 	vldr	s14, [r3]
 80014da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014dc:	3b01      	subs	r3, #1
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	f203 3306 	addw	r3, r3, #774	; 0x306
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	3304      	adds	r3, #4
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80015d8 <compute_stroke+0x314>
 80014f6:	ee27 8a87 	vmul.f32	s16, s15, s14
												/ systemtime_time_diff_us(&parser->angular_velocities_times[i], &parser->angular_velocities_times[i-1]);
 80014fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fc:	3382      	adds	r3, #130	; 0x82
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	4413      	add	r3, r2
 8001504:	1d18      	adds	r0, r3, #4
 8001506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001508:	3b01      	subs	r3, #1
 800150a:	3382      	adds	r3, #130	; 0x82
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	3304      	adds	r3, #4
 8001514:	4619      	mov	r1, r3
 8001516:	f000 ff9d 	bl	8002454 <systemtime_time_diff_us>
 800151a:	ee07 0a90 	vmov	s15, r0
 800151e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
				regression_y[i - parser->turning_point - 4] = 1e6f*(parser->angular_velocities_filtered[i] - parser->angular_velocities_filtered[i-1])
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 8001528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	3b04      	subs	r3, #4
												/ systemtime_time_diff_us(&parser->angular_velocities_times[i], &parser->angular_velocities_times[i-1]);
 800152e:	eec8 7a07 	vdiv.f32	s15, s16, s14
				regression_y[i - parser->turning_point - 4] = 1e6f*(parser->angular_velocities_filtered[i] - parser->angular_velocities_filtered[i-1])
 8001532:	4a2b      	ldr	r2, [pc, #172]	; (80015e0 <compute_stroke+0x31c>)
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	edc3 7a00 	vstr	s15, [r3]
				regression_x[i - parser->turning_point - 4] = parser->angular_velocities_filtered[i];
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 8001542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	3b04      	subs	r3, #4
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800154c:	f202 3206 	addw	r2, r2, #774	; 0x306
 8001550:	0092      	lsls	r2, r2, #2
 8001552:	440a      	add	r2, r1
 8001554:	3204      	adds	r2, #4
 8001556:	6812      	ldr	r2, [r2, #0]
 8001558:	4922      	ldr	r1, [pc, #136]	; (80015e4 <compute_stroke+0x320>)
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	601a      	str	r2, [r3, #0]
			for(uint32_t i = parser->turning_point + 4; i < ANGULAR_VELOCITIES_BUFFER_SIZE-5; i++)
 8001560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001562:	3301      	adds	r3, #1
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
 8001566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001568:	2bfa      	cmp	r3, #250	; 0xfa
 800156a:	d9ad      	bls.n	80014c8 <compute_stroke+0x204>
			}

			lms_result_t* result = lms_quadratic(regression_y, regression_x, regression_count);
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	491d      	ldr	r1, [pc, #116]	; (80015e4 <compute_stroke+0x320>)
 8001570:	481b      	ldr	r0, [pc, #108]	; (80015e0 <compute_stroke+0x31c>)
 8001572:	f000 f987 	bl	8001884 <lms_quadratic>
 8001576:	60f8      	str	r0, [r7, #12]

			// Here we check if the regression is good enough through the R2 parameter,
			// otherwise we discard the results
			if(result != NULL && result->r2 > LINREG_R2_MIN_TRESHOLD)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d021      	beq.n	80015c2 <compute_stroke+0x2fe>
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	edd3 7a03 	vldr	s15, [r3, #12]
 8001584:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80015e8 <compute_stroke+0x324>
 8001588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800158c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001590:	dc00      	bgt.n	8001594 <compute_stroke+0x2d0>
				HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 100);
#endif
			}
		}
	}
}
 8001592:	e016      	b.n	80015c2 <compute_stroke+0x2fe>
				parser->damping_constants.ka = result->c;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	609a      	str	r2, [r3, #8]
				parser->damping_constants.km = result->b;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	60da      	str	r2, [r3, #12]
				parser->damping_constants.ks = result->a;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	611a      	str	r2, [r3, #16]
				parser->damping_constants.has_params = TRUE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	711a      	strb	r2, [r3, #4]
				parser->damping_params_callback(&parser->damping_constants);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	3204      	adds	r2, #4
 80015be:	4610      	mov	r0, r2
 80015c0:	4798      	blx	r3
}
 80015c2:	bf00      	nop
 80015c4:	3738      	adds	r7, #56	; 0x38
 80015c6:	46bd      	mov	sp, r7
 80015c8:	ecbd 8b02 	vpop	{d8}
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40333333 	.word	0x40333333
 80015d4:	3fc90fdb 	.word	0x3fc90fdb
 80015d8:	49742400 	.word	0x49742400
 80015dc:	20000800 	.word	0x20000800
 80015e0:	200005f8 	.word	0x200005f8
 80015e4:	200003f8 	.word	0x200003f8
 80015e8:	3f666666 	.word	0x3f666666

080015ec <compute_distance>:

static inline float compute_distance(float angle, float w2, float ka_c, float km_c, float ks_c)
{
 80015ec:	b5b0      	push	{r4, r5, r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	ed87 0a05 	vstr	s0, [r7, #20]
 80015f6:	edc7 0a04 	vstr	s1, [r7, #16]
 80015fa:	ed87 1a03 	vstr	s2, [r7, #12]
 80015fe:	edc7 1a02 	vstr	s3, [r7, #8]
 8001602:	ed87 2a01 	vstr	s4, [r7, #4]
	return angle * cbrt(ka_c + km_c/w2 + ks_c/sqr(w2));
 8001606:	6978      	ldr	r0, [r7, #20]
 8001608:	f7fe ffa6 	bl	8000558 <__aeabi_f2d>
 800160c:	4604      	mov	r4, r0
 800160e:	460d      	mov	r5, r1
 8001610:	edd7 6a02 	vldr	s13, [r7, #8]
 8001614:	edd7 7a04 	vldr	s15, [r7, #16]
 8001618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800161c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001620:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001624:	edd7 7a04 	vldr	s15, [r7, #16]
 8001628:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800162c:	ed97 6a01 	vldr	s12, [r7, #4]
 8001630:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001638:	ee17 0a90 	vmov	r0, s15
 800163c:	f7fe ff8c 	bl	8000558 <__aeabi_f2d>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	ec43 2b10 	vmov	d0, r2, r3
 8001648:	f00b fe32 	bl	800d2b0 <cbrt>
 800164c:	ec53 2b10 	vmov	r2, r3, d0
 8001650:	4620      	mov	r0, r4
 8001652:	4629      	mov	r1, r5
 8001654:	f7fe ffd8 	bl	8000608 <__aeabi_dmul>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	f7ff faaa 	bl	8000bb8 <__aeabi_d2f>
 8001664:	4603      	mov	r3, r0
 8001666:	ee07 3a90 	vmov	s15, r3
}
 800166a:	eeb0 0a67 	vmov.f32	s0, s15
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bdb0      	pop	{r4, r5, r7, pc}
 8001674:	0000      	movs	r0, r0
	...

08001678 <compute_energy>:

static inline float compute_energy(hall_parser_t* parser, float w2, float w1, systemtime_t* t2, systemtime_t* t1)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	ed2d 8b02 	vpush	{d8}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6178      	str	r0, [r7, #20]
 8001684:	ed87 0a04 	vstr	s0, [r7, #16]
 8001688:	edc7 0a03 	vstr	s1, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
	 * dE = dTheta * (I * dw/dt + kA * w^2 + kM * w + kS)
	 * This formula includes a magnetic damping (kM) constant
	 * because the ergometer has two permanent magnets to increase the resistance
	 * and kS accounts for other factors that do not depend on angular velocity
	 */
	if(t2 - t1 > 0)
 8001690:	68ba      	ldr	r2, [r7, #8]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	dd44      	ble.n	8001724 <compute_energy+0xac>
	{
		return
				M_PI_2*(
						parser->params.I *
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016a4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001748 <compute_energy+0xd0>
 80016a8:	ee27 7a87 	vmul.f32	s14, s15, s14
						1e6f * (w2 - w1) / systemtime_time_diff_us(t2, t1)
 80016ac:	edd7 6a04 	vldr	s13, [r7, #16]
 80016b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80016b4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016b8:	ee27 8a27 	vmul.f32	s16, s14, s15
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	68b8      	ldr	r0, [r7, #8]
 80016c0:	f000 fec8 	bl	8002454 <systemtime_time_diff_us>
 80016c4:	ee07 0a90 	vmov	s15, r0
 80016c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016cc:	ee88 7a27 	vdiv.f32	s14, s16, s15
						+ parser->damping_constants.ka*sqr(w2)
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	edd3 6a02 	vldr	s13, [r3, #8]
 80016d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80016da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80016de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e2:	ee37 7a27 	vadd.f32	s14, s14, s15
		+ parser->damping_constants.km*w2
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	edd3 6a03 	vldr	s13, [r3, #12]
 80016ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80016f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016f4:	ee37 7a27 	vadd.f32	s14, s14, s15
		+ parser->damping_constants.ks
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80016fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001702:	ee17 0a90 	vmov	r0, s15
 8001706:	f7fe ff27 	bl	8000558 <__aeabi_f2d>
				M_PI_2*(
 800170a:	a30d      	add	r3, pc, #52	; (adr r3, 8001740 <compute_energy+0xc8>)
 800170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001710:	f7fe ff7a 	bl	8000608 <__aeabi_dmul>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f7ff fa4c 	bl	8000bb8 <__aeabi_d2f>
 8001720:	4603      	mov	r3, r0
 8001722:	e001      	b.n	8001728 <compute_energy+0xb0>
				);
	} else
	{
		return 0;
 8001724:	f04f 0300 	mov.w	r3, #0
	}
}
 8001728:	ee07 3a90 	vmov	s15, r3
 800172c:	eeb0 0a67 	vmov.f32	s0, s15
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	ecbd 8b02 	vpop	{d8}
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	f3af 8000 	nop.w
 8001740:	54442d18 	.word	0x54442d18
 8001744:	3ff921fb 	.word	0x3ff921fb
 8001748:	49742400 	.word	0x49742400

0800174c <get_angular_velocity_filtered>:

static inline float get_angular_velocity_filtered(hall_parser_t* parser)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	// Averaging with last 3 measurements
	// The n-1 and n-2 coefficients are the same to remove the zig-zag noise
	
	return 0.3f * parser->angular_velocities[ANGULAR_VELOCITIES_BUFFER_SIZE-1] 
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800175a:	edd3 7a00 	vldr	s15, [r3]
 800175e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80017b8 <get_angular_velocity_filtered+0x6c>
 8001762:	ee27 7a87 	vmul.f32	s14, s15, s14
		+ 0.3f * parser->angular_velocities[ANGULAR_VELOCITIES_BUFFER_SIZE-2]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800176c:	edd3 7a00 	vldr	s15, [r3]
 8001770:	eddf 6a11 	vldr	s13, [pc, #68]	; 80017b8 <get_angular_velocity_filtered+0x6c>
 8001774:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001778:	ee37 7a27 	vadd.f32	s14, s14, s15
		+ 0.2f * parser->angular_velocities[ANGULAR_VELOCITIES_BUFFER_SIZE-3]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001782:	edd3 7a00 	vldr	s15, [r3]
 8001786:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80017bc <get_angular_velocity_filtered+0x70>
 800178a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800178e:	ee37 7a27 	vadd.f32	s14, s14, s15
		+ 0.2f * parser->angular_velocities[ANGULAR_VELOCITIES_BUFFER_SIZE-4];
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001798:	edd3 7a00 	vldr	s15, [r3]
 800179c:	eddf 6a07 	vldr	s13, [pc, #28]	; 80017bc <get_angular_velocity_filtered+0x70>
 80017a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017a4:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80017a8:	eeb0 0a67 	vmov.f32	s0, s15
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	3e99999a 	.word	0x3e99999a
 80017bc:	3e4ccccd 	.word	0x3e4ccccd

080017c0 <is_w_a_minimum>:

static inline BOOL is_w_a_minimum(hall_parser_t* parser)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b087      	sub	sp, #28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
	BOOL result = TRUE;
 80017c8:	2301      	movs	r3, #1
 80017ca:	74fb      	strb	r3, [r7, #19]
	float w = parser->angular_velocities_filtered[ANGULAR_VELOCITIES_BUFFER_SIZE - ANGULAR_VELOCITIES_LAG - 1];
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	60fb      	str	r3, [r7, #12]
	for(uint32_t i = ANGULAR_VELOCITIES_BUFFER_SIZE - ANGULAR_VELOCITIES_LAG*2 - 1; i < ANGULAR_VELOCITIES_BUFFER_SIZE; i++)
 80017d6:	23f9      	movs	r3, #249	; 0xf9
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	e018      	b.n	800180e <is_w_a_minimum+0x4e>
	{
		if(i == ANGULAR_VELOCITIES_BUFFER_SIZE - ANGULAR_VELOCITIES_LAG - 1)
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	2bfc      	cmp	r3, #252	; 0xfc
 80017e0:	d011      	beq.n	8001806 <is_w_a_minimum+0x46>
		{
			continue;
		}
		if(w >= parser->angular_velocities_filtered[i])
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f203 3306 	addw	r3, r3, #774	; 0x306
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	3304      	adds	r3, #4
 80017f0:	edd3 7a00 	vldr	s15, [r3]
 80017f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80017f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001800:	db02      	blt.n	8001808 <is_w_a_minimum+0x48>
		{
			return FALSE;
 8001802:	2300      	movs	r3, #0
 8001804:	e007      	b.n	8001816 <is_w_a_minimum+0x56>
			continue;
 8001806:	bf00      	nop
	for(uint32_t i = ANGULAR_VELOCITIES_BUFFER_SIZE - ANGULAR_VELOCITIES_LAG*2 - 1; i < ANGULAR_VELOCITIES_BUFFER_SIZE; i++)
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	3301      	adds	r3, #1
 800180c:	617b      	str	r3, [r7, #20]
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	2bff      	cmp	r3, #255	; 0xff
 8001812:	d9e3      	bls.n	80017dc <is_w_a_minimum+0x1c>
		}
	}
	return TRUE;
 8001814:	2301      	movs	r3, #1
}
 8001816:	4618      	mov	r0, r3
 8001818:	371c      	adds	r7, #28
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <is_w_a_maximum>:

static inline BOOL is_w_a_maximum(hall_parser_t* parser)
{
 8001822:	b480      	push	{r7}
 8001824:	b087      	sub	sp, #28
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
	BOOL result = TRUE;
 800182a:	2301      	movs	r3, #1
 800182c:	74fb      	strb	r3, [r7, #19]
	float w = parser->angular_velocities_filtered[ANGULAR_VELOCITIES_BUFFER_SIZE - ANGULAR_VELOCITIES_LAG - 1];
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	60fb      	str	r3, [r7, #12]
	for(uint32_t i = ANGULAR_VELOCITIES_BUFFER_SIZE - ANGULAR_VELOCITIES_LAG*2 - 1; i < ANGULAR_VELOCITIES_BUFFER_SIZE; i++)
 8001838:	23f9      	movs	r3, #249	; 0xf9
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	e018      	b.n	8001870 <is_w_a_maximum+0x4e>
	{
		if(i == ANGULAR_VELOCITIES_BUFFER_SIZE - ANGULAR_VELOCITIES_LAG - 1)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	2bfc      	cmp	r3, #252	; 0xfc
 8001842:	d011      	beq.n	8001868 <is_w_a_maximum+0x46>
		{
			continue;
		}
		if(w <= parser->angular_velocities_filtered[i])
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f203 3306 	addw	r3, r3, #774	; 0x306
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	3304      	adds	r3, #4
 8001852:	edd3 7a00 	vldr	s15, [r3]
 8001856:	ed97 7a03 	vldr	s14, [r7, #12]
 800185a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800185e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001862:	d802      	bhi.n	800186a <is_w_a_maximum+0x48>
		{
			return FALSE;
 8001864:	2300      	movs	r3, #0
 8001866:	e007      	b.n	8001878 <is_w_a_maximum+0x56>
			continue;
 8001868:	bf00      	nop
	for(uint32_t i = ANGULAR_VELOCITIES_BUFFER_SIZE - ANGULAR_VELOCITIES_LAG*2 - 1; i < ANGULAR_VELOCITIES_BUFFER_SIZE; i++)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	2bff      	cmp	r3, #255	; 0xff
 8001874:	d9e3      	bls.n	800183e <is_w_a_maximum+0x1c>
		}
	}
	return TRUE;
 8001876:	2301      	movs	r3, #1
}
 8001878:	4618      	mov	r0, r3
 800187a:	371c      	adds	r7, #28
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <lms_quadratic>:
arm_matrix_instance_f32 ATMAI_AT;
arm_matrix_instance_f32 B;
arm_matrix_instance_f32 X;

lms_result_t* lms_quadratic(float* y_data, float* x_data, uint32_t size)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
	// A is the matrix with the x values
	// B is the matrix (vector) with the y values
	// X is the matrix with the coefficients

	// X = (At * A)^(-1) * At * B
	arm_mat_init_f32(&A, size, 3, A_m);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	b299      	uxth	r1, r3
 8001894:	4b87      	ldr	r3, [pc, #540]	; (8001ab4 <lms_quadratic+0x230>)
 8001896:	2203      	movs	r2, #3
 8001898:	4887      	ldr	r0, [pc, #540]	; (8001ab8 <lms_quadratic+0x234>)
 800189a:	f008 ffa9 	bl	800a7f0 <arm_mat_init_f32>
	arm_mat_init_f32(&AT, 3, size, AT_m);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	b29a      	uxth	r2, r3
 80018a2:	4b86      	ldr	r3, [pc, #536]	; (8001abc <lms_quadratic+0x238>)
 80018a4:	2103      	movs	r1, #3
 80018a6:	4886      	ldr	r0, [pc, #536]	; (8001ac0 <lms_quadratic+0x23c>)
 80018a8:	f008 ffa2 	bl	800a7f0 <arm_mat_init_f32>
	arm_mat_init_f32(&ATMA, 3, 3, ATMA_m);
 80018ac:	4b85      	ldr	r3, [pc, #532]	; (8001ac4 <lms_quadratic+0x240>)
 80018ae:	2203      	movs	r2, #3
 80018b0:	2103      	movs	r1, #3
 80018b2:	4885      	ldr	r0, [pc, #532]	; (8001ac8 <lms_quadratic+0x244>)
 80018b4:	f008 ff9c 	bl	800a7f0 <arm_mat_init_f32>
	arm_mat_init_f32(&ATMAI, 3, 3, ATMAI_m);
 80018b8:	4b84      	ldr	r3, [pc, #528]	; (8001acc <lms_quadratic+0x248>)
 80018ba:	2203      	movs	r2, #3
 80018bc:	2103      	movs	r1, #3
 80018be:	4884      	ldr	r0, [pc, #528]	; (8001ad0 <lms_quadratic+0x24c>)
 80018c0:	f008 ff96 	bl	800a7f0 <arm_mat_init_f32>
	arm_mat_init_f32(&ATMAI_AT, 3, size, ATMAI_AT_m);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	4b82      	ldr	r3, [pc, #520]	; (8001ad4 <lms_quadratic+0x250>)
 80018ca:	2103      	movs	r1, #3
 80018cc:	4882      	ldr	r0, [pc, #520]	; (8001ad8 <lms_quadratic+0x254>)
 80018ce:	f008 ff8f 	bl	800a7f0 <arm_mat_init_f32>
	arm_mat_init_f32(&B, size, 1, y_data);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	b299      	uxth	r1, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2201      	movs	r2, #1
 80018da:	4880      	ldr	r0, [pc, #512]	; (8001adc <lms_quadratic+0x258>)
 80018dc:	f008 ff88 	bl	800a7f0 <arm_mat_init_f32>
	arm_mat_init_f32(&X, 3, 1, X_m);
 80018e0:	4b7f      	ldr	r3, [pc, #508]	; (8001ae0 <lms_quadratic+0x25c>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	2103      	movs	r1, #3
 80018e6:	487f      	ldr	r0, [pc, #508]	; (8001ae4 <lms_quadratic+0x260>)
 80018e8:	f008 ff82 	bl	800a7f0 <arm_mat_init_f32>

	build_A_mat(x_data, size, A_m);
 80018ec:	4a71      	ldr	r2, [pc, #452]	; (8001ab4 <lms_quadratic+0x230>)
 80018ee:	6879      	ldr	r1, [r7, #4]
 80018f0:	68b8      	ldr	r0, [r7, #8]
 80018f2:	f000 f8fb 	bl	8001aec <build_A_mat>

	LMS_CHECK_STATUS(arm_mat_trans_f32(&A, &AT));
 80018f6:	4972      	ldr	r1, [pc, #456]	; (8001ac0 <lms_quadratic+0x23c>)
 80018f8:	486f      	ldr	r0, [pc, #444]	; (8001ab8 <lms_quadratic+0x234>)
 80018fa:	f008 fd03 	bl	800a304 <arm_mat_trans_f32>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <lms_quadratic+0x84>
 8001904:	2300      	movs	r3, #0
 8001906:	e0d0      	b.n	8001aaa <lms_quadratic+0x226>
	LMS_CHECK_STATUS(arm_mat_mult_f32(&AT, &A, &ATMA));
 8001908:	4a6f      	ldr	r2, [pc, #444]	; (8001ac8 <lms_quadratic+0x244>)
 800190a:	496b      	ldr	r1, [pc, #428]	; (8001ab8 <lms_quadratic+0x234>)
 800190c:	486c      	ldr	r0, [pc, #432]	; (8001ac0 <lms_quadratic+0x23c>)
 800190e:	f008 fd6d 	bl	800a3ec <arm_mat_mult_f32>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <lms_quadratic+0x98>
 8001918:	2300      	movs	r3, #0
 800191a:	e0c6      	b.n	8001aaa <lms_quadratic+0x226>
	LMS_CHECK_STATUS(arm_mat_inverse_f32(&ATMA, &ATMAI));
 800191c:	496c      	ldr	r1, [pc, #432]	; (8001ad0 <lms_quadratic+0x24c>)
 800191e:	486a      	ldr	r0, [pc, #424]	; (8001ac8 <lms_quadratic+0x244>)
 8001920:	f008 fe1c 	bl	800a55c <arm_mat_inverse_f32>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <lms_quadratic+0xaa>
 800192a:	2300      	movs	r3, #0
 800192c:	e0bd      	b.n	8001aaa <lms_quadratic+0x226>
	LMS_CHECK_STATUS(arm_mat_mult_f32(&ATMAI, &AT, &ATMAI_AT));
 800192e:	4a6a      	ldr	r2, [pc, #424]	; (8001ad8 <lms_quadratic+0x254>)
 8001930:	4963      	ldr	r1, [pc, #396]	; (8001ac0 <lms_quadratic+0x23c>)
 8001932:	4867      	ldr	r0, [pc, #412]	; (8001ad0 <lms_quadratic+0x24c>)
 8001934:	f008 fd5a 	bl	800a3ec <arm_mat_mult_f32>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <lms_quadratic+0xbe>
 800193e:	2300      	movs	r3, #0
 8001940:	e0b3      	b.n	8001aaa <lms_quadratic+0x226>
	LMS_CHECK_STATUS(arm_mat_mult_f32(&ATMAI_AT, &B, &X));
 8001942:	4a68      	ldr	r2, [pc, #416]	; (8001ae4 <lms_quadratic+0x260>)
 8001944:	4965      	ldr	r1, [pc, #404]	; (8001adc <lms_quadratic+0x258>)
 8001946:	4864      	ldr	r0, [pc, #400]	; (8001ad8 <lms_quadratic+0x254>)
 8001948:	f008 fd50 	bl	800a3ec <arm_mat_mult_f32>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <lms_quadratic+0xd2>
 8001952:	2300      	movs	r3, #0
 8001954:	e0a9      	b.n	8001aaa <lms_quadratic+0x226>

	float y_avg, ss_res, ss_tot;
	arm_mean_f32(y_data, size, &y_avg);
 8001956:	f107 0310 	add.w	r3, r7, #16
 800195a:	461a      	mov	r2, r3
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f008 fc9e 	bl	800a2a0 <arm_mean_f32>

	for(uint32_t i = 0; i < size; i++)
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	e080      	b.n	8001a6c <lms_quadratic+0x1e8>
	{
		ss_res += sqr(y_data[i] - (X_m[0] + X_m[1]*A_m[i*3+1] + X_m[2]*A_m[i*3+2]));
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	4413      	add	r3, r2
 8001972:	ed93 7a00 	vldr	s14, [r3]
 8001976:	4b5a      	ldr	r3, [pc, #360]	; (8001ae0 <lms_quadratic+0x25c>)
 8001978:	edd3 6a00 	vldr	s13, [r3]
 800197c:	4b58      	ldr	r3, [pc, #352]	; (8001ae0 <lms_quadratic+0x25c>)
 800197e:	ed93 6a01 	vldr	s12, [r3, #4]
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	4613      	mov	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4413      	add	r3, r2
 800198a:	3301      	adds	r3, #1
 800198c:	4a49      	ldr	r2, [pc, #292]	; (8001ab4 <lms_quadratic+0x230>)
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	edd3 7a00 	vldr	s15, [r3]
 8001996:	ee66 7a27 	vmul.f32	s15, s12, s15
 800199a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800199e:	4b50      	ldr	r3, [pc, #320]	; (8001ae0 <lms_quadratic+0x25c>)
 80019a0:	ed93 6a02 	vldr	s12, [r3, #8]
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	4613      	mov	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	3302      	adds	r3, #2
 80019ae:	4a41      	ldr	r2, [pc, #260]	; (8001ab4 <lms_quadratic+0x230>)
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	edd3 6a00 	vldr	s13, [r3]
 80019d0:	4b43      	ldr	r3, [pc, #268]	; (8001ae0 <lms_quadratic+0x25c>)
 80019d2:	ed93 6a00 	vldr	s12, [r3]
 80019d6:	4b42      	ldr	r3, [pc, #264]	; (8001ae0 <lms_quadratic+0x25c>)
 80019d8:	edd3 5a01 	vldr	s11, [r3, #4]
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	4613      	mov	r3, r2
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	4413      	add	r3, r2
 80019e4:	3301      	adds	r3, #1
 80019e6:	4a33      	ldr	r2, [pc, #204]	; (8001ab4 <lms_quadratic+0x230>)
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	edd3 7a00 	vldr	s15, [r3]
 80019f0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019f4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019f8:	4b39      	ldr	r3, [pc, #228]	; (8001ae0 <lms_quadratic+0x25c>)
 80019fa:	edd3 5a02 	vldr	s11, [r3, #8]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	4613      	mov	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	3302      	adds	r3, #2
 8001a08:	4a2a      	ldr	r2, [pc, #168]	; (8001ab4 <lms_quadratic+0x230>)
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	edd3 7a00 	vldr	s15, [r3]
 8001a12:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a16:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001a1a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a22:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a2a:	edc7 7a07 	vstr	s15, [r7, #28]
		ss_tot += sqr(y_data[i] - y_avg);
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	4413      	add	r3, r2
 8001a36:	ed93 7a00 	vldr	s14, [r3]
 8001a3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	4413      	add	r3, r2
 8001a4a:	edd3 6a00 	vldr	s13, [r3]
 8001a4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a52:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a5a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a62:	edc7 7a06 	vstr	s15, [r7, #24]
	for(uint32_t i = 0; i < size; i++)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	f4ff af7a 	bcc.w	800196a <lms_quadratic+0xe6>
	}

	lms_result.a = X_m[0];
 8001a76:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <lms_quadratic+0x25c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a1b      	ldr	r2, [pc, #108]	; (8001ae8 <lms_quadratic+0x264>)
 8001a7c:	6013      	str	r3, [r2, #0]
	lms_result.b = X_m[1];
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <lms_quadratic+0x25c>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	4a19      	ldr	r2, [pc, #100]	; (8001ae8 <lms_quadratic+0x264>)
 8001a84:	6053      	str	r3, [r2, #4]
	lms_result.c = X_m[2];
 8001a86:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <lms_quadratic+0x25c>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	4a17      	ldr	r2, [pc, #92]	; (8001ae8 <lms_quadratic+0x264>)
 8001a8c:	6093      	str	r3, [r2, #8]
	lms_result.r2 = 1 - ss_res/ss_tot;
 8001a8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001a92:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <lms_quadratic+0x264>)
 8001aa4:	edc3 7a03 	vstr	s15, [r3, #12]

	return &lms_result;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <lms_quadratic+0x264>)
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3720      	adds	r7, #32
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	2000080c 	.word	0x2000080c
 8001ab8:	20002628 	.word	0x20002628
 8001abc:	20000e0c 	.word	0x20000e0c
 8001ac0:	20002630 	.word	0x20002630
 8001ac4:	2000140c 	.word	0x2000140c
 8001ac8:	20002638 	.word	0x20002638
 8001acc:	20001a0c 	.word	0x20001a0c
 8001ad0:	20002640 	.word	0x20002640
 8001ad4:	2000200c 	.word	0x2000200c
 8001ad8:	20002648 	.word	0x20002648
 8001adc:	20002650 	.word	0x20002650
 8001ae0:	2000260c 	.word	0x2000260c
 8001ae4:	20002658 	.word	0x20002658
 8001ae8:	20002618 	.word	0x20002618

08001aec <build_A_mat>:

static inline void build_A_mat(float* x_data, uint32_t size, float* matrix)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
	// Since we want a quadratic fit, we build the A matrix from the x values with:
	// the first column having value 1 (constant coefficient)
	// the second column having value x (linear coefficient)
	// the third one having value x^2 (quadratic coefficient)

	for(uint32_t i = 0; i < size; i++)
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	e033      	b.n	8001b66 <build_A_mat+0x7a>
	{
		matrix[i*3] = 1;
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4613      	mov	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	4413      	add	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	461a      	mov	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b12:	601a      	str	r2, [r3, #0]
		matrix[i*3+1] = x_data[i];
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	18d1      	adds	r1, r2, r3
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4413      	add	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	3304      	adds	r3, #4
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	680a      	ldr	r2, [r1, #0]
 8001b2e:	601a      	str	r2, [r3, #0]
		matrix[i*3+2] = sqr(x_data[i]);
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	4413      	add	r3, r2
 8001b38:	ed93 7a00 	vldr	s14, [r3]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	68fa      	ldr	r2, [r7, #12]
 8001b42:	4413      	add	r3, r2
 8001b44:	edd3 7a00 	vldr	s15, [r3]
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	3308      	adds	r3, #8
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	4413      	add	r3, r2
 8001b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b5c:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t i = 0; i < size; i++)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	3301      	adds	r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d3c7      	bcc.n	8001afe <build_A_mat+0x12>
	}
}
 8001b6e:	bf00      	nop
 8001b70:	bf00      	nop
 8001b72:	371c      	adds	r7, #28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b80:	f000 fcac 	bl	80024dc <HAL_Init>

  /* USER CODE BEGIN Init */

  // This delay is required since when we power the device through E5V pin
  // the STLink HSE needs some time to be powered up
  HAL_Delay(3000);
 8001b84:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001b88:	f000 fd1a 	bl	80025c0 <HAL_Delay>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b8c:	f000 f852 	bl	8001c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b90:	f000 f962 	bl	8001e58 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b94:	f000 f936 	bl	8001e04 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001b98:	f000 f8e4 	bl	8001d64 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001b9c:	f000 f8b4 	bl	8001d08 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001ba0:	f007 ff46 	bl	8009a30 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	hall_parser_init();
 8001ba4:	f7ff fa72 	bl	800108c <hall_parser_init>
	memset(&hall_parser, 0, sizeof(hall_parser_t));
 8001ba8:	f241 022c 	movw	r2, #4140	; 0x102c
 8001bac:	2100      	movs	r1, #0
 8001bae:	481a      	ldr	r0, [pc, #104]	; (8001c18 <main+0x9c>)
 8001bb0:	f008 fe6c 	bl	800a88c <memset>

	// We check if we have the parameters stored inside the EEPROM
	// If that's the case, we use them straight away
	if(storage_read(&storage_data)) {
 8001bb4:	4819      	ldr	r0, [pc, #100]	; (8001c1c <main+0xa0>)
 8001bb6:	f7ff fa1b 	bl	8000ff0 <storage_read>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d00e      	beq.n	8001bde <main+0x62>
		hall_parser.damping_constants.ka = storage_data.ka;
 8001bc0:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <main+0xa0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a14      	ldr	r2, [pc, #80]	; (8001c18 <main+0x9c>)
 8001bc6:	6093      	str	r3, [r2, #8]
		hall_parser.damping_constants.km = storage_data.km;
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <main+0xa0>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <main+0x9c>)
 8001bce:	60d3      	str	r3, [r2, #12]
		hall_parser.damping_constants.ks = storage_data.ks;
 8001bd0:	4b12      	ldr	r3, [pc, #72]	; (8001c1c <main+0xa0>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	4a10      	ldr	r2, [pc, #64]	; (8001c18 <main+0x9c>)
 8001bd6:	6113      	str	r3, [r2, #16]
		hall_parser.damping_constants.has_params = TRUE;
 8001bd8:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <main+0x9c>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	711a      	strb	r2, [r3, #4]
	}

	hall_parser.callback = ergometer_stroke;
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <main+0x9c>)
 8001be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <main+0xa4>)
 8001be8:	61d3      	str	r3, [r2, #28]
	hall_parser.damping_params_callback = params_received;
 8001bea:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <main+0x9c>)
 8001bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <main+0xa8>)
 8001bf4:	6213      	str	r3, [r2, #32]
	hall_parser.angular_velocity_callback = angular_velocity_received;
 8001bf6:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <main+0x9c>)
 8001bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <main+0xac>)
 8001c00:	6253      	str	r3, [r2, #36]	; 0x24
	hall_parser.params.I = MOMENT_OF_INERTIA;
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <main+0x9c>)
 8001c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <main+0xb0>)
 8001c0c:	6293      	str	r3, [r2, #40]	; 0x28

	HAL_TIM_Base_Start_IT(&htim1);
 8001c0e:	4808      	ldr	r0, [pc, #32]	; (8001c30 <main+0xb4>)
 8001c10:	f003 fece 	bl	80059b0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <main+0x98>
 8001c16:	bf00      	nop
 8001c18:	20002740 	.word	0x20002740
 8001c1c:	2000376c 	.word	0x2000376c
 8001c20:	08001f25 	.word	0x08001f25
 8001c24:	08001f61 	.word	0x08001f61
 8001c28:	08001f95 	.word	0x08001f95
 8001c2c:	3baee200 	.word	0x3baee200
 8001c30:	200026b4 	.word	0x200026b4

08001c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b094      	sub	sp, #80	; 0x50
 8001c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c3a:	f107 0320 	add.w	r3, r7, #32
 8001c3e:	2230      	movs	r2, #48	; 0x30
 8001c40:	2100      	movs	r1, #0
 8001c42:	4618      	mov	r0, r3
 8001c44:	f008 fe22 	bl	800a88c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <SystemClock_Config+0xcc>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	4a27      	ldr	r2, [pc, #156]	; (8001d00 <SystemClock_Config+0xcc>)
 8001c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c66:	6413      	str	r3, [r2, #64]	; 0x40
 8001c68:	4b25      	ldr	r3, [pc, #148]	; (8001d00 <SystemClock_Config+0xcc>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c74:	2300      	movs	r3, #0
 8001c76:	607b      	str	r3, [r7, #4]
 8001c78:	4b22      	ldr	r3, [pc, #136]	; (8001d04 <SystemClock_Config+0xd0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c80:	4a20      	ldr	r2, [pc, #128]	; (8001d04 <SystemClock_Config+0xd0>)
 8001c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <SystemClock_Config+0xd0>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c94:	2301      	movs	r3, #1
 8001c96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ca2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ca8:	2304      	movs	r3, #4
 8001caa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001cac:	23a8      	movs	r3, #168	; 0xa8
 8001cae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001cb0:	2304      	movs	r3, #4
 8001cb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001cb4:	2307      	movs	r3, #7
 8001cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb8:	f107 0320 	add.w	r3, r7, #32
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f003 f98f 	bl	8004fe0 <HAL_RCC_OscConfig>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001cc8:	f000 f998 	bl	8001ffc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ccc:	230f      	movs	r3, #15
 8001cce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ce2:	f107 030c 	add.w	r3, r7, #12
 8001ce6:	2102      	movs	r1, #2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f003 fbf1 	bl	80054d0 <HAL_RCC_ClockConfig>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001cf4:	f000 f982 	bl	8001ffc <Error_Handler>
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	3750      	adds	r7, #80	; 0x50
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40007000 	.word	0x40007000

08001d08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d0c:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <MX_I2C1_Init+0x50>)
 8001d0e:	4a13      	ldr	r2, [pc, #76]	; (8001d5c <MX_I2C1_Init+0x54>)
 8001d10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <MX_I2C1_Init+0x50>)
 8001d14:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <MX_I2C1_Init+0x58>)
 8001d16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <MX_I2C1_Init+0x50>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <MX_I2C1_Init+0x50>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <MX_I2C1_Init+0x50>)
 8001d26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <MX_I2C1_Init+0x50>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MX_I2C1_Init+0x50>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <MX_I2C1_Init+0x50>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d3e:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <MX_I2C1_Init+0x50>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d44:	4804      	ldr	r0, [pc, #16]	; (8001d58 <MX_I2C1_Init+0x50>)
 8001d46:	f000 ff27 	bl	8002b98 <HAL_I2C_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d50:	f000 f954 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20002660 	.word	0x20002660
 8001d5c:	40005400 	.word	0x40005400
 8001d60:	00061a80 	.word	0x00061a80

08001d64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d78:	463b      	mov	r3, r7
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d80:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <MX_TIM1_Init+0x98>)
 8001d82:	4a1f      	ldr	r2, [pc, #124]	; (8001e00 <MX_TIM1_Init+0x9c>)
 8001d84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001d86:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <MX_TIM1_Init+0x98>)
 8001d88:	2253      	movs	r2, #83	; 0x53
 8001d8a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <MX_TIM1_Init+0x98>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001d92:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <MX_TIM1_Init+0x98>)
 8001d94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d98:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9a:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <MX_TIM1_Init+0x98>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001da0:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <MX_TIM1_Init+0x98>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da6:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <MX_TIM1_Init+0x98>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001dac:	4813      	ldr	r0, [pc, #76]	; (8001dfc <MX_TIM1_Init+0x98>)
 8001dae:	f003 fdaf 	bl	8005910 <HAL_TIM_Base_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001db8:	f000 f920 	bl	8001ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dc2:	f107 0308 	add.w	r3, r7, #8
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	480c      	ldr	r0, [pc, #48]	; (8001dfc <MX_TIM1_Init+0x98>)
 8001dca:	f003 ff5b 	bl	8005c84 <HAL_TIM_ConfigClockSource>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001dd4:	f000 f912 	bl	8001ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001de0:	463b      	mov	r3, r7
 8001de2:	4619      	mov	r1, r3
 8001de4:	4805      	ldr	r0, [pc, #20]	; (8001dfc <MX_TIM1_Init+0x98>)
 8001de6:	f004 f961 	bl	80060ac <HAL_TIMEx_MasterConfigSynchronization>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001df0:	f000 f904 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001df4:	bf00      	nop
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	200026b4 	.word	0x200026b4
 8001e00:	40010000 	.word	0x40010000

08001e04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e0a:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <MX_USART2_UART_Init+0x50>)
 8001e0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e22:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e3a:	4805      	ldr	r0, [pc, #20]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e3c:	f004 f9b8 	bl	80061b0 <HAL_UART_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e46:	f000 f8d9 	bl	8001ffc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200026fc 	.word	0x200026fc
 8001e54:	40004400 	.word	0x40004400

08001e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5e:	f107 030c 	add.w	r3, r7, #12
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	605a      	str	r2, [r3, #4]
 8001e68:	609a      	str	r2, [r3, #8]
 8001e6a:	60da      	str	r2, [r3, #12]
 8001e6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	4b2a      	ldr	r3, [pc, #168]	; (8001f1c <MX_GPIO_Init+0xc4>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a29      	ldr	r2, [pc, #164]	; (8001f1c <MX_GPIO_Init+0xc4>)
 8001e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b27      	ldr	r3, [pc, #156]	; (8001f1c <MX_GPIO_Init+0xc4>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	4b23      	ldr	r3, [pc, #140]	; (8001f1c <MX_GPIO_Init+0xc4>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4a22      	ldr	r2, [pc, #136]	; (8001f1c <MX_GPIO_Init+0xc4>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b20      	ldr	r3, [pc, #128]	; (8001f1c <MX_GPIO_Init+0xc4>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	603b      	str	r3, [r7, #0]
 8001eaa:	4b1c      	ldr	r3, [pc, #112]	; (8001f1c <MX_GPIO_Init+0xc4>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a1b      	ldr	r2, [pc, #108]	; (8001f1c <MX_GPIO_Init+0xc4>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <MX_GPIO_Init+0xc4>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2120      	movs	r1, #32
 8001ec6:	4816      	ldr	r0, [pc, #88]	; (8001f20 <MX_GPIO_Init+0xc8>)
 8001ec8:	f000 fe34 	bl	8002b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HALL_Pin */
  GPIO_InitStruct.Pin = HALL_Pin;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ed0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001ed4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HALL_GPIO_Port, &GPIO_InitStruct);
 8001eda:	f107 030c 	add.w	r3, r7, #12
 8001ede:	4619      	mov	r1, r3
 8001ee0:	480f      	ldr	r0, [pc, #60]	; (8001f20 <MX_GPIO_Init+0xc8>)
 8001ee2:	f000 fca3 	bl	800282c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ee6:	2320      	movs	r3, #32
 8001ee8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eea:	2301      	movs	r3, #1
 8001eec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ef6:	f107 030c 	add.w	r3, r7, #12
 8001efa:	4619      	mov	r1, r3
 8001efc:	4808      	ldr	r0, [pc, #32]	; (8001f20 <MX_GPIO_Init+0xc8>)
 8001efe:	f000 fc95 	bl	800282c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 2);
 8001f02:	2202      	movs	r2, #2
 8001f04:	2100      	movs	r1, #0
 8001f06:	2006      	movs	r0, #6
 8001f08:	f000 fc59 	bl	80027be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f0c:	2006      	movs	r0, #6
 8001f0e:	f000 fc72 	bl	80027f6 <HAL_NVIC_EnableIRQ>

}
 8001f12:	bf00      	nop
 8001f14:	3720      	adds	r7, #32
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40020000 	.word	0x40020000

08001f24 <ergometer_stroke>:

/* USER CODE BEGIN 4 */
void ergometer_stroke(ergometer_stroke_params_t* stroke_params)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_STROKE_PARAMS
	char buffer[32];
	sprintf(buffer, "%.3f,%.3f,%.3f\r\n", stroke_params->energy_j, stroke_params->mean_power, stroke_params->distance);
	HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 100);
#else
	usb_out_data.energy_j = stroke_params->energy_j;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a09      	ldr	r2, [pc, #36]	; (8001f58 <ergometer_stroke+0x34>)
 8001f32:	6013      	str	r3, [r2, #0]
	usb_out_data.mean_power = stroke_params->mean_power;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4a07      	ldr	r2, [pc, #28]	; (8001f58 <ergometer_stroke+0x34>)
 8001f3a:	6053      	str	r3, [r2, #4]
	usb_out_data.distance = stroke_params->distance;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4a05      	ldr	r2, [pc, #20]	; (8001f58 <ergometer_stroke+0x34>)
 8001f42:	6093      	str	r3, [r2, #8]

	USBD_HID_SendReport(&hUsbDeviceFS, &usb_out_data, 16);
 8001f44:	2210      	movs	r2, #16
 8001f46:	4904      	ldr	r1, [pc, #16]	; (8001f58 <ergometer_stroke+0x34>)
 8001f48:	4804      	ldr	r0, [pc, #16]	; (8001f5c <ergometer_stroke+0x38>)
 8001f4a:	f006 f9f7 	bl	800833c <USBD_HID_SendReport>
#endif
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20003778 	.word	0x20003778
 8001f5c:	20003798 	.word	0x20003798

08001f60 <params_received>:

void params_received(damping_constants_t* damping_constants)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	// Every time we compute new valid parameters we save them into the EEPROM
	storage_data.ka = damping_constants->ka;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4a08      	ldr	r2, [pc, #32]	; (8001f90 <params_received+0x30>)
 8001f6e:	6013      	str	r3, [r2, #0]
	storage_data.km = damping_constants->km;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	4a06      	ldr	r2, [pc, #24]	; (8001f90 <params_received+0x30>)
 8001f76:	6053      	str	r3, [r2, #4]
	storage_data.ks = damping_constants->ks;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4a04      	ldr	r2, [pc, #16]	; (8001f90 <params_received+0x30>)
 8001f7e:	6093      	str	r3, [r2, #8]
	storage_write(&storage_data);
 8001f80:	4803      	ldr	r0, [pc, #12]	; (8001f90 <params_received+0x30>)
 8001f82:	f7fe ffeb 	bl	8000f5c <storage_write>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	2000376c 	.word	0x2000376c

08001f94 <angular_velocity_received>:

void angular_velocity_received(float angular_velocity)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	ed87 0a01 	vstr	s0, [r7, #4]
	usb_out_data.energy_j = 0.0f;
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <angular_velocity_received+0x3c>)
 8001fa0:	f04f 0200 	mov.w	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
	usb_out_data.distance = 0.0f;
 8001fa6:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <angular_velocity_received+0x3c>)
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	609a      	str	r2, [r3, #8]
	usb_out_data.mean_power = 0.0f;
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <angular_velocity_received+0x3c>)
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
	memcpy(&usb_out_data.padding, &angular_velocity, sizeof(float));
 8001fb8:	4a05      	ldr	r2, [pc, #20]	; (8001fd0 <angular_velocity_received+0x3c>)
 8001fba:	60d3      	str	r3, [r2, #12]

	USBD_HID_SendReport(&hUsbDeviceFS, &usb_out_data, 16);
 8001fbc:	2210      	movs	r2, #16
 8001fbe:	4904      	ldr	r1, [pc, #16]	; (8001fd0 <angular_velocity_received+0x3c>)
 8001fc0:	4804      	ldr	r0, [pc, #16]	; (8001fd4 <angular_velocity_received+0x40>)
 8001fc2:	f006 f9bb 	bl	800833c <USBD_HID_SendReport>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20003778 	.word	0x20003778
 8001fd4:	20003798 	.word	0x20003798

08001fd8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == HALL_Pin)
 8001fe2:	88fb      	ldrh	r3, [r7, #6]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d102      	bne.n	8001fee <HAL_GPIO_EXTI_Callback+0x16>
	{
		hall_parser_push_trigger(&hall_parser);
 8001fe8:	4803      	ldr	r0, [pc, #12]	; (8001ff8 <HAL_GPIO_EXTI_Callback+0x20>)
 8001fea:	f7ff f8ad 	bl	8001148 <hall_parser_push_trigger>
	}
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20002740 	.word	0x20002740

08001ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002000:	b672      	cpsid	i
}
 8002002:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002004:	e7fe      	b.n	8002004 <Error_Handler+0x8>
	...

08002008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_MspInit+0x4c>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	4a0f      	ldr	r2, [pc, #60]	; (8002054 <HAL_MspInit+0x4c>)
 8002018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800201c:	6453      	str	r3, [r2, #68]	; 0x44
 800201e:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <HAL_MspInit+0x4c>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	603b      	str	r3, [r7, #0]
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_MspInit+0x4c>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a08      	ldr	r2, [pc, #32]	; (8002054 <HAL_MspInit+0x4c>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_MspInit+0x4c>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002046:	2007      	movs	r0, #7
 8002048:	f000 fbae 	bl	80027a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40023800 	.word	0x40023800

08002058 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	; 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a19      	ldr	r2, [pc, #100]	; (80020dc <HAL_I2C_MspInit+0x84>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d12b      	bne.n	80020d2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <HAL_I2C_MspInit+0x88>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	4a17      	ldr	r2, [pc, #92]	; (80020e0 <HAL_I2C_MspInit+0x88>)
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	6313      	str	r3, [r2, #48]	; 0x30
 800208a:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <HAL_I2C_MspInit+0x88>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002096:	23c0      	movs	r3, #192	; 0xc0
 8002098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800209a:	2312      	movs	r3, #18
 800209c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a2:	2303      	movs	r3, #3
 80020a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020a6:	2304      	movs	r3, #4
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020aa:	f107 0314 	add.w	r3, r7, #20
 80020ae:	4619      	mov	r1, r3
 80020b0:	480c      	ldr	r0, [pc, #48]	; (80020e4 <HAL_I2C_MspInit+0x8c>)
 80020b2:	f000 fbbb 	bl	800282c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <HAL_I2C_MspInit+0x88>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	4a08      	ldr	r2, [pc, #32]	; (80020e0 <HAL_I2C_MspInit+0x88>)
 80020c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020c4:	6413      	str	r3, [r2, #64]	; 0x40
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <HAL_I2C_MspInit+0x88>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020d2:	bf00      	nop
 80020d4:	3728      	adds	r7, #40	; 0x28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40005400 	.word	0x40005400
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40020400 	.word	0x40020400

080020e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <HAL_TIM_Base_MspInit+0x48>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d115      	bne.n	8002126 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <HAL_TIM_Base_MspInit+0x4c>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	4a0c      	ldr	r2, [pc, #48]	; (8002134 <HAL_TIM_Base_MspInit+0x4c>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6453      	str	r3, [r2, #68]	; 0x44
 800210a:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <HAL_TIM_Base_MspInit+0x4c>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 1);
 8002116:	2201      	movs	r2, #1
 8002118:	2100      	movs	r1, #0
 800211a:	2019      	movs	r0, #25
 800211c:	f000 fb4f 	bl	80027be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002120:	2019      	movs	r0, #25
 8002122:	f000 fb68 	bl	80027f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40010000 	.word	0x40010000
 8002134:	40023800 	.word	0x40023800

08002138 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08a      	sub	sp, #40	; 0x28
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a19      	ldr	r2, [pc, #100]	; (80021bc <HAL_UART_MspInit+0x84>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d12b      	bne.n	80021b2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <HAL_UART_MspInit+0x88>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	4a17      	ldr	r2, [pc, #92]	; (80021c0 <HAL_UART_MspInit+0x88>)
 8002164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002168:	6413      	str	r3, [r2, #64]	; 0x40
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <HAL_UART_MspInit+0x88>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <HAL_UART_MspInit+0x88>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a10      	ldr	r2, [pc, #64]	; (80021c0 <HAL_UART_MspInit+0x88>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <HAL_UART_MspInit+0x88>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002192:	230c      	movs	r3, #12
 8002194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021a2:	2307      	movs	r3, #7
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	4619      	mov	r1, r3
 80021ac:	4805      	ldr	r0, [pc, #20]	; (80021c4 <HAL_UART_MspInit+0x8c>)
 80021ae:	f000 fb3d 	bl	800282c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021b2:	bf00      	nop
 80021b4:	3728      	adds	r7, #40	; 0x28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40004400 	.word	0x40004400
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40020000 	.word	0x40020000

080021c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <NMI_Handler+0x4>

080021ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021d2:	e7fe      	b.n	80021d2 <HardFault_Handler+0x4>

080021d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d8:	e7fe      	b.n	80021d8 <MemManage_Handler+0x4>

080021da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021de:	e7fe      	b.n	80021de <BusFault_Handler+0x4>

080021e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <UsageFault_Handler+0x4>

080021e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002214:	f000 f9b4 	bl	8002580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}

0800221c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_Pin);
 8002220:	2001      	movs	r0, #1
 8002222:	f000 fca1 	bl	8002b68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	systemtime_increase_ms();
 8002230:	f000 f8ea 	bl	8002408 <systemtime_increase_ms>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002236:	f003 fc1d 	bl	8005a74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	200026b4 	.word	0x200026b4

08002244 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002248:	4802      	ldr	r0, [pc, #8]	; (8002254 <OTG_FS_IRQHandler+0x10>)
 800224a:	f001 fdb4 	bl	8003db6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20003c74 	.word	0x20003c74

08002258 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
	return 1;
 800225c:	2301      	movs	r3, #1
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <_kill>:

int _kill(int pid, int sig)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002272:	f008 fad3 	bl	800a81c <__errno>
 8002276:	4603      	mov	r3, r0
 8002278:	2216      	movs	r2, #22
 800227a:	601a      	str	r2, [r3, #0]
	return -1;
 800227c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <_exit>:

void _exit (int status)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002290:	f04f 31ff 	mov.w	r1, #4294967295
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff ffe7 	bl	8002268 <_kill>
	while (1) {}		/* Make sure we hang here */
 800229a:	e7fe      	b.n	800229a <_exit+0x12>

0800229c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	e00a      	b.n	80022c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022ae:	f3af 8000 	nop.w
 80022b2:	4601      	mov	r1, r0
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	60ba      	str	r2, [r7, #8]
 80022ba:	b2ca      	uxtb	r2, r1
 80022bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	3301      	adds	r3, #1
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	dbf0      	blt.n	80022ae <_read+0x12>
	}

return len;
 80022cc:	687b      	ldr	r3, [r7, #4]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b086      	sub	sp, #24
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e2:	2300      	movs	r3, #0
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	e009      	b.n	80022fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	60ba      	str	r2, [r7, #8]
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3301      	adds	r3, #1
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	429a      	cmp	r2, r3
 8002302:	dbf1      	blt.n	80022e8 <_write+0x12>
	}
	return len;
 8002304:	687b      	ldr	r3, [r7, #4]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <_close>:

int _close(int file)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
	return -1;
 8002316:	f04f 33ff 	mov.w	r3, #4294967295
}
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002336:	605a      	str	r2, [r3, #4]
	return 0;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <_isatty>:

int _isatty(int file)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
	return 1;
 800234e:	2301      	movs	r3, #1
}
 8002350:	4618      	mov	r0, r3
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
	return 0;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002380:	4a14      	ldr	r2, [pc, #80]	; (80023d4 <_sbrk+0x5c>)
 8002382:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <_sbrk+0x60>)
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800238c:	4b13      	ldr	r3, [pc, #76]	; (80023dc <_sbrk+0x64>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d102      	bne.n	800239a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <_sbrk+0x64>)
 8002396:	4a12      	ldr	r2, [pc, #72]	; (80023e0 <_sbrk+0x68>)
 8002398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <_sbrk+0x64>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d207      	bcs.n	80023b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023a8:	f008 fa38 	bl	800a81c <__errno>
 80023ac:	4603      	mov	r3, r0
 80023ae:	220c      	movs	r2, #12
 80023b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023b2:	f04f 33ff 	mov.w	r3, #4294967295
 80023b6:	e009      	b.n	80023cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <_sbrk+0x64>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023be:	4b07      	ldr	r3, [pc, #28]	; (80023dc <_sbrk+0x64>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	4a05      	ldr	r2, [pc, #20]	; (80023dc <_sbrk+0x64>)
 80023c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ca:	68fb      	ldr	r3, [r7, #12]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20018000 	.word	0x20018000
 80023d8:	00000400 	.word	0x00000400
 80023dc:	20003788 	.word	0x20003788
 80023e0:	200041a8 	.word	0x200041a8

080023e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <SystemInit+0x20>)
 80023ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ee:	4a05      	ldr	r2, [pc, #20]	; (8002404 <SystemInit+0x20>)
 80023f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <systemtime_increase_ms>:

uint32_t systemtime_ms = 0;
extern TIM_HandleTypeDef htim1;

void systemtime_increase_ms()
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
	systemtime_ms++;
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <systemtime_increase_ms+0x18>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	4a03      	ldr	r2, [pc, #12]	; (8002420 <systemtime_increase_ms+0x18>)
 8002414:	6013      	str	r3, [r2, #0]
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	2000378c 	.word	0x2000378c

08002424 <systemtime_get_time>:

void systemtime_get_time(systemtime_t* st)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	st->ms = systemtime_ms;
 800242c:	4b07      	ldr	r3, [pc, #28]	; (800244c <systemtime_get_time+0x28>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	601a      	str	r2, [r3, #0]
	st->us = __HAL_TIM_GET_COUNTER(&htim1);
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <systemtime_get_time+0x2c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	605a      	str	r2, [r3, #4]
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	2000378c 	.word	0x2000378c
 8002450:	200026b4 	.word	0x200026b4

08002454 <systemtime_time_diff_us>:
{
	return (st1->ms - st2->ms) + ((float)st1->us - st2->us)/1000.0f;
}

uint32_t systemtime_time_diff_us(systemtime_t* st1, systemtime_t* st2)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
	return (st1->ms - st2->ms)*1000 + (st1->us - st2->us);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800246c:	fb03 f202 	mul.w	r2, r3, r2
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6859      	ldr	r1, [r3, #4]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	1acb      	subs	r3, r1, r3
 800247a:	4413      	add	r3, r2
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002488:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800248c:	480d      	ldr	r0, [pc, #52]	; (80024c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800248e:	490e      	ldr	r1, [pc, #56]	; (80024c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002490:	4a0e      	ldr	r2, [pc, #56]	; (80024cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002494:	e002      	b.n	800249c <LoopCopyDataInit>

08002496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800249a:	3304      	adds	r3, #4

0800249c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800249c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800249e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024a0:	d3f9      	bcc.n	8002496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024a2:	4a0b      	ldr	r2, [pc, #44]	; (80024d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024a4:	4c0b      	ldr	r4, [pc, #44]	; (80024d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024a8:	e001      	b.n	80024ae <LoopFillZerobss>

080024aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024ac:	3204      	adds	r2, #4

080024ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024b0:	d3fb      	bcc.n	80024aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024b2:	f7ff ff97 	bl	80023e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024b6:	f008 f9b7 	bl	800a828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ba:	f7ff fb5f 	bl	8001b7c <main>
  bx  lr    
 80024be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80024c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024c8:	200002b4 	.word	0x200002b4
  ldr r2, =_sidata
 80024cc:	0800d88c 	.word	0x0800d88c
  ldr r2, =_sbss
 80024d0:	200002b4 	.word	0x200002b4
  ldr r4, =_ebss
 80024d4:	200041a4 	.word	0x200041a4

080024d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024d8:	e7fe      	b.n	80024d8 <ADC_IRQHandler>
	...

080024dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024e0:	4b0e      	ldr	r3, [pc, #56]	; (800251c <HAL_Init+0x40>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a0d      	ldr	r2, [pc, #52]	; (800251c <HAL_Init+0x40>)
 80024e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_Init+0x40>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a0a      	ldr	r2, [pc, #40]	; (800251c <HAL_Init+0x40>)
 80024f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024f8:	4b08      	ldr	r3, [pc, #32]	; (800251c <HAL_Init+0x40>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a07      	ldr	r2, [pc, #28]	; (800251c <HAL_Init+0x40>)
 80024fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002502:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002504:	2003      	movs	r0, #3
 8002506:	f000 f94f 	bl	80027a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800250a:	2000      	movs	r0, #0
 800250c:	f000 f808 	bl	8002520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002510:	f7ff fd7a 	bl	8002008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023c00 	.word	0x40023c00

08002520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002528:	4b12      	ldr	r3, [pc, #72]	; (8002574 <HAL_InitTick+0x54>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b12      	ldr	r3, [pc, #72]	; (8002578 <HAL_InitTick+0x58>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	4619      	mov	r1, r3
 8002532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002536:	fbb3 f3f1 	udiv	r3, r3, r1
 800253a:	fbb2 f3f3 	udiv	r3, r2, r3
 800253e:	4618      	mov	r0, r3
 8002540:	f000 f967 	bl	8002812 <HAL_SYSTICK_Config>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e00e      	b.n	800256c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b0f      	cmp	r3, #15
 8002552:	d80a      	bhi.n	800256a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002554:	2200      	movs	r2, #0
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	f04f 30ff 	mov.w	r0, #4294967295
 800255c:	f000 f92f 	bl	80027be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002560:	4a06      	ldr	r2, [pc, #24]	; (800257c <HAL_InitTick+0x5c>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	e000      	b.n	800256c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000010 	.word	0x20000010
 8002578:	20000018 	.word	0x20000018
 800257c:	20000014 	.word	0x20000014

08002580 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002584:	4b06      	ldr	r3, [pc, #24]	; (80025a0 <HAL_IncTick+0x20>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_IncTick+0x24>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4413      	add	r3, r2
 8002590:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <HAL_IncTick+0x24>)
 8002592:	6013      	str	r3, [r2, #0]
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	20000018 	.word	0x20000018
 80025a4:	20003790 	.word	0x20003790

080025a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return uwTick;
 80025ac:	4b03      	ldr	r3, [pc, #12]	; (80025bc <HAL_GetTick+0x14>)
 80025ae:	681b      	ldr	r3, [r3, #0]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	20003790 	.word	0x20003790

080025c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025c8:	f7ff ffee 	bl	80025a8 <HAL_GetTick>
 80025cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d8:	d005      	beq.n	80025e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025da:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <HAL_Delay+0x44>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4413      	add	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025e6:	bf00      	nop
 80025e8:	f7ff ffde 	bl	80025a8 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d8f7      	bhi.n	80025e8 <HAL_Delay+0x28>
  {
  }
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000018 	.word	0x20000018

08002608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002624:	4013      	ands	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800263a:	4a04      	ldr	r2, [pc, #16]	; (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	60d3      	str	r3, [r2, #12]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <__NVIC_GetPriorityGrouping+0x18>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	f003 0307 	and.w	r3, r3, #7
}
 800265e:	4618      	mov	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	2b00      	cmp	r3, #0
 800267c:	db0b      	blt.n	8002696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	f003 021f 	and.w	r2, r3, #31
 8002684:	4907      	ldr	r1, [pc, #28]	; (80026a4 <__NVIC_EnableIRQ+0x38>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	2001      	movs	r0, #1
 800268e:	fa00 f202 	lsl.w	r2, r0, r2
 8002692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000e100 	.word	0xe000e100

080026a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	6039      	str	r1, [r7, #0]
 80026b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	db0a      	blt.n	80026d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	490c      	ldr	r1, [pc, #48]	; (80026f4 <__NVIC_SetPriority+0x4c>)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	0112      	lsls	r2, r2, #4
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	440b      	add	r3, r1
 80026cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d0:	e00a      	b.n	80026e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4908      	ldr	r1, [pc, #32]	; (80026f8 <__NVIC_SetPriority+0x50>)
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	3b04      	subs	r3, #4
 80026e0:	0112      	lsls	r2, r2, #4
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	440b      	add	r3, r1
 80026e6:	761a      	strb	r2, [r3, #24]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000e100 	.word	0xe000e100
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b089      	sub	sp, #36	; 0x24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f1c3 0307 	rsb	r3, r3, #7
 8002716:	2b04      	cmp	r3, #4
 8002718:	bf28      	it	cs
 800271a:	2304      	movcs	r3, #4
 800271c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3304      	adds	r3, #4
 8002722:	2b06      	cmp	r3, #6
 8002724:	d902      	bls.n	800272c <NVIC_EncodePriority+0x30>
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3b03      	subs	r3, #3
 800272a:	e000      	b.n	800272e <NVIC_EncodePriority+0x32>
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002730:	f04f 32ff 	mov.w	r2, #4294967295
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43da      	mvns	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	401a      	ands	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002744:	f04f 31ff 	mov.w	r1, #4294967295
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	fa01 f303 	lsl.w	r3, r1, r3
 800274e:	43d9      	mvns	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002754:	4313      	orrs	r3, r2
         );
}
 8002756:	4618      	mov	r0, r3
 8002758:	3724      	adds	r7, #36	; 0x24
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3b01      	subs	r3, #1
 8002770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002774:	d301      	bcc.n	800277a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002776:	2301      	movs	r3, #1
 8002778:	e00f      	b.n	800279a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800277a:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <SysTick_Config+0x40>)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3b01      	subs	r3, #1
 8002780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002782:	210f      	movs	r1, #15
 8002784:	f04f 30ff 	mov.w	r0, #4294967295
 8002788:	f7ff ff8e 	bl	80026a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <SysTick_Config+0x40>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002792:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <SysTick_Config+0x40>)
 8002794:	2207      	movs	r2, #7
 8002796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	e000e010 	.word	0xe000e010

080027a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ff29 	bl	8002608 <__NVIC_SetPriorityGrouping>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027be:	b580      	push	{r7, lr}
 80027c0:	b086      	sub	sp, #24
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
 80027ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027d0:	f7ff ff3e 	bl	8002650 <__NVIC_GetPriorityGrouping>
 80027d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	6978      	ldr	r0, [r7, #20]
 80027dc:	f7ff ff8e 	bl	80026fc <NVIC_EncodePriority>
 80027e0:	4602      	mov	r2, r0
 80027e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff5d 	bl	80026a8 <__NVIC_SetPriority>
}
 80027ee:	bf00      	nop
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff31 	bl	800266c <__NVIC_EnableIRQ>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff ffa2 	bl	8002764 <SysTick_Config>
 8002820:	4603      	mov	r3, r0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	; 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800283e:	2300      	movs	r3, #0
 8002840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	e159      	b.n	8002afc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002848:	2201      	movs	r2, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	429a      	cmp	r2, r3
 8002862:	f040 8148 	bne.w	8002af6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b01      	cmp	r3, #1
 8002870:	d005      	beq.n	800287e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800287a:	2b02      	cmp	r3, #2
 800287c:	d130      	bne.n	80028e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	2203      	movs	r2, #3
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b4:	2201      	movs	r2, #1
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	091b      	lsrs	r3, r3, #4
 80028ca:	f003 0201 	and.w	r2, r3, #1
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d017      	beq.n	800291c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	2203      	movs	r2, #3
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d123      	bne.n	8002970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	08da      	lsrs	r2, r3, #3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3208      	adds	r2, #8
 8002930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	220f      	movs	r2, #15
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	08da      	lsrs	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3208      	adds	r2, #8
 800296a:	69b9      	ldr	r1, [r7, #24]
 800296c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	2203      	movs	r2, #3
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0203 	and.w	r2, r3, #3
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 80a2 	beq.w	8002af6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	4b57      	ldr	r3, [pc, #348]	; (8002b14 <HAL_GPIO_Init+0x2e8>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	4a56      	ldr	r2, [pc, #344]	; (8002b14 <HAL_GPIO_Init+0x2e8>)
 80029bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c0:	6453      	str	r3, [r2, #68]	; 0x44
 80029c2:	4b54      	ldr	r3, [pc, #336]	; (8002b14 <HAL_GPIO_Init+0x2e8>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ce:	4a52      	ldr	r2, [pc, #328]	; (8002b18 <HAL_GPIO_Init+0x2ec>)
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	3302      	adds	r3, #2
 80029d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	220f      	movs	r2, #15
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a49      	ldr	r2, [pc, #292]	; (8002b1c <HAL_GPIO_Init+0x2f0>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d019      	beq.n	8002a2e <HAL_GPIO_Init+0x202>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a48      	ldr	r2, [pc, #288]	; (8002b20 <HAL_GPIO_Init+0x2f4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d013      	beq.n	8002a2a <HAL_GPIO_Init+0x1fe>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a47      	ldr	r2, [pc, #284]	; (8002b24 <HAL_GPIO_Init+0x2f8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00d      	beq.n	8002a26 <HAL_GPIO_Init+0x1fa>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a46      	ldr	r2, [pc, #280]	; (8002b28 <HAL_GPIO_Init+0x2fc>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d007      	beq.n	8002a22 <HAL_GPIO_Init+0x1f6>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a45      	ldr	r2, [pc, #276]	; (8002b2c <HAL_GPIO_Init+0x300>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d101      	bne.n	8002a1e <HAL_GPIO_Init+0x1f2>
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	e008      	b.n	8002a30 <HAL_GPIO_Init+0x204>
 8002a1e:	2307      	movs	r3, #7
 8002a20:	e006      	b.n	8002a30 <HAL_GPIO_Init+0x204>
 8002a22:	2303      	movs	r3, #3
 8002a24:	e004      	b.n	8002a30 <HAL_GPIO_Init+0x204>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e002      	b.n	8002a30 <HAL_GPIO_Init+0x204>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <HAL_GPIO_Init+0x204>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	69fa      	ldr	r2, [r7, #28]
 8002a32:	f002 0203 	and.w	r2, r2, #3
 8002a36:	0092      	lsls	r2, r2, #2
 8002a38:	4093      	lsls	r3, r2
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a40:	4935      	ldr	r1, [pc, #212]	; (8002b18 <HAL_GPIO_Init+0x2ec>)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	089b      	lsrs	r3, r3, #2
 8002a46:	3302      	adds	r3, #2
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a4e:	4b38      	ldr	r3, [pc, #224]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a72:	4a2f      	ldr	r2, [pc, #188]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a78:	4b2d      	ldr	r3, [pc, #180]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a9c:	4a24      	ldr	r2, [pc, #144]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aa2:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ac6:	4a1a      	ldr	r2, [pc, #104]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002acc:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002af0:	4a0f      	ldr	r2, [pc, #60]	; (8002b30 <HAL_GPIO_Init+0x304>)
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	3301      	adds	r3, #1
 8002afa:	61fb      	str	r3, [r7, #28]
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	2b0f      	cmp	r3, #15
 8002b00:	f67f aea2 	bls.w	8002848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b04:	bf00      	nop
 8002b06:	bf00      	nop
 8002b08:	3724      	adds	r7, #36	; 0x24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40013800 	.word	0x40013800
 8002b1c:	40020000 	.word	0x40020000
 8002b20:	40020400 	.word	0x40020400
 8002b24:	40020800 	.word	0x40020800
 8002b28:	40020c00 	.word	0x40020c00
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	40013c00 	.word	0x40013c00

08002b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	807b      	strh	r3, [r7, #2]
 8002b40:	4613      	mov	r3, r2
 8002b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b44:	787b      	ldrb	r3, [r7, #1]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b4a:	887a      	ldrh	r2, [r7, #2]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b50:	e003      	b.n	8002b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b52:	887b      	ldrh	r3, [r7, #2]
 8002b54:	041a      	lsls	r2, r3, #16
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	619a      	str	r2, [r3, #24]
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b72:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d006      	beq.n	8002b8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b7e:	4a05      	ldr	r2, [pc, #20]	; (8002b94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b84:	88fb      	ldrh	r3, [r7, #6]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fa26 	bl	8001fd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40013c00 	.word	0x40013c00

08002b98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e12b      	b.n	8002e02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff fa4a 	bl	8002058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2224      	movs	r2, #36	; 0x24
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0201 	bic.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bfc:	f002 fe60 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 8002c00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4a81      	ldr	r2, [pc, #516]	; (8002e0c <HAL_I2C_Init+0x274>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d807      	bhi.n	8002c1c <HAL_I2C_Init+0x84>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4a80      	ldr	r2, [pc, #512]	; (8002e10 <HAL_I2C_Init+0x278>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	bf94      	ite	ls
 8002c14:	2301      	movls	r3, #1
 8002c16:	2300      	movhi	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e006      	b.n	8002c2a <HAL_I2C_Init+0x92>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4a7d      	ldr	r2, [pc, #500]	; (8002e14 <HAL_I2C_Init+0x27c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	bf94      	ite	ls
 8002c24:	2301      	movls	r3, #1
 8002c26:	2300      	movhi	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e0e7      	b.n	8002e02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	4a78      	ldr	r2, [pc, #480]	; (8002e18 <HAL_I2C_Init+0x280>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	0c9b      	lsrs	r3, r3, #18
 8002c3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	4a6a      	ldr	r2, [pc, #424]	; (8002e0c <HAL_I2C_Init+0x274>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d802      	bhi.n	8002c6c <HAL_I2C_Init+0xd4>
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	e009      	b.n	8002c80 <HAL_I2C_Init+0xe8>
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c72:	fb02 f303 	mul.w	r3, r2, r3
 8002c76:	4a69      	ldr	r2, [pc, #420]	; (8002e1c <HAL_I2C_Init+0x284>)
 8002c78:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7c:	099b      	lsrs	r3, r3, #6
 8002c7e:	3301      	adds	r3, #1
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	430b      	orrs	r3, r1
 8002c86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	495c      	ldr	r1, [pc, #368]	; (8002e0c <HAL_I2C_Init+0x274>)
 8002c9c:	428b      	cmp	r3, r1
 8002c9e:	d819      	bhi.n	8002cd4 <HAL_I2C_Init+0x13c>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1e59      	subs	r1, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cae:	1c59      	adds	r1, r3, #1
 8002cb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cb4:	400b      	ands	r3, r1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <HAL_I2C_Init+0x138>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	1e59      	subs	r1, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cc8:	3301      	adds	r3, #1
 8002cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cce:	e051      	b.n	8002d74 <HAL_I2C_Init+0x1dc>
 8002cd0:	2304      	movs	r3, #4
 8002cd2:	e04f      	b.n	8002d74 <HAL_I2C_Init+0x1dc>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d111      	bne.n	8002d00 <HAL_I2C_Init+0x168>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1e58      	subs	r0, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6859      	ldr	r1, [r3, #4]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	440b      	add	r3, r1
 8002cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf0c      	ite	eq
 8002cf8:	2301      	moveq	r3, #1
 8002cfa:	2300      	movne	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	e012      	b.n	8002d26 <HAL_I2C_Init+0x18e>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	1e58      	subs	r0, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6859      	ldr	r1, [r3, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	0099      	lsls	r1, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d16:	3301      	adds	r3, #1
 8002d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	bf0c      	ite	eq
 8002d20:	2301      	moveq	r3, #1
 8002d22:	2300      	movne	r3, #0
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_I2C_Init+0x196>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e022      	b.n	8002d74 <HAL_I2C_Init+0x1dc>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10e      	bne.n	8002d54 <HAL_I2C_Init+0x1bc>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	1e58      	subs	r0, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6859      	ldr	r1, [r3, #4]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	440b      	add	r3, r1
 8002d44:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d48:	3301      	adds	r3, #1
 8002d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d52:	e00f      	b.n	8002d74 <HAL_I2C_Init+0x1dc>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	1e58      	subs	r0, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6859      	ldr	r1, [r3, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	0099      	lsls	r1, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	6809      	ldr	r1, [r1, #0]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69da      	ldr	r2, [r3, #28]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002da2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6911      	ldr	r1, [r2, #16]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	68d2      	ldr	r2, [r2, #12]
 8002dae:	4311      	orrs	r1, r2
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6812      	ldr	r2, [r2, #0]
 8002db4:	430b      	orrs	r3, r1
 8002db6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	695a      	ldr	r2, [r3, #20]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	000186a0 	.word	0x000186a0
 8002e10:	001e847f 	.word	0x001e847f
 8002e14:	003d08ff 	.word	0x003d08ff
 8002e18:	431bde83 	.word	0x431bde83
 8002e1c:	10624dd3 	.word	0x10624dd3

08002e20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	4608      	mov	r0, r1
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4603      	mov	r3, r0
 8002e30:	817b      	strh	r3, [r7, #10]
 8002e32:	460b      	mov	r3, r1
 8002e34:	813b      	strh	r3, [r7, #8]
 8002e36:	4613      	mov	r3, r2
 8002e38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e3a:	f7ff fbb5 	bl	80025a8 <HAL_GetTick>
 8002e3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	f040 80d9 	bne.w	8003000 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	2319      	movs	r3, #25
 8002e54:	2201      	movs	r2, #1
 8002e56:	496d      	ldr	r1, [pc, #436]	; (800300c <HAL_I2C_Mem_Write+0x1ec>)
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 fc7f 	bl	800375c <I2C_WaitOnFlagUntilTimeout>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e64:	2302      	movs	r3, #2
 8002e66:	e0cc      	b.n	8003002 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_I2C_Mem_Write+0x56>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e0c5      	b.n	8003002 <HAL_I2C_Mem_Write+0x1e2>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d007      	beq.n	8002e9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eaa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2221      	movs	r2, #33	; 0x21
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2240      	movs	r2, #64	; 0x40
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a3a      	ldr	r2, [r7, #32]
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4a4d      	ldr	r2, [pc, #308]	; (8003010 <HAL_I2C_Mem_Write+0x1f0>)
 8002edc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ede:	88f8      	ldrh	r0, [r7, #6]
 8002ee0:	893a      	ldrh	r2, [r7, #8]
 8002ee2:	8979      	ldrh	r1, [r7, #10]
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	9301      	str	r3, [sp, #4]
 8002ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	4603      	mov	r3, r0
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 fab6 	bl	8003460 <I2C_RequestMemoryWrite>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d052      	beq.n	8002fa0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e081      	b.n	8003002 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 fd00 	bl	8003908 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00d      	beq.n	8002f2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d107      	bne.n	8002f26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e06b      	b.n	8003002 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	781a      	ldrb	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	f003 0304 	and.w	r3, r3, #4
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d11b      	bne.n	8002fa0 <HAL_I2C_Mem_Write+0x180>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d017      	beq.n	8002fa0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	781a      	ldrb	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1aa      	bne.n	8002efe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 fcec 	bl	800398a <I2C_WaitOnBTFFlagUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00d      	beq.n	8002fd4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d107      	bne.n	8002fd0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e016      	b.n	8003002 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	e000      	b.n	8003002 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003000:	2302      	movs	r3, #2
  }
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	00100002 	.word	0x00100002
 8003010:	ffff0000 	.word	0xffff0000

08003014 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08c      	sub	sp, #48	; 0x30
 8003018:	af02      	add	r7, sp, #8
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	4608      	mov	r0, r1
 800301e:	4611      	mov	r1, r2
 8003020:	461a      	mov	r2, r3
 8003022:	4603      	mov	r3, r0
 8003024:	817b      	strh	r3, [r7, #10]
 8003026:	460b      	mov	r3, r1
 8003028:	813b      	strh	r3, [r7, #8]
 800302a:	4613      	mov	r3, r2
 800302c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800302e:	f7ff fabb 	bl	80025a8 <HAL_GetTick>
 8003032:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b20      	cmp	r3, #32
 800303e:	f040 8208 	bne.w	8003452 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	2319      	movs	r3, #25
 8003048:	2201      	movs	r2, #1
 800304a:	497b      	ldr	r1, [pc, #492]	; (8003238 <HAL_I2C_Mem_Read+0x224>)
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f000 fb85 	bl	800375c <I2C_WaitOnFlagUntilTimeout>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003058:	2302      	movs	r3, #2
 800305a:	e1fb      	b.n	8003454 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_I2C_Mem_Read+0x56>
 8003066:	2302      	movs	r3, #2
 8003068:	e1f4      	b.n	8003454 <HAL_I2C_Mem_Read+0x440>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b01      	cmp	r3, #1
 800307e:	d007      	beq.n	8003090 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800309e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2222      	movs	r2, #34	; 0x22
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2240      	movs	r2, #64	; 0x40
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80030c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4a5b      	ldr	r2, [pc, #364]	; (800323c <HAL_I2C_Mem_Read+0x228>)
 80030d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030d2:	88f8      	ldrh	r0, [r7, #6]
 80030d4:	893a      	ldrh	r2, [r7, #8]
 80030d6:	8979      	ldrh	r1, [r7, #10]
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	9301      	str	r3, [sp, #4]
 80030dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	4603      	mov	r3, r0
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fa52 	bl	800358c <I2C_RequestMemoryRead>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e1b0      	b.n	8003454 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d113      	bne.n	8003122 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030fa:	2300      	movs	r3, #0
 80030fc:	623b      	str	r3, [r7, #32]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695b      	ldr	r3, [r3, #20]
 8003104:	623b      	str	r3, [r7, #32]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	623b      	str	r3, [r7, #32]
 800310e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	e184      	b.n	800342c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003126:	2b01      	cmp	r3, #1
 8003128:	d11b      	bne.n	8003162 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003138:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	61fb      	str	r3, [r7, #28]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	61fb      	str	r3, [r7, #28]
 800314e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	e164      	b.n	800342c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003166:	2b02      	cmp	r3, #2
 8003168:	d11b      	bne.n	80031a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003178:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003188:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800318a:	2300      	movs	r3, #0
 800318c:	61bb      	str	r3, [r7, #24]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	61bb      	str	r3, [r7, #24]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	61bb      	str	r3, [r7, #24]
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	e144      	b.n	800342c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80031b8:	e138      	b.n	800342c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031be:	2b03      	cmp	r3, #3
 80031c0:	f200 80f1 	bhi.w	80033a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d123      	bne.n	8003214 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 fc1b 	bl	8003a0c <I2C_WaitOnRXNEFlagUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e139      	b.n	8003454 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691a      	ldr	r2, [r3, #16]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003212:	e10b      	b.n	800342c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003218:	2b02      	cmp	r3, #2
 800321a:	d14e      	bne.n	80032ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003222:	2200      	movs	r2, #0
 8003224:	4906      	ldr	r1, [pc, #24]	; (8003240 <HAL_I2C_Mem_Read+0x22c>)
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	f000 fa98 	bl	800375c <I2C_WaitOnFlagUntilTimeout>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d008      	beq.n	8003244 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e10e      	b.n	8003454 <HAL_I2C_Mem_Read+0x440>
 8003236:	bf00      	nop
 8003238:	00100002 	.word	0x00100002
 800323c:	ffff0000 	.word	0xffff0000
 8003240:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003252:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327c:	b29b      	uxth	r3, r3
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	1c5a      	adds	r2, r3, #1
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032b8:	e0b8      	b.n	800342c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c0:	2200      	movs	r2, #0
 80032c2:	4966      	ldr	r1, [pc, #408]	; (800345c <HAL_I2C_Mem_Read+0x448>)
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 fa49 	bl	800375c <I2C_WaitOnFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0bf      	b.n	8003454 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	1c5a      	adds	r2, r3, #1
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330c:	b29b      	uxth	r3, r3
 800330e:	3b01      	subs	r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331c:	2200      	movs	r2, #0
 800331e:	494f      	ldr	r1, [pc, #316]	; (800345c <HAL_I2C_Mem_Read+0x448>)
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 fa1b 	bl	800375c <I2C_WaitOnFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e091      	b.n	8003454 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	691a      	ldr	r2, [r3, #16]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033a4:	e042      	b.n	800342c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 fb2e 	bl	8003a0c <I2C_WaitOnRXNEFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e04c      	b.n	8003454 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	691a      	ldr	r2, [r3, #16]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d118      	bne.n	800342c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	691a      	ldr	r2, [r3, #16]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003430:	2b00      	cmp	r3, #0
 8003432:	f47f aec2 	bne.w	80031ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800344e:	2300      	movs	r3, #0
 8003450:	e000      	b.n	8003454 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003452:	2302      	movs	r3, #2
  }
}
 8003454:	4618      	mov	r0, r3
 8003456:	3728      	adds	r7, #40	; 0x28
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	00010004 	.word	0x00010004

08003460 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b088      	sub	sp, #32
 8003464:	af02      	add	r7, sp, #8
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	4608      	mov	r0, r1
 800346a:	4611      	mov	r1, r2
 800346c:	461a      	mov	r2, r3
 800346e:	4603      	mov	r3, r0
 8003470:	817b      	strh	r3, [r7, #10]
 8003472:	460b      	mov	r3, r1
 8003474:	813b      	strh	r3, [r7, #8]
 8003476:	4613      	mov	r3, r2
 8003478:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003488:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	2200      	movs	r2, #0
 8003492:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f960 	bl	800375c <I2C_WaitOnFlagUntilTimeout>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00d      	beq.n	80034be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034b0:	d103      	bne.n	80034ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e05f      	b.n	800357e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034be:	897b      	ldrh	r3, [r7, #10]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	461a      	mov	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	6a3a      	ldr	r2, [r7, #32]
 80034d2:	492d      	ldr	r1, [pc, #180]	; (8003588 <I2C_RequestMemoryWrite+0x128>)
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 f998 	bl	800380a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e04c      	b.n	800357e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	617b      	str	r3, [r7, #20]
 80034f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034fc:	6a39      	ldr	r1, [r7, #32]
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 fa02 	bl	8003908 <I2C_WaitOnTXEFlagUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00d      	beq.n	8003526 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	2b04      	cmp	r3, #4
 8003510:	d107      	bne.n	8003522 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003520:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e02b      	b.n	800357e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d105      	bne.n	8003538 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800352c:	893b      	ldrh	r3, [r7, #8]
 800352e:	b2da      	uxtb	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	611a      	str	r2, [r3, #16]
 8003536:	e021      	b.n	800357c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003538:	893b      	ldrh	r3, [r7, #8]
 800353a:	0a1b      	lsrs	r3, r3, #8
 800353c:	b29b      	uxth	r3, r3
 800353e:	b2da      	uxtb	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003548:	6a39      	ldr	r1, [r7, #32]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f9dc 	bl	8003908 <I2C_WaitOnTXEFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00d      	beq.n	8003572 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	2b04      	cmp	r3, #4
 800355c:	d107      	bne.n	800356e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800356c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e005      	b.n	800357e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003572:	893b      	ldrh	r3, [r7, #8]
 8003574:	b2da      	uxtb	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	00010002 	.word	0x00010002

0800358c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b088      	sub	sp, #32
 8003590:	af02      	add	r7, sp, #8
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	4608      	mov	r0, r1
 8003596:	4611      	mov	r1, r2
 8003598:	461a      	mov	r2, r3
 800359a:	4603      	mov	r3, r0
 800359c:	817b      	strh	r3, [r7, #10]
 800359e:	460b      	mov	r3, r1
 80035a0:	813b      	strh	r3, [r7, #8]
 80035a2:	4613      	mov	r3, r2
 80035a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 f8c2 	bl	800375c <I2C_WaitOnFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00d      	beq.n	80035fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035ec:	d103      	bne.n	80035f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e0aa      	b.n	8003750 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035fa:	897b      	ldrh	r3, [r7, #10]
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	461a      	mov	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003608:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360c:	6a3a      	ldr	r2, [r7, #32]
 800360e:	4952      	ldr	r1, [pc, #328]	; (8003758 <I2C_RequestMemoryRead+0x1cc>)
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 f8fa 	bl	800380a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e097      	b.n	8003750 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003620:	2300      	movs	r3, #0
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003638:	6a39      	ldr	r1, [r7, #32]
 800363a:	68f8      	ldr	r0, [r7, #12]
 800363c:	f000 f964 	bl	8003908 <I2C_WaitOnTXEFlagUntilTimeout>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00d      	beq.n	8003662 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	2b04      	cmp	r3, #4
 800364c:	d107      	bne.n	800365e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e076      	b.n	8003750 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d105      	bne.n	8003674 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003668:	893b      	ldrh	r3, [r7, #8]
 800366a:	b2da      	uxtb	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	611a      	str	r2, [r3, #16]
 8003672:	e021      	b.n	80036b8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003674:	893b      	ldrh	r3, [r7, #8]
 8003676:	0a1b      	lsrs	r3, r3, #8
 8003678:	b29b      	uxth	r3, r3
 800367a:	b2da      	uxtb	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003684:	6a39      	ldr	r1, [r7, #32]
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f93e 	bl	8003908 <I2C_WaitOnTXEFlagUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00d      	beq.n	80036ae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	2b04      	cmp	r3, #4
 8003698:	d107      	bne.n	80036aa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e050      	b.n	8003750 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036ae:	893b      	ldrh	r3, [r7, #8]
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ba:	6a39      	ldr	r1, [r7, #32]
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 f923 	bl	8003908 <I2C_WaitOnTXEFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00d      	beq.n	80036e4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d107      	bne.n	80036e0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036de:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e035      	b.n	8003750 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036f2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 f82b 	bl	800375c <I2C_WaitOnFlagUntilTimeout>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00d      	beq.n	8003728 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800371a:	d103      	bne.n	8003724 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003722:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e013      	b.n	8003750 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003728:	897b      	ldrh	r3, [r7, #10]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f043 0301 	orr.w	r3, r3, #1
 8003730:	b2da      	uxtb	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	6a3a      	ldr	r2, [r7, #32]
 800373c:	4906      	ldr	r1, [pc, #24]	; (8003758 <I2C_RequestMemoryRead+0x1cc>)
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f863 	bl	800380a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	00010002 	.word	0x00010002

0800375c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	603b      	str	r3, [r7, #0]
 8003768:	4613      	mov	r3, r2
 800376a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800376c:	e025      	b.n	80037ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003774:	d021      	beq.n	80037ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003776:	f7fe ff17 	bl	80025a8 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d302      	bcc.n	800378c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d116      	bne.n	80037ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f043 0220 	orr.w	r2, r3, #32
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e023      	b.n	8003802 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	0c1b      	lsrs	r3, r3, #16
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d10d      	bne.n	80037e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	43da      	mvns	r2, r3
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	4013      	ands	r3, r2
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	bf0c      	ite	eq
 80037d6:	2301      	moveq	r3, #1
 80037d8:	2300      	movne	r3, #0
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	461a      	mov	r2, r3
 80037de:	e00c      	b.n	80037fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	43da      	mvns	r2, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4013      	ands	r3, r2
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	bf0c      	ite	eq
 80037f2:	2301      	moveq	r3, #1
 80037f4:	2300      	movne	r3, #0
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	461a      	mov	r2, r3
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d0b6      	beq.n	800376e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af00      	add	r7, sp, #0
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	607a      	str	r2, [r7, #4]
 8003816:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003818:	e051      	b.n	80038be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003828:	d123      	bne.n	8003872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003838:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003842:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f043 0204 	orr.w	r2, r3, #4
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e046      	b.n	8003900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003878:	d021      	beq.n	80038be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800387a:	f7fe fe95 	bl	80025a8 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	429a      	cmp	r2, r3
 8003888:	d302      	bcc.n	8003890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d116      	bne.n	80038be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2220      	movs	r2, #32
 800389a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f043 0220 	orr.w	r2, r3, #32
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e020      	b.n	8003900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	0c1b      	lsrs	r3, r3, #16
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d10c      	bne.n	80038e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	43da      	mvns	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4013      	ands	r3, r2
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	bf14      	ite	ne
 80038da:	2301      	movne	r3, #1
 80038dc:	2300      	moveq	r3, #0
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	e00b      	b.n	80038fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	43da      	mvns	r2, r3
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	4013      	ands	r3, r2
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	bf14      	ite	ne
 80038f4:	2301      	movne	r3, #1
 80038f6:	2300      	moveq	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d18d      	bne.n	800381a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003914:	e02d      	b.n	8003972 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f8ce 	bl	8003ab8 <I2C_IsAcknowledgeFailed>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e02d      	b.n	8003982 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392c:	d021      	beq.n	8003972 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800392e:	f7fe fe3b 	bl	80025a8 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	429a      	cmp	r2, r3
 800393c:	d302      	bcc.n	8003944 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d116      	bne.n	8003972 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f043 0220 	orr.w	r2, r3, #32
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e007      	b.n	8003982 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800397c:	2b80      	cmp	r3, #128	; 0x80
 800397e:	d1ca      	bne.n	8003916 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b084      	sub	sp, #16
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003996:	e02d      	b.n	80039f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f88d 	bl	8003ab8 <I2C_IsAcknowledgeFailed>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e02d      	b.n	8003a04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ae:	d021      	beq.n	80039f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b0:	f7fe fdfa 	bl	80025a8 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d302      	bcc.n	80039c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d116      	bne.n	80039f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2220      	movs	r2, #32
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	f043 0220 	orr.w	r2, r3, #32
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e007      	b.n	8003a04 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d1ca      	bne.n	8003998 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a18:	e042      	b.n	8003aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b10      	cmp	r3, #16
 8003a26:	d119      	bne.n	8003a5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f06f 0210 	mvn.w	r2, #16
 8003a30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e029      	b.n	8003ab0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5c:	f7fe fda4 	bl	80025a8 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d302      	bcc.n	8003a72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d116      	bne.n	8003aa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	f043 0220 	orr.w	r2, r3, #32
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e007      	b.n	8003ab0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aaa:	2b40      	cmp	r3, #64	; 0x40
 8003aac:	d1b5      	bne.n	8003a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ace:	d11b      	bne.n	8003b08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ad8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	f043 0204 	orr.w	r2, r3, #4
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e000      	b.n	8003b0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b18:	b08f      	sub	sp, #60	; 0x3c
 8003b1a:	af0a      	add	r7, sp, #40	; 0x28
 8003b1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e10f      	b.n	8003d48 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f006 f8aa 	bl	8009c9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2203      	movs	r2, #3
 8003b4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d102      	bne.n	8003b62 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f002 fef9 	bl	800695e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	603b      	str	r3, [r7, #0]
 8003b72:	687e      	ldr	r6, [r7, #4]
 8003b74:	466d      	mov	r5, sp
 8003b76:	f106 0410 	add.w	r4, r6, #16
 8003b7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b86:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b8a:	1d33      	adds	r3, r6, #4
 8003b8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b8e:	6838      	ldr	r0, [r7, #0]
 8003b90:	f002 fdd0 	bl	8006734 <USB_CoreInit>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e0d0      	b.n	8003d48 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2100      	movs	r1, #0
 8003bac:	4618      	mov	r0, r3
 8003bae:	f002 fee7 	bl	8006980 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	73fb      	strb	r3, [r7, #15]
 8003bb6:	e04a      	b.n	8003c4e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003bb8:	7bfa      	ldrb	r2, [r7, #15]
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	333d      	adds	r3, #61	; 0x3d
 8003bc8:	2201      	movs	r2, #1
 8003bca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003bcc:	7bfa      	ldrb	r2, [r7, #15]
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	333c      	adds	r3, #60	; 0x3c
 8003bdc:	7bfa      	ldrb	r2, [r7, #15]
 8003bde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003be0:	7bfa      	ldrb	r2, [r7, #15]
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
 8003be4:	b298      	uxth	r0, r3
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	4613      	mov	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	4413      	add	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	3344      	adds	r3, #68	; 0x44
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bf8:	7bfa      	ldrb	r2, [r7, #15]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	3340      	adds	r3, #64	; 0x40
 8003c08:	2200      	movs	r2, #0
 8003c0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c0c:	7bfa      	ldrb	r2, [r7, #15]
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	4413      	add	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	3348      	adds	r3, #72	; 0x48
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c20:	7bfa      	ldrb	r2, [r7, #15]
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	334c      	adds	r3, #76	; 0x4c
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c34:	7bfa      	ldrb	r2, [r7, #15]
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	3354      	adds	r3, #84	; 0x54
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	73fb      	strb	r3, [r7, #15]
 8003c4e:	7bfa      	ldrb	r2, [r7, #15]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d3af      	bcc.n	8003bb8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c58:	2300      	movs	r3, #0
 8003c5a:	73fb      	strb	r3, [r7, #15]
 8003c5c:	e044      	b.n	8003ce8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c5e:	7bfa      	ldrb	r2, [r7, #15]
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c74:	7bfa      	ldrb	r2, [r7, #15]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003c86:	7bfa      	ldrb	r2, [r7, #15]
 8003c88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c8a:	7bfa      	ldrb	r2, [r7, #15]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ca0:	7bfa      	ldrb	r2, [r7, #15]
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003cb6:	7bfa      	ldrb	r2, [r7, #15]
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ccc:	7bfa      	ldrb	r2, [r7, #15]
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
 8003ce8:	7bfa      	ldrb	r2, [r7, #15]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d3b5      	bcc.n	8003c5e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	603b      	str	r3, [r7, #0]
 8003cf8:	687e      	ldr	r6, [r7, #4]
 8003cfa:	466d      	mov	r5, sp
 8003cfc:	f106 0410 	add.w	r4, r6, #16
 8003d00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d10:	1d33      	adds	r3, r6, #4
 8003d12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d14:	6838      	ldr	r0, [r7, #0]
 8003d16:	f002 fe7f 	bl	8006a18 <USB_DevInit>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d005      	beq.n	8003d2c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2202      	movs	r2, #2
 8003d24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e00d      	b.n	8003d48 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f003 ffce 	bl	8007ce2 <USB_DevDisconnect>

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d50 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_PCD_Start+0x1c>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e020      	b.n	8003dae <HAL_PCD_Start+0x5e>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d109      	bne.n	8003d90 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d005      	beq.n	8003d90 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f002 fdd1 	bl	800693c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f003 ff7e 	bl	8007ca0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003db6:	b590      	push	{r4, r7, lr}
 8003db8:	b08d      	sub	sp, #52	; 0x34
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f004 f83c 	bl	8007e4a <USB_GetMode>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f040 848a 	bne.w	80046ee <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f003 ffa0 	bl	8007d24 <USB_ReadInterrupts>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 8480 	beq.w	80046ec <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	0a1b      	lsrs	r3, r3, #8
 8003df6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f003 ff8d 	bl	8007d24 <USB_ReadInterrupts>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d107      	bne.n	8003e24 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f002 0202 	and.w	r2, r2, #2
 8003e22:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f003 ff7b 	bl	8007d24 <USB_ReadInterrupts>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	2b10      	cmp	r3, #16
 8003e36:	d161      	bne.n	8003efc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699a      	ldr	r2, [r3, #24]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0210 	bic.w	r2, r2, #16
 8003e46:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	f003 020f 	and.w	r2, r3, #15
 8003e54:	4613      	mov	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4413      	add	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	4413      	add	r3, r2
 8003e64:	3304      	adds	r3, #4
 8003e66:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	0c5b      	lsrs	r3, r3, #17
 8003e6c:	f003 030f 	and.w	r3, r3, #15
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d124      	bne.n	8003ebe <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d035      	beq.n	8003eec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	091b      	lsrs	r3, r3, #4
 8003e88:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	461a      	mov	r2, r3
 8003e92:	6a38      	ldr	r0, [r7, #32]
 8003e94:	f003 fdb2 	bl	80079fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	691a      	ldr	r2, [r3, #16]
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ea4:	441a      	add	r2, r3
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	6a1a      	ldr	r2, [r3, #32]
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003eb6:	441a      	add	r2, r3
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	621a      	str	r2, [r3, #32]
 8003ebc:	e016      	b.n	8003eec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	0c5b      	lsrs	r3, r3, #17
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	2b06      	cmp	r3, #6
 8003ec8:	d110      	bne.n	8003eec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ed0:	2208      	movs	r2, #8
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	6a38      	ldr	r0, [r7, #32]
 8003ed6:	f003 fd91 	bl	80079fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	6a1a      	ldr	r2, [r3, #32]
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ee6:	441a      	add	r2, r3
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0210 	orr.w	r2, r2, #16
 8003efa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f003 ff0f 	bl	8007d24 <USB_ReadInterrupts>
 8003f06:	4603      	mov	r3, r0
 8003f08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f10:	f040 80a7 	bne.w	8004062 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f003 ff14 	bl	8007d4a <USB_ReadDevAllOutEpInterrupt>
 8003f22:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003f24:	e099      	b.n	800405a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 808e 	beq.w	800404e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f003 ff38 	bl	8007db2 <USB_ReadDevOutEPInterrupt>
 8003f42:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00c      	beq.n	8003f68 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003f60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 feaa 	bl	8004cbc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f003 0308 	and.w	r3, r3, #8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00c      	beq.n	8003f8c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7e:	461a      	mov	r2, r3
 8003f80:	2308      	movs	r3, #8
 8003f82:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003f84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 ff80 	bl	8004e8c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f003 0310 	and.w	r3, r3, #16
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d008      	beq.n	8003fa8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	2310      	movs	r3, #16
 8003fa6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d030      	beq.n	8004014 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fba:	2b80      	cmp	r3, #128	; 0x80
 8003fbc:	d109      	bne.n	8003fd2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	69fa      	ldr	r2, [r7, #28]
 8003fc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fcc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fd0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	78db      	ldrb	r3, [r3, #3]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d108      	bne.n	8004002 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f005 ff53 	bl	8009ea8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	4413      	add	r3, r2
 800400a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400e:	461a      	mov	r2, r3
 8004010:	2302      	movs	r3, #2
 8004012:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	4413      	add	r3, r2
 8004026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402a:	461a      	mov	r2, r3
 800402c:	2320      	movs	r3, #32
 800402e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d009      	beq.n	800404e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	015a      	lsls	r2, r3, #5
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	4413      	add	r3, r2
 8004042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004046:	461a      	mov	r2, r3
 8004048:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800404c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	3301      	adds	r3, #1
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004056:	085b      	lsrs	r3, r3, #1
 8004058:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800405a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405c:	2b00      	cmp	r3, #0
 800405e:	f47f af62 	bne.w	8003f26 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f003 fe5c 	bl	8007d24 <USB_ReadInterrupts>
 800406c:	4603      	mov	r3, r0
 800406e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004072:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004076:	f040 80db 	bne.w	8004230 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f003 fe7d 	bl	8007d7e <USB_ReadDevAllInEpInterrupt>
 8004084:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800408a:	e0cd      	b.n	8004228 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800408c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 80c2 	beq.w	800421c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	4611      	mov	r1, r2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f003 fea3 	bl	8007dee <USB_ReadDevInEPInterrupt>
 80040a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d057      	beq.n	8004164 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	2201      	movs	r2, #1
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	43db      	mvns	r3, r3
 80040ce:	69f9      	ldr	r1, [r7, #28]
 80040d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040d4:	4013      	ands	r3, r2
 80040d6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e4:	461a      	mov	r2, r3
 80040e6:	2301      	movs	r3, #1
 80040e8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d132      	bne.n	8004158 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f6:	4613      	mov	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	334c      	adds	r3, #76	; 0x4c
 8004102:	6819      	ldr	r1, [r3, #0]
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004108:	4613      	mov	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	4413      	add	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4403      	add	r3, r0
 8004112:	3348      	adds	r3, #72	; 0x48
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4419      	add	r1, r3
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4403      	add	r3, r0
 8004126:	334c      	adds	r3, #76	; 0x4c
 8004128:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	2b00      	cmp	r3, #0
 800412e:	d113      	bne.n	8004158 <HAL_PCD_IRQHandler+0x3a2>
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004134:	4613      	mov	r3, r2
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	4413      	add	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	3354      	adds	r3, #84	; 0x54
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d108      	bne.n	8004158 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6818      	ldr	r0, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004150:	461a      	mov	r2, r3
 8004152:	2101      	movs	r1, #1
 8004154:	f003 feaa 	bl	8007eac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	b2db      	uxtb	r3, r3
 800415c:	4619      	mov	r1, r3
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f005 fe1d 	bl	8009d9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d008      	beq.n	8004180 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	4413      	add	r3, r2
 8004176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800417a:	461a      	mov	r2, r3
 800417c:	2308      	movs	r3, #8
 800417e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	2b00      	cmp	r3, #0
 8004188:	d008      	beq.n	800419c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004196:	461a      	mov	r2, r3
 8004198:	2310      	movs	r3, #16
 800419a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d008      	beq.n	80041b8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b2:	461a      	mov	r2, r3
 80041b4:	2340      	movs	r3, #64	; 0x40
 80041b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d023      	beq.n	800420a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80041c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041c4:	6a38      	ldr	r0, [r7, #32]
 80041c6:	f002 fd8b 	bl	8006ce0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80041ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041cc:	4613      	mov	r3, r2
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	4413      	add	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	3338      	adds	r3, #56	; 0x38
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	4413      	add	r3, r2
 80041da:	3304      	adds	r3, #4
 80041dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	78db      	ldrb	r3, [r3, #3]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d108      	bne.n	80041f8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2200      	movs	r2, #0
 80041ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	4619      	mov	r1, r3
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f005 fe6a 	bl	8009ecc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004204:	461a      	mov	r2, r3
 8004206:	2302      	movs	r3, #2
 8004208:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004214:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 fcc3 	bl	8004ba2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	3301      	adds	r3, #1
 8004220:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004224:	085b      	lsrs	r3, r3, #1
 8004226:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422a:	2b00      	cmp	r3, #0
 800422c:	f47f af2e 	bne.w	800408c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4618      	mov	r0, r3
 8004236:	f003 fd75 	bl	8007d24 <USB_ReadInterrupts>
 800423a:	4603      	mov	r3, r0
 800423c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004240:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004244:	d122      	bne.n	800428c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004254:	f023 0301 	bic.w	r3, r3, #1
 8004258:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004260:	2b01      	cmp	r3, #1
 8004262:	d108      	bne.n	8004276 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800426c:	2100      	movs	r1, #0
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 feaa 	bl	8004fc8 <HAL_PCDEx_LPM_Callback>
 8004274:	e002      	b.n	800427c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f005 fe08 	bl	8009e8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695a      	ldr	r2, [r3, #20]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800428a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	f003 fd47 	bl	8007d24 <USB_ReadInterrupts>
 8004296:	4603      	mov	r3, r0
 8004298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800429c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042a0:	d112      	bne.n	80042c8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d102      	bne.n	80042b8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f005 fdc4 	bl	8009e40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695a      	ldr	r2, [r3, #20]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80042c6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f003 fd29 	bl	8007d24 <USB_ReadInterrupts>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042dc:	f040 80b7 	bne.w	800444e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	69fa      	ldr	r2, [r7, #28]
 80042ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042ee:	f023 0301 	bic.w	r3, r3, #1
 80042f2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2110      	movs	r1, #16
 80042fa:	4618      	mov	r0, r3
 80042fc:	f002 fcf0 	bl	8006ce0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004300:	2300      	movs	r3, #0
 8004302:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004304:	e046      	b.n	8004394 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004312:	461a      	mov	r2, r3
 8004314:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004318:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800431a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	4413      	add	r3, r2
 8004322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800432a:	0151      	lsls	r1, r2, #5
 800432c:	69fa      	ldr	r2, [r7, #28]
 800432e:	440a      	add	r2, r1
 8004330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004334:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004338:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800433a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004346:	461a      	mov	r2, r3
 8004348:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800434c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800435e:	0151      	lsls	r1, r2, #5
 8004360:	69fa      	ldr	r2, [r7, #28]
 8004362:	440a      	add	r2, r1
 8004364:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004368:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800436c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800436e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	4413      	add	r3, r2
 8004376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800437e:	0151      	lsls	r1, r2, #5
 8004380:	69fa      	ldr	r2, [r7, #28]
 8004382:	440a      	add	r2, r1
 8004384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004388:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800438c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800438e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004390:	3301      	adds	r3, #1
 8004392:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800439a:	429a      	cmp	r2, r3
 800439c:	d3b3      	bcc.n	8004306 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	69fa      	ldr	r2, [r7, #28]
 80043a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043ac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80043b0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d016      	beq.n	80043e8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c4:	69fa      	ldr	r2, [r7, #28]
 80043c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043ca:	f043 030b 	orr.w	r3, r3, #11
 80043ce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	69fa      	ldr	r2, [r7, #28]
 80043dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043e0:	f043 030b 	orr.w	r3, r3, #11
 80043e4:	6453      	str	r3, [r2, #68]	; 0x44
 80043e6:	e015      	b.n	8004414 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	69fa      	ldr	r2, [r7, #28]
 80043f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043fa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80043fe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	69fa      	ldr	r2, [r7, #28]
 800440a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800440e:	f043 030b 	orr.w	r3, r3, #11
 8004412:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004422:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004426:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004438:	461a      	mov	r2, r3
 800443a:	f003 fd37 	bl	8007eac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695a      	ldr	r2, [r3, #20]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800444c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f003 fc66 	bl	8007d24 <USB_ReadInterrupts>
 8004458:	4603      	mov	r3, r0
 800445a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800445e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004462:	d124      	bne.n	80044ae <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f003 fcfc 	bl	8007e66 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f002 fcb1 	bl	8006dda <USB_GetDevSpeed>
 8004478:	4603      	mov	r3, r0
 800447a:	461a      	mov	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681c      	ldr	r4, [r3, #0]
 8004484:	f001 fa10 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 8004488:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800448e:	b2db      	uxtb	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	4620      	mov	r0, r4
 8004494:	f002 f9b0 	bl	80067f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f005 fca8 	bl	8009dee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695a      	ldr	r2, [r3, #20]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80044ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f003 fc36 	bl	8007d24 <USB_ReadInterrupts>
 80044b8:	4603      	mov	r3, r0
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d10a      	bne.n	80044d8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f005 fc85 	bl	8009dd2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695a      	ldr	r2, [r3, #20]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f002 0208 	and.w	r2, r2, #8
 80044d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4618      	mov	r0, r3
 80044de:	f003 fc21 	bl	8007d24 <USB_ReadInterrupts>
 80044e2:	4603      	mov	r3, r0
 80044e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e8:	2b80      	cmp	r3, #128	; 0x80
 80044ea:	d122      	bne.n	8004532 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044f8:	2301      	movs	r3, #1
 80044fa:	627b      	str	r3, [r7, #36]	; 0x24
 80044fc:	e014      	b.n	8004528 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004502:	4613      	mov	r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	440b      	add	r3, r1
 800450c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d105      	bne.n	8004522 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	b2db      	uxtb	r3, r3
 800451a:	4619      	mov	r1, r3
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 fb0f 	bl	8004b40 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	3301      	adds	r3, #1
 8004526:	627b      	str	r3, [r7, #36]	; 0x24
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800452e:	429a      	cmp	r2, r3
 8004530:	d3e5      	bcc.n	80044fe <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f003 fbf4 	bl	8007d24 <USB_ReadInterrupts>
 800453c:	4603      	mov	r3, r0
 800453e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004546:	d13b      	bne.n	80045c0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004548:	2301      	movs	r3, #1
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
 800454c:	e02b      	b.n	80045a6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004562:	4613      	mov	r3, r2
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	440b      	add	r3, r1
 800456c:	3340      	adds	r3, #64	; 0x40
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d115      	bne.n	80045a0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004574:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004576:	2b00      	cmp	r3, #0
 8004578:	da12      	bge.n	80045a0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800457e:	4613      	mov	r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	4413      	add	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	440b      	add	r3, r1
 8004588:	333f      	adds	r3, #63	; 0x3f
 800458a:	2201      	movs	r2, #1
 800458c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	b2db      	uxtb	r3, r3
 8004592:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004596:	b2db      	uxtb	r3, r3
 8004598:	4619      	mov	r1, r3
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 fad0 	bl	8004b40 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	3301      	adds	r3, #1
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d3ce      	bcc.n	800454e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695a      	ldr	r2, [r3, #20]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80045be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f003 fbad 	bl	8007d24 <USB_ReadInterrupts>
 80045ca:	4603      	mov	r3, r0
 80045cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045d4:	d155      	bne.n	8004682 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045d6:	2301      	movs	r3, #1
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
 80045da:	e045      	b.n	8004668 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f0:	4613      	mov	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d12e      	bne.n	8004662 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004604:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004606:	2b00      	cmp	r3, #0
 8004608:	da2b      	bge.n	8004662 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004616:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800461a:	429a      	cmp	r2, r3
 800461c:	d121      	bne.n	8004662 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004622:	4613      	mov	r3, r2
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	440b      	add	r3, r1
 800462c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004630:	2201      	movs	r2, #1
 8004632:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	69fa      	ldr	r2, [r7, #28]
 8004656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800465a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800465e:	6053      	str	r3, [r2, #4]
            break;
 8004660:	e007      	b.n	8004672 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	3301      	adds	r3, #1
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466e:	429a      	cmp	r2, r3
 8004670:	d3b4      	bcc.n	80045dc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695a      	ldr	r2, [r3, #20]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004680:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f003 fb4c 	bl	8007d24 <USB_ReadInterrupts>
 800468c:	4603      	mov	r3, r0
 800468e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004696:	d10a      	bne.n	80046ae <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f005 fc29 	bl	8009ef0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695a      	ldr	r2, [r3, #20]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80046ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f003 fb36 	bl	8007d24 <USB_ReadInterrupts>
 80046b8:	4603      	mov	r3, r0
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d115      	bne.n	80046ee <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f005 fc19 	bl	8009f0c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6859      	ldr	r1, [r3, #4]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	69ba      	ldr	r2, [r7, #24]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	e000      	b.n	80046ee <HAL_PCD_IRQHandler+0x938>
      return;
 80046ec:	bf00      	nop
    }
  }
}
 80046ee:	3734      	adds	r7, #52	; 0x34
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd90      	pop	{r4, r7, pc}

080046f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_PCD_SetAddress+0x1a>
 800470a:	2302      	movs	r3, #2
 800470c:	e013      	b.n	8004736 <HAL_PCD_SetAddress+0x42>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	78fa      	ldrb	r2, [r7, #3]
 800471a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	78fa      	ldrb	r2, [r7, #3]
 8004724:	4611      	mov	r1, r2
 8004726:	4618      	mov	r0, r3
 8004728:	f003 fa94 	bl	8007c54 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b084      	sub	sp, #16
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	4608      	mov	r0, r1
 8004748:	4611      	mov	r1, r2
 800474a:	461a      	mov	r2, r3
 800474c:	4603      	mov	r3, r0
 800474e:	70fb      	strb	r3, [r7, #3]
 8004750:	460b      	mov	r3, r1
 8004752:	803b      	strh	r3, [r7, #0]
 8004754:	4613      	mov	r3, r2
 8004756:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800475c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004760:	2b00      	cmp	r3, #0
 8004762:	da0f      	bge.n	8004784 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004764:	78fb      	ldrb	r3, [r7, #3]
 8004766:	f003 020f 	and.w	r2, r3, #15
 800476a:	4613      	mov	r3, r2
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	3338      	adds	r3, #56	; 0x38
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	4413      	add	r3, r2
 8004778:	3304      	adds	r3, #4
 800477a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2201      	movs	r2, #1
 8004780:	705a      	strb	r2, [r3, #1]
 8004782:	e00f      	b.n	80047a4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004784:	78fb      	ldrb	r3, [r7, #3]
 8004786:	f003 020f 	and.w	r2, r3, #15
 800478a:	4613      	mov	r3, r2
 800478c:	00db      	lsls	r3, r3, #3
 800478e:	4413      	add	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	4413      	add	r3, r2
 800479a:	3304      	adds	r3, #4
 800479c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	f003 030f 	and.w	r3, r3, #15
 80047aa:	b2da      	uxtb	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80047b0:	883a      	ldrh	r2, [r7, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	78ba      	ldrb	r2, [r7, #2]
 80047ba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	785b      	ldrb	r3, [r3, #1]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d004      	beq.n	80047ce <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80047ce:	78bb      	ldrb	r3, [r7, #2]
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d102      	bne.n	80047da <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d101      	bne.n	80047e8 <HAL_PCD_EP_Open+0xaa>
 80047e4:	2302      	movs	r3, #2
 80047e6:	e00e      	b.n	8004806 <HAL_PCD_EP_Open+0xc8>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68f9      	ldr	r1, [r7, #12]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f002 fb14 	bl	8006e24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004804:	7afb      	ldrb	r3, [r7, #11]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b084      	sub	sp, #16
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	460b      	mov	r3, r1
 8004818:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800481a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800481e:	2b00      	cmp	r3, #0
 8004820:	da0f      	bge.n	8004842 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004822:	78fb      	ldrb	r3, [r7, #3]
 8004824:	f003 020f 	and.w	r2, r3, #15
 8004828:	4613      	mov	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	3338      	adds	r3, #56	; 0x38
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	4413      	add	r3, r2
 8004836:	3304      	adds	r3, #4
 8004838:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2201      	movs	r2, #1
 800483e:	705a      	strb	r2, [r3, #1]
 8004840:	e00f      	b.n	8004862 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004842:	78fb      	ldrb	r3, [r7, #3]
 8004844:	f003 020f 	and.w	r2, r3, #15
 8004848:	4613      	mov	r3, r2
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	4413      	add	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	4413      	add	r3, r2
 8004858:	3304      	adds	r3, #4
 800485a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004862:	78fb      	ldrb	r3, [r7, #3]
 8004864:	f003 030f 	and.w	r3, r3, #15
 8004868:	b2da      	uxtb	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004874:	2b01      	cmp	r3, #1
 8004876:	d101      	bne.n	800487c <HAL_PCD_EP_Close+0x6e>
 8004878:	2302      	movs	r3, #2
 800487a:	e00e      	b.n	800489a <HAL_PCD_EP_Close+0x8c>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68f9      	ldr	r1, [r7, #12]
 800488a:	4618      	mov	r0, r3
 800488c:	f002 fb52 	bl	8006f34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b086      	sub	sp, #24
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
 80048ae:	460b      	mov	r3, r1
 80048b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048b2:	7afb      	ldrb	r3, [r7, #11]
 80048b4:	f003 020f 	and.w	r2, r3, #15
 80048b8:	4613      	mov	r3, r2
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	3304      	adds	r3, #4
 80048ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2200      	movs	r2, #0
 80048dc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2200      	movs	r2, #0
 80048e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048e4:	7afb      	ldrb	r3, [r7, #11]
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d102      	bne.n	80048fe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048fe:	7afb      	ldrb	r3, [r7, #11]
 8004900:	f003 030f 	and.w	r3, r3, #15
 8004904:	2b00      	cmp	r3, #0
 8004906:	d109      	bne.n	800491c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6818      	ldr	r0, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	b2db      	uxtb	r3, r3
 8004912:	461a      	mov	r2, r3
 8004914:	6979      	ldr	r1, [r7, #20]
 8004916:	f002 fe31 	bl	800757c <USB_EP0StartXfer>
 800491a:	e008      	b.n	800492e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6818      	ldr	r0, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	b2db      	uxtb	r3, r3
 8004926:	461a      	mov	r2, r3
 8004928:	6979      	ldr	r1, [r7, #20]
 800492a:	f002 fbdf 	bl	80070ec <USB_EPStartXfer>
  }

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3718      	adds	r7, #24
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	607a      	str	r2, [r7, #4]
 8004942:	603b      	str	r3, [r7, #0]
 8004944:	460b      	mov	r3, r1
 8004946:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004948:	7afb      	ldrb	r3, [r7, #11]
 800494a:	f003 020f 	and.w	r2, r3, #15
 800494e:	4613      	mov	r3, r2
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	4413      	add	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	3338      	adds	r3, #56	; 0x38
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	3304      	adds	r3, #4
 800495e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	2200      	movs	r2, #0
 8004970:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2201      	movs	r2, #1
 8004976:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004978:	7afb      	ldrb	r3, [r7, #11]
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	b2da      	uxtb	r2, r3
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d102      	bne.n	8004992 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004992:	7afb      	ldrb	r3, [r7, #11]
 8004994:	f003 030f 	and.w	r3, r3, #15
 8004998:	2b00      	cmp	r3, #0
 800499a:	d109      	bne.n	80049b0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6818      	ldr	r0, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	461a      	mov	r2, r3
 80049a8:	6979      	ldr	r1, [r7, #20]
 80049aa:	f002 fde7 	bl	800757c <USB_EP0StartXfer>
 80049ae:	e008      	b.n	80049c2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6818      	ldr	r0, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	461a      	mov	r2, r3
 80049bc:	6979      	ldr	r1, [r7, #20]
 80049be:	f002 fb95 	bl	80070ec <USB_EPStartXfer>
  }

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	f003 020f 	and.w	r2, r3, #15
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d901      	bls.n	80049ea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e050      	b.n	8004a8c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	da0f      	bge.n	8004a12 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049f2:	78fb      	ldrb	r3, [r7, #3]
 80049f4:	f003 020f 	and.w	r2, r3, #15
 80049f8:	4613      	mov	r3, r2
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	4413      	add	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	3338      	adds	r3, #56	; 0x38
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	4413      	add	r3, r2
 8004a06:	3304      	adds	r3, #4
 8004a08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	705a      	strb	r2, [r3, #1]
 8004a10:	e00d      	b.n	8004a2e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a12:	78fa      	ldrb	r2, [r7, #3]
 8004a14:	4613      	mov	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	4413      	add	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	4413      	add	r3, r2
 8004a24:	3304      	adds	r3, #4
 8004a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2201      	movs	r2, #1
 8004a32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d101      	bne.n	8004a4e <HAL_PCD_EP_SetStall+0x82>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	e01e      	b.n	8004a8c <HAL_PCD_EP_SetStall+0xc0>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68f9      	ldr	r1, [r7, #12]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f003 f825 	bl	8007aac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a62:	78fb      	ldrb	r3, [r7, #3]
 8004a64:	f003 030f 	and.w	r3, r3, #15
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d10a      	bne.n	8004a82 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6818      	ldr	r0, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	b2d9      	uxtb	r1, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	f003 fa15 	bl	8007eac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	f003 020f 	and.w	r2, r3, #15
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d901      	bls.n	8004ab2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e042      	b.n	8004b38 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ab2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	da0f      	bge.n	8004ada <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004aba:	78fb      	ldrb	r3, [r7, #3]
 8004abc:	f003 020f 	and.w	r2, r3, #15
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	3338      	adds	r3, #56	; 0x38
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	4413      	add	r3, r2
 8004ace:	3304      	adds	r3, #4
 8004ad0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	705a      	strb	r2, [r3, #1]
 8004ad8:	e00f      	b.n	8004afa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ada:	78fb      	ldrb	r3, [r7, #3]
 8004adc:	f003 020f 	and.w	r2, r3, #15
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	4413      	add	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	4413      	add	r3, r2
 8004af0:	3304      	adds	r3, #4
 8004af2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	b2da      	uxtb	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d101      	bne.n	8004b1a <HAL_PCD_EP_ClrStall+0x86>
 8004b16:	2302      	movs	r3, #2
 8004b18:	e00e      	b.n	8004b38 <HAL_PCD_EP_ClrStall+0xa4>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68f9      	ldr	r1, [r7, #12]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f003 f82d 	bl	8007b88 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004b4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	da0c      	bge.n	8004b6e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b54:	78fb      	ldrb	r3, [r7, #3]
 8004b56:	f003 020f 	and.w	r2, r3, #15
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	4413      	add	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	3338      	adds	r3, #56	; 0x38
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	4413      	add	r3, r2
 8004b68:	3304      	adds	r3, #4
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	e00c      	b.n	8004b88 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b6e:	78fb      	ldrb	r3, [r7, #3]
 8004b70:	f003 020f 	and.w	r2, r3, #15
 8004b74:	4613      	mov	r3, r2
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	4413      	add	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	4413      	add	r3, r2
 8004b84:	3304      	adds	r3, #4
 8004b86:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68f9      	ldr	r1, [r7, #12]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f002 fe4c 	bl	800782c <USB_EPStopXfer>
 8004b94:	4603      	mov	r3, r0
 8004b96:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004b98:	7afb      	ldrb	r3, [r7, #11]
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b08a      	sub	sp, #40	; 0x28
 8004ba6:	af02      	add	r7, sp, #8
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	3338      	adds	r3, #56	; 0x38
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a1a      	ldr	r2, [r3, #32]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d901      	bls.n	8004bda <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e06c      	b.n	8004cb4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	699a      	ldr	r2, [r3, #24]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	69fa      	ldr	r2, [r7, #28]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d902      	bls.n	8004bf6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	3303      	adds	r3, #3
 8004bfa:	089b      	lsrs	r3, r3, #2
 8004bfc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004bfe:	e02b      	b.n	8004c58 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	699a      	ldr	r2, [r3, #24]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	69fa      	ldr	r2, [r7, #28]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d902      	bls.n	8004c1c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	3303      	adds	r3, #3
 8004c20:	089b      	lsrs	r3, r3, #2
 8004c22:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6919      	ldr	r1, [r3, #16]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	9300      	str	r3, [sp, #0]
 8004c38:	4603      	mov	r3, r0
 8004c3a:	6978      	ldr	r0, [r7, #20]
 8004c3c:	f002 fea0 	bl	8007980 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	691a      	ldr	r2, [r3, #16]
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	441a      	add	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6a1a      	ldr	r2, [r3, #32]
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	441a      	add	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d809      	bhi.n	8004c82 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a1a      	ldr	r2, [r3, #32]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d203      	bcs.n	8004c82 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1be      	bne.n	8004c00 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	699a      	ldr	r2, [r3, #24]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d811      	bhi.n	8004cb2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	f003 030f 	and.w	r3, r3, #15
 8004c94:	2201      	movs	r2, #1
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	43db      	mvns	r3, r3
 8004ca8:	6939      	ldr	r1, [r7, #16]
 8004caa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cae:	4013      	ands	r3, r2
 8004cb0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3720      	adds	r7, #32
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	333c      	adds	r3, #60	; 0x3c
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d17b      	bne.n	8004dea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f003 0308 	and.w	r3, r3, #8
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d015      	beq.n	8004d28 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	4a61      	ldr	r2, [pc, #388]	; (8004e84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	f240 80b9 	bls.w	8004e78 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80b3 	beq.w	8004e78 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	015a      	lsls	r2, r3, #5
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1e:	461a      	mov	r2, r3
 8004d20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d24:	6093      	str	r3, [r2, #8]
 8004d26:	e0a7      	b.n	8004e78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f003 0320 	and.w	r3, r3, #32
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d009      	beq.n	8004d46 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3e:	461a      	mov	r2, r3
 8004d40:	2320      	movs	r3, #32
 8004d42:	6093      	str	r3, [r2, #8]
 8004d44:	e098      	b.n	8004e78 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f040 8093 	bne.w	8004e78 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	4a4b      	ldr	r2, [pc, #300]	; (8004e84 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d90f      	bls.n	8004d7a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d70:	461a      	mov	r2, r3
 8004d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d76:	6093      	str	r3, [r2, #8]
 8004d78:	e07e      	b.n	8004e78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	00db      	lsls	r3, r3, #3
 8004d80:	4413      	add	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	69da      	ldr	r2, [r3, #28]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	0159      	lsls	r1, r3, #5
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	440b      	add	r3, r1
 8004d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da6:	1ad2      	subs	r2, r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d114      	bne.n	8004ddc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d109      	bne.n	8004dce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6818      	ldr	r0, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	f003 f870 	bl	8007eac <USB_EP0_OutStart>
 8004dcc:	e006      	b.n	8004ddc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	441a      	add	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	4619      	mov	r1, r3
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f004 ffc0 	bl	8009d68 <HAL_PCD_DataOutStageCallback>
 8004de8:	e046      	b.n	8004e78 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	4a26      	ldr	r2, [pc, #152]	; (8004e88 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d124      	bne.n	8004e3c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e08:	461a      	mov	r2, r3
 8004e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e0e:	6093      	str	r3, [r2, #8]
 8004e10:	e032      	b.n	8004e78 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f003 0320 	and.w	r3, r3, #32
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d008      	beq.n	8004e2e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e28:	461a      	mov	r2, r3
 8004e2a:	2320      	movs	r3, #32
 8004e2c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	4619      	mov	r1, r3
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f004 ff97 	bl	8009d68 <HAL_PCD_DataOutStageCallback>
 8004e3a:	e01d      	b.n	8004e78 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d114      	bne.n	8004e6c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	4613      	mov	r3, r2
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	4413      	add	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	440b      	add	r3, r1
 8004e50:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d108      	bne.n	8004e6c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e64:	461a      	mov	r2, r3
 8004e66:	2100      	movs	r1, #0
 8004e68:	f003 f820 	bl	8007eac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	4619      	mov	r1, r3
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f004 ff78 	bl	8009d68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3720      	adds	r7, #32
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	4f54300a 	.word	0x4f54300a
 8004e88:	4f54310a 	.word	0x4f54310a

08004e8c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	333c      	adds	r3, #60	; 0x3c
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4a15      	ldr	r2, [pc, #84]	; (8004f14 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d90e      	bls.n	8004ee0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d009      	beq.n	8004ee0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed8:	461a      	mov	r2, r3
 8004eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ede:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f004 ff2f 	bl	8009d44 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4a0a      	ldr	r2, [pc, #40]	; (8004f14 <PCD_EP_OutSetupPacket_int+0x88>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d90c      	bls.n	8004f08 <PCD_EP_OutSetupPacket_int+0x7c>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d108      	bne.n	8004f08 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f00:	461a      	mov	r2, r3
 8004f02:	2101      	movs	r1, #1
 8004f04:	f002 ffd2 	bl	8007eac <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	4f54300a 	.word	0x4f54300a

08004f18 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	70fb      	strb	r3, [r7, #3]
 8004f24:	4613      	mov	r3, r2
 8004f26:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004f30:	78fb      	ldrb	r3, [r7, #3]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d107      	bne.n	8004f46 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f36:	883b      	ldrh	r3, [r7, #0]
 8004f38:	0419      	lsls	r1, r3, #16
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	629a      	str	r2, [r3, #40]	; 0x28
 8004f44:	e028      	b.n	8004f98 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4c:	0c1b      	lsrs	r3, r3, #16
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	4413      	add	r3, r2
 8004f52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f54:	2300      	movs	r3, #0
 8004f56:	73fb      	strb	r3, [r7, #15]
 8004f58:	e00d      	b.n	8004f76 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	3340      	adds	r3, #64	; 0x40
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	0c1b      	lsrs	r3, r3, #16
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	3301      	adds	r3, #1
 8004f74:	73fb      	strb	r3, [r7, #15]
 8004f76:	7bfa      	ldrb	r2, [r7, #15]
 8004f78:	78fb      	ldrb	r3, [r7, #3]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d3ec      	bcc.n	8004f5a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004f80:	883b      	ldrh	r3, [r7, #0]
 8004f82:	0418      	lsls	r0, r3, #16
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6819      	ldr	r1, [r3, #0]
 8004f88:	78fb      	ldrb	r3, [r7, #3]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	4302      	orrs	r2, r0
 8004f90:	3340      	adds	r3, #64	; 0x40
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	440b      	add	r3, r1
 8004f96:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	460b      	mov	r3, r1
 8004fb0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	887a      	ldrh	r2, [r7, #2]
 8004fb8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e267      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d075      	beq.n	80050ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ffe:	4b88      	ldr	r3, [pc, #544]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 030c 	and.w	r3, r3, #12
 8005006:	2b04      	cmp	r3, #4
 8005008:	d00c      	beq.n	8005024 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800500a:	4b85      	ldr	r3, [pc, #532]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005012:	2b08      	cmp	r3, #8
 8005014:	d112      	bne.n	800503c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005016:	4b82      	ldr	r3, [pc, #520]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800501e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005022:	d10b      	bne.n	800503c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005024:	4b7e      	ldr	r3, [pc, #504]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d05b      	beq.n	80050e8 <HAL_RCC_OscConfig+0x108>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d157      	bne.n	80050e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e242      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005044:	d106      	bne.n	8005054 <HAL_RCC_OscConfig+0x74>
 8005046:	4b76      	ldr	r3, [pc, #472]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a75      	ldr	r2, [pc, #468]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 800504c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005050:	6013      	str	r3, [r2, #0]
 8005052:	e01d      	b.n	8005090 <HAL_RCC_OscConfig+0xb0>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800505c:	d10c      	bne.n	8005078 <HAL_RCC_OscConfig+0x98>
 800505e:	4b70      	ldr	r3, [pc, #448]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a6f      	ldr	r2, [pc, #444]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	4b6d      	ldr	r3, [pc, #436]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a6c      	ldr	r2, [pc, #432]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	e00b      	b.n	8005090 <HAL_RCC_OscConfig+0xb0>
 8005078:	4b69      	ldr	r3, [pc, #420]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a68      	ldr	r2, [pc, #416]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 800507e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005082:	6013      	str	r3, [r2, #0]
 8005084:	4b66      	ldr	r3, [pc, #408]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a65      	ldr	r2, [pc, #404]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 800508a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800508e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d013      	beq.n	80050c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005098:	f7fd fa86 	bl	80025a8 <HAL_GetTick>
 800509c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800509e:	e008      	b.n	80050b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050a0:	f7fd fa82 	bl	80025a8 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b64      	cmp	r3, #100	; 0x64
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e207      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050b2:	4b5b      	ldr	r3, [pc, #364]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d0f0      	beq.n	80050a0 <HAL_RCC_OscConfig+0xc0>
 80050be:	e014      	b.n	80050ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c0:	f7fd fa72 	bl	80025a8 <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050c8:	f7fd fa6e 	bl	80025a8 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b64      	cmp	r3, #100	; 0x64
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e1f3      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050da:	4b51      	ldr	r3, [pc, #324]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1f0      	bne.n	80050c8 <HAL_RCC_OscConfig+0xe8>
 80050e6:	e000      	b.n	80050ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d063      	beq.n	80051be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050f6:	4b4a      	ldr	r3, [pc, #296]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 030c 	and.w	r3, r3, #12
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00b      	beq.n	800511a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005102:	4b47      	ldr	r3, [pc, #284]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800510a:	2b08      	cmp	r3, #8
 800510c:	d11c      	bne.n	8005148 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800510e:	4b44      	ldr	r3, [pc, #272]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d116      	bne.n	8005148 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800511a:	4b41      	ldr	r3, [pc, #260]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <HAL_RCC_OscConfig+0x152>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d001      	beq.n	8005132 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e1c7      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005132:	4b3b      	ldr	r3, [pc, #236]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	4937      	ldr	r1, [pc, #220]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005142:	4313      	orrs	r3, r2
 8005144:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005146:	e03a      	b.n	80051be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d020      	beq.n	8005192 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005150:	4b34      	ldr	r3, [pc, #208]	; (8005224 <HAL_RCC_OscConfig+0x244>)
 8005152:	2201      	movs	r2, #1
 8005154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005156:	f7fd fa27 	bl	80025a8 <HAL_GetTick>
 800515a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800515c:	e008      	b.n	8005170 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800515e:	f7fd fa23 	bl	80025a8 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e1a8      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005170:	4b2b      	ldr	r3, [pc, #172]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0f0      	beq.n	800515e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800517c:	4b28      	ldr	r3, [pc, #160]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	4925      	ldr	r1, [pc, #148]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 800518c:	4313      	orrs	r3, r2
 800518e:	600b      	str	r3, [r1, #0]
 8005190:	e015      	b.n	80051be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005192:	4b24      	ldr	r3, [pc, #144]	; (8005224 <HAL_RCC_OscConfig+0x244>)
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005198:	f7fd fa06 	bl	80025a8 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800519e:	e008      	b.n	80051b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051a0:	f7fd fa02 	bl	80025a8 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	2b02      	cmp	r3, #2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e187      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051b2:	4b1b      	ldr	r3, [pc, #108]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1f0      	bne.n	80051a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0308 	and.w	r3, r3, #8
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d036      	beq.n	8005238 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d016      	beq.n	8005200 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051d2:	4b15      	ldr	r3, [pc, #84]	; (8005228 <HAL_RCC_OscConfig+0x248>)
 80051d4:	2201      	movs	r2, #1
 80051d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d8:	f7fd f9e6 	bl	80025a8 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051e0:	f7fd f9e2 	bl	80025a8 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e167      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051f2:	4b0b      	ldr	r3, [pc, #44]	; (8005220 <HAL_RCC_OscConfig+0x240>)
 80051f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0f0      	beq.n	80051e0 <HAL_RCC_OscConfig+0x200>
 80051fe:	e01b      	b.n	8005238 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005200:	4b09      	ldr	r3, [pc, #36]	; (8005228 <HAL_RCC_OscConfig+0x248>)
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005206:	f7fd f9cf 	bl	80025a8 <HAL_GetTick>
 800520a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800520c:	e00e      	b.n	800522c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800520e:	f7fd f9cb 	bl	80025a8 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d907      	bls.n	800522c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e150      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
 8005220:	40023800 	.word	0x40023800
 8005224:	42470000 	.word	0x42470000
 8005228:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800522c:	4b88      	ldr	r3, [pc, #544]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 800522e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1ea      	bne.n	800520e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 8097 	beq.w	8005374 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005246:	2300      	movs	r3, #0
 8005248:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800524a:	4b81      	ldr	r3, [pc, #516]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10f      	bne.n	8005276 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005256:	2300      	movs	r3, #0
 8005258:	60bb      	str	r3, [r7, #8]
 800525a:	4b7d      	ldr	r3, [pc, #500]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	4a7c      	ldr	r2, [pc, #496]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 8005260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005264:	6413      	str	r3, [r2, #64]	; 0x40
 8005266:	4b7a      	ldr	r3, [pc, #488]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800526e:	60bb      	str	r3, [r7, #8]
 8005270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005272:	2301      	movs	r3, #1
 8005274:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005276:	4b77      	ldr	r3, [pc, #476]	; (8005454 <HAL_RCC_OscConfig+0x474>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800527e:	2b00      	cmp	r3, #0
 8005280:	d118      	bne.n	80052b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005282:	4b74      	ldr	r3, [pc, #464]	; (8005454 <HAL_RCC_OscConfig+0x474>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a73      	ldr	r2, [pc, #460]	; (8005454 <HAL_RCC_OscConfig+0x474>)
 8005288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800528c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800528e:	f7fd f98b 	bl	80025a8 <HAL_GetTick>
 8005292:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005294:	e008      	b.n	80052a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005296:	f7fd f987 	bl	80025a8 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e10c      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a8:	4b6a      	ldr	r3, [pc, #424]	; (8005454 <HAL_RCC_OscConfig+0x474>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d0f0      	beq.n	8005296 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d106      	bne.n	80052ca <HAL_RCC_OscConfig+0x2ea>
 80052bc:	4b64      	ldr	r3, [pc, #400]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 80052be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c0:	4a63      	ldr	r2, [pc, #396]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 80052c2:	f043 0301 	orr.w	r3, r3, #1
 80052c6:	6713      	str	r3, [r2, #112]	; 0x70
 80052c8:	e01c      	b.n	8005304 <HAL_RCC_OscConfig+0x324>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	2b05      	cmp	r3, #5
 80052d0:	d10c      	bne.n	80052ec <HAL_RCC_OscConfig+0x30c>
 80052d2:	4b5f      	ldr	r3, [pc, #380]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 80052d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d6:	4a5e      	ldr	r2, [pc, #376]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 80052d8:	f043 0304 	orr.w	r3, r3, #4
 80052dc:	6713      	str	r3, [r2, #112]	; 0x70
 80052de:	4b5c      	ldr	r3, [pc, #368]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 80052e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e2:	4a5b      	ldr	r2, [pc, #364]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 80052e4:	f043 0301 	orr.w	r3, r3, #1
 80052e8:	6713      	str	r3, [r2, #112]	; 0x70
 80052ea:	e00b      	b.n	8005304 <HAL_RCC_OscConfig+0x324>
 80052ec:	4b58      	ldr	r3, [pc, #352]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 80052ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f0:	4a57      	ldr	r2, [pc, #348]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 80052f2:	f023 0301 	bic.w	r3, r3, #1
 80052f6:	6713      	str	r3, [r2, #112]	; 0x70
 80052f8:	4b55      	ldr	r3, [pc, #340]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 80052fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fc:	4a54      	ldr	r2, [pc, #336]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 80052fe:	f023 0304 	bic.w	r3, r3, #4
 8005302:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d015      	beq.n	8005338 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800530c:	f7fd f94c 	bl	80025a8 <HAL_GetTick>
 8005310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005312:	e00a      	b.n	800532a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005314:	f7fd f948 	bl	80025a8 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005322:	4293      	cmp	r3, r2
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e0cb      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800532a:	4b49      	ldr	r3, [pc, #292]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 800532c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d0ee      	beq.n	8005314 <HAL_RCC_OscConfig+0x334>
 8005336:	e014      	b.n	8005362 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005338:	f7fd f936 	bl	80025a8 <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800533e:	e00a      	b.n	8005356 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005340:	f7fd f932 	bl	80025a8 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	f241 3288 	movw	r2, #5000	; 0x1388
 800534e:	4293      	cmp	r3, r2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e0b5      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005356:	4b3e      	ldr	r3, [pc, #248]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 8005358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1ee      	bne.n	8005340 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005362:	7dfb      	ldrb	r3, [r7, #23]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d105      	bne.n	8005374 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005368:	4b39      	ldr	r3, [pc, #228]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 800536a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536c:	4a38      	ldr	r2, [pc, #224]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 800536e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005372:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 80a1 	beq.w	80054c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800537e:	4b34      	ldr	r3, [pc, #208]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 030c 	and.w	r3, r3, #12
 8005386:	2b08      	cmp	r3, #8
 8005388:	d05c      	beq.n	8005444 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d141      	bne.n	8005416 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005392:	4b31      	ldr	r3, [pc, #196]	; (8005458 <HAL_RCC_OscConfig+0x478>)
 8005394:	2200      	movs	r2, #0
 8005396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005398:	f7fd f906 	bl	80025a8 <HAL_GetTick>
 800539c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800539e:	e008      	b.n	80053b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053a0:	f7fd f902 	bl	80025a8 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e087      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053b2:	4b27      	ldr	r3, [pc, #156]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1f0      	bne.n	80053a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69da      	ldr	r2, [r3, #28]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	019b      	lsls	r3, r3, #6
 80053ce:	431a      	orrs	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d4:	085b      	lsrs	r3, r3, #1
 80053d6:	3b01      	subs	r3, #1
 80053d8:	041b      	lsls	r3, r3, #16
 80053da:	431a      	orrs	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e0:	061b      	lsls	r3, r3, #24
 80053e2:	491b      	ldr	r1, [pc, #108]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053e8:	4b1b      	ldr	r3, [pc, #108]	; (8005458 <HAL_RCC_OscConfig+0x478>)
 80053ea:	2201      	movs	r2, #1
 80053ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ee:	f7fd f8db 	bl	80025a8 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053f6:	f7fd f8d7 	bl	80025a8 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e05c      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005408:	4b11      	ldr	r3, [pc, #68]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0f0      	beq.n	80053f6 <HAL_RCC_OscConfig+0x416>
 8005414:	e054      	b.n	80054c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005416:	4b10      	ldr	r3, [pc, #64]	; (8005458 <HAL_RCC_OscConfig+0x478>)
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800541c:	f7fd f8c4 	bl	80025a8 <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005424:	f7fd f8c0 	bl	80025a8 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e045      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005436:	4b06      	ldr	r3, [pc, #24]	; (8005450 <HAL_RCC_OscConfig+0x470>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1f0      	bne.n	8005424 <HAL_RCC_OscConfig+0x444>
 8005442:	e03d      	b.n	80054c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d107      	bne.n	800545c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e038      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
 8005450:	40023800 	.word	0x40023800
 8005454:	40007000 	.word	0x40007000
 8005458:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800545c:	4b1b      	ldr	r3, [pc, #108]	; (80054cc <HAL_RCC_OscConfig+0x4ec>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d028      	beq.n	80054bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005474:	429a      	cmp	r2, r3
 8005476:	d121      	bne.n	80054bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005482:	429a      	cmp	r2, r3
 8005484:	d11a      	bne.n	80054bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800548c:	4013      	ands	r3, r2
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005492:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005494:	4293      	cmp	r3, r2
 8005496:	d111      	bne.n	80054bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a2:	085b      	lsrs	r3, r3, #1
 80054a4:	3b01      	subs	r3, #1
 80054a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d107      	bne.n	80054bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d001      	beq.n	80054c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e000      	b.n	80054c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	40023800 	.word	0x40023800

080054d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e0cc      	b.n	800567e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054e4:	4b68      	ldr	r3, [pc, #416]	; (8005688 <HAL_RCC_ClockConfig+0x1b8>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0307 	and.w	r3, r3, #7
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d90c      	bls.n	800550c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054f2:	4b65      	ldr	r3, [pc, #404]	; (8005688 <HAL_RCC_ClockConfig+0x1b8>)
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054fa:	4b63      	ldr	r3, [pc, #396]	; (8005688 <HAL_RCC_ClockConfig+0x1b8>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0307 	and.w	r3, r3, #7
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	429a      	cmp	r2, r3
 8005506:	d001      	beq.n	800550c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e0b8      	b.n	800567e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d020      	beq.n	800555a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b00      	cmp	r3, #0
 8005522:	d005      	beq.n	8005530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005524:	4b59      	ldr	r3, [pc, #356]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	4a58      	ldr	r2, [pc, #352]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 800552a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800552e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0308 	and.w	r3, r3, #8
 8005538:	2b00      	cmp	r3, #0
 800553a:	d005      	beq.n	8005548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800553c:	4b53      	ldr	r3, [pc, #332]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	4a52      	ldr	r2, [pc, #328]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 8005542:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005548:	4b50      	ldr	r3, [pc, #320]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	494d      	ldr	r1, [pc, #308]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 8005556:	4313      	orrs	r3, r2
 8005558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d044      	beq.n	80055f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d107      	bne.n	800557e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800556e:	4b47      	ldr	r3, [pc, #284]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d119      	bne.n	80055ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e07f      	b.n	800567e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d003      	beq.n	800558e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800558a:	2b03      	cmp	r3, #3
 800558c:	d107      	bne.n	800559e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800558e:	4b3f      	ldr	r3, [pc, #252]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d109      	bne.n	80055ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e06f      	b.n	800567e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800559e:	4b3b      	ldr	r3, [pc, #236]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e067      	b.n	800567e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055ae:	4b37      	ldr	r3, [pc, #220]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f023 0203 	bic.w	r2, r3, #3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	4934      	ldr	r1, [pc, #208]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055c0:	f7fc fff2 	bl	80025a8 <HAL_GetTick>
 80055c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055c6:	e00a      	b.n	80055de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055c8:	f7fc ffee 	bl	80025a8 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e04f      	b.n	800567e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055de:	4b2b      	ldr	r3, [pc, #172]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 020c 	and.w	r2, r3, #12
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d1eb      	bne.n	80055c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055f0:	4b25      	ldr	r3, [pc, #148]	; (8005688 <HAL_RCC_ClockConfig+0x1b8>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d20c      	bcs.n	8005618 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055fe:	4b22      	ldr	r3, [pc, #136]	; (8005688 <HAL_RCC_ClockConfig+0x1b8>)
 8005600:	683a      	ldr	r2, [r7, #0]
 8005602:	b2d2      	uxtb	r2, r2
 8005604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005606:	4b20      	ldr	r3, [pc, #128]	; (8005688 <HAL_RCC_ClockConfig+0x1b8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d001      	beq.n	8005618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e032      	b.n	800567e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b00      	cmp	r3, #0
 8005622:	d008      	beq.n	8005636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005624:	4b19      	ldr	r3, [pc, #100]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	4916      	ldr	r1, [pc, #88]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 8005632:	4313      	orrs	r3, r2
 8005634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0308 	and.w	r3, r3, #8
 800563e:	2b00      	cmp	r3, #0
 8005640:	d009      	beq.n	8005656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005642:	4b12      	ldr	r3, [pc, #72]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	490e      	ldr	r1, [pc, #56]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 8005652:	4313      	orrs	r3, r2
 8005654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005656:	f000 f821 	bl	800569c <HAL_RCC_GetSysClockFreq>
 800565a:	4602      	mov	r2, r0
 800565c:	4b0b      	ldr	r3, [pc, #44]	; (800568c <HAL_RCC_ClockConfig+0x1bc>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	091b      	lsrs	r3, r3, #4
 8005662:	f003 030f 	and.w	r3, r3, #15
 8005666:	490a      	ldr	r1, [pc, #40]	; (8005690 <HAL_RCC_ClockConfig+0x1c0>)
 8005668:	5ccb      	ldrb	r3, [r1, r3]
 800566a:	fa22 f303 	lsr.w	r3, r2, r3
 800566e:	4a09      	ldr	r2, [pc, #36]	; (8005694 <HAL_RCC_ClockConfig+0x1c4>)
 8005670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005672:	4b09      	ldr	r3, [pc, #36]	; (8005698 <HAL_RCC_ClockConfig+0x1c8>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4618      	mov	r0, r3
 8005678:	f7fc ff52 	bl	8002520 <HAL_InitTick>

  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	40023c00 	.word	0x40023c00
 800568c:	40023800 	.word	0x40023800
 8005690:	0800d48c 	.word	0x0800d48c
 8005694:	20000010 	.word	0x20000010
 8005698:	20000014 	.word	0x20000014

0800569c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800569c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056a0:	b094      	sub	sp, #80	; 0x50
 80056a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	647b      	str	r3, [r7, #68]	; 0x44
 80056a8:	2300      	movs	r3, #0
 80056aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056ac:	2300      	movs	r3, #0
 80056ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056b4:	4b79      	ldr	r3, [pc, #484]	; (800589c <HAL_RCC_GetSysClockFreq+0x200>)
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f003 030c 	and.w	r3, r3, #12
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d00d      	beq.n	80056dc <HAL_RCC_GetSysClockFreq+0x40>
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	f200 80e1 	bhi.w	8005888 <HAL_RCC_GetSysClockFreq+0x1ec>
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <HAL_RCC_GetSysClockFreq+0x34>
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d003      	beq.n	80056d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80056ce:	e0db      	b.n	8005888 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056d0:	4b73      	ldr	r3, [pc, #460]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80056d2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80056d4:	e0db      	b.n	800588e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056d6:	4b73      	ldr	r3, [pc, #460]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80056d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056da:	e0d8      	b.n	800588e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056dc:	4b6f      	ldr	r3, [pc, #444]	; (800589c <HAL_RCC_GetSysClockFreq+0x200>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056e4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056e6:	4b6d      	ldr	r3, [pc, #436]	; (800589c <HAL_RCC_GetSysClockFreq+0x200>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d063      	beq.n	80057ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056f2:	4b6a      	ldr	r3, [pc, #424]	; (800589c <HAL_RCC_GetSysClockFreq+0x200>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	099b      	lsrs	r3, r3, #6
 80056f8:	2200      	movs	r2, #0
 80056fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80056fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80056fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005704:	633b      	str	r3, [r7, #48]	; 0x30
 8005706:	2300      	movs	r3, #0
 8005708:	637b      	str	r3, [r7, #52]	; 0x34
 800570a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800570e:	4622      	mov	r2, r4
 8005710:	462b      	mov	r3, r5
 8005712:	f04f 0000 	mov.w	r0, #0
 8005716:	f04f 0100 	mov.w	r1, #0
 800571a:	0159      	lsls	r1, r3, #5
 800571c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005720:	0150      	lsls	r0, r2, #5
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	4621      	mov	r1, r4
 8005728:	1a51      	subs	r1, r2, r1
 800572a:	6139      	str	r1, [r7, #16]
 800572c:	4629      	mov	r1, r5
 800572e:	eb63 0301 	sbc.w	r3, r3, r1
 8005732:	617b      	str	r3, [r7, #20]
 8005734:	f04f 0200 	mov.w	r2, #0
 8005738:	f04f 0300 	mov.w	r3, #0
 800573c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005740:	4659      	mov	r1, fp
 8005742:	018b      	lsls	r3, r1, #6
 8005744:	4651      	mov	r1, sl
 8005746:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800574a:	4651      	mov	r1, sl
 800574c:	018a      	lsls	r2, r1, #6
 800574e:	4651      	mov	r1, sl
 8005750:	ebb2 0801 	subs.w	r8, r2, r1
 8005754:	4659      	mov	r1, fp
 8005756:	eb63 0901 	sbc.w	r9, r3, r1
 800575a:	f04f 0200 	mov.w	r2, #0
 800575e:	f04f 0300 	mov.w	r3, #0
 8005762:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005766:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800576a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800576e:	4690      	mov	r8, r2
 8005770:	4699      	mov	r9, r3
 8005772:	4623      	mov	r3, r4
 8005774:	eb18 0303 	adds.w	r3, r8, r3
 8005778:	60bb      	str	r3, [r7, #8]
 800577a:	462b      	mov	r3, r5
 800577c:	eb49 0303 	adc.w	r3, r9, r3
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	f04f 0200 	mov.w	r2, #0
 8005786:	f04f 0300 	mov.w	r3, #0
 800578a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800578e:	4629      	mov	r1, r5
 8005790:	024b      	lsls	r3, r1, #9
 8005792:	4621      	mov	r1, r4
 8005794:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005798:	4621      	mov	r1, r4
 800579a:	024a      	lsls	r2, r1, #9
 800579c:	4610      	mov	r0, r2
 800579e:	4619      	mov	r1, r3
 80057a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057a2:	2200      	movs	r2, #0
 80057a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80057a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057ac:	f7fb fa54 	bl	8000c58 <__aeabi_uldivmod>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4613      	mov	r3, r2
 80057b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057b8:	e058      	b.n	800586c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057ba:	4b38      	ldr	r3, [pc, #224]	; (800589c <HAL_RCC_GetSysClockFreq+0x200>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	099b      	lsrs	r3, r3, #6
 80057c0:	2200      	movs	r2, #0
 80057c2:	4618      	mov	r0, r3
 80057c4:	4611      	mov	r1, r2
 80057c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057ca:	623b      	str	r3, [r7, #32]
 80057cc:	2300      	movs	r3, #0
 80057ce:	627b      	str	r3, [r7, #36]	; 0x24
 80057d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057d4:	4642      	mov	r2, r8
 80057d6:	464b      	mov	r3, r9
 80057d8:	f04f 0000 	mov.w	r0, #0
 80057dc:	f04f 0100 	mov.w	r1, #0
 80057e0:	0159      	lsls	r1, r3, #5
 80057e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057e6:	0150      	lsls	r0, r2, #5
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4641      	mov	r1, r8
 80057ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80057f2:	4649      	mov	r1, r9
 80057f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80057f8:	f04f 0200 	mov.w	r2, #0
 80057fc:	f04f 0300 	mov.w	r3, #0
 8005800:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005804:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005808:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800580c:	ebb2 040a 	subs.w	r4, r2, sl
 8005810:	eb63 050b 	sbc.w	r5, r3, fp
 8005814:	f04f 0200 	mov.w	r2, #0
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	00eb      	lsls	r3, r5, #3
 800581e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005822:	00e2      	lsls	r2, r4, #3
 8005824:	4614      	mov	r4, r2
 8005826:	461d      	mov	r5, r3
 8005828:	4643      	mov	r3, r8
 800582a:	18e3      	adds	r3, r4, r3
 800582c:	603b      	str	r3, [r7, #0]
 800582e:	464b      	mov	r3, r9
 8005830:	eb45 0303 	adc.w	r3, r5, r3
 8005834:	607b      	str	r3, [r7, #4]
 8005836:	f04f 0200 	mov.w	r2, #0
 800583a:	f04f 0300 	mov.w	r3, #0
 800583e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005842:	4629      	mov	r1, r5
 8005844:	028b      	lsls	r3, r1, #10
 8005846:	4621      	mov	r1, r4
 8005848:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800584c:	4621      	mov	r1, r4
 800584e:	028a      	lsls	r2, r1, #10
 8005850:	4610      	mov	r0, r2
 8005852:	4619      	mov	r1, r3
 8005854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005856:	2200      	movs	r2, #0
 8005858:	61bb      	str	r3, [r7, #24]
 800585a:	61fa      	str	r2, [r7, #28]
 800585c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005860:	f7fb f9fa 	bl	8000c58 <__aeabi_uldivmod>
 8005864:	4602      	mov	r2, r0
 8005866:	460b      	mov	r3, r1
 8005868:	4613      	mov	r3, r2
 800586a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800586c:	4b0b      	ldr	r3, [pc, #44]	; (800589c <HAL_RCC_GetSysClockFreq+0x200>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	0c1b      	lsrs	r3, r3, #16
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	3301      	adds	r3, #1
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800587c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800587e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005880:	fbb2 f3f3 	udiv	r3, r2, r3
 8005884:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005886:	e002      	b.n	800588e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005888:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800588a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800588c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800588e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005890:	4618      	mov	r0, r3
 8005892:	3750      	adds	r7, #80	; 0x50
 8005894:	46bd      	mov	sp, r7
 8005896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800589a:	bf00      	nop
 800589c:	40023800 	.word	0x40023800
 80058a0:	00f42400 	.word	0x00f42400
 80058a4:	007a1200 	.word	0x007a1200

080058a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058a8:	b480      	push	{r7}
 80058aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058ac:	4b03      	ldr	r3, [pc, #12]	; (80058bc <HAL_RCC_GetHCLKFreq+0x14>)
 80058ae:	681b      	ldr	r3, [r3, #0]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	20000010 	.word	0x20000010

080058c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058c4:	f7ff fff0 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 80058c8:	4602      	mov	r2, r0
 80058ca:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	0a9b      	lsrs	r3, r3, #10
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	4903      	ldr	r1, [pc, #12]	; (80058e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058d6:	5ccb      	ldrb	r3, [r1, r3]
 80058d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058dc:	4618      	mov	r0, r3
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	40023800 	.word	0x40023800
 80058e4:	0800d49c 	.word	0x0800d49c

080058e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058ec:	f7ff ffdc 	bl	80058a8 <HAL_RCC_GetHCLKFreq>
 80058f0:	4602      	mov	r2, r0
 80058f2:	4b05      	ldr	r3, [pc, #20]	; (8005908 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	0b5b      	lsrs	r3, r3, #13
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	4903      	ldr	r1, [pc, #12]	; (800590c <HAL_RCC_GetPCLK2Freq+0x24>)
 80058fe:	5ccb      	ldrb	r3, [r1, r3]
 8005900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005904:	4618      	mov	r0, r3
 8005906:	bd80      	pop	{r7, pc}
 8005908:	40023800 	.word	0x40023800
 800590c:	0800d49c 	.word	0x0800d49c

08005910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e041      	b.n	80059a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7fc fbd6 	bl	80020e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3304      	adds	r3, #4
 800594c:	4619      	mov	r1, r3
 800594e:	4610      	mov	r0, r2
 8005950:	f000 fa92 	bl	8005e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b085      	sub	sp, #20
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d001      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e044      	b.n	8005a52 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0201 	orr.w	r2, r2, #1
 80059de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a1e      	ldr	r2, [pc, #120]	; (8005a60 <HAL_TIM_Base_Start_IT+0xb0>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d018      	beq.n	8005a1c <HAL_TIM_Base_Start_IT+0x6c>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f2:	d013      	beq.n	8005a1c <HAL_TIM_Base_Start_IT+0x6c>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1a      	ldr	r2, [pc, #104]	; (8005a64 <HAL_TIM_Base_Start_IT+0xb4>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d00e      	beq.n	8005a1c <HAL_TIM_Base_Start_IT+0x6c>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a19      	ldr	r2, [pc, #100]	; (8005a68 <HAL_TIM_Base_Start_IT+0xb8>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d009      	beq.n	8005a1c <HAL_TIM_Base_Start_IT+0x6c>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a17      	ldr	r2, [pc, #92]	; (8005a6c <HAL_TIM_Base_Start_IT+0xbc>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d004      	beq.n	8005a1c <HAL_TIM_Base_Start_IT+0x6c>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a16      	ldr	r2, [pc, #88]	; (8005a70 <HAL_TIM_Base_Start_IT+0xc0>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d111      	bne.n	8005a40 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b06      	cmp	r3, #6
 8005a2c:	d010      	beq.n	8005a50 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f042 0201 	orr.w	r2, r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3e:	e007      	b.n	8005a50 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3714      	adds	r7, #20
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	40010000 	.word	0x40010000
 8005a64:	40000400 	.word	0x40000400
 8005a68:	40000800 	.word	0x40000800
 8005a6c:	40000c00 	.word	0x40000c00
 8005a70:	40014000 	.word	0x40014000

08005a74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d122      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d11b      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0202 	mvn.w	r2, #2
 8005aa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f9bf 	bl	8005e3a <HAL_TIM_IC_CaptureCallback>
 8005abc:	e005      	b.n	8005aca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f9b1 	bl	8005e26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f9c2 	bl	8005e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f003 0304 	and.w	r3, r3, #4
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d122      	bne.n	8005b24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f003 0304 	and.w	r3, r3, #4
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d11b      	bne.n	8005b24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f06f 0204 	mvn.w	r2, #4
 8005af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2202      	movs	r2, #2
 8005afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f995 	bl	8005e3a <HAL_TIM_IC_CaptureCallback>
 8005b10:	e005      	b.n	8005b1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f987 	bl	8005e26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f998 	bl	8005e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f003 0308 	and.w	r3, r3, #8
 8005b2e:	2b08      	cmp	r3, #8
 8005b30:	d122      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f003 0308 	and.w	r3, r3, #8
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	d11b      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f06f 0208 	mvn.w	r2, #8
 8005b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2204      	movs	r2, #4
 8005b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f96b 	bl	8005e3a <HAL_TIM_IC_CaptureCallback>
 8005b64:	e005      	b.n	8005b72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f95d 	bl	8005e26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f96e 	bl	8005e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	f003 0310 	and.w	r3, r3, #16
 8005b82:	2b10      	cmp	r3, #16
 8005b84:	d122      	bne.n	8005bcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	2b10      	cmp	r3, #16
 8005b92:	d11b      	bne.n	8005bcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f06f 0210 	mvn.w	r2, #16
 8005b9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2208      	movs	r2, #8
 8005ba2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	69db      	ldr	r3, [r3, #28]
 8005baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f941 	bl	8005e3a <HAL_TIM_IC_CaptureCallback>
 8005bb8:	e005      	b.n	8005bc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f933 	bl	8005e26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f944 	bl	8005e4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d10e      	bne.n	8005bf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	f003 0301 	and.w	r3, r3, #1
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d107      	bne.n	8005bf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f06f 0201 	mvn.w	r2, #1
 8005bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f90d 	bl	8005e12 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c02:	2b80      	cmp	r3, #128	; 0x80
 8005c04:	d10e      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c10:	2b80      	cmp	r3, #128	; 0x80
 8005c12:	d107      	bne.n	8005c24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fabc 	bl	800619c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2e:	2b40      	cmp	r3, #64	; 0x40
 8005c30:	d10e      	bne.n	8005c50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3c:	2b40      	cmp	r3, #64	; 0x40
 8005c3e:	d107      	bne.n	8005c50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f909 	bl	8005e62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b20      	cmp	r3, #32
 8005c5c:	d10e      	bne.n	8005c7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	f003 0320 	and.w	r3, r3, #32
 8005c68:	2b20      	cmp	r3, #32
 8005c6a:	d107      	bne.n	8005c7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f06f 0220 	mvn.w	r2, #32
 8005c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fa86 	bl	8006188 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c7c:	bf00      	nop
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d101      	bne.n	8005ca0 <HAL_TIM_ConfigClockSource+0x1c>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e0b4      	b.n	8005e0a <HAL_TIM_ConfigClockSource+0x186>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd8:	d03e      	beq.n	8005d58 <HAL_TIM_ConfigClockSource+0xd4>
 8005cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cde:	f200 8087 	bhi.w	8005df0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce6:	f000 8086 	beq.w	8005df6 <HAL_TIM_ConfigClockSource+0x172>
 8005cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cee:	d87f      	bhi.n	8005df0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf0:	2b70      	cmp	r3, #112	; 0x70
 8005cf2:	d01a      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0xa6>
 8005cf4:	2b70      	cmp	r3, #112	; 0x70
 8005cf6:	d87b      	bhi.n	8005df0 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf8:	2b60      	cmp	r3, #96	; 0x60
 8005cfa:	d050      	beq.n	8005d9e <HAL_TIM_ConfigClockSource+0x11a>
 8005cfc:	2b60      	cmp	r3, #96	; 0x60
 8005cfe:	d877      	bhi.n	8005df0 <HAL_TIM_ConfigClockSource+0x16c>
 8005d00:	2b50      	cmp	r3, #80	; 0x50
 8005d02:	d03c      	beq.n	8005d7e <HAL_TIM_ConfigClockSource+0xfa>
 8005d04:	2b50      	cmp	r3, #80	; 0x50
 8005d06:	d873      	bhi.n	8005df0 <HAL_TIM_ConfigClockSource+0x16c>
 8005d08:	2b40      	cmp	r3, #64	; 0x40
 8005d0a:	d058      	beq.n	8005dbe <HAL_TIM_ConfigClockSource+0x13a>
 8005d0c:	2b40      	cmp	r3, #64	; 0x40
 8005d0e:	d86f      	bhi.n	8005df0 <HAL_TIM_ConfigClockSource+0x16c>
 8005d10:	2b30      	cmp	r3, #48	; 0x30
 8005d12:	d064      	beq.n	8005dde <HAL_TIM_ConfigClockSource+0x15a>
 8005d14:	2b30      	cmp	r3, #48	; 0x30
 8005d16:	d86b      	bhi.n	8005df0 <HAL_TIM_ConfigClockSource+0x16c>
 8005d18:	2b20      	cmp	r3, #32
 8005d1a:	d060      	beq.n	8005dde <HAL_TIM_ConfigClockSource+0x15a>
 8005d1c:	2b20      	cmp	r3, #32
 8005d1e:	d867      	bhi.n	8005df0 <HAL_TIM_ConfigClockSource+0x16c>
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d05c      	beq.n	8005dde <HAL_TIM_ConfigClockSource+0x15a>
 8005d24:	2b10      	cmp	r3, #16
 8005d26:	d05a      	beq.n	8005dde <HAL_TIM_ConfigClockSource+0x15a>
 8005d28:	e062      	b.n	8005df0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6818      	ldr	r0, [r3, #0]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	6899      	ldr	r1, [r3, #8]
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f000 f997 	bl	800606c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	609a      	str	r2, [r3, #8]
      break;
 8005d56:	e04f      	b.n	8005df8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6818      	ldr	r0, [r3, #0]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	6899      	ldr	r1, [r3, #8]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f000 f980 	bl	800606c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689a      	ldr	r2, [r3, #8]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d7a:	609a      	str	r2, [r3, #8]
      break;
 8005d7c:	e03c      	b.n	8005df8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6818      	ldr	r0, [r3, #0]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	6859      	ldr	r1, [r3, #4]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f000 f8f4 	bl	8005f78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2150      	movs	r1, #80	; 0x50
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 f94d 	bl	8006036 <TIM_ITRx_SetConfig>
      break;
 8005d9c:	e02c      	b.n	8005df8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6818      	ldr	r0, [r3, #0]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	6859      	ldr	r1, [r3, #4]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	461a      	mov	r2, r3
 8005dac:	f000 f913 	bl	8005fd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2160      	movs	r1, #96	; 0x60
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 f93d 	bl	8006036 <TIM_ITRx_SetConfig>
      break;
 8005dbc:	e01c      	b.n	8005df8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6818      	ldr	r0, [r3, #0]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	6859      	ldr	r1, [r3, #4]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f000 f8d4 	bl	8005f78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2140      	movs	r1, #64	; 0x40
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 f92d 	bl	8006036 <TIM_ITRx_SetConfig>
      break;
 8005ddc:	e00c      	b.n	8005df8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4619      	mov	r1, r3
 8005de8:	4610      	mov	r0, r2
 8005dea:	f000 f924 	bl	8006036 <TIM_ITRx_SetConfig>
      break;
 8005dee:	e003      	b.n	8005df8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	73fb      	strb	r3, [r7, #15]
      break;
 8005df4:	e000      	b.n	8005df8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005df6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b083      	sub	sp, #12
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e1a:	bf00      	nop
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b083      	sub	sp, #12
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e2e:	bf00      	nop
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e3a:	b480      	push	{r7}
 8005e3c:	b083      	sub	sp, #12
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e42:	bf00      	nop
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e6a:	bf00      	nop
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
	...

08005e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a34      	ldr	r2, [pc, #208]	; (8005f5c <TIM_Base_SetConfig+0xe4>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d00f      	beq.n	8005eb0 <TIM_Base_SetConfig+0x38>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e96:	d00b      	beq.n	8005eb0 <TIM_Base_SetConfig+0x38>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a31      	ldr	r2, [pc, #196]	; (8005f60 <TIM_Base_SetConfig+0xe8>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d007      	beq.n	8005eb0 <TIM_Base_SetConfig+0x38>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a30      	ldr	r2, [pc, #192]	; (8005f64 <TIM_Base_SetConfig+0xec>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d003      	beq.n	8005eb0 <TIM_Base_SetConfig+0x38>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a2f      	ldr	r2, [pc, #188]	; (8005f68 <TIM_Base_SetConfig+0xf0>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d108      	bne.n	8005ec2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a25      	ldr	r2, [pc, #148]	; (8005f5c <TIM_Base_SetConfig+0xe4>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d01b      	beq.n	8005f02 <TIM_Base_SetConfig+0x8a>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed0:	d017      	beq.n	8005f02 <TIM_Base_SetConfig+0x8a>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a22      	ldr	r2, [pc, #136]	; (8005f60 <TIM_Base_SetConfig+0xe8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d013      	beq.n	8005f02 <TIM_Base_SetConfig+0x8a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a21      	ldr	r2, [pc, #132]	; (8005f64 <TIM_Base_SetConfig+0xec>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d00f      	beq.n	8005f02 <TIM_Base_SetConfig+0x8a>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a20      	ldr	r2, [pc, #128]	; (8005f68 <TIM_Base_SetConfig+0xf0>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d00b      	beq.n	8005f02 <TIM_Base_SetConfig+0x8a>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a1f      	ldr	r2, [pc, #124]	; (8005f6c <TIM_Base_SetConfig+0xf4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d007      	beq.n	8005f02 <TIM_Base_SetConfig+0x8a>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a1e      	ldr	r2, [pc, #120]	; (8005f70 <TIM_Base_SetConfig+0xf8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d003      	beq.n	8005f02 <TIM_Base_SetConfig+0x8a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a1d      	ldr	r2, [pc, #116]	; (8005f74 <TIM_Base_SetConfig+0xfc>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d108      	bne.n	8005f14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a08      	ldr	r2, [pc, #32]	; (8005f5c <TIM_Base_SetConfig+0xe4>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d103      	bne.n	8005f48 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	691a      	ldr	r2, [r3, #16]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	615a      	str	r2, [r3, #20]
}
 8005f4e:	bf00      	nop
 8005f50:	3714      	adds	r7, #20
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	40010000 	.word	0x40010000
 8005f60:	40000400 	.word	0x40000400
 8005f64:	40000800 	.word	0x40000800
 8005f68:	40000c00 	.word	0x40000c00
 8005f6c:	40014000 	.word	0x40014000
 8005f70:	40014400 	.word	0x40014400
 8005f74:	40014800 	.word	0x40014800

08005f78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	f023 0201 	bic.w	r2, r3, #1
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	011b      	lsls	r3, r3, #4
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f023 030a 	bic.w	r3, r3, #10
 8005fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	621a      	str	r2, [r3, #32]
}
 8005fca:	bf00      	nop
 8005fcc:	371c      	adds	r7, #28
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b087      	sub	sp, #28
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6a1b      	ldr	r3, [r3, #32]
 8005fe6:	f023 0210 	bic.w	r2, r3, #16
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006000:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	031b      	lsls	r3, r3, #12
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4313      	orrs	r3, r2
 800600a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006012:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	4313      	orrs	r3, r2
 800601c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	621a      	str	r2, [r3, #32]
}
 800602a:	bf00      	nop
 800602c:	371c      	adds	r7, #28
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006036:	b480      	push	{r7}
 8006038:	b085      	sub	sp, #20
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	4313      	orrs	r3, r2
 8006054:	f043 0307 	orr.w	r3, r3, #7
 8006058:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	609a      	str	r2, [r3, #8]
}
 8006060:	bf00      	nop
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006086:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	021a      	lsls	r2, r3, #8
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	431a      	orrs	r2, r3
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	4313      	orrs	r3, r2
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	4313      	orrs	r3, r2
 8006098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	609a      	str	r2, [r3, #8]
}
 80060a0:	bf00      	nop
 80060a2:	371c      	adds	r7, #28
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d101      	bne.n	80060c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060c0:	2302      	movs	r3, #2
 80060c2:	e050      	b.n	8006166 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a1c      	ldr	r2, [pc, #112]	; (8006174 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d018      	beq.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006110:	d013      	beq.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a18      	ldr	r2, [pc, #96]	; (8006178 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d00e      	beq.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a16      	ldr	r2, [pc, #88]	; (800617c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d009      	beq.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a15      	ldr	r2, [pc, #84]	; (8006180 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d004      	beq.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a13      	ldr	r2, [pc, #76]	; (8006184 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d10c      	bne.n	8006154 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006140:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	4313      	orrs	r3, r2
 800614a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	40010000 	.word	0x40010000
 8006178:	40000400 	.word	0x40000400
 800617c:	40000800 	.word	0x40000800
 8006180:	40000c00 	.word	0x40000c00
 8006184:	40014000 	.word	0x40014000

08006188 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e03f      	b.n	8006242 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d106      	bne.n	80061dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7fb ffae 	bl	8002138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2224      	movs	r2, #36	; 0x24
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68da      	ldr	r2, [r3, #12]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f829 	bl	800624c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	691a      	ldr	r2, [r3, #16]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006208:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	695a      	ldr	r2, [r3, #20]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006218:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68da      	ldr	r2, [r3, #12]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006228:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2220      	movs	r2, #32
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2220      	movs	r2, #32
 800623c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800624c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006250:	b0c0      	sub	sp, #256	; 0x100
 8006252:	af00      	add	r7, sp, #0
 8006254:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006268:	68d9      	ldr	r1, [r3, #12]
 800626a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	ea40 0301 	orr.w	r3, r0, r1
 8006274:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	431a      	orrs	r2, r3
 8006284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	431a      	orrs	r2, r3
 800628c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	4313      	orrs	r3, r2
 8006294:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062a4:	f021 010c 	bic.w	r1, r1, #12
 80062a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062b2:	430b      	orrs	r3, r1
 80062b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c6:	6999      	ldr	r1, [r3, #24]
 80062c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	ea40 0301 	orr.w	r3, r0, r1
 80062d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	4b8f      	ldr	r3, [pc, #572]	; (8006518 <UART_SetConfig+0x2cc>)
 80062dc:	429a      	cmp	r2, r3
 80062de:	d005      	beq.n	80062ec <UART_SetConfig+0xa0>
 80062e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	4b8d      	ldr	r3, [pc, #564]	; (800651c <UART_SetConfig+0x2d0>)
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d104      	bne.n	80062f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062ec:	f7ff fafc 	bl	80058e8 <HAL_RCC_GetPCLK2Freq>
 80062f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80062f4:	e003      	b.n	80062fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062f6:	f7ff fae3 	bl	80058c0 <HAL_RCC_GetPCLK1Freq>
 80062fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006308:	f040 810c 	bne.w	8006524 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800630c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006310:	2200      	movs	r2, #0
 8006312:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006316:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800631a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800631e:	4622      	mov	r2, r4
 8006320:	462b      	mov	r3, r5
 8006322:	1891      	adds	r1, r2, r2
 8006324:	65b9      	str	r1, [r7, #88]	; 0x58
 8006326:	415b      	adcs	r3, r3
 8006328:	65fb      	str	r3, [r7, #92]	; 0x5c
 800632a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800632e:	4621      	mov	r1, r4
 8006330:	eb12 0801 	adds.w	r8, r2, r1
 8006334:	4629      	mov	r1, r5
 8006336:	eb43 0901 	adc.w	r9, r3, r1
 800633a:	f04f 0200 	mov.w	r2, #0
 800633e:	f04f 0300 	mov.w	r3, #0
 8006342:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006346:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800634a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800634e:	4690      	mov	r8, r2
 8006350:	4699      	mov	r9, r3
 8006352:	4623      	mov	r3, r4
 8006354:	eb18 0303 	adds.w	r3, r8, r3
 8006358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800635c:	462b      	mov	r3, r5
 800635e:	eb49 0303 	adc.w	r3, r9, r3
 8006362:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006372:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006376:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800637a:	460b      	mov	r3, r1
 800637c:	18db      	adds	r3, r3, r3
 800637e:	653b      	str	r3, [r7, #80]	; 0x50
 8006380:	4613      	mov	r3, r2
 8006382:	eb42 0303 	adc.w	r3, r2, r3
 8006386:	657b      	str	r3, [r7, #84]	; 0x54
 8006388:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800638c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006390:	f7fa fc62 	bl	8000c58 <__aeabi_uldivmod>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	4b61      	ldr	r3, [pc, #388]	; (8006520 <UART_SetConfig+0x2d4>)
 800639a:	fba3 2302 	umull	r2, r3, r3, r2
 800639e:	095b      	lsrs	r3, r3, #5
 80063a0:	011c      	lsls	r4, r3, #4
 80063a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063a6:	2200      	movs	r2, #0
 80063a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80063b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80063b4:	4642      	mov	r2, r8
 80063b6:	464b      	mov	r3, r9
 80063b8:	1891      	adds	r1, r2, r2
 80063ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80063bc:	415b      	adcs	r3, r3
 80063be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80063c4:	4641      	mov	r1, r8
 80063c6:	eb12 0a01 	adds.w	sl, r2, r1
 80063ca:	4649      	mov	r1, r9
 80063cc:	eb43 0b01 	adc.w	fp, r3, r1
 80063d0:	f04f 0200 	mov.w	r2, #0
 80063d4:	f04f 0300 	mov.w	r3, #0
 80063d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063e4:	4692      	mov	sl, r2
 80063e6:	469b      	mov	fp, r3
 80063e8:	4643      	mov	r3, r8
 80063ea:	eb1a 0303 	adds.w	r3, sl, r3
 80063ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063f2:	464b      	mov	r3, r9
 80063f4:	eb4b 0303 	adc.w	r3, fp, r3
 80063f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006408:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800640c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006410:	460b      	mov	r3, r1
 8006412:	18db      	adds	r3, r3, r3
 8006414:	643b      	str	r3, [r7, #64]	; 0x40
 8006416:	4613      	mov	r3, r2
 8006418:	eb42 0303 	adc.w	r3, r2, r3
 800641c:	647b      	str	r3, [r7, #68]	; 0x44
 800641e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006422:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006426:	f7fa fc17 	bl	8000c58 <__aeabi_uldivmod>
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	4611      	mov	r1, r2
 8006430:	4b3b      	ldr	r3, [pc, #236]	; (8006520 <UART_SetConfig+0x2d4>)
 8006432:	fba3 2301 	umull	r2, r3, r3, r1
 8006436:	095b      	lsrs	r3, r3, #5
 8006438:	2264      	movs	r2, #100	; 0x64
 800643a:	fb02 f303 	mul.w	r3, r2, r3
 800643e:	1acb      	subs	r3, r1, r3
 8006440:	00db      	lsls	r3, r3, #3
 8006442:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006446:	4b36      	ldr	r3, [pc, #216]	; (8006520 <UART_SetConfig+0x2d4>)
 8006448:	fba3 2302 	umull	r2, r3, r3, r2
 800644c:	095b      	lsrs	r3, r3, #5
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006454:	441c      	add	r4, r3
 8006456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800645a:	2200      	movs	r2, #0
 800645c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006460:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006464:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006468:	4642      	mov	r2, r8
 800646a:	464b      	mov	r3, r9
 800646c:	1891      	adds	r1, r2, r2
 800646e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006470:	415b      	adcs	r3, r3
 8006472:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006474:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006478:	4641      	mov	r1, r8
 800647a:	1851      	adds	r1, r2, r1
 800647c:	6339      	str	r1, [r7, #48]	; 0x30
 800647e:	4649      	mov	r1, r9
 8006480:	414b      	adcs	r3, r1
 8006482:	637b      	str	r3, [r7, #52]	; 0x34
 8006484:	f04f 0200 	mov.w	r2, #0
 8006488:	f04f 0300 	mov.w	r3, #0
 800648c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006490:	4659      	mov	r1, fp
 8006492:	00cb      	lsls	r3, r1, #3
 8006494:	4651      	mov	r1, sl
 8006496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800649a:	4651      	mov	r1, sl
 800649c:	00ca      	lsls	r2, r1, #3
 800649e:	4610      	mov	r0, r2
 80064a0:	4619      	mov	r1, r3
 80064a2:	4603      	mov	r3, r0
 80064a4:	4642      	mov	r2, r8
 80064a6:	189b      	adds	r3, r3, r2
 80064a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064ac:	464b      	mov	r3, r9
 80064ae:	460a      	mov	r2, r1
 80064b0:	eb42 0303 	adc.w	r3, r2, r3
 80064b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80064c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80064cc:	460b      	mov	r3, r1
 80064ce:	18db      	adds	r3, r3, r3
 80064d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80064d2:	4613      	mov	r3, r2
 80064d4:	eb42 0303 	adc.w	r3, r2, r3
 80064d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80064e2:	f7fa fbb9 	bl	8000c58 <__aeabi_uldivmod>
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
 80064ea:	4b0d      	ldr	r3, [pc, #52]	; (8006520 <UART_SetConfig+0x2d4>)
 80064ec:	fba3 1302 	umull	r1, r3, r3, r2
 80064f0:	095b      	lsrs	r3, r3, #5
 80064f2:	2164      	movs	r1, #100	; 0x64
 80064f4:	fb01 f303 	mul.w	r3, r1, r3
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	00db      	lsls	r3, r3, #3
 80064fc:	3332      	adds	r3, #50	; 0x32
 80064fe:	4a08      	ldr	r2, [pc, #32]	; (8006520 <UART_SetConfig+0x2d4>)
 8006500:	fba2 2303 	umull	r2, r3, r2, r3
 8006504:	095b      	lsrs	r3, r3, #5
 8006506:	f003 0207 	and.w	r2, r3, #7
 800650a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4422      	add	r2, r4
 8006512:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006514:	e105      	b.n	8006722 <UART_SetConfig+0x4d6>
 8006516:	bf00      	nop
 8006518:	40011000 	.word	0x40011000
 800651c:	40011400 	.word	0x40011400
 8006520:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006528:	2200      	movs	r2, #0
 800652a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800652e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006532:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006536:	4642      	mov	r2, r8
 8006538:	464b      	mov	r3, r9
 800653a:	1891      	adds	r1, r2, r2
 800653c:	6239      	str	r1, [r7, #32]
 800653e:	415b      	adcs	r3, r3
 8006540:	627b      	str	r3, [r7, #36]	; 0x24
 8006542:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006546:	4641      	mov	r1, r8
 8006548:	1854      	adds	r4, r2, r1
 800654a:	4649      	mov	r1, r9
 800654c:	eb43 0501 	adc.w	r5, r3, r1
 8006550:	f04f 0200 	mov.w	r2, #0
 8006554:	f04f 0300 	mov.w	r3, #0
 8006558:	00eb      	lsls	r3, r5, #3
 800655a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800655e:	00e2      	lsls	r2, r4, #3
 8006560:	4614      	mov	r4, r2
 8006562:	461d      	mov	r5, r3
 8006564:	4643      	mov	r3, r8
 8006566:	18e3      	adds	r3, r4, r3
 8006568:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800656c:	464b      	mov	r3, r9
 800656e:	eb45 0303 	adc.w	r3, r5, r3
 8006572:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006582:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006586:	f04f 0200 	mov.w	r2, #0
 800658a:	f04f 0300 	mov.w	r3, #0
 800658e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006592:	4629      	mov	r1, r5
 8006594:	008b      	lsls	r3, r1, #2
 8006596:	4621      	mov	r1, r4
 8006598:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800659c:	4621      	mov	r1, r4
 800659e:	008a      	lsls	r2, r1, #2
 80065a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80065a4:	f7fa fb58 	bl	8000c58 <__aeabi_uldivmod>
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	4b60      	ldr	r3, [pc, #384]	; (8006730 <UART_SetConfig+0x4e4>)
 80065ae:	fba3 2302 	umull	r2, r3, r3, r2
 80065b2:	095b      	lsrs	r3, r3, #5
 80065b4:	011c      	lsls	r4, r3, #4
 80065b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065ba:	2200      	movs	r2, #0
 80065bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80065c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80065c8:	4642      	mov	r2, r8
 80065ca:	464b      	mov	r3, r9
 80065cc:	1891      	adds	r1, r2, r2
 80065ce:	61b9      	str	r1, [r7, #24]
 80065d0:	415b      	adcs	r3, r3
 80065d2:	61fb      	str	r3, [r7, #28]
 80065d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065d8:	4641      	mov	r1, r8
 80065da:	1851      	adds	r1, r2, r1
 80065dc:	6139      	str	r1, [r7, #16]
 80065de:	4649      	mov	r1, r9
 80065e0:	414b      	adcs	r3, r1
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	f04f 0200 	mov.w	r2, #0
 80065e8:	f04f 0300 	mov.w	r3, #0
 80065ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065f0:	4659      	mov	r1, fp
 80065f2:	00cb      	lsls	r3, r1, #3
 80065f4:	4651      	mov	r1, sl
 80065f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065fa:	4651      	mov	r1, sl
 80065fc:	00ca      	lsls	r2, r1, #3
 80065fe:	4610      	mov	r0, r2
 8006600:	4619      	mov	r1, r3
 8006602:	4603      	mov	r3, r0
 8006604:	4642      	mov	r2, r8
 8006606:	189b      	adds	r3, r3, r2
 8006608:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800660c:	464b      	mov	r3, r9
 800660e:	460a      	mov	r2, r1
 8006610:	eb42 0303 	adc.w	r3, r2, r3
 8006614:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	67bb      	str	r3, [r7, #120]	; 0x78
 8006622:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	f04f 0300 	mov.w	r3, #0
 800662c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006630:	4649      	mov	r1, r9
 8006632:	008b      	lsls	r3, r1, #2
 8006634:	4641      	mov	r1, r8
 8006636:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800663a:	4641      	mov	r1, r8
 800663c:	008a      	lsls	r2, r1, #2
 800663e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006642:	f7fa fb09 	bl	8000c58 <__aeabi_uldivmod>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	4b39      	ldr	r3, [pc, #228]	; (8006730 <UART_SetConfig+0x4e4>)
 800664c:	fba3 1302 	umull	r1, r3, r3, r2
 8006650:	095b      	lsrs	r3, r3, #5
 8006652:	2164      	movs	r1, #100	; 0x64
 8006654:	fb01 f303 	mul.w	r3, r1, r3
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	011b      	lsls	r3, r3, #4
 800665c:	3332      	adds	r3, #50	; 0x32
 800665e:	4a34      	ldr	r2, [pc, #208]	; (8006730 <UART_SetConfig+0x4e4>)
 8006660:	fba2 2303 	umull	r2, r3, r2, r3
 8006664:	095b      	lsrs	r3, r3, #5
 8006666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800666a:	441c      	add	r4, r3
 800666c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006670:	2200      	movs	r2, #0
 8006672:	673b      	str	r3, [r7, #112]	; 0x70
 8006674:	677a      	str	r2, [r7, #116]	; 0x74
 8006676:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800667a:	4642      	mov	r2, r8
 800667c:	464b      	mov	r3, r9
 800667e:	1891      	adds	r1, r2, r2
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	415b      	adcs	r3, r3
 8006684:	60fb      	str	r3, [r7, #12]
 8006686:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800668a:	4641      	mov	r1, r8
 800668c:	1851      	adds	r1, r2, r1
 800668e:	6039      	str	r1, [r7, #0]
 8006690:	4649      	mov	r1, r9
 8006692:	414b      	adcs	r3, r1
 8006694:	607b      	str	r3, [r7, #4]
 8006696:	f04f 0200 	mov.w	r2, #0
 800669a:	f04f 0300 	mov.w	r3, #0
 800669e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066a2:	4659      	mov	r1, fp
 80066a4:	00cb      	lsls	r3, r1, #3
 80066a6:	4651      	mov	r1, sl
 80066a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066ac:	4651      	mov	r1, sl
 80066ae:	00ca      	lsls	r2, r1, #3
 80066b0:	4610      	mov	r0, r2
 80066b2:	4619      	mov	r1, r3
 80066b4:	4603      	mov	r3, r0
 80066b6:	4642      	mov	r2, r8
 80066b8:	189b      	adds	r3, r3, r2
 80066ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80066bc:	464b      	mov	r3, r9
 80066be:	460a      	mov	r2, r1
 80066c0:	eb42 0303 	adc.w	r3, r2, r3
 80066c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	663b      	str	r3, [r7, #96]	; 0x60
 80066d0:	667a      	str	r2, [r7, #100]	; 0x64
 80066d2:	f04f 0200 	mov.w	r2, #0
 80066d6:	f04f 0300 	mov.w	r3, #0
 80066da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80066de:	4649      	mov	r1, r9
 80066e0:	008b      	lsls	r3, r1, #2
 80066e2:	4641      	mov	r1, r8
 80066e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066e8:	4641      	mov	r1, r8
 80066ea:	008a      	lsls	r2, r1, #2
 80066ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80066f0:	f7fa fab2 	bl	8000c58 <__aeabi_uldivmod>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	4b0d      	ldr	r3, [pc, #52]	; (8006730 <UART_SetConfig+0x4e4>)
 80066fa:	fba3 1302 	umull	r1, r3, r3, r2
 80066fe:	095b      	lsrs	r3, r3, #5
 8006700:	2164      	movs	r1, #100	; 0x64
 8006702:	fb01 f303 	mul.w	r3, r1, r3
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	011b      	lsls	r3, r3, #4
 800670a:	3332      	adds	r3, #50	; 0x32
 800670c:	4a08      	ldr	r2, [pc, #32]	; (8006730 <UART_SetConfig+0x4e4>)
 800670e:	fba2 2303 	umull	r2, r3, r2, r3
 8006712:	095b      	lsrs	r3, r3, #5
 8006714:	f003 020f 	and.w	r2, r3, #15
 8006718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4422      	add	r2, r4
 8006720:	609a      	str	r2, [r3, #8]
}
 8006722:	bf00      	nop
 8006724:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006728:	46bd      	mov	sp, r7
 800672a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800672e:	bf00      	nop
 8006730:	51eb851f 	.word	0x51eb851f

08006734 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006734:	b084      	sub	sp, #16
 8006736:	b580      	push	{r7, lr}
 8006738:	b084      	sub	sp, #16
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	f107 001c 	add.w	r0, r7, #28
 8006742:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006748:	2b01      	cmp	r3, #1
 800674a:	d122      	bne.n	8006792 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006750:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006776:	2b01      	cmp	r3, #1
 8006778:	d105      	bne.n	8006786 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	68db      	ldr	r3, [r3, #12]
 800677e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f001 fbee 	bl	8007f68 <USB_CoreReset>
 800678c:	4603      	mov	r3, r0
 800678e:	73fb      	strb	r3, [r7, #15]
 8006790:	e01a      	b.n	80067c8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f001 fbe2 	bl	8007f68 <USB_CoreReset>
 80067a4:	4603      	mov	r3, r0
 80067a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80067a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d106      	bne.n	80067bc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	639a      	str	r2, [r3, #56]	; 0x38
 80067ba:	e005      	b.n	80067c8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80067c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d10b      	bne.n	80067e6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f043 0206 	orr.w	r2, r3, #6
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f043 0220 	orr.w	r2, r3, #32
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067f2:	b004      	add	sp, #16
 80067f4:	4770      	bx	lr
	...

080067f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	4613      	mov	r3, r2
 8006804:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006806:	79fb      	ldrb	r3, [r7, #7]
 8006808:	2b02      	cmp	r3, #2
 800680a:	d165      	bne.n	80068d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	4a41      	ldr	r2, [pc, #260]	; (8006914 <USB_SetTurnaroundTime+0x11c>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d906      	bls.n	8006822 <USB_SetTurnaroundTime+0x2a>
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	4a40      	ldr	r2, [pc, #256]	; (8006918 <USB_SetTurnaroundTime+0x120>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d202      	bcs.n	8006822 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800681c:	230f      	movs	r3, #15
 800681e:	617b      	str	r3, [r7, #20]
 8006820:	e062      	b.n	80068e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	4a3c      	ldr	r2, [pc, #240]	; (8006918 <USB_SetTurnaroundTime+0x120>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d306      	bcc.n	8006838 <USB_SetTurnaroundTime+0x40>
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	4a3b      	ldr	r2, [pc, #236]	; (800691c <USB_SetTurnaroundTime+0x124>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d202      	bcs.n	8006838 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006832:	230e      	movs	r3, #14
 8006834:	617b      	str	r3, [r7, #20]
 8006836:	e057      	b.n	80068e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	4a38      	ldr	r2, [pc, #224]	; (800691c <USB_SetTurnaroundTime+0x124>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d306      	bcc.n	800684e <USB_SetTurnaroundTime+0x56>
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	4a37      	ldr	r2, [pc, #220]	; (8006920 <USB_SetTurnaroundTime+0x128>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d202      	bcs.n	800684e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006848:	230d      	movs	r3, #13
 800684a:	617b      	str	r3, [r7, #20]
 800684c:	e04c      	b.n	80068e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	4a33      	ldr	r2, [pc, #204]	; (8006920 <USB_SetTurnaroundTime+0x128>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d306      	bcc.n	8006864 <USB_SetTurnaroundTime+0x6c>
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	4a32      	ldr	r2, [pc, #200]	; (8006924 <USB_SetTurnaroundTime+0x12c>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d802      	bhi.n	8006864 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800685e:	230c      	movs	r3, #12
 8006860:	617b      	str	r3, [r7, #20]
 8006862:	e041      	b.n	80068e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	4a2f      	ldr	r2, [pc, #188]	; (8006924 <USB_SetTurnaroundTime+0x12c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d906      	bls.n	800687a <USB_SetTurnaroundTime+0x82>
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	4a2e      	ldr	r2, [pc, #184]	; (8006928 <USB_SetTurnaroundTime+0x130>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d802      	bhi.n	800687a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006874:	230b      	movs	r3, #11
 8006876:	617b      	str	r3, [r7, #20]
 8006878:	e036      	b.n	80068e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	4a2a      	ldr	r2, [pc, #168]	; (8006928 <USB_SetTurnaroundTime+0x130>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d906      	bls.n	8006890 <USB_SetTurnaroundTime+0x98>
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	4a29      	ldr	r2, [pc, #164]	; (800692c <USB_SetTurnaroundTime+0x134>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d802      	bhi.n	8006890 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800688a:	230a      	movs	r3, #10
 800688c:	617b      	str	r3, [r7, #20]
 800688e:	e02b      	b.n	80068e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	4a26      	ldr	r2, [pc, #152]	; (800692c <USB_SetTurnaroundTime+0x134>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d906      	bls.n	80068a6 <USB_SetTurnaroundTime+0xae>
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	4a25      	ldr	r2, [pc, #148]	; (8006930 <USB_SetTurnaroundTime+0x138>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d202      	bcs.n	80068a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80068a0:	2309      	movs	r3, #9
 80068a2:	617b      	str	r3, [r7, #20]
 80068a4:	e020      	b.n	80068e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	4a21      	ldr	r2, [pc, #132]	; (8006930 <USB_SetTurnaroundTime+0x138>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d306      	bcc.n	80068bc <USB_SetTurnaroundTime+0xc4>
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	4a20      	ldr	r2, [pc, #128]	; (8006934 <USB_SetTurnaroundTime+0x13c>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d802      	bhi.n	80068bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80068b6:	2308      	movs	r3, #8
 80068b8:	617b      	str	r3, [r7, #20]
 80068ba:	e015      	b.n	80068e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	4a1d      	ldr	r2, [pc, #116]	; (8006934 <USB_SetTurnaroundTime+0x13c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d906      	bls.n	80068d2 <USB_SetTurnaroundTime+0xda>
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	4a1c      	ldr	r2, [pc, #112]	; (8006938 <USB_SetTurnaroundTime+0x140>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d202      	bcs.n	80068d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80068cc:	2307      	movs	r3, #7
 80068ce:	617b      	str	r3, [r7, #20]
 80068d0:	e00a      	b.n	80068e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80068d2:	2306      	movs	r3, #6
 80068d4:	617b      	str	r3, [r7, #20]
 80068d6:	e007      	b.n	80068e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80068d8:	79fb      	ldrb	r3, [r7, #7]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d102      	bne.n	80068e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80068de:	2309      	movs	r3, #9
 80068e0:	617b      	str	r3, [r7, #20]
 80068e2:	e001      	b.n	80068e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80068e4:	2309      	movs	r3, #9
 80068e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	029b      	lsls	r3, r3, #10
 80068fc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006900:	431a      	orrs	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	371c      	adds	r7, #28
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	00d8acbf 	.word	0x00d8acbf
 8006918:	00e4e1c0 	.word	0x00e4e1c0
 800691c:	00f42400 	.word	0x00f42400
 8006920:	01067380 	.word	0x01067380
 8006924:	011a499f 	.word	0x011a499f
 8006928:	01312cff 	.word	0x01312cff
 800692c:	014ca43f 	.word	0x014ca43f
 8006930:	016e3600 	.word	0x016e3600
 8006934:	01a6ab1f 	.word	0x01a6ab1f
 8006938:	01e84800 	.word	0x01e84800

0800693c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f043 0201 	orr.w	r2, r3, #1
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	370c      	adds	r7, #12
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800695e:	b480      	push	{r7}
 8006960:	b083      	sub	sp, #12
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f023 0201 	bic.w	r2, r3, #1
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	460b      	mov	r3, r1
 800698a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800698c:	2300      	movs	r3, #0
 800698e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800699c:	78fb      	ldrb	r3, [r7, #3]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d115      	bne.n	80069ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80069ae:	2001      	movs	r0, #1
 80069b0:	f7fb fe06 	bl	80025c0 <HAL_Delay>
      ms++;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	3301      	adds	r3, #1
 80069b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f001 fa45 	bl	8007e4a <USB_GetMode>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d01e      	beq.n	8006a04 <USB_SetCurrentMode+0x84>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2b31      	cmp	r3, #49	; 0x31
 80069ca:	d9f0      	bls.n	80069ae <USB_SetCurrentMode+0x2e>
 80069cc:	e01a      	b.n	8006a04 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80069ce:	78fb      	ldrb	r3, [r7, #3]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d115      	bne.n	8006a00 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80069e0:	2001      	movs	r0, #1
 80069e2:	f7fb fded 	bl	80025c0 <HAL_Delay>
      ms++;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	3301      	adds	r3, #1
 80069ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f001 fa2c 	bl	8007e4a <USB_GetMode>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d005      	beq.n	8006a04 <USB_SetCurrentMode+0x84>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b31      	cmp	r3, #49	; 0x31
 80069fc:	d9f0      	bls.n	80069e0 <USB_SetCurrentMode+0x60>
 80069fe:	e001      	b.n	8006a04 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e005      	b.n	8006a10 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b32      	cmp	r3, #50	; 0x32
 8006a08:	d101      	bne.n	8006a0e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e000      	b.n	8006a10 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a18:	b084      	sub	sp, #16
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b086      	sub	sp, #24
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
 8006a22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006a26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006a32:	2300      	movs	r3, #0
 8006a34:	613b      	str	r3, [r7, #16]
 8006a36:	e009      	b.n	8006a4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	3340      	adds	r3, #64	; 0x40
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	2200      	movs	r2, #0
 8006a44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	613b      	str	r3, [r7, #16]
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	2b0e      	cmp	r3, #14
 8006a50:	d9f2      	bls.n	8006a38 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d11c      	bne.n	8006a92 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a66:	f043 0302 	orr.w	r3, r3, #2
 8006a6a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a70:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a88:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	639a      	str	r2, [r3, #56]	; 0x38
 8006a90:	e00b      	b.n	8006aaa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a96:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006abc:	4619      	mov	r1, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	680b      	ldr	r3, [r1, #0]
 8006ac8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d10c      	bne.n	8006aea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d104      	bne.n	8006ae0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f965 	bl	8006da8 <USB_SetDevSpeed>
 8006ade:	e008      	b.n	8006af2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f960 	bl	8006da8 <USB_SetDevSpeed>
 8006ae8:	e003      	b.n	8006af2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006aea:	2103      	movs	r1, #3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f95b 	bl	8006da8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006af2:	2110      	movs	r1, #16
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f8f3 	bl	8006ce0 <USB_FlushTxFifo>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d001      	beq.n	8006b04 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f000 f91f 	bl	8006d48 <USB_FlushRxFifo>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d001      	beq.n	8006b14 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b26:	461a      	mov	r2, r3
 8006b28:	2300      	movs	r3, #0
 8006b2a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b32:	461a      	mov	r2, r3
 8006b34:	2300      	movs	r3, #0
 8006b36:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b38:	2300      	movs	r3, #0
 8006b3a:	613b      	str	r3, [r7, #16]
 8006b3c:	e043      	b.n	8006bc6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	015a      	lsls	r2, r3, #5
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	4413      	add	r3, r2
 8006b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b54:	d118      	bne.n	8006b88 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10a      	bne.n	8006b72 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	015a      	lsls	r2, r3, #5
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4413      	add	r3, r2
 8006b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b68:	461a      	mov	r2, r3
 8006b6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b6e:	6013      	str	r3, [r2, #0]
 8006b70:	e013      	b.n	8006b9a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b7e:	461a      	mov	r2, r3
 8006b80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b84:	6013      	str	r3, [r2, #0]
 8006b86:	e008      	b.n	8006b9a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b94:	461a      	mov	r2, r3
 8006b96:	2300      	movs	r3, #0
 8006b98:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	2300      	movs	r3, #0
 8006baa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	015a      	lsls	r2, r3, #5
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb8:	461a      	mov	r2, r3
 8006bba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006bbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	613b      	str	r3, [r7, #16]
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d3b7      	bcc.n	8006b3e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bce:	2300      	movs	r3, #0
 8006bd0:	613b      	str	r3, [r7, #16]
 8006bd2:	e043      	b.n	8006c5c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006be6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bea:	d118      	bne.n	8006c1e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10a      	bne.n	8006c08 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	015a      	lsls	r2, r3, #5
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bfe:	461a      	mov	r2, r3
 8006c00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c04:	6013      	str	r3, [r2, #0]
 8006c06:	e013      	b.n	8006c30 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	015a      	lsls	r2, r3, #5
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c14:	461a      	mov	r2, r3
 8006c16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c1a:	6013      	str	r3, [r2, #0]
 8006c1c:	e008      	b.n	8006c30 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	015a      	lsls	r2, r3, #5
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	4413      	add	r3, r2
 8006c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	2300      	movs	r3, #0
 8006c40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	613b      	str	r3, [r7, #16]
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d3b7      	bcc.n	8006bd4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c76:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006c84:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d105      	bne.n	8006c98 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	f043 0210 	orr.w	r2, r3, #16
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	699a      	ldr	r2, [r3, #24]
 8006c9c:	4b0f      	ldr	r3, [pc, #60]	; (8006cdc <USB_DevInit+0x2c4>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d005      	beq.n	8006cb6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	f043 0208 	orr.w	r2, r3, #8
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d107      	bne.n	8006ccc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cc4:	f043 0304 	orr.w	r3, r3, #4
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3718      	adds	r7, #24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cd8:	b004      	add	sp, #16
 8006cda:	4770      	bx	lr
 8006cdc:	803c3800 	.word	0x803c3800

08006ce0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006cea:	2300      	movs	r3, #0
 8006cec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4a13      	ldr	r2, [pc, #76]	; (8006d44 <USB_FlushTxFifo+0x64>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d901      	bls.n	8006d00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e01b      	b.n	8006d38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	daf2      	bge.n	8006cee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	019b      	lsls	r3, r3, #6
 8006d10:	f043 0220 	orr.w	r2, r3, #32
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	4a08      	ldr	r2, [pc, #32]	; (8006d44 <USB_FlushTxFifo+0x64>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d901      	bls.n	8006d2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e006      	b.n	8006d38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	f003 0320 	and.w	r3, r3, #32
 8006d32:	2b20      	cmp	r3, #32
 8006d34:	d0f0      	beq.n	8006d18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3714      	adds	r7, #20
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	00030d40 	.word	0x00030d40

08006d48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	3301      	adds	r3, #1
 8006d58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	4a11      	ldr	r2, [pc, #68]	; (8006da4 <USB_FlushRxFifo+0x5c>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d901      	bls.n	8006d66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e018      	b.n	8006d98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	daf2      	bge.n	8006d54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2210      	movs	r2, #16
 8006d76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	4a08      	ldr	r2, [pc, #32]	; (8006da4 <USB_FlushRxFifo+0x5c>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d901      	bls.n	8006d8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e006      	b.n	8006d98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	f003 0310 	and.w	r3, r3, #16
 8006d92:	2b10      	cmp	r3, #16
 8006d94:	d0f0      	beq.n	8006d78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	00030d40 	.word	0x00030d40

08006da8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	78fb      	ldrb	r3, [r7, #3]
 8006dc2:	68f9      	ldr	r1, [r7, #12]
 8006dc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3714      	adds	r7, #20
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b087      	sub	sp, #28
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f003 0306 	and.w	r3, r3, #6
 8006df2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d102      	bne.n	8006e00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	75fb      	strb	r3, [r7, #23]
 8006dfe:	e00a      	b.n	8006e16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d002      	beq.n	8006e0c <USB_GetDevSpeed+0x32>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2b06      	cmp	r3, #6
 8006e0a:	d102      	bne.n	8006e12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	75fb      	strb	r3, [r7, #23]
 8006e10:	e001      	b.n	8006e16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006e12:	230f      	movs	r3, #15
 8006e14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	371c      	adds	r7, #28
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	785b      	ldrb	r3, [r3, #1]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d13a      	bne.n	8006eb6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e46:	69da      	ldr	r2, [r3, #28]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	f003 030f 	and.w	r3, r3, #15
 8006e50:	2101      	movs	r1, #1
 8006e52:	fa01 f303 	lsl.w	r3, r1, r3
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	68f9      	ldr	r1, [r7, #12]
 8006e5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	015a      	lsls	r2, r3, #5
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d155      	bne.n	8006f24 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	791b      	ldrb	r3, [r3, #4]
 8006e92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	059b      	lsls	r3, r3, #22
 8006e9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	0151      	lsls	r1, r2, #5
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	440a      	add	r2, r1
 8006ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eb2:	6013      	str	r3, [r2, #0]
 8006eb4:	e036      	b.n	8006f24 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ebc:	69da      	ldr	r2, [r3, #28]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	f003 030f 	and.w	r3, r3, #15
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8006ecc:	041b      	lsls	r3, r3, #16
 8006ece:	68f9      	ldr	r1, [r7, #12]
 8006ed0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	015a      	lsls	r2, r3, #5
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d11a      	bne.n	8006f24 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	791b      	ldrb	r3, [r3, #4]
 8006f08:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f0a:	430b      	orrs	r3, r1
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	0151      	lsls	r1, r2, #5
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	440a      	add	r2, r1
 8006f16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f22:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
	...

08006f34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	785b      	ldrb	r3, [r3, #1]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d161      	bne.n	8007014 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	015a      	lsls	r2, r3, #5
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4413      	add	r3, r2
 8006f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f66:	d11f      	bne.n	8006fa8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	0151      	lsls	r1, r2, #5
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	440a      	add	r2, r1
 8006f7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f86:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	015a      	lsls	r2, r3, #5
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	0151      	lsls	r1, r2, #5
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	440a      	add	r2, r1
 8006f9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fa2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fa6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	f003 030f 	and.w	r3, r3, #15
 8006fb8:	2101      	movs	r1, #1
 8006fba:	fa01 f303 	lsl.w	r3, r1, r3
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	43db      	mvns	r3, r3
 8006fc2:	68f9      	ldr	r1, [r7, #12]
 8006fc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fc8:	4013      	ands	r3, r2
 8006fca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd2:	69da      	ldr	r2, [r3, #28]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	f003 030f 	and.w	r3, r3, #15
 8006fdc:	2101      	movs	r1, #1
 8006fde:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	43db      	mvns	r3, r3
 8006fe6:	68f9      	ldr	r1, [r7, #12]
 8006fe8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fec:	4013      	ands	r3, r2
 8006fee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	0159      	lsls	r1, r3, #5
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	440b      	add	r3, r1
 8007006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800700a:	4619      	mov	r1, r3
 800700c:	4b35      	ldr	r3, [pc, #212]	; (80070e4 <USB_DeactivateEndpoint+0x1b0>)
 800700e:	4013      	ands	r3, r2
 8007010:	600b      	str	r3, [r1, #0]
 8007012:	e060      	b.n	80070d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007026:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800702a:	d11f      	bne.n	800706c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4413      	add	r3, r2
 8007034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	0151      	lsls	r1, r2, #5
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	440a      	add	r2, r1
 8007042:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007046:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800704a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	0151      	lsls	r1, r2, #5
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	440a      	add	r2, r1
 8007062:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007066:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800706a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007072:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	f003 030f 	and.w	r3, r3, #15
 800707c:	2101      	movs	r1, #1
 800707e:	fa01 f303 	lsl.w	r3, r1, r3
 8007082:	041b      	lsls	r3, r3, #16
 8007084:	43db      	mvns	r3, r3
 8007086:	68f9      	ldr	r1, [r7, #12]
 8007088:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800708c:	4013      	ands	r3, r2
 800708e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007096:	69da      	ldr	r2, [r3, #28]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	f003 030f 	and.w	r3, r3, #15
 80070a0:	2101      	movs	r1, #1
 80070a2:	fa01 f303 	lsl.w	r3, r1, r3
 80070a6:	041b      	lsls	r3, r3, #16
 80070a8:	43db      	mvns	r3, r3
 80070aa:	68f9      	ldr	r1, [r7, #12]
 80070ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070b0:	4013      	ands	r3, r2
 80070b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	0159      	lsls	r1, r3, #5
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	440b      	add	r3, r1
 80070ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ce:	4619      	mov	r1, r3
 80070d0:	4b05      	ldr	r3, [pc, #20]	; (80070e8 <USB_DeactivateEndpoint+0x1b4>)
 80070d2:	4013      	ands	r3, r2
 80070d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3714      	adds	r7, #20
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	ec337800 	.word	0xec337800
 80070e8:	eff37800 	.word	0xeff37800

080070ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b08a      	sub	sp, #40	; 0x28
 80070f0:	af02      	add	r7, sp, #8
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	4613      	mov	r3, r2
 80070f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	785b      	ldrb	r3, [r3, #1]
 8007108:	2b01      	cmp	r3, #1
 800710a:	f040 815c 	bne.w	80073c6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d132      	bne.n	800717c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	69ba      	ldr	r2, [r7, #24]
 8007126:	0151      	lsls	r1, r2, #5
 8007128:	69fa      	ldr	r2, [r7, #28]
 800712a:	440a      	add	r2, r1
 800712c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007130:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007134:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007138:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	015a      	lsls	r2, r3, #5
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	4413      	add	r3, r2
 8007142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	69ba      	ldr	r2, [r7, #24]
 800714a:	0151      	lsls	r1, r2, #5
 800714c:	69fa      	ldr	r2, [r7, #28]
 800714e:	440a      	add	r2, r1
 8007150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007154:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007158:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	4413      	add	r3, r2
 8007162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	69ba      	ldr	r2, [r7, #24]
 800716a:	0151      	lsls	r1, r2, #5
 800716c:	69fa      	ldr	r2, [r7, #28]
 800716e:	440a      	add	r2, r1
 8007170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007174:	0cdb      	lsrs	r3, r3, #19
 8007176:	04db      	lsls	r3, r3, #19
 8007178:	6113      	str	r3, [r2, #16]
 800717a:	e074      	b.n	8007266 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	015a      	lsls	r2, r3, #5
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	4413      	add	r3, r2
 8007184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	69ba      	ldr	r2, [r7, #24]
 800718c:	0151      	lsls	r1, r2, #5
 800718e:	69fa      	ldr	r2, [r7, #28]
 8007190:	440a      	add	r2, r1
 8007192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007196:	0cdb      	lsrs	r3, r3, #19
 8007198:	04db      	lsls	r3, r3, #19
 800719a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	69ba      	ldr	r2, [r7, #24]
 80071ac:	0151      	lsls	r1, r2, #5
 80071ae:	69fa      	ldr	r2, [r7, #28]
 80071b0:	440a      	add	r2, r1
 80071b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071b6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071ba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071cc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	6999      	ldr	r1, [r3, #24]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	440b      	add	r3, r1
 80071d8:	1e59      	subs	r1, r3, #1
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	fbb1 f3f3 	udiv	r3, r1, r3
 80071e2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80071e4:	4b9d      	ldr	r3, [pc, #628]	; (800745c <USB_EPStartXfer+0x370>)
 80071e6:	400b      	ands	r3, r1
 80071e8:	69b9      	ldr	r1, [r7, #24]
 80071ea:	0148      	lsls	r0, r1, #5
 80071ec:	69f9      	ldr	r1, [r7, #28]
 80071ee:	4401      	add	r1, r0
 80071f0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80071f4:	4313      	orrs	r3, r2
 80071f6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007204:	691a      	ldr	r2, [r3, #16]
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800720e:	69b9      	ldr	r1, [r7, #24]
 8007210:	0148      	lsls	r0, r1, #5
 8007212:	69f9      	ldr	r1, [r7, #28]
 8007214:	4401      	add	r1, r0
 8007216:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800721a:	4313      	orrs	r3, r2
 800721c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	791b      	ldrb	r3, [r3, #4]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d11f      	bne.n	8007266 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	69ba      	ldr	r2, [r7, #24]
 8007236:	0151      	lsls	r1, r2, #5
 8007238:	69fa      	ldr	r2, [r7, #28]
 800723a:	440a      	add	r2, r1
 800723c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007240:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007244:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	015a      	lsls	r2, r3, #5
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	4413      	add	r3, r2
 800724e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	0151      	lsls	r1, r2, #5
 8007258:	69fa      	ldr	r2, [r7, #28]
 800725a:	440a      	add	r2, r1
 800725c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007260:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007264:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007266:	79fb      	ldrb	r3, [r7, #7]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d14b      	bne.n	8007304 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d009      	beq.n	8007288 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	4413      	add	r3, r2
 800727c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007280:	461a      	mov	r2, r3
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	791b      	ldrb	r3, [r3, #4]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d128      	bne.n	80072e2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800729c:	2b00      	cmp	r3, #0
 800729e:	d110      	bne.n	80072c2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	69ba      	ldr	r2, [r7, #24]
 80072b0:	0151      	lsls	r1, r2, #5
 80072b2:	69fa      	ldr	r2, [r7, #28]
 80072b4:	440a      	add	r2, r1
 80072b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072be:	6013      	str	r3, [r2, #0]
 80072c0:	e00f      	b.n	80072e2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	0151      	lsls	r1, r2, #5
 80072d4:	69fa      	ldr	r2, [r7, #28]
 80072d6:	440a      	add	r2, r1
 80072d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072e0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	69ba      	ldr	r2, [r7, #24]
 80072f2:	0151      	lsls	r1, r2, #5
 80072f4:	69fa      	ldr	r2, [r7, #28]
 80072f6:	440a      	add	r2, r1
 80072f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072fc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007300:	6013      	str	r3, [r2, #0]
 8007302:	e133      	b.n	800756c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	69ba      	ldr	r2, [r7, #24]
 8007314:	0151      	lsls	r1, r2, #5
 8007316:	69fa      	ldr	r2, [r7, #28]
 8007318:	440a      	add	r2, r1
 800731a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800731e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007322:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	791b      	ldrb	r3, [r3, #4]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d015      	beq.n	8007358 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	699b      	ldr	r3, [r3, #24]
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 811b 	beq.w	800756c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800733c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	f003 030f 	and.w	r3, r3, #15
 8007346:	2101      	movs	r1, #1
 8007348:	fa01 f303 	lsl.w	r3, r1, r3
 800734c:	69f9      	ldr	r1, [r7, #28]
 800734e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007352:	4313      	orrs	r3, r2
 8007354:	634b      	str	r3, [r1, #52]	; 0x34
 8007356:	e109      	b.n	800756c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007364:	2b00      	cmp	r3, #0
 8007366:	d110      	bne.n	800738a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	4413      	add	r3, r2
 8007370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	69ba      	ldr	r2, [r7, #24]
 8007378:	0151      	lsls	r1, r2, #5
 800737a:	69fa      	ldr	r2, [r7, #28]
 800737c:	440a      	add	r2, r1
 800737e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007382:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	e00f      	b.n	80073aa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	015a      	lsls	r2, r3, #5
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	4413      	add	r3, r2
 8007392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	0151      	lsls	r1, r2, #5
 800739c:	69fa      	ldr	r2, [r7, #28]
 800739e:	440a      	add	r2, r1
 80073a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073a8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	6919      	ldr	r1, [r3, #16]
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	781a      	ldrb	r2, [r3, #0]
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	b298      	uxth	r0, r3
 80073b8:	79fb      	ldrb	r3, [r7, #7]
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	4603      	mov	r3, r0
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f000 fade 	bl	8007980 <USB_WritePacket>
 80073c4:	e0d2      	b.n	800756c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	015a      	lsls	r2, r3, #5
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	4413      	add	r3, r2
 80073ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	69ba      	ldr	r2, [r7, #24]
 80073d6:	0151      	lsls	r1, r2, #5
 80073d8:	69fa      	ldr	r2, [r7, #28]
 80073da:	440a      	add	r2, r1
 80073dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073e0:	0cdb      	lsrs	r3, r3, #19
 80073e2:	04db      	lsls	r3, r3, #19
 80073e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	69ba      	ldr	r2, [r7, #24]
 80073f6:	0151      	lsls	r1, r2, #5
 80073f8:	69fa      	ldr	r2, [r7, #28]
 80073fa:	440a      	add	r2, r1
 80073fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007400:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007404:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007408:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d126      	bne.n	8007460 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	015a      	lsls	r2, r3, #5
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	4413      	add	r3, r2
 800741a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800741e:	691a      	ldr	r2, [r3, #16]
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007428:	69b9      	ldr	r1, [r7, #24]
 800742a:	0148      	lsls	r0, r1, #5
 800742c:	69f9      	ldr	r1, [r7, #28]
 800742e:	4401      	add	r1, r0
 8007430:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007434:	4313      	orrs	r3, r2
 8007436:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	4413      	add	r3, r2
 8007440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	0151      	lsls	r1, r2, #5
 800744a:	69fa      	ldr	r2, [r7, #28]
 800744c:	440a      	add	r2, r1
 800744e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007452:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007456:	6113      	str	r3, [r2, #16]
 8007458:	e03a      	b.n	80074d0 <USB_EPStartXfer+0x3e4>
 800745a:	bf00      	nop
 800745c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	699a      	ldr	r2, [r3, #24]
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	4413      	add	r3, r2
 800746a:	1e5a      	subs	r2, r3, #1
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	fbb2 f3f3 	udiv	r3, r2, r3
 8007474:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	8afa      	ldrh	r2, [r7, #22]
 800747c:	fb03 f202 	mul.w	r2, r3, r2
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007490:	691a      	ldr	r2, [r3, #16]
 8007492:	8afb      	ldrh	r3, [r7, #22]
 8007494:	04d9      	lsls	r1, r3, #19
 8007496:	4b38      	ldr	r3, [pc, #224]	; (8007578 <USB_EPStartXfer+0x48c>)
 8007498:	400b      	ands	r3, r1
 800749a:	69b9      	ldr	r1, [r7, #24]
 800749c:	0148      	lsls	r0, r1, #5
 800749e:	69f9      	ldr	r1, [r7, #28]
 80074a0:	4401      	add	r1, r0
 80074a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074a6:	4313      	orrs	r3, r2
 80074a8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	015a      	lsls	r2, r3, #5
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b6:	691a      	ldr	r2, [r3, #16]
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	69db      	ldr	r3, [r3, #28]
 80074bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074c0:	69b9      	ldr	r1, [r7, #24]
 80074c2:	0148      	lsls	r0, r1, #5
 80074c4:	69f9      	ldr	r1, [r7, #28]
 80074c6:	4401      	add	r1, r0
 80074c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074cc:	4313      	orrs	r3, r2
 80074ce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80074d0:	79fb      	ldrb	r3, [r7, #7]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d10d      	bne.n	80074f2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d009      	beq.n	80074f2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	6919      	ldr	r1, [r3, #16]
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	015a      	lsls	r2, r3, #5
 80074e6:	69fb      	ldr	r3, [r7, #28]
 80074e8:	4413      	add	r3, r2
 80074ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ee:	460a      	mov	r2, r1
 80074f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	791b      	ldrb	r3, [r3, #4]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d128      	bne.n	800754c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007506:	2b00      	cmp	r3, #0
 8007508:	d110      	bne.n	800752c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	015a      	lsls	r2, r3, #5
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	4413      	add	r3, r2
 8007512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	69ba      	ldr	r2, [r7, #24]
 800751a:	0151      	lsls	r1, r2, #5
 800751c:	69fa      	ldr	r2, [r7, #28]
 800751e:	440a      	add	r2, r1
 8007520:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007524:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007528:	6013      	str	r3, [r2, #0]
 800752a:	e00f      	b.n	800754c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	015a      	lsls	r2, r3, #5
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	4413      	add	r3, r2
 8007534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	69ba      	ldr	r2, [r7, #24]
 800753c:	0151      	lsls	r1, r2, #5
 800753e:	69fa      	ldr	r2, [r7, #28]
 8007540:	440a      	add	r2, r1
 8007542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800754a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	4413      	add	r3, r2
 8007554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	69ba      	ldr	r2, [r7, #24]
 800755c:	0151      	lsls	r1, r2, #5
 800755e:	69fa      	ldr	r2, [r7, #28]
 8007560:	440a      	add	r2, r1
 8007562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007566:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800756a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3720      	adds	r7, #32
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	1ff80000 	.word	0x1ff80000

0800757c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800757c:	b480      	push	{r7}
 800757e:	b087      	sub	sp, #28
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	4613      	mov	r3, r2
 8007588:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	785b      	ldrb	r3, [r3, #1]
 8007598:	2b01      	cmp	r3, #1
 800759a:	f040 80ce 	bne.w	800773a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d132      	bne.n	800760c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	015a      	lsls	r2, r3, #5
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	0151      	lsls	r1, r2, #5
 80075b8:	697a      	ldr	r2, [r7, #20]
 80075ba:	440a      	add	r2, r1
 80075bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80075c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80075c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	015a      	lsls	r2, r3, #5
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	4413      	add	r3, r2
 80075d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	0151      	lsls	r1, r2, #5
 80075dc:	697a      	ldr	r2, [r7, #20]
 80075de:	440a      	add	r2, r1
 80075e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	015a      	lsls	r2, r3, #5
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	4413      	add	r3, r2
 80075f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	0151      	lsls	r1, r2, #5
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	440a      	add	r2, r1
 8007600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007604:	0cdb      	lsrs	r3, r3, #19
 8007606:	04db      	lsls	r3, r3, #19
 8007608:	6113      	str	r3, [r2, #16]
 800760a:	e04e      	b.n	80076aa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	015a      	lsls	r2, r3, #5
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	4413      	add	r3, r2
 8007614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	0151      	lsls	r1, r2, #5
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	440a      	add	r2, r1
 8007622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007626:	0cdb      	lsrs	r3, r3, #19
 8007628:	04db      	lsls	r3, r3, #19
 800762a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	015a      	lsls	r2, r3, #5
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	4413      	add	r3, r2
 8007634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	0151      	lsls	r1, r2, #5
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	440a      	add	r2, r1
 8007642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007646:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800764a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800764e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	699a      	ldr	r2, [r3, #24]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	429a      	cmp	r2, r3
 800765a:	d903      	bls.n	8007664 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	68da      	ldr	r2, [r3, #12]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	0151      	lsls	r1, r2, #5
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	440a      	add	r2, r1
 800767a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800767e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007682:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	4413      	add	r3, r2
 800768c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007690:	691a      	ldr	r2, [r3, #16]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800769a:	6939      	ldr	r1, [r7, #16]
 800769c:	0148      	lsls	r0, r1, #5
 800769e:	6979      	ldr	r1, [r7, #20]
 80076a0:	4401      	add	r1, r0
 80076a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80076a6:	4313      	orrs	r3, r2
 80076a8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80076aa:	79fb      	ldrb	r3, [r7, #7]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d11e      	bne.n	80076ee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	695b      	ldr	r3, [r3, #20]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d009      	beq.n	80076cc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	015a      	lsls	r2, r3, #5
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	4413      	add	r3, r2
 80076c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c4:	461a      	mov	r2, r3
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	695b      	ldr	r3, [r3, #20]
 80076ca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	0151      	lsls	r1, r2, #5
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	440a      	add	r2, r1
 80076e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076ea:	6013      	str	r3, [r2, #0]
 80076ec:	e097      	b.n	800781e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	015a      	lsls	r2, r3, #5
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	4413      	add	r3, r2
 80076f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	0151      	lsls	r1, r2, #5
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	440a      	add	r2, r1
 8007704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007708:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800770c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	699b      	ldr	r3, [r3, #24]
 8007712:	2b00      	cmp	r3, #0
 8007714:	f000 8083 	beq.w	800781e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800771e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	f003 030f 	and.w	r3, r3, #15
 8007728:	2101      	movs	r1, #1
 800772a:	fa01 f303 	lsl.w	r3, r1, r3
 800772e:	6979      	ldr	r1, [r7, #20]
 8007730:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007734:	4313      	orrs	r3, r2
 8007736:	634b      	str	r3, [r1, #52]	; 0x34
 8007738:	e071      	b.n	800781e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	4413      	add	r3, r2
 8007742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	0151      	lsls	r1, r2, #5
 800774c:	697a      	ldr	r2, [r7, #20]
 800774e:	440a      	add	r2, r1
 8007750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007754:	0cdb      	lsrs	r3, r3, #19
 8007756:	04db      	lsls	r3, r3, #19
 8007758:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	015a      	lsls	r2, r3, #5
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	4413      	add	r3, r2
 8007762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	0151      	lsls	r1, r2, #5
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	440a      	add	r2, r1
 8007770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007774:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007778:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800777c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d003      	beq.n	800778e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	68da      	ldr	r2, [r3, #12]
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	68da      	ldr	r2, [r3, #12]
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	015a      	lsls	r2, r3, #5
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	4413      	add	r3, r2
 800779e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	0151      	lsls	r1, r2, #5
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	440a      	add	r2, r1
 80077ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c2:	691a      	ldr	r2, [r3, #16]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	69db      	ldr	r3, [r3, #28]
 80077c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077cc:	6939      	ldr	r1, [r7, #16]
 80077ce:	0148      	lsls	r0, r1, #5
 80077d0:	6979      	ldr	r1, [r7, #20]
 80077d2:	4401      	add	r1, r0
 80077d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80077d8:	4313      	orrs	r3, r2
 80077da:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80077dc:	79fb      	ldrb	r3, [r7, #7]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d10d      	bne.n	80077fe <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d009      	beq.n	80077fe <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	6919      	ldr	r1, [r3, #16]
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	015a      	lsls	r2, r3, #5
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	4413      	add	r3, r2
 80077f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077fa:	460a      	mov	r2, r1
 80077fc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	015a      	lsls	r2, r3, #5
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	4413      	add	r3, r2
 8007806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	0151      	lsls	r1, r2, #5
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	440a      	add	r2, r1
 8007814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007818:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800781c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	371c      	adds	r7, #28
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007836:	2300      	movs	r3, #0
 8007838:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800783a:	2300      	movs	r3, #0
 800783c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	785b      	ldrb	r3, [r3, #1]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d14a      	bne.n	80078e0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	015a      	lsls	r2, r3, #5
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	4413      	add	r3, r2
 8007854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800785e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007862:	f040 8086 	bne.w	8007972 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	015a      	lsls	r2, r3, #5
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	4413      	add	r3, r2
 8007870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	683a      	ldr	r2, [r7, #0]
 8007878:	7812      	ldrb	r2, [r2, #0]
 800787a:	0151      	lsls	r1, r2, #5
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	440a      	add	r2, r1
 8007880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007884:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007888:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	7812      	ldrb	r2, [r2, #0]
 800789e:	0151      	lsls	r1, r2, #5
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	440a      	add	r2, r1
 80078a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	3301      	adds	r3, #1
 80078b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d902      	bls.n	80078c4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	75fb      	strb	r3, [r7, #23]
          break;
 80078c2:	e056      	b.n	8007972 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	015a      	lsls	r2, r3, #5
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	4413      	add	r3, r2
 80078ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078dc:	d0e7      	beq.n	80078ae <USB_EPStopXfer+0x82>
 80078de:	e048      	b.n	8007972 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078f8:	d13b      	bne.n	8007972 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	015a      	lsls	r2, r3, #5
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	4413      	add	r3, r2
 8007904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	683a      	ldr	r2, [r7, #0]
 800790c:	7812      	ldrb	r2, [r2, #0]
 800790e:	0151      	lsls	r1, r2, #5
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	440a      	add	r2, r1
 8007914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007918:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800791c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	015a      	lsls	r2, r3, #5
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	4413      	add	r3, r2
 8007928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	683a      	ldr	r2, [r7, #0]
 8007930:	7812      	ldrb	r2, [r2, #0]
 8007932:	0151      	lsls	r1, r2, #5
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	440a      	add	r2, r1
 8007938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800793c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007940:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	3301      	adds	r3, #1
 8007946:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f242 7210 	movw	r2, #10000	; 0x2710
 800794e:	4293      	cmp	r3, r2
 8007950:	d902      	bls.n	8007958 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	75fb      	strb	r3, [r7, #23]
          break;
 8007956:	e00c      	b.n	8007972 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	015a      	lsls	r2, r3, #5
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	4413      	add	r3, r2
 8007962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800796c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007970:	d0e7      	beq.n	8007942 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007972:	7dfb      	ldrb	r3, [r7, #23]
}
 8007974:	4618      	mov	r0, r3
 8007976:	371c      	adds	r7, #28
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007980:	b480      	push	{r7}
 8007982:	b089      	sub	sp, #36	; 0x24
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	4611      	mov	r1, r2
 800798c:	461a      	mov	r2, r3
 800798e:	460b      	mov	r3, r1
 8007990:	71fb      	strb	r3, [r7, #7]
 8007992:	4613      	mov	r3, r2
 8007994:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800799e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d123      	bne.n	80079ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80079a6:	88bb      	ldrh	r3, [r7, #4]
 80079a8:	3303      	adds	r3, #3
 80079aa:	089b      	lsrs	r3, r3, #2
 80079ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80079ae:	2300      	movs	r3, #0
 80079b0:	61bb      	str	r3, [r7, #24]
 80079b2:	e018      	b.n	80079e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80079b4:	79fb      	ldrb	r3, [r7, #7]
 80079b6:	031a      	lsls	r2, r3, #12
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079c0:	461a      	mov	r2, r3
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	3301      	adds	r3, #1
 80079cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	3301      	adds	r3, #1
 80079d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	3301      	adds	r3, #1
 80079d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	3301      	adds	r3, #1
 80079de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	3301      	adds	r3, #1
 80079e4:	61bb      	str	r3, [r7, #24]
 80079e6:	69ba      	ldr	r2, [r7, #24]
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d3e2      	bcc.n	80079b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3724      	adds	r7, #36	; 0x24
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b08b      	sub	sp, #44	; 0x2c
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	4613      	mov	r3, r2
 8007a08:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007a12:	88fb      	ldrh	r3, [r7, #6]
 8007a14:	089b      	lsrs	r3, r3, #2
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007a1a:	88fb      	ldrh	r3, [r7, #6]
 8007a1c:	f003 0303 	and.w	r3, r3, #3
 8007a20:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007a22:	2300      	movs	r3, #0
 8007a24:	623b      	str	r3, [r7, #32]
 8007a26:	e014      	b.n	8007a52 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	601a      	str	r2, [r3, #0]
    pDest++;
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	3301      	adds	r3, #1
 8007a38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a42:	3301      	adds	r3, #1
 8007a44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a48:	3301      	adds	r3, #1
 8007a4a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007a4c:	6a3b      	ldr	r3, [r7, #32]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	623b      	str	r3, [r7, #32]
 8007a52:	6a3a      	ldr	r2, [r7, #32]
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d3e6      	bcc.n	8007a28 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007a5a:	8bfb      	ldrh	r3, [r7, #30]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d01e      	beq.n	8007a9e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f107 0310 	add.w	r3, r7, #16
 8007a70:	6812      	ldr	r2, [r2, #0]
 8007a72:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	00db      	lsls	r3, r3, #3
 8007a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a80:	b2da      	uxtb	r2, r3
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	701a      	strb	r2, [r3, #0]
      i++;
 8007a86:	6a3b      	ldr	r3, [r7, #32]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	623b      	str	r3, [r7, #32]
      pDest++;
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8e:	3301      	adds	r3, #1
 8007a90:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007a92:	8bfb      	ldrh	r3, [r7, #30]
 8007a94:	3b01      	subs	r3, #1
 8007a96:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007a98:	8bfb      	ldrh	r3, [r7, #30]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1ea      	bne.n	8007a74 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	372c      	adds	r7, #44	; 0x2c
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	785b      	ldrb	r3, [r3, #1]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d12c      	bne.n	8007b22 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	015a      	lsls	r2, r3, #5
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4413      	add	r3, r2
 8007ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	db12      	blt.n	8007b00 <USB_EPSetStall+0x54>
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00f      	beq.n	8007b00 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	015a      	lsls	r2, r3, #5
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	0151      	lsls	r1, r2, #5
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	440a      	add	r2, r1
 8007af6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007afa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007afe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	0151      	lsls	r1, r2, #5
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	440a      	add	r2, r1
 8007b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b1e:	6013      	str	r3, [r2, #0]
 8007b20:	e02b      	b.n	8007b7a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	db12      	blt.n	8007b5a <USB_EPSetStall+0xae>
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00f      	beq.n	8007b5a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	015a      	lsls	r2, r3, #5
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	4413      	add	r3, r2
 8007b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	0151      	lsls	r1, r2, #5
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	440a      	add	r2, r1
 8007b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b58:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	015a      	lsls	r2, r3, #5
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	4413      	add	r3, r2
 8007b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	0151      	lsls	r1, r2, #5
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	440a      	add	r2, r1
 8007b70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b78:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3714      	adds	r7, #20
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	785b      	ldrb	r3, [r3, #1]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d128      	bne.n	8007bf6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	015a      	lsls	r2, r3, #5
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	4413      	add	r3, r2
 8007bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	0151      	lsls	r1, r2, #5
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	440a      	add	r2, r1
 8007bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bbe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bc2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	791b      	ldrb	r3, [r3, #4]
 8007bc8:	2b03      	cmp	r3, #3
 8007bca:	d003      	beq.n	8007bd4 <USB_EPClearStall+0x4c>
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	791b      	ldrb	r3, [r3, #4]
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d138      	bne.n	8007c46 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	0151      	lsls	r1, r2, #5
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	440a      	add	r2, r1
 8007bea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bf2:	6013      	str	r3, [r2, #0]
 8007bf4:	e027      	b.n	8007c46 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	0151      	lsls	r1, r2, #5
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	440a      	add	r2, r1
 8007c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c14:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	791b      	ldrb	r3, [r3, #4]
 8007c1a:	2b03      	cmp	r3, #3
 8007c1c:	d003      	beq.n	8007c26 <USB_EPClearStall+0x9e>
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	791b      	ldrb	r3, [r3, #4]
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d10f      	bne.n	8007c46 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	0151      	lsls	r1, r2, #5
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	440a      	add	r2, r1
 8007c3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c44:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c72:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007c76:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	78fb      	ldrb	r3, [r7, #3]
 8007c82:	011b      	lsls	r3, r3, #4
 8007c84:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007c88:	68f9      	ldr	r1, [r7, #12]
 8007c8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007cba:	f023 0303 	bic.w	r3, r3, #3
 8007cbe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cce:	f023 0302 	bic.w	r3, r3, #2
 8007cd2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b085      	sub	sp, #20
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007cfc:	f023 0303 	bic.w	r3, r3, #3
 8007d00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d10:	f043 0302 	orr.w	r3, r3, #2
 8007d14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3714      	adds	r7, #20
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	695b      	ldr	r3, [r3, #20]
 8007d30:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	4013      	ands	r3, r2
 8007d3a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3714      	adds	r7, #20
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b085      	sub	sp, #20
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d66:	69db      	ldr	r3, [r3, #28]
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	0c1b      	lsrs	r3, r3, #16
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b085      	sub	sp, #20
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	4013      	ands	r3, r2
 8007da0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	b29b      	uxth	r3, r3
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b085      	sub	sp, #20
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
 8007dba:	460b      	mov	r3, r1
 8007dbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007dc2:	78fb      	ldrb	r3, [r7, #3]
 8007dc4:	015a      	lsls	r2, r3, #5
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	4413      	add	r3, r2
 8007dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd8:	695b      	ldr	r3, [r3, #20]
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	4013      	ands	r3, r2
 8007dde:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007de0:	68bb      	ldr	r3, [r7, #8]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3714      	adds	r7, #20
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr

08007dee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b087      	sub	sp, #28
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	460b      	mov	r3, r1
 8007df8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e10:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007e12:	78fb      	ldrb	r3, [r7, #3]
 8007e14:	f003 030f 	and.w	r3, r3, #15
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e1e:	01db      	lsls	r3, r3, #7
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	693a      	ldr	r2, [r7, #16]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e28:	78fb      	ldrb	r3, [r7, #3]
 8007e2a:	015a      	lsls	r2, r3, #5
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	4413      	add	r3, r2
 8007e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	693a      	ldr	r2, [r7, #16]
 8007e38:	4013      	ands	r3, r2
 8007e3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e3c:	68bb      	ldr	r3, [r7, #8]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	371c      	adds	r7, #28
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b083      	sub	sp, #12
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	695b      	ldr	r3, [r3, #20]
 8007e56:	f003 0301 	and.w	r3, r3, #1
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	370c      	adds	r7, #12
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b085      	sub	sp, #20
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e80:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007e84:	f023 0307 	bic.w	r3, r3, #7
 8007e88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3714      	adds	r7, #20
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	333c      	adds	r3, #60	; 0x3c
 8007ec2:	3304      	adds	r3, #4
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	4a26      	ldr	r2, [pc, #152]	; (8007f64 <USB_EP0_OutStart+0xb8>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d90a      	bls.n	8007ee6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007edc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ee0:	d101      	bne.n	8007ee6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	e037      	b.n	8007f56 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eec:	461a      	mov	r2, r3
 8007eee:	2300      	movs	r3, #0
 8007ef0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f14:	f043 0318 	orr.w	r3, r3, #24
 8007f18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f28:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007f2c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007f2e:	7afb      	ldrb	r3, [r7, #11]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d10f      	bne.n	8007f54 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f4e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007f52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	371c      	adds	r7, #28
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	4f54300a 	.word	0x4f54300a

08007f68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f70:	2300      	movs	r3, #0
 8007f72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	3301      	adds	r3, #1
 8007f78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	4a13      	ldr	r2, [pc, #76]	; (8007fcc <USB_CoreReset+0x64>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d901      	bls.n	8007f86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e01b      	b.n	8007fbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	daf2      	bge.n	8007f74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	f043 0201 	orr.w	r2, r3, #1
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	4a09      	ldr	r2, [pc, #36]	; (8007fcc <USB_CoreReset+0x64>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d901      	bls.n	8007fb0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007fac:	2303      	movs	r3, #3
 8007fae:	e006      	b.n	8007fbe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	f003 0301 	and.w	r3, r3, #1
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d0f0      	beq.n	8007f9e <USB_CoreReset+0x36>

  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3714      	adds	r7, #20
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	00030d40 	.word	0x00030d40

08007fd0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	460b      	mov	r3, r1
 8007fda:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007fdc:	2010      	movs	r0, #16
 8007fde:	f002 f91b 	bl	800a218 <USBD_static_malloc>
 8007fe2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d109      	bne.n	8007ffe <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	32b0      	adds	r2, #176	; 0xb0
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	e048      	b.n	8008090 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	32b0      	adds	r2, #176	; 0xb0
 8008008:	68f9      	ldr	r1, [r7, #12]
 800800a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	32b0      	adds	r2, #176	; 0xb0
 8008018:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	7c1b      	ldrb	r3, [r3, #16]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10d      	bne.n	8008046 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800802a:	4b1b      	ldr	r3, [pc, #108]	; (8008098 <USBD_HID_Init+0xc8>)
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	f003 020f 	and.w	r2, r3, #15
 8008032:	6879      	ldr	r1, [r7, #4]
 8008034:	4613      	mov	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	440b      	add	r3, r1
 800803e:	3326      	adds	r3, #38	; 0x26
 8008040:	2207      	movs	r2, #7
 8008042:	801a      	strh	r2, [r3, #0]
 8008044:	e00c      	b.n	8008060 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8008046:	4b14      	ldr	r3, [pc, #80]	; (8008098 <USBD_HID_Init+0xc8>)
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	f003 020f 	and.w	r2, r3, #15
 800804e:	6879      	ldr	r1, [r7, #4]
 8008050:	4613      	mov	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	440b      	add	r3, r1
 800805a:	3326      	adds	r3, #38	; 0x26
 800805c:	220a      	movs	r2, #10
 800805e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8008060:	4b0d      	ldr	r3, [pc, #52]	; (8008098 <USBD_HID_Init+0xc8>)
 8008062:	7819      	ldrb	r1, [r3, #0]
 8008064:	2310      	movs	r3, #16
 8008066:	2203      	movs	r2, #3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f001 ffc4 	bl	8009ff6 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800806e:	4b0a      	ldr	r3, [pc, #40]	; (8008098 <USBD_HID_Init+0xc8>)
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	f003 020f 	and.w	r2, r3, #15
 8008076:	6879      	ldr	r1, [r7, #4]
 8008078:	4613      	mov	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4413      	add	r3, r2
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	440b      	add	r3, r1
 8008082:	3324      	adds	r3, #36	; 0x24
 8008084:	2201      	movs	r2, #1
 8008086:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2200      	movs	r2, #0
 800808c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	20000093 	.word	0x20000093

0800809c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	460b      	mov	r3, r1
 80080a6:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80080a8:	4b1f      	ldr	r3, [pc, #124]	; (8008128 <USBD_HID_DeInit+0x8c>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f001 ffc7 	bl	800a042 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80080b4:	4b1c      	ldr	r3, [pc, #112]	; (8008128 <USBD_HID_DeInit+0x8c>)
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	f003 020f 	and.w	r2, r3, #15
 80080bc:	6879      	ldr	r1, [r7, #4]
 80080be:	4613      	mov	r3, r2
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4413      	add	r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	440b      	add	r3, r1
 80080c8:	3324      	adds	r3, #36	; 0x24
 80080ca:	2200      	movs	r2, #0
 80080cc:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80080ce:	4b16      	ldr	r3, [pc, #88]	; (8008128 <USBD_HID_DeInit+0x8c>)
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	f003 020f 	and.w	r2, r3, #15
 80080d6:	6879      	ldr	r1, [r7, #4]
 80080d8:	4613      	mov	r3, r2
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	4413      	add	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	440b      	add	r3, r1
 80080e2:	3326      	adds	r3, #38	; 0x26
 80080e4:	2200      	movs	r2, #0
 80080e6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	32b0      	adds	r2, #176	; 0xb0
 80080f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d011      	beq.n	800811e <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	32b0      	adds	r2, #176	; 0xb0
 8008104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008108:	4618      	mov	r0, r3
 800810a:	f002 f893 	bl	800a234 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	32b0      	adds	r2, #176	; 0xb0
 8008118:	2100      	movs	r1, #0
 800811a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	20000093 	.word	0x20000093

0800812c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b086      	sub	sp, #24
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	32b0      	adds	r2, #176	; 0xb0
 8008140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008144:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800814a:	2300      	movs	r3, #0
 800814c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8008154:	2303      	movs	r3, #3
 8008156:	e0e8      	b.n	800832a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008160:	2b00      	cmp	r3, #0
 8008162:	d046      	beq.n	80081f2 <USBD_HID_Setup+0xc6>
 8008164:	2b20      	cmp	r3, #32
 8008166:	f040 80d8 	bne.w	800831a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	785b      	ldrb	r3, [r3, #1]
 800816e:	3b02      	subs	r3, #2
 8008170:	2b09      	cmp	r3, #9
 8008172:	d836      	bhi.n	80081e2 <USBD_HID_Setup+0xb6>
 8008174:	a201      	add	r2, pc, #4	; (adr r2, 800817c <USBD_HID_Setup+0x50>)
 8008176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817a:	bf00      	nop
 800817c:	080081d3 	.word	0x080081d3
 8008180:	080081b3 	.word	0x080081b3
 8008184:	080081e3 	.word	0x080081e3
 8008188:	080081e3 	.word	0x080081e3
 800818c:	080081e3 	.word	0x080081e3
 8008190:	080081e3 	.word	0x080081e3
 8008194:	080081e3 	.word	0x080081e3
 8008198:	080081e3 	.word	0x080081e3
 800819c:	080081c1 	.word	0x080081c1
 80081a0:	080081a5 	.word	0x080081a5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	885b      	ldrh	r3, [r3, #2]
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	461a      	mov	r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	601a      	str	r2, [r3, #0]
          break;
 80081b0:	e01e      	b.n	80081f0 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2201      	movs	r2, #1
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f001 fbd5 	bl	8009968 <USBD_CtlSendData>
          break;
 80081be:	e017      	b.n	80081f0 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	885b      	ldrh	r3, [r3, #2]
 80081c4:	0a1b      	lsrs	r3, r3, #8
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	461a      	mov	r2, r3
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	605a      	str	r2, [r3, #4]
          break;
 80081d0:	e00e      	b.n	80081f0 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	3304      	adds	r3, #4
 80081d6:	2201      	movs	r2, #1
 80081d8:	4619      	mov	r1, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f001 fbc4 	bl	8009968 <USBD_CtlSendData>
          break;
 80081e0:	e006      	b.n	80081f0 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80081e2:	6839      	ldr	r1, [r7, #0]
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f001 fb4e 	bl	8009886 <USBD_CtlError>
          ret = USBD_FAIL;
 80081ea:	2303      	movs	r3, #3
 80081ec:	75fb      	strb	r3, [r7, #23]
          break;
 80081ee:	bf00      	nop
      }
      break;
 80081f0:	e09a      	b.n	8008328 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	785b      	ldrb	r3, [r3, #1]
 80081f6:	2b0b      	cmp	r3, #11
 80081f8:	f200 8086 	bhi.w	8008308 <USBD_HID_Setup+0x1dc>
 80081fc:	a201      	add	r2, pc, #4	; (adr r2, 8008204 <USBD_HID_Setup+0xd8>)
 80081fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008202:	bf00      	nop
 8008204:	08008235 	.word	0x08008235
 8008208:	08008317 	.word	0x08008317
 800820c:	08008309 	.word	0x08008309
 8008210:	08008309 	.word	0x08008309
 8008214:	08008309 	.word	0x08008309
 8008218:	08008309 	.word	0x08008309
 800821c:	0800825f 	.word	0x0800825f
 8008220:	08008309 	.word	0x08008309
 8008224:	08008309 	.word	0x08008309
 8008228:	08008309 	.word	0x08008309
 800822c:	080082b7 	.word	0x080082b7
 8008230:	080082e1 	.word	0x080082e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b03      	cmp	r3, #3
 800823e:	d107      	bne.n	8008250 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008240:	f107 030a 	add.w	r3, r7, #10
 8008244:	2202      	movs	r2, #2
 8008246:	4619      	mov	r1, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f001 fb8d 	bl	8009968 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800824e:	e063      	b.n	8008318 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f001 fb17 	bl	8009886 <USBD_CtlError>
            ret = USBD_FAIL;
 8008258:	2303      	movs	r3, #3
 800825a:	75fb      	strb	r3, [r7, #23]
          break;
 800825c:	e05c      	b.n	8008318 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	885b      	ldrh	r3, [r3, #2]
 8008262:	0a1b      	lsrs	r3, r3, #8
 8008264:	b29b      	uxth	r3, r3
 8008266:	2b22      	cmp	r3, #34	; 0x22
 8008268:	d108      	bne.n	800827c <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	88db      	ldrh	r3, [r3, #6]
 800826e:	2b03      	cmp	r3, #3
 8008270:	bf28      	it	cs
 8008272:	2303      	movcs	r3, #3
 8008274:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8008276:	4b2f      	ldr	r3, [pc, #188]	; (8008334 <USBD_HID_Setup+0x208>)
 8008278:	613b      	str	r3, [r7, #16]
 800827a:	e015      	b.n	80082a8 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	885b      	ldrh	r3, [r3, #2]
 8008280:	0a1b      	lsrs	r3, r3, #8
 8008282:	b29b      	uxth	r3, r3
 8008284:	2b21      	cmp	r3, #33	; 0x21
 8008286:	d108      	bne.n	800829a <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8008288:	4b2b      	ldr	r3, [pc, #172]	; (8008338 <USBD_HID_Setup+0x20c>)
 800828a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	88db      	ldrh	r3, [r3, #6]
 8008290:	2b09      	cmp	r3, #9
 8008292:	bf28      	it	cs
 8008294:	2309      	movcs	r3, #9
 8008296:	82bb      	strh	r3, [r7, #20]
 8008298:	e006      	b.n	80082a8 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800829a:	6839      	ldr	r1, [r7, #0]
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f001 faf2 	bl	8009886 <USBD_CtlError>
            ret = USBD_FAIL;
 80082a2:	2303      	movs	r3, #3
 80082a4:	75fb      	strb	r3, [r7, #23]
            break;
 80082a6:	e037      	b.n	8008318 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80082a8:	8abb      	ldrh	r3, [r7, #20]
 80082aa:	461a      	mov	r2, r3
 80082ac:	6939      	ldr	r1, [r7, #16]
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f001 fb5a 	bl	8009968 <USBD_CtlSendData>
          break;
 80082b4:	e030      	b.n	8008318 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b03      	cmp	r3, #3
 80082c0:	d107      	bne.n	80082d2 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	3308      	adds	r3, #8
 80082c6:	2201      	movs	r2, #1
 80082c8:	4619      	mov	r1, r3
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f001 fb4c 	bl	8009968 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082d0:	e022      	b.n	8008318 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80082d2:	6839      	ldr	r1, [r7, #0]
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f001 fad6 	bl	8009886 <USBD_CtlError>
            ret = USBD_FAIL;
 80082da:	2303      	movs	r3, #3
 80082dc:	75fb      	strb	r3, [r7, #23]
          break;
 80082de:	e01b      	b.n	8008318 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b03      	cmp	r3, #3
 80082ea:	d106      	bne.n	80082fa <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	885b      	ldrh	r3, [r3, #2]
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	461a      	mov	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082f8:	e00e      	b.n	8008318 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f001 fac2 	bl	8009886 <USBD_CtlError>
            ret = USBD_FAIL;
 8008302:	2303      	movs	r3, #3
 8008304:	75fb      	strb	r3, [r7, #23]
          break;
 8008306:	e007      	b.n	8008318 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008308:	6839      	ldr	r1, [r7, #0]
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f001 fabb 	bl	8009886 <USBD_CtlError>
          ret = USBD_FAIL;
 8008310:	2303      	movs	r3, #3
 8008312:	75fb      	strb	r3, [r7, #23]
          break;
 8008314:	e000      	b.n	8008318 <USBD_HID_Setup+0x1ec>
          break;
 8008316:	bf00      	nop
      }
      break;
 8008318:	e006      	b.n	8008328 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f001 fab2 	bl	8009886 <USBD_CtlError>
      ret = USBD_FAIL;
 8008322:	2303      	movs	r3, #3
 8008324:	75fb      	strb	r3, [r7, #23]
      break;
 8008326:	bf00      	nop
  }

  return (uint8_t)ret;
 8008328:	7dfb      	ldrb	r3, [r7, #23]
}
 800832a:	4618      	mov	r0, r3
 800832c:	3718      	adds	r7, #24
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	20000090 	.word	0x20000090
 8008338:	20000078 	.word	0x20000078

0800833c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	4613      	mov	r3, r2
 8008348:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	32b0      	adds	r2, #176	; 0xb0
 8008354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008358:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d101      	bne.n	8008364 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008360:	2303      	movs	r3, #3
 8008362:	e014      	b.n	800838e <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b03      	cmp	r3, #3
 800836e:	d10d      	bne.n	800838c <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	7b1b      	ldrb	r3, [r3, #12]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d109      	bne.n	800838c <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	2201      	movs	r2, #1
 800837c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800837e:	4b06      	ldr	r3, [pc, #24]	; (8008398 <USBD_HID_SendReport+0x5c>)
 8008380:	7819      	ldrb	r1, [r3, #0]
 8008382:	88fb      	ldrh	r3, [r7, #6]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	68f8      	ldr	r0, [r7, #12]
 8008388:	f001 ff03 	bl	800a192 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3718      	adds	r7, #24
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	20000093 	.word	0x20000093

0800839c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80083a4:	2181      	movs	r1, #129	; 0x81
 80083a6:	4809      	ldr	r0, [pc, #36]	; (80083cc <USBD_HID_GetFSCfgDesc+0x30>)
 80083a8:	f000 fc35 	bl	8008c16 <USBD_GetEpDesc>
 80083ac:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d002      	beq.n	80083ba <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	220a      	movs	r2, #10
 80083b8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2222      	movs	r2, #34	; 0x22
 80083be:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80083c0:	4b02      	ldr	r3, [pc, #8]	; (80083cc <USBD_HID_GetFSCfgDesc+0x30>)
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	20000054 	.word	0x20000054

080083d0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80083d8:	2181      	movs	r1, #129	; 0x81
 80083da:	4809      	ldr	r0, [pc, #36]	; (8008400 <USBD_HID_GetHSCfgDesc+0x30>)
 80083dc:	f000 fc1b 	bl	8008c16 <USBD_GetEpDesc>
 80083e0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d002      	beq.n	80083ee <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2207      	movs	r2, #7
 80083ec:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2222      	movs	r2, #34	; 0x22
 80083f2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80083f4:	4b02      	ldr	r3, [pc, #8]	; (8008400 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	20000054 	.word	0x20000054

08008404 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800840c:	2181      	movs	r1, #129	; 0x81
 800840e:	4809      	ldr	r0, [pc, #36]	; (8008434 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8008410:	f000 fc01 	bl	8008c16 <USBD_GetEpDesc>
 8008414:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d002      	beq.n	8008422 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	220a      	movs	r2, #10
 8008420:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2222      	movs	r2, #34	; 0x22
 8008426:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008428:	4b02      	ldr	r3, [pc, #8]	; (8008434 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	20000054 	.word	0x20000054

08008438 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	460b      	mov	r3, r1
 8008442:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	32b0      	adds	r2, #176	; 0xb0
 800844e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008452:	2200      	movs	r2, #0
 8008454:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	220a      	movs	r2, #10
 8008470:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8008472:	4b03      	ldr	r3, [pc, #12]	; (8008480 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008474:	4618      	mov	r0, r3
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	20000084 	.word	0x20000084

08008484 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	4613      	mov	r3, r2
 8008490:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d101      	bne.n	800849c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008498:	2303      	movs	r3, #3
 800849a:	e01f      	b.n	80084dc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d003      	beq.n	80084c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	68ba      	ldr	r2, [r7, #8]
 80084be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	79fa      	ldrb	r2, [r7, #7]
 80084ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f001 fd29 	bl	8009f28 <USBD_LL_Init>
 80084d6:	4603      	mov	r3, r0
 80084d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80084da:	7dfb      	ldrb	r3, [r7, #23]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3718      	adds	r7, #24
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084ee:	2300      	movs	r3, #0
 80084f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d101      	bne.n	80084fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80084f8:	2303      	movs	r3, #3
 80084fa:	e025      	b.n	8008548 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	32ae      	adds	r2, #174	; 0xae
 800850e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00f      	beq.n	8008538 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	32ae      	adds	r2, #174	; 0xae
 8008522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008528:	f107 020e 	add.w	r2, r7, #14
 800852c:	4610      	mov	r0, r2
 800852e:	4798      	blx	r3
 8008530:	4602      	mov	r2, r0
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800853e:	1c5a      	adds	r2, r3, #1
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008546:	2300      	movs	r3, #0
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	f001 fd31 	bl	8009fc0 <USBD_LL_Start>
 800855e:	4603      	mov	r3, r0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}

08008568 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008570:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008572:	4618      	mov	r0, r3
 8008574:	370c      	adds	r7, #12
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800857e:	b580      	push	{r7, lr}
 8008580:	b084      	sub	sp, #16
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
 8008586:	460b      	mov	r3, r1
 8008588:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008594:	2b00      	cmp	r3, #0
 8008596:	d009      	beq.n	80085ac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	78fa      	ldrb	r2, [r7, #3]
 80085a2:	4611      	mov	r1, r2
 80085a4:	6878      	ldr	r0, [r7, #4]
 80085a6:	4798      	blx	r3
 80085a8:	4603      	mov	r3, r0
 80085aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b084      	sub	sp, #16
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	460b      	mov	r3, r1
 80085c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	78fa      	ldrb	r2, [r7, #3]
 80085d0:	4611      	mov	r1, r2
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	4798      	blx	r3
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d001      	beq.n	80085e0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80085dc:	2303      	movs	r3, #3
 80085de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b084      	sub	sp, #16
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80085fa:	6839      	ldr	r1, [r7, #0]
 80085fc:	4618      	mov	r0, r3
 80085fe:	f001 f908 	bl	8009812 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008610:	461a      	mov	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800861e:	f003 031f 	and.w	r3, r3, #31
 8008622:	2b02      	cmp	r3, #2
 8008624:	d01a      	beq.n	800865c <USBD_LL_SetupStage+0x72>
 8008626:	2b02      	cmp	r3, #2
 8008628:	d822      	bhi.n	8008670 <USBD_LL_SetupStage+0x86>
 800862a:	2b00      	cmp	r3, #0
 800862c:	d002      	beq.n	8008634 <USBD_LL_SetupStage+0x4a>
 800862e:	2b01      	cmp	r3, #1
 8008630:	d00a      	beq.n	8008648 <USBD_LL_SetupStage+0x5e>
 8008632:	e01d      	b.n	8008670 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800863a:	4619      	mov	r1, r3
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fb5f 	bl	8008d00 <USBD_StdDevReq>
 8008642:	4603      	mov	r3, r0
 8008644:	73fb      	strb	r3, [r7, #15]
      break;
 8008646:	e020      	b.n	800868a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800864e:	4619      	mov	r1, r3
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fbc7 	bl	8008de4 <USBD_StdItfReq>
 8008656:	4603      	mov	r3, r0
 8008658:	73fb      	strb	r3, [r7, #15]
      break;
 800865a:	e016      	b.n	800868a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 fc29 	bl	8008ebc <USBD_StdEPReq>
 800866a:	4603      	mov	r3, r0
 800866c:	73fb      	strb	r3, [r7, #15]
      break;
 800866e:	e00c      	b.n	800868a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008676:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800867a:	b2db      	uxtb	r3, r3
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f001 fcfe 	bl	800a080 <USBD_LL_StallEP>
 8008684:	4603      	mov	r3, r0
 8008686:	73fb      	strb	r3, [r7, #15]
      break;
 8008688:	bf00      	nop
  }

  return ret;
 800868a:	7bfb      	ldrb	r3, [r7, #15]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b086      	sub	sp, #24
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	460b      	mov	r3, r1
 800869e:	607a      	str	r2, [r7, #4]
 80086a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80086a2:	2300      	movs	r3, #0
 80086a4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80086a6:	7afb      	ldrb	r3, [r7, #11]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d16e      	bne.n	800878a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80086b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086ba:	2b03      	cmp	r3, #3
 80086bc:	f040 8098 	bne.w	80087f0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	689a      	ldr	r2, [r3, #8]
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d913      	bls.n	80086f4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	689a      	ldr	r2, [r3, #8]
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	1ad2      	subs	r2, r2, r3
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	68da      	ldr	r2, [r3, #12]
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	4293      	cmp	r3, r2
 80086e4:	bf28      	it	cs
 80086e6:	4613      	movcs	r3, r2
 80086e8:	461a      	mov	r2, r3
 80086ea:	6879      	ldr	r1, [r7, #4]
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	f001 f967 	bl	80099c0 <USBD_CtlContinueRx>
 80086f2:	e07d      	b.n	80087f0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086fa:	f003 031f 	and.w	r3, r3, #31
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d014      	beq.n	800872c <USBD_LL_DataOutStage+0x98>
 8008702:	2b02      	cmp	r3, #2
 8008704:	d81d      	bhi.n	8008742 <USBD_LL_DataOutStage+0xae>
 8008706:	2b00      	cmp	r3, #0
 8008708:	d002      	beq.n	8008710 <USBD_LL_DataOutStage+0x7c>
 800870a:	2b01      	cmp	r3, #1
 800870c:	d003      	beq.n	8008716 <USBD_LL_DataOutStage+0x82>
 800870e:	e018      	b.n	8008742 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008710:	2300      	movs	r3, #0
 8008712:	75bb      	strb	r3, [r7, #22]
            break;
 8008714:	e018      	b.n	8008748 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800871c:	b2db      	uxtb	r3, r3
 800871e:	4619      	mov	r1, r3
 8008720:	68f8      	ldr	r0, [r7, #12]
 8008722:	f000 fa5e 	bl	8008be2 <USBD_CoreFindIF>
 8008726:	4603      	mov	r3, r0
 8008728:	75bb      	strb	r3, [r7, #22]
            break;
 800872a:	e00d      	b.n	8008748 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008732:	b2db      	uxtb	r3, r3
 8008734:	4619      	mov	r1, r3
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f000 fa60 	bl	8008bfc <USBD_CoreFindEP>
 800873c:	4603      	mov	r3, r0
 800873e:	75bb      	strb	r3, [r7, #22]
            break;
 8008740:	e002      	b.n	8008748 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008742:	2300      	movs	r3, #0
 8008744:	75bb      	strb	r3, [r7, #22]
            break;
 8008746:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008748:	7dbb      	ldrb	r3, [r7, #22]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d119      	bne.n	8008782 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008754:	b2db      	uxtb	r3, r3
 8008756:	2b03      	cmp	r3, #3
 8008758:	d113      	bne.n	8008782 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800875a:	7dba      	ldrb	r2, [r7, #22]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	32ae      	adds	r2, #174	; 0xae
 8008760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00b      	beq.n	8008782 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800876a:	7dba      	ldrb	r2, [r7, #22]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008772:	7dba      	ldrb	r2, [r7, #22]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	32ae      	adds	r2, #174	; 0xae
 8008778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008782:	68f8      	ldr	r0, [r7, #12]
 8008784:	f001 f92d 	bl	80099e2 <USBD_CtlSendStatus>
 8008788:	e032      	b.n	80087f0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800878a:	7afb      	ldrb	r3, [r7, #11]
 800878c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008790:	b2db      	uxtb	r3, r3
 8008792:	4619      	mov	r1, r3
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f000 fa31 	bl	8008bfc <USBD_CoreFindEP>
 800879a:	4603      	mov	r3, r0
 800879c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800879e:	7dbb      	ldrb	r3, [r7, #22]
 80087a0:	2bff      	cmp	r3, #255	; 0xff
 80087a2:	d025      	beq.n	80087f0 <USBD_LL_DataOutStage+0x15c>
 80087a4:	7dbb      	ldrb	r3, [r7, #22]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d122      	bne.n	80087f0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	2b03      	cmp	r3, #3
 80087b4:	d117      	bne.n	80087e6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80087b6:	7dba      	ldrb	r2, [r7, #22]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	32ae      	adds	r2, #174	; 0xae
 80087bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00f      	beq.n	80087e6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80087c6:	7dba      	ldrb	r2, [r7, #22]
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80087ce:	7dba      	ldrb	r2, [r7, #22]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	32ae      	adds	r2, #174	; 0xae
 80087d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087d8:	699b      	ldr	r3, [r3, #24]
 80087da:	7afa      	ldrb	r2, [r7, #11]
 80087dc:	4611      	mov	r1, r2
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	4798      	blx	r3
 80087e2:	4603      	mov	r3, r0
 80087e4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80087e6:	7dfb      	ldrb	r3, [r7, #23]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80087ec:	7dfb      	ldrb	r3, [r7, #23]
 80087ee:	e000      	b.n	80087f2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3718      	adds	r7, #24
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80087fa:	b580      	push	{r7, lr}
 80087fc:	b086      	sub	sp, #24
 80087fe:	af00      	add	r7, sp, #0
 8008800:	60f8      	str	r0, [r7, #12]
 8008802:	460b      	mov	r3, r1
 8008804:	607a      	str	r2, [r7, #4]
 8008806:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008808:	7afb      	ldrb	r3, [r7, #11]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d16f      	bne.n	80088ee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	3314      	adds	r3, #20
 8008812:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800881a:	2b02      	cmp	r3, #2
 800881c:	d15a      	bne.n	80088d4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	689a      	ldr	r2, [r3, #8]
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	429a      	cmp	r2, r3
 8008828:	d914      	bls.n	8008854 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	689a      	ldr	r2, [r3, #8]
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	1ad2      	subs	r2, r2, r3
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	461a      	mov	r2, r3
 800883e:	6879      	ldr	r1, [r7, #4]
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f001 f8ac 	bl	800999e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008846:	2300      	movs	r3, #0
 8008848:	2200      	movs	r2, #0
 800884a:	2100      	movs	r1, #0
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f001 fcc1 	bl	800a1d4 <USBD_LL_PrepareReceive>
 8008852:	e03f      	b.n	80088d4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	68da      	ldr	r2, [r3, #12]
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	429a      	cmp	r2, r3
 800885e:	d11c      	bne.n	800889a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	685a      	ldr	r2, [r3, #4]
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008868:	429a      	cmp	r2, r3
 800886a:	d316      	bcc.n	800889a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	685a      	ldr	r2, [r3, #4]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008876:	429a      	cmp	r2, r3
 8008878:	d20f      	bcs.n	800889a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800887a:	2200      	movs	r2, #0
 800887c:	2100      	movs	r1, #0
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f001 f88d 	bl	800999e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800888c:	2300      	movs	r3, #0
 800888e:	2200      	movs	r2, #0
 8008890:	2100      	movs	r1, #0
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f001 fc9e 	bl	800a1d4 <USBD_LL_PrepareReceive>
 8008898:	e01c      	b.n	80088d4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	d10f      	bne.n	80088c6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d009      	beq.n	80088c6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088c6:	2180      	movs	r1, #128	; 0x80
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f001 fbd9 	bl	800a080 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f001 f89a 	bl	8009a08 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d03a      	beq.n	8008954 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	f7ff fe42 	bl	8008568 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80088ec:	e032      	b.n	8008954 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80088ee:	7afb      	ldrb	r3, [r7, #11]
 80088f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	4619      	mov	r1, r3
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f000 f97f 	bl	8008bfc <USBD_CoreFindEP>
 80088fe:	4603      	mov	r3, r0
 8008900:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008902:	7dfb      	ldrb	r3, [r7, #23]
 8008904:	2bff      	cmp	r3, #255	; 0xff
 8008906:	d025      	beq.n	8008954 <USBD_LL_DataInStage+0x15a>
 8008908:	7dfb      	ldrb	r3, [r7, #23]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d122      	bne.n	8008954 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008914:	b2db      	uxtb	r3, r3
 8008916:	2b03      	cmp	r3, #3
 8008918:	d11c      	bne.n	8008954 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800891a:	7dfa      	ldrb	r2, [r7, #23]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	32ae      	adds	r2, #174	; 0xae
 8008920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d014      	beq.n	8008954 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800892a:	7dfa      	ldrb	r2, [r7, #23]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008932:	7dfa      	ldrb	r2, [r7, #23]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	32ae      	adds	r2, #174	; 0xae
 8008938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800893c:	695b      	ldr	r3, [r3, #20]
 800893e:	7afa      	ldrb	r2, [r7, #11]
 8008940:	4611      	mov	r1, r2
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	4798      	blx	r3
 8008946:	4603      	mov	r3, r0
 8008948:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800894a:	7dbb      	ldrb	r3, [r7, #22]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d001      	beq.n	8008954 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008950:	7dbb      	ldrb	r3, [r7, #22]
 8008952:	e000      	b.n	8008956 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3718      	adds	r7, #24
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800895e:	b580      	push	{r7, lr}
 8008960:	b084      	sub	sp, #16
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008966:	2300      	movs	r3, #0
 8008968:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2201      	movs	r2, #1
 800896e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008996:	2b00      	cmp	r3, #0
 8008998:	d014      	beq.n	80089c4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00e      	beq.n	80089c4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	6852      	ldr	r2, [r2, #4]
 80089b2:	b2d2      	uxtb	r2, r2
 80089b4:	4611      	mov	r1, r2
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	4798      	blx	r3
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d001      	beq.n	80089c4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80089c0:	2303      	movs	r3, #3
 80089c2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089c4:	2340      	movs	r3, #64	; 0x40
 80089c6:	2200      	movs	r2, #0
 80089c8:	2100      	movs	r1, #0
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f001 fb13 	bl	8009ff6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2240      	movs	r2, #64	; 0x40
 80089dc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089e0:	2340      	movs	r3, #64	; 0x40
 80089e2:	2200      	movs	r2, #0
 80089e4:	2180      	movs	r1, #128	; 0x80
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f001 fb05 	bl	8009ff6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2240      	movs	r2, #64	; 0x40
 80089f6:	621a      	str	r2, [r3, #32]

  return ret;
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a02:	b480      	push	{r7}
 8008a04:	b083      	sub	sp, #12
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	78fa      	ldrb	r2, [r7, #3]
 8008a12:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	370c      	adds	r7, #12
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr

08008a22 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a22:	b480      	push	{r7}
 8008a24:	b083      	sub	sp, #12
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2204      	movs	r2, #4
 8008a3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b083      	sub	sp, #12
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	2b04      	cmp	r3, #4
 8008a60:	d106      	bne.n	8008a70 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008a68:	b2da      	uxtb	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	370c      	adds	r7, #12
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b082      	sub	sp, #8
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b03      	cmp	r3, #3
 8008a90:	d110      	bne.n	8008ab4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00b      	beq.n	8008ab4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa2:	69db      	ldr	r3, [r3, #28]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d005      	beq.n	8008ab4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b082      	sub	sp, #8
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	32ae      	adds	r2, #174	; 0xae
 8008ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d101      	bne.n	8008ae0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008adc:	2303      	movs	r3, #3
 8008ade:	e01c      	b.n	8008b1a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	2b03      	cmp	r3, #3
 8008aea:	d115      	bne.n	8008b18 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	32ae      	adds	r2, #174	; 0xae
 8008af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008afa:	6a1b      	ldr	r3, [r3, #32]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00b      	beq.n	8008b18 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	32ae      	adds	r2, #174	; 0xae
 8008b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b0e:	6a1b      	ldr	r3, [r3, #32]
 8008b10:	78fa      	ldrb	r2, [r7, #3]
 8008b12:	4611      	mov	r1, r2
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3708      	adds	r7, #8
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b082      	sub	sp, #8
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	32ae      	adds	r2, #174	; 0xae
 8008b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d101      	bne.n	8008b44 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e01c      	b.n	8008b7e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	2b03      	cmp	r3, #3
 8008b4e:	d115      	bne.n	8008b7c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	32ae      	adds	r2, #174	; 0xae
 8008b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00b      	beq.n	8008b7c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	32ae      	adds	r2, #174	; 0xae
 8008b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b74:	78fa      	ldrb	r2, [r7, #3]
 8008b76:	4611      	mov	r1, r2
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008b86:	b480      	push	{r7}
 8008b88:	b083      	sub	sp, #12
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00e      	beq.n	8008bd8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	6852      	ldr	r2, [r2, #4]
 8008bc6:	b2d2      	uxtb	r2, r2
 8008bc8:	4611      	mov	r1, r2
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	4798      	blx	r3
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d001      	beq.n	8008bd8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008bd4:	2303      	movs	r3, #3
 8008bd6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008be2:	b480      	push	{r7}
 8008be4:	b083      	sub	sp, #12
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	460b      	mov	r3, r1
 8008bec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008bee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	460b      	mov	r3, r1
 8008c06:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008c08:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	370c      	adds	r7, #12
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr

08008c16 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b086      	sub	sp, #24
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
 8008c1e:	460b      	mov	r3, r1
 8008c20:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	885b      	ldrh	r3, [r3, #2]
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d920      	bls.n	8008c80 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008c46:	e013      	b.n	8008c70 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008c48:	f107 030a 	add.w	r3, r7, #10
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	6978      	ldr	r0, [r7, #20]
 8008c50:	f000 f81b 	bl	8008c8a <USBD_GetNextDesc>
 8008c54:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	785b      	ldrb	r3, [r3, #1]
 8008c5a:	2b05      	cmp	r3, #5
 8008c5c:	d108      	bne.n	8008c70 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	789b      	ldrb	r3, [r3, #2]
 8008c66:	78fa      	ldrb	r2, [r7, #3]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d008      	beq.n	8008c7e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	885b      	ldrh	r3, [r3, #2]
 8008c74:	b29a      	uxth	r2, r3
 8008c76:	897b      	ldrh	r3, [r7, #10]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d8e5      	bhi.n	8008c48 <USBD_GetEpDesc+0x32>
 8008c7c:	e000      	b.n	8008c80 <USBD_GetEpDesc+0x6a>
          break;
 8008c7e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008c80:	693b      	ldr	r3, [r7, #16]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3718      	adds	r7, #24
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b085      	sub	sp, #20
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
 8008c92:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	881a      	ldrh	r2, [r3, #0]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	4413      	add	r3, r2
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3714      	adds	r7, #20
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b087      	sub	sp, #28
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008ce2:	8a3b      	ldrh	r3, [r7, #16]
 8008ce4:	021b      	lsls	r3, r3, #8
 8008ce6:	b21a      	sxth	r2, r3
 8008ce8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008cec:	4313      	orrs	r3, r2
 8008cee:	b21b      	sxth	r3, r3
 8008cf0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008cf2:	89fb      	ldrh	r3, [r7, #14]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	371c      	adds	r7, #28
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b084      	sub	sp, #16
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d16:	2b40      	cmp	r3, #64	; 0x40
 8008d18:	d005      	beq.n	8008d26 <USBD_StdDevReq+0x26>
 8008d1a:	2b40      	cmp	r3, #64	; 0x40
 8008d1c:	d857      	bhi.n	8008dce <USBD_StdDevReq+0xce>
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00f      	beq.n	8008d42 <USBD_StdDevReq+0x42>
 8008d22:	2b20      	cmp	r3, #32
 8008d24:	d153      	bne.n	8008dce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	32ae      	adds	r2, #174	; 0xae
 8008d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	4798      	blx	r3
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d40:	e04a      	b.n	8008dd8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	785b      	ldrb	r3, [r3, #1]
 8008d46:	2b09      	cmp	r3, #9
 8008d48:	d83b      	bhi.n	8008dc2 <USBD_StdDevReq+0xc2>
 8008d4a:	a201      	add	r2, pc, #4	; (adr r2, 8008d50 <USBD_StdDevReq+0x50>)
 8008d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d50:	08008da5 	.word	0x08008da5
 8008d54:	08008db9 	.word	0x08008db9
 8008d58:	08008dc3 	.word	0x08008dc3
 8008d5c:	08008daf 	.word	0x08008daf
 8008d60:	08008dc3 	.word	0x08008dc3
 8008d64:	08008d83 	.word	0x08008d83
 8008d68:	08008d79 	.word	0x08008d79
 8008d6c:	08008dc3 	.word	0x08008dc3
 8008d70:	08008d9b 	.word	0x08008d9b
 8008d74:	08008d8d 	.word	0x08008d8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 fa3c 	bl	80091f8 <USBD_GetDescriptor>
          break;
 8008d80:	e024      	b.n	8008dcc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d82:	6839      	ldr	r1, [r7, #0]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fba1 	bl	80094cc <USBD_SetAddress>
          break;
 8008d8a:	e01f      	b.n	8008dcc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fbe0 	bl	8009554 <USBD_SetConfig>
 8008d94:	4603      	mov	r3, r0
 8008d96:	73fb      	strb	r3, [r7, #15]
          break;
 8008d98:	e018      	b.n	8008dcc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fc83 	bl	80096a8 <USBD_GetConfig>
          break;
 8008da2:	e013      	b.n	8008dcc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008da4:	6839      	ldr	r1, [r7, #0]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 fcb4 	bl	8009714 <USBD_GetStatus>
          break;
 8008dac:	e00e      	b.n	8008dcc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008dae:	6839      	ldr	r1, [r7, #0]
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 fce3 	bl	800977c <USBD_SetFeature>
          break;
 8008db6:	e009      	b.n	8008dcc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008db8:	6839      	ldr	r1, [r7, #0]
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fd07 	bl	80097ce <USBD_ClrFeature>
          break;
 8008dc0:	e004      	b.n	8008dcc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008dc2:	6839      	ldr	r1, [r7, #0]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 fd5e 	bl	8009886 <USBD_CtlError>
          break;
 8008dca:	bf00      	nop
      }
      break;
 8008dcc:	e004      	b.n	8008dd8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fd58 	bl	8009886 <USBD_CtlError>
      break;
 8008dd6:	bf00      	nop
  }

  return ret;
 8008dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop

08008de4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dee:	2300      	movs	r3, #0
 8008df0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008dfa:	2b40      	cmp	r3, #64	; 0x40
 8008dfc:	d005      	beq.n	8008e0a <USBD_StdItfReq+0x26>
 8008dfe:	2b40      	cmp	r3, #64	; 0x40
 8008e00:	d852      	bhi.n	8008ea8 <USBD_StdItfReq+0xc4>
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d001      	beq.n	8008e0a <USBD_StdItfReq+0x26>
 8008e06:	2b20      	cmp	r3, #32
 8008e08:	d14e      	bne.n	8008ea8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	3b01      	subs	r3, #1
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d840      	bhi.n	8008e9a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	889b      	ldrh	r3, [r3, #4]
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d836      	bhi.n	8008e90 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	889b      	ldrh	r3, [r3, #4]
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	4619      	mov	r1, r3
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f7ff fed9 	bl	8008be2 <USBD_CoreFindIF>
 8008e30:	4603      	mov	r3, r0
 8008e32:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e34:	7bbb      	ldrb	r3, [r7, #14]
 8008e36:	2bff      	cmp	r3, #255	; 0xff
 8008e38:	d01d      	beq.n	8008e76 <USBD_StdItfReq+0x92>
 8008e3a:	7bbb      	ldrb	r3, [r7, #14]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d11a      	bne.n	8008e76 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008e40:	7bba      	ldrb	r2, [r7, #14]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	32ae      	adds	r2, #174	; 0xae
 8008e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00f      	beq.n	8008e70 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008e50:	7bba      	ldrb	r2, [r7, #14]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e58:	7bba      	ldrb	r2, [r7, #14]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	32ae      	adds	r2, #174	; 0xae
 8008e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e62:	689b      	ldr	r3, [r3, #8]
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	4798      	blx	r3
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e6e:	e004      	b.n	8008e7a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008e70:	2303      	movs	r3, #3
 8008e72:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008e74:	e001      	b.n	8008e7a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008e76:	2303      	movs	r3, #3
 8008e78:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	88db      	ldrh	r3, [r3, #6]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d110      	bne.n	8008ea4 <USBD_StdItfReq+0xc0>
 8008e82:	7bfb      	ldrb	r3, [r7, #15]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10d      	bne.n	8008ea4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fdaa 	bl	80099e2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008e8e:	e009      	b.n	8008ea4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008e90:	6839      	ldr	r1, [r7, #0]
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fcf7 	bl	8009886 <USBD_CtlError>
          break;
 8008e98:	e004      	b.n	8008ea4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fcf2 	bl	8009886 <USBD_CtlError>
          break;
 8008ea2:	e000      	b.n	8008ea6 <USBD_StdItfReq+0xc2>
          break;
 8008ea4:	bf00      	nop
      }
      break;
 8008ea6:	e004      	b.n	8008eb2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fceb 	bl	8009886 <USBD_CtlError>
      break;
 8008eb0:	bf00      	nop
  }

  return ret;
 8008eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	889b      	ldrh	r3, [r3, #4]
 8008ece:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ed8:	2b40      	cmp	r3, #64	; 0x40
 8008eda:	d007      	beq.n	8008eec <USBD_StdEPReq+0x30>
 8008edc:	2b40      	cmp	r3, #64	; 0x40
 8008ede:	f200 817f 	bhi.w	80091e0 <USBD_StdEPReq+0x324>
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d02a      	beq.n	8008f3c <USBD_StdEPReq+0x80>
 8008ee6:	2b20      	cmp	r3, #32
 8008ee8:	f040 817a 	bne.w	80091e0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008eec:	7bbb      	ldrb	r3, [r7, #14]
 8008eee:	4619      	mov	r1, r3
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f7ff fe83 	bl	8008bfc <USBD_CoreFindEP>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008efa:	7b7b      	ldrb	r3, [r7, #13]
 8008efc:	2bff      	cmp	r3, #255	; 0xff
 8008efe:	f000 8174 	beq.w	80091ea <USBD_StdEPReq+0x32e>
 8008f02:	7b7b      	ldrb	r3, [r7, #13]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f040 8170 	bne.w	80091ea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008f0a:	7b7a      	ldrb	r2, [r7, #13]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008f12:	7b7a      	ldrb	r2, [r7, #13]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	32ae      	adds	r2, #174	; 0xae
 8008f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f000 8163 	beq.w	80091ea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008f24:	7b7a      	ldrb	r2, [r7, #13]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	32ae      	adds	r2, #174	; 0xae
 8008f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	6839      	ldr	r1, [r7, #0]
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	4798      	blx	r3
 8008f36:	4603      	mov	r3, r0
 8008f38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008f3a:	e156      	b.n	80091ea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	785b      	ldrb	r3, [r3, #1]
 8008f40:	2b03      	cmp	r3, #3
 8008f42:	d008      	beq.n	8008f56 <USBD_StdEPReq+0x9a>
 8008f44:	2b03      	cmp	r3, #3
 8008f46:	f300 8145 	bgt.w	80091d4 <USBD_StdEPReq+0x318>
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f000 809b 	beq.w	8009086 <USBD_StdEPReq+0x1ca>
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d03c      	beq.n	8008fce <USBD_StdEPReq+0x112>
 8008f54:	e13e      	b.n	80091d4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	d002      	beq.n	8008f68 <USBD_StdEPReq+0xac>
 8008f62:	2b03      	cmp	r3, #3
 8008f64:	d016      	beq.n	8008f94 <USBD_StdEPReq+0xd8>
 8008f66:	e02c      	b.n	8008fc2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f68:	7bbb      	ldrb	r3, [r7, #14]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00d      	beq.n	8008f8a <USBD_StdEPReq+0xce>
 8008f6e:	7bbb      	ldrb	r3, [r7, #14]
 8008f70:	2b80      	cmp	r3, #128	; 0x80
 8008f72:	d00a      	beq.n	8008f8a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f74:	7bbb      	ldrb	r3, [r7, #14]
 8008f76:	4619      	mov	r1, r3
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f001 f881 	bl	800a080 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f7e:	2180      	movs	r1, #128	; 0x80
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f001 f87d 	bl	800a080 <USBD_LL_StallEP>
 8008f86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f88:	e020      	b.n	8008fcc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008f8a:	6839      	ldr	r1, [r7, #0]
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 fc7a 	bl	8009886 <USBD_CtlError>
              break;
 8008f92:	e01b      	b.n	8008fcc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	885b      	ldrh	r3, [r3, #2]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d10e      	bne.n	8008fba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008f9c:	7bbb      	ldrb	r3, [r7, #14]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00b      	beq.n	8008fba <USBD_StdEPReq+0xfe>
 8008fa2:	7bbb      	ldrb	r3, [r7, #14]
 8008fa4:	2b80      	cmp	r3, #128	; 0x80
 8008fa6:	d008      	beq.n	8008fba <USBD_StdEPReq+0xfe>
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	88db      	ldrh	r3, [r3, #6]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d104      	bne.n	8008fba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fb0:	7bbb      	ldrb	r3, [r7, #14]
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f001 f863 	bl	800a080 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 fd11 	bl	80099e2 <USBD_CtlSendStatus>

              break;
 8008fc0:	e004      	b.n	8008fcc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008fc2:	6839      	ldr	r1, [r7, #0]
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 fc5e 	bl	8009886 <USBD_CtlError>
              break;
 8008fca:	bf00      	nop
          }
          break;
 8008fcc:	e107      	b.n	80091de <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d002      	beq.n	8008fe0 <USBD_StdEPReq+0x124>
 8008fda:	2b03      	cmp	r3, #3
 8008fdc:	d016      	beq.n	800900c <USBD_StdEPReq+0x150>
 8008fde:	e04b      	b.n	8009078 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00d      	beq.n	8009002 <USBD_StdEPReq+0x146>
 8008fe6:	7bbb      	ldrb	r3, [r7, #14]
 8008fe8:	2b80      	cmp	r3, #128	; 0x80
 8008fea:	d00a      	beq.n	8009002 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fec:	7bbb      	ldrb	r3, [r7, #14]
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f001 f845 	bl	800a080 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ff6:	2180      	movs	r1, #128	; 0x80
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f001 f841 	bl	800a080 <USBD_LL_StallEP>
 8008ffe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009000:	e040      	b.n	8009084 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009002:	6839      	ldr	r1, [r7, #0]
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 fc3e 	bl	8009886 <USBD_CtlError>
              break;
 800900a:	e03b      	b.n	8009084 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	885b      	ldrh	r3, [r3, #2]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d136      	bne.n	8009082 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009014:	7bbb      	ldrb	r3, [r7, #14]
 8009016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800901a:	2b00      	cmp	r3, #0
 800901c:	d004      	beq.n	8009028 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800901e:	7bbb      	ldrb	r3, [r7, #14]
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f001 f84b 	bl	800a0be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 fcda 	bl	80099e2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800902e:	7bbb      	ldrb	r3, [r7, #14]
 8009030:	4619      	mov	r1, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7ff fde2 	bl	8008bfc <USBD_CoreFindEP>
 8009038:	4603      	mov	r3, r0
 800903a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800903c:	7b7b      	ldrb	r3, [r7, #13]
 800903e:	2bff      	cmp	r3, #255	; 0xff
 8009040:	d01f      	beq.n	8009082 <USBD_StdEPReq+0x1c6>
 8009042:	7b7b      	ldrb	r3, [r7, #13]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d11c      	bne.n	8009082 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009048:	7b7a      	ldrb	r2, [r7, #13]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009050:	7b7a      	ldrb	r2, [r7, #13]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	32ae      	adds	r2, #174	; 0xae
 8009056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d010      	beq.n	8009082 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009060:	7b7a      	ldrb	r2, [r7, #13]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	32ae      	adds	r2, #174	; 0xae
 8009066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800906a:	689b      	ldr	r3, [r3, #8]
 800906c:	6839      	ldr	r1, [r7, #0]
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	4798      	blx	r3
 8009072:	4603      	mov	r3, r0
 8009074:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009076:	e004      	b.n	8009082 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fc03 	bl	8009886 <USBD_CtlError>
              break;
 8009080:	e000      	b.n	8009084 <USBD_StdEPReq+0x1c8>
              break;
 8009082:	bf00      	nop
          }
          break;
 8009084:	e0ab      	b.n	80091de <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800908c:	b2db      	uxtb	r3, r3
 800908e:	2b02      	cmp	r3, #2
 8009090:	d002      	beq.n	8009098 <USBD_StdEPReq+0x1dc>
 8009092:	2b03      	cmp	r3, #3
 8009094:	d032      	beq.n	80090fc <USBD_StdEPReq+0x240>
 8009096:	e097      	b.n	80091c8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009098:	7bbb      	ldrb	r3, [r7, #14]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d007      	beq.n	80090ae <USBD_StdEPReq+0x1f2>
 800909e:	7bbb      	ldrb	r3, [r7, #14]
 80090a0:	2b80      	cmp	r3, #128	; 0x80
 80090a2:	d004      	beq.n	80090ae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 fbed 	bl	8009886 <USBD_CtlError>
                break;
 80090ac:	e091      	b.n	80091d2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	da0b      	bge.n	80090ce <USBD_StdEPReq+0x212>
 80090b6:	7bbb      	ldrb	r3, [r7, #14]
 80090b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80090bc:	4613      	mov	r3, r2
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	4413      	add	r3, r2
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	3310      	adds	r3, #16
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	4413      	add	r3, r2
 80090ca:	3304      	adds	r3, #4
 80090cc:	e00b      	b.n	80090e6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80090ce:	7bbb      	ldrb	r3, [r7, #14]
 80090d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090d4:	4613      	mov	r3, r2
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	4413      	add	r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	4413      	add	r3, r2
 80090e4:	3304      	adds	r3, #4
 80090e6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	2200      	movs	r2, #0
 80090ec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	2202      	movs	r2, #2
 80090f2:	4619      	mov	r1, r3
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 fc37 	bl	8009968 <USBD_CtlSendData>
              break;
 80090fa:	e06a      	b.n	80091d2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80090fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009100:	2b00      	cmp	r3, #0
 8009102:	da11      	bge.n	8009128 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009104:	7bbb      	ldrb	r3, [r7, #14]
 8009106:	f003 020f 	and.w	r2, r3, #15
 800910a:	6879      	ldr	r1, [r7, #4]
 800910c:	4613      	mov	r3, r2
 800910e:	009b      	lsls	r3, r3, #2
 8009110:	4413      	add	r3, r2
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	440b      	add	r3, r1
 8009116:	3324      	adds	r3, #36	; 0x24
 8009118:	881b      	ldrh	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d117      	bne.n	800914e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800911e:	6839      	ldr	r1, [r7, #0]
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fbb0 	bl	8009886 <USBD_CtlError>
                  break;
 8009126:	e054      	b.n	80091d2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009128:	7bbb      	ldrb	r3, [r7, #14]
 800912a:	f003 020f 	and.w	r2, r3, #15
 800912e:	6879      	ldr	r1, [r7, #4]
 8009130:	4613      	mov	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	4413      	add	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	440b      	add	r3, r1
 800913a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800913e:	881b      	ldrh	r3, [r3, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d104      	bne.n	800914e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009144:	6839      	ldr	r1, [r7, #0]
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 fb9d 	bl	8009886 <USBD_CtlError>
                  break;
 800914c:	e041      	b.n	80091d2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800914e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009152:	2b00      	cmp	r3, #0
 8009154:	da0b      	bge.n	800916e <USBD_StdEPReq+0x2b2>
 8009156:	7bbb      	ldrb	r3, [r7, #14]
 8009158:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800915c:	4613      	mov	r3, r2
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4413      	add	r3, r2
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	3310      	adds	r3, #16
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	4413      	add	r3, r2
 800916a:	3304      	adds	r3, #4
 800916c:	e00b      	b.n	8009186 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800916e:	7bbb      	ldrb	r3, [r7, #14]
 8009170:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009174:	4613      	mov	r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	4413      	add	r3, r2
 8009184:	3304      	adds	r3, #4
 8009186:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009188:	7bbb      	ldrb	r3, [r7, #14]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d002      	beq.n	8009194 <USBD_StdEPReq+0x2d8>
 800918e:	7bbb      	ldrb	r3, [r7, #14]
 8009190:	2b80      	cmp	r3, #128	; 0x80
 8009192:	d103      	bne.n	800919c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	2200      	movs	r2, #0
 8009198:	601a      	str	r2, [r3, #0]
 800919a:	e00e      	b.n	80091ba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800919c:	7bbb      	ldrb	r3, [r7, #14]
 800919e:	4619      	mov	r1, r3
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 ffab 	bl	800a0fc <USBD_LL_IsStallEP>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d003      	beq.n	80091b4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	2201      	movs	r2, #1
 80091b0:	601a      	str	r2, [r3, #0]
 80091b2:	e002      	b.n	80091ba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	2200      	movs	r2, #0
 80091b8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	2202      	movs	r2, #2
 80091be:	4619      	mov	r1, r3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fbd1 	bl	8009968 <USBD_CtlSendData>
              break;
 80091c6:	e004      	b.n	80091d2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80091c8:	6839      	ldr	r1, [r7, #0]
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 fb5b 	bl	8009886 <USBD_CtlError>
              break;
 80091d0:	bf00      	nop
          }
          break;
 80091d2:	e004      	b.n	80091de <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fb55 	bl	8009886 <USBD_CtlError>
          break;
 80091dc:	bf00      	nop
      }
      break;
 80091de:	e005      	b.n	80091ec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80091e0:	6839      	ldr	r1, [r7, #0]
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fb4f 	bl	8009886 <USBD_CtlError>
      break;
 80091e8:	e000      	b.n	80091ec <USBD_StdEPReq+0x330>
      break;
 80091ea:	bf00      	nop
  }

  return ret;
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
	...

080091f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009202:	2300      	movs	r3, #0
 8009204:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009206:	2300      	movs	r3, #0
 8009208:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800920a:	2300      	movs	r3, #0
 800920c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	885b      	ldrh	r3, [r3, #2]
 8009212:	0a1b      	lsrs	r3, r3, #8
 8009214:	b29b      	uxth	r3, r3
 8009216:	3b01      	subs	r3, #1
 8009218:	2b06      	cmp	r3, #6
 800921a:	f200 8128 	bhi.w	800946e <USBD_GetDescriptor+0x276>
 800921e:	a201      	add	r2, pc, #4	; (adr r2, 8009224 <USBD_GetDescriptor+0x2c>)
 8009220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009224:	08009241 	.word	0x08009241
 8009228:	08009259 	.word	0x08009259
 800922c:	08009299 	.word	0x08009299
 8009230:	0800946f 	.word	0x0800946f
 8009234:	0800946f 	.word	0x0800946f
 8009238:	0800940f 	.word	0x0800940f
 800923c:	0800943b 	.word	0x0800943b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	7c12      	ldrb	r2, [r2, #16]
 800924c:	f107 0108 	add.w	r1, r7, #8
 8009250:	4610      	mov	r0, r2
 8009252:	4798      	blx	r3
 8009254:	60f8      	str	r0, [r7, #12]
      break;
 8009256:	e112      	b.n	800947e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	7c1b      	ldrb	r3, [r3, #16]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10d      	bne.n	800927c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009268:	f107 0208 	add.w	r2, r7, #8
 800926c:	4610      	mov	r0, r2
 800926e:	4798      	blx	r3
 8009270:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	3301      	adds	r3, #1
 8009276:	2202      	movs	r2, #2
 8009278:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800927a:	e100      	b.n	800947e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009284:	f107 0208 	add.w	r2, r7, #8
 8009288:	4610      	mov	r0, r2
 800928a:	4798      	blx	r3
 800928c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	3301      	adds	r3, #1
 8009292:	2202      	movs	r2, #2
 8009294:	701a      	strb	r2, [r3, #0]
      break;
 8009296:	e0f2      	b.n	800947e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	885b      	ldrh	r3, [r3, #2]
 800929c:	b2db      	uxtb	r3, r3
 800929e:	2b05      	cmp	r3, #5
 80092a0:	f200 80ac 	bhi.w	80093fc <USBD_GetDescriptor+0x204>
 80092a4:	a201      	add	r2, pc, #4	; (adr r2, 80092ac <USBD_GetDescriptor+0xb4>)
 80092a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092aa:	bf00      	nop
 80092ac:	080092c5 	.word	0x080092c5
 80092b0:	080092f9 	.word	0x080092f9
 80092b4:	0800932d 	.word	0x0800932d
 80092b8:	08009361 	.word	0x08009361
 80092bc:	08009395 	.word	0x08009395
 80092c0:	080093c9 	.word	0x080093c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00b      	beq.n	80092e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	7c12      	ldrb	r2, [r2, #16]
 80092dc:	f107 0108 	add.w	r1, r7, #8
 80092e0:	4610      	mov	r0, r2
 80092e2:	4798      	blx	r3
 80092e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092e6:	e091      	b.n	800940c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092e8:	6839      	ldr	r1, [r7, #0]
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 facb 	bl	8009886 <USBD_CtlError>
            err++;
 80092f0:	7afb      	ldrb	r3, [r7, #11]
 80092f2:	3301      	adds	r3, #1
 80092f4:	72fb      	strb	r3, [r7, #11]
          break;
 80092f6:	e089      	b.n	800940c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00b      	beq.n	800931c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	7c12      	ldrb	r2, [r2, #16]
 8009310:	f107 0108 	add.w	r1, r7, #8
 8009314:	4610      	mov	r0, r2
 8009316:	4798      	blx	r3
 8009318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800931a:	e077      	b.n	800940c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800931c:	6839      	ldr	r1, [r7, #0]
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 fab1 	bl	8009886 <USBD_CtlError>
            err++;
 8009324:	7afb      	ldrb	r3, [r7, #11]
 8009326:	3301      	adds	r3, #1
 8009328:	72fb      	strb	r3, [r7, #11]
          break;
 800932a:	e06f      	b.n	800940c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00b      	beq.n	8009350 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	7c12      	ldrb	r2, [r2, #16]
 8009344:	f107 0108 	add.w	r1, r7, #8
 8009348:	4610      	mov	r0, r2
 800934a:	4798      	blx	r3
 800934c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800934e:	e05d      	b.n	800940c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009350:	6839      	ldr	r1, [r7, #0]
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 fa97 	bl	8009886 <USBD_CtlError>
            err++;
 8009358:	7afb      	ldrb	r3, [r7, #11]
 800935a:	3301      	adds	r3, #1
 800935c:	72fb      	strb	r3, [r7, #11]
          break;
 800935e:	e055      	b.n	800940c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d00b      	beq.n	8009384 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	7c12      	ldrb	r2, [r2, #16]
 8009378:	f107 0108 	add.w	r1, r7, #8
 800937c:	4610      	mov	r0, r2
 800937e:	4798      	blx	r3
 8009380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009382:	e043      	b.n	800940c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009384:	6839      	ldr	r1, [r7, #0]
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 fa7d 	bl	8009886 <USBD_CtlError>
            err++;
 800938c:	7afb      	ldrb	r3, [r7, #11]
 800938e:	3301      	adds	r3, #1
 8009390:	72fb      	strb	r3, [r7, #11]
          break;
 8009392:	e03b      	b.n	800940c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800939a:	695b      	ldr	r3, [r3, #20]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00b      	beq.n	80093b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093a6:	695b      	ldr	r3, [r3, #20]
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	7c12      	ldrb	r2, [r2, #16]
 80093ac:	f107 0108 	add.w	r1, r7, #8
 80093b0:	4610      	mov	r0, r2
 80093b2:	4798      	blx	r3
 80093b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093b6:	e029      	b.n	800940c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093b8:	6839      	ldr	r1, [r7, #0]
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 fa63 	bl	8009886 <USBD_CtlError>
            err++;
 80093c0:	7afb      	ldrb	r3, [r7, #11]
 80093c2:	3301      	adds	r3, #1
 80093c4:	72fb      	strb	r3, [r7, #11]
          break;
 80093c6:	e021      	b.n	800940c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093ce:	699b      	ldr	r3, [r3, #24]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00b      	beq.n	80093ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	7c12      	ldrb	r2, [r2, #16]
 80093e0:	f107 0108 	add.w	r1, r7, #8
 80093e4:	4610      	mov	r0, r2
 80093e6:	4798      	blx	r3
 80093e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80093ea:	e00f      	b.n	800940c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fa49 	bl	8009886 <USBD_CtlError>
            err++;
 80093f4:	7afb      	ldrb	r3, [r7, #11]
 80093f6:	3301      	adds	r3, #1
 80093f8:	72fb      	strb	r3, [r7, #11]
          break;
 80093fa:	e007      	b.n	800940c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80093fc:	6839      	ldr	r1, [r7, #0]
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 fa41 	bl	8009886 <USBD_CtlError>
          err++;
 8009404:	7afb      	ldrb	r3, [r7, #11]
 8009406:	3301      	adds	r3, #1
 8009408:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800940a:	bf00      	nop
      }
      break;
 800940c:	e037      	b.n	800947e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	7c1b      	ldrb	r3, [r3, #16]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d109      	bne.n	800942a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800941c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800941e:	f107 0208 	add.w	r2, r7, #8
 8009422:	4610      	mov	r0, r2
 8009424:	4798      	blx	r3
 8009426:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009428:	e029      	b.n	800947e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800942a:	6839      	ldr	r1, [r7, #0]
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 fa2a 	bl	8009886 <USBD_CtlError>
        err++;
 8009432:	7afb      	ldrb	r3, [r7, #11]
 8009434:	3301      	adds	r3, #1
 8009436:	72fb      	strb	r3, [r7, #11]
      break;
 8009438:	e021      	b.n	800947e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	7c1b      	ldrb	r3, [r3, #16]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d10d      	bne.n	800945e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944a:	f107 0208 	add.w	r2, r7, #8
 800944e:	4610      	mov	r0, r2
 8009450:	4798      	blx	r3
 8009452:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	3301      	adds	r3, #1
 8009458:	2207      	movs	r2, #7
 800945a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800945c:	e00f      	b.n	800947e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800945e:	6839      	ldr	r1, [r7, #0]
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fa10 	bl	8009886 <USBD_CtlError>
        err++;
 8009466:	7afb      	ldrb	r3, [r7, #11]
 8009468:	3301      	adds	r3, #1
 800946a:	72fb      	strb	r3, [r7, #11]
      break;
 800946c:	e007      	b.n	800947e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800946e:	6839      	ldr	r1, [r7, #0]
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 fa08 	bl	8009886 <USBD_CtlError>
      err++;
 8009476:	7afb      	ldrb	r3, [r7, #11]
 8009478:	3301      	adds	r3, #1
 800947a:	72fb      	strb	r3, [r7, #11]
      break;
 800947c:	bf00      	nop
  }

  if (err != 0U)
 800947e:	7afb      	ldrb	r3, [r7, #11]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d11e      	bne.n	80094c2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	88db      	ldrh	r3, [r3, #6]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d016      	beq.n	80094ba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800948c:	893b      	ldrh	r3, [r7, #8]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00e      	beq.n	80094b0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	88da      	ldrh	r2, [r3, #6]
 8009496:	893b      	ldrh	r3, [r7, #8]
 8009498:	4293      	cmp	r3, r2
 800949a:	bf28      	it	cs
 800949c:	4613      	movcs	r3, r2
 800949e:	b29b      	uxth	r3, r3
 80094a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80094a2:	893b      	ldrh	r3, [r7, #8]
 80094a4:	461a      	mov	r2, r3
 80094a6:	68f9      	ldr	r1, [r7, #12]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 fa5d 	bl	8009968 <USBD_CtlSendData>
 80094ae:	e009      	b.n	80094c4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f9e7 	bl	8009886 <USBD_CtlError>
 80094b8:	e004      	b.n	80094c4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 fa91 	bl	80099e2 <USBD_CtlSendStatus>
 80094c0:	e000      	b.n	80094c4 <USBD_GetDescriptor+0x2cc>
    return;
 80094c2:	bf00      	nop
  }
}
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop

080094cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	889b      	ldrh	r3, [r3, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d131      	bne.n	8009542 <USBD_SetAddress+0x76>
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	88db      	ldrh	r3, [r3, #6]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d12d      	bne.n	8009542 <USBD_SetAddress+0x76>
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	885b      	ldrh	r3, [r3, #2]
 80094ea:	2b7f      	cmp	r3, #127	; 0x7f
 80094ec:	d829      	bhi.n	8009542 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	885b      	ldrh	r3, [r3, #2]
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009500:	b2db      	uxtb	r3, r3
 8009502:	2b03      	cmp	r3, #3
 8009504:	d104      	bne.n	8009510 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009506:	6839      	ldr	r1, [r7, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f9bc 	bl	8009886 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800950e:	e01d      	b.n	800954c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	7bfa      	ldrb	r2, [r7, #15]
 8009514:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009518:	7bfb      	ldrb	r3, [r7, #15]
 800951a:	4619      	mov	r1, r3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fe19 	bl	800a154 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fa5d 	bl	80099e2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009528:	7bfb      	ldrb	r3, [r7, #15]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d004      	beq.n	8009538 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2202      	movs	r2, #2
 8009532:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009536:	e009      	b.n	800954c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009540:	e004      	b.n	800954c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009542:	6839      	ldr	r1, [r7, #0]
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 f99e 	bl	8009886 <USBD_CtlError>
  }
}
 800954a:	bf00      	nop
 800954c:	bf00      	nop
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	885b      	ldrh	r3, [r3, #2]
 8009566:	b2da      	uxtb	r2, r3
 8009568:	4b4e      	ldr	r3, [pc, #312]	; (80096a4 <USBD_SetConfig+0x150>)
 800956a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800956c:	4b4d      	ldr	r3, [pc, #308]	; (80096a4 <USBD_SetConfig+0x150>)
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d905      	bls.n	8009580 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009574:	6839      	ldr	r1, [r7, #0]
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f985 	bl	8009886 <USBD_CtlError>
    return USBD_FAIL;
 800957c:	2303      	movs	r3, #3
 800957e:	e08c      	b.n	800969a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009586:	b2db      	uxtb	r3, r3
 8009588:	2b02      	cmp	r3, #2
 800958a:	d002      	beq.n	8009592 <USBD_SetConfig+0x3e>
 800958c:	2b03      	cmp	r3, #3
 800958e:	d029      	beq.n	80095e4 <USBD_SetConfig+0x90>
 8009590:	e075      	b.n	800967e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009592:	4b44      	ldr	r3, [pc, #272]	; (80096a4 <USBD_SetConfig+0x150>)
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d020      	beq.n	80095dc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800959a:	4b42      	ldr	r3, [pc, #264]	; (80096a4 <USBD_SetConfig+0x150>)
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	461a      	mov	r2, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80095a4:	4b3f      	ldr	r3, [pc, #252]	; (80096a4 <USBD_SetConfig+0x150>)
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	4619      	mov	r1, r3
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f7fe ffe7 	bl	800857e <USBD_SetClassConfig>
 80095b0:	4603      	mov	r3, r0
 80095b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80095b4:	7bfb      	ldrb	r3, [r7, #15]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d008      	beq.n	80095cc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80095ba:	6839      	ldr	r1, [r7, #0]
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 f962 	bl	8009886 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2202      	movs	r2, #2
 80095c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80095ca:	e065      	b.n	8009698 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 fa08 	bl	80099e2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2203      	movs	r2, #3
 80095d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80095da:	e05d      	b.n	8009698 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f000 fa00 	bl	80099e2 <USBD_CtlSendStatus>
      break;
 80095e2:	e059      	b.n	8009698 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80095e4:	4b2f      	ldr	r3, [pc, #188]	; (80096a4 <USBD_SetConfig+0x150>)
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d112      	bne.n	8009612 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2202      	movs	r2, #2
 80095f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80095f4:	4b2b      	ldr	r3, [pc, #172]	; (80096a4 <USBD_SetConfig+0x150>)
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	461a      	mov	r2, r3
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095fe:	4b29      	ldr	r3, [pc, #164]	; (80096a4 <USBD_SetConfig+0x150>)
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	4619      	mov	r1, r3
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f7fe ffd6 	bl	80085b6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f9e9 	bl	80099e2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009610:	e042      	b.n	8009698 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009612:	4b24      	ldr	r3, [pc, #144]	; (80096a4 <USBD_SetConfig+0x150>)
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	461a      	mov	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	429a      	cmp	r2, r3
 800961e:	d02a      	beq.n	8009676 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	b2db      	uxtb	r3, r3
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f7fe ffc4 	bl	80085b6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800962e:	4b1d      	ldr	r3, [pc, #116]	; (80096a4 <USBD_SetConfig+0x150>)
 8009630:	781b      	ldrb	r3, [r3, #0]
 8009632:	461a      	mov	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009638:	4b1a      	ldr	r3, [pc, #104]	; (80096a4 <USBD_SetConfig+0x150>)
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	4619      	mov	r1, r3
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7fe ff9d 	bl	800857e <USBD_SetClassConfig>
 8009644:	4603      	mov	r3, r0
 8009646:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009648:	7bfb      	ldrb	r3, [r7, #15]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00f      	beq.n	800966e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800964e:	6839      	ldr	r1, [r7, #0]
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 f918 	bl	8009886 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	b2db      	uxtb	r3, r3
 800965c:	4619      	mov	r1, r3
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f7fe ffa9 	bl	80085b6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2202      	movs	r2, #2
 8009668:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800966c:	e014      	b.n	8009698 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 f9b7 	bl	80099e2 <USBD_CtlSendStatus>
      break;
 8009674:	e010      	b.n	8009698 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f9b3 	bl	80099e2 <USBD_CtlSendStatus>
      break;
 800967c:	e00c      	b.n	8009698 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800967e:	6839      	ldr	r1, [r7, #0]
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 f900 	bl	8009886 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009686:	4b07      	ldr	r3, [pc, #28]	; (80096a4 <USBD_SetConfig+0x150>)
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	4619      	mov	r1, r3
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f7fe ff92 	bl	80085b6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009692:	2303      	movs	r3, #3
 8009694:	73fb      	strb	r3, [r7, #15]
      break;
 8009696:	bf00      	nop
  }

  return ret;
 8009698:	7bfb      	ldrb	r3, [r7, #15]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	20003794 	.word	0x20003794

080096a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	88db      	ldrh	r3, [r3, #6]
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d004      	beq.n	80096c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80096ba:	6839      	ldr	r1, [r7, #0]
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 f8e2 	bl	8009886 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80096c2:	e023      	b.n	800970c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	dc02      	bgt.n	80096d6 <USBD_GetConfig+0x2e>
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	dc03      	bgt.n	80096dc <USBD_GetConfig+0x34>
 80096d4:	e015      	b.n	8009702 <USBD_GetConfig+0x5a>
 80096d6:	2b03      	cmp	r3, #3
 80096d8:	d00b      	beq.n	80096f2 <USBD_GetConfig+0x4a>
 80096da:	e012      	b.n	8009702 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	3308      	adds	r3, #8
 80096e6:	2201      	movs	r2, #1
 80096e8:	4619      	mov	r1, r3
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 f93c 	bl	8009968 <USBD_CtlSendData>
        break;
 80096f0:	e00c      	b.n	800970c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	3304      	adds	r3, #4
 80096f6:	2201      	movs	r2, #1
 80096f8:	4619      	mov	r1, r3
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f934 	bl	8009968 <USBD_CtlSendData>
        break;
 8009700:	e004      	b.n	800970c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f8be 	bl	8009886 <USBD_CtlError>
        break;
 800970a:	bf00      	nop
}
 800970c:	bf00      	nop
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009724:	b2db      	uxtb	r3, r3
 8009726:	3b01      	subs	r3, #1
 8009728:	2b02      	cmp	r3, #2
 800972a:	d81e      	bhi.n	800976a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	88db      	ldrh	r3, [r3, #6]
 8009730:	2b02      	cmp	r3, #2
 8009732:	d004      	beq.n	800973e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009734:	6839      	ldr	r1, [r7, #0]
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 f8a5 	bl	8009886 <USBD_CtlError>
        break;
 800973c:	e01a      	b.n	8009774 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800974a:	2b00      	cmp	r3, #0
 800974c:	d005      	beq.n	800975a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	f043 0202 	orr.w	r2, r3, #2
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	330c      	adds	r3, #12
 800975e:	2202      	movs	r2, #2
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 f900 	bl	8009968 <USBD_CtlSendData>
      break;
 8009768:	e004      	b.n	8009774 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800976a:	6839      	ldr	r1, [r7, #0]
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 f88a 	bl	8009886 <USBD_CtlError>
      break;
 8009772:	bf00      	nop
  }
}
 8009774:	bf00      	nop
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	885b      	ldrh	r3, [r3, #2]
 800978a:	2b01      	cmp	r3, #1
 800978c:	d107      	bne.n	800979e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2201      	movs	r2, #1
 8009792:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f923 	bl	80099e2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800979c:	e013      	b.n	80097c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	885b      	ldrh	r3, [r3, #2]
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d10b      	bne.n	80097be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	889b      	ldrh	r3, [r3, #4]
 80097aa:	0a1b      	lsrs	r3, r3, #8
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	b2da      	uxtb	r2, r3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 f913 	bl	80099e2 <USBD_CtlSendStatus>
}
 80097bc:	e003      	b.n	80097c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80097be:	6839      	ldr	r1, [r7, #0]
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 f860 	bl	8009886 <USBD_CtlError>
}
 80097c6:	bf00      	nop
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b082      	sub	sp, #8
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
 80097d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	3b01      	subs	r3, #1
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d80b      	bhi.n	80097fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	885b      	ldrh	r3, [r3, #2]
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d10c      	bne.n	8009808 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 f8f3 	bl	80099e2 <USBD_CtlSendStatus>
      }
      break;
 80097fc:	e004      	b.n	8009808 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80097fe:	6839      	ldr	r1, [r7, #0]
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 f840 	bl	8009886 <USBD_CtlError>
      break;
 8009806:	e000      	b.n	800980a <USBD_ClrFeature+0x3c>
      break;
 8009808:	bf00      	nop
  }
}
 800980a:	bf00      	nop
 800980c:	3708      	adds	r7, #8
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b084      	sub	sp, #16
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
 800981a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	781a      	ldrb	r2, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	3301      	adds	r3, #1
 800982c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	781a      	ldrb	r2, [r3, #0]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	3301      	adds	r3, #1
 800983a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f7ff fa41 	bl	8008cc4 <SWAPBYTE>
 8009842:	4603      	mov	r3, r0
 8009844:	461a      	mov	r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	3301      	adds	r3, #1
 800984e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	3301      	adds	r3, #1
 8009854:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009856:	68f8      	ldr	r0, [r7, #12]
 8009858:	f7ff fa34 	bl	8008cc4 <SWAPBYTE>
 800985c:	4603      	mov	r3, r0
 800985e:	461a      	mov	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	3301      	adds	r3, #1
 8009868:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	3301      	adds	r3, #1
 800986e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f7ff fa27 	bl	8008cc4 <SWAPBYTE>
 8009876:	4603      	mov	r3, r0
 8009878:	461a      	mov	r2, r3
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	80da      	strh	r2, [r3, #6]
}
 800987e:	bf00      	nop
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b082      	sub	sp, #8
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009890:	2180      	movs	r1, #128	; 0x80
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fbf4 	bl	800a080 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009898:	2100      	movs	r1, #0
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 fbf0 	bl	800a080 <USBD_LL_StallEP>
}
 80098a0:	bf00      	nop
 80098a2:	3708      	adds	r7, #8
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b086      	sub	sp, #24
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80098b4:	2300      	movs	r3, #0
 80098b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d036      	beq.n	800992c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80098c2:	6938      	ldr	r0, [r7, #16]
 80098c4:	f000 f836 	bl	8009934 <USBD_GetLen>
 80098c8:	4603      	mov	r3, r0
 80098ca:	3301      	adds	r3, #1
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	005b      	lsls	r3, r3, #1
 80098d0:	b29a      	uxth	r2, r3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80098d6:	7dfb      	ldrb	r3, [r7, #23]
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	4413      	add	r3, r2
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	7812      	ldrb	r2, [r2, #0]
 80098e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80098e2:	7dfb      	ldrb	r3, [r7, #23]
 80098e4:	3301      	adds	r3, #1
 80098e6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80098e8:	7dfb      	ldrb	r3, [r7, #23]
 80098ea:	68ba      	ldr	r2, [r7, #8]
 80098ec:	4413      	add	r3, r2
 80098ee:	2203      	movs	r2, #3
 80098f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80098f2:	7dfb      	ldrb	r3, [r7, #23]
 80098f4:	3301      	adds	r3, #1
 80098f6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80098f8:	e013      	b.n	8009922 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80098fa:	7dfb      	ldrb	r3, [r7, #23]
 80098fc:	68ba      	ldr	r2, [r7, #8]
 80098fe:	4413      	add	r3, r2
 8009900:	693a      	ldr	r2, [r7, #16]
 8009902:	7812      	ldrb	r2, [r2, #0]
 8009904:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	3301      	adds	r3, #1
 800990a:	613b      	str	r3, [r7, #16]
    idx++;
 800990c:	7dfb      	ldrb	r3, [r7, #23]
 800990e:	3301      	adds	r3, #1
 8009910:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009912:	7dfb      	ldrb	r3, [r7, #23]
 8009914:	68ba      	ldr	r2, [r7, #8]
 8009916:	4413      	add	r3, r2
 8009918:	2200      	movs	r2, #0
 800991a:	701a      	strb	r2, [r3, #0]
    idx++;
 800991c:	7dfb      	ldrb	r3, [r7, #23]
 800991e:	3301      	adds	r3, #1
 8009920:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1e7      	bne.n	80098fa <USBD_GetString+0x52>
 800992a:	e000      	b.n	800992e <USBD_GetString+0x86>
    return;
 800992c:	bf00      	nop
  }
}
 800992e:	3718      	adds	r7, #24
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800993c:	2300      	movs	r3, #0
 800993e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009944:	e005      	b.n	8009952 <USBD_GetLen+0x1e>
  {
    len++;
 8009946:	7bfb      	ldrb	r3, [r7, #15]
 8009948:	3301      	adds	r3, #1
 800994a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	3301      	adds	r3, #1
 8009950:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1f5      	bne.n	8009946 <USBD_GetLen+0x12>
  }

  return len;
 800995a:	7bfb      	ldrb	r3, [r7, #15]
}
 800995c:	4618      	mov	r0, r3
 800995e:	3714      	adds	r7, #20
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	60f8      	str	r0, [r7, #12]
 8009970:	60b9      	str	r1, [r7, #8]
 8009972:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2202      	movs	r2, #2
 8009978:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	68ba      	ldr	r2, [r7, #8]
 800998c:	2100      	movs	r1, #0
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f000 fbff 	bl	800a192 <USBD_LL_Transmit>

  return USBD_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3710      	adds	r7, #16
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b084      	sub	sp, #16
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	60f8      	str	r0, [r7, #12]
 80099a6:	60b9      	str	r1, [r7, #8]
 80099a8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	68ba      	ldr	r2, [r7, #8]
 80099ae:	2100      	movs	r1, #0
 80099b0:	68f8      	ldr	r0, [r7, #12]
 80099b2:	f000 fbee 	bl	800a192 <USBD_LL_Transmit>

  return USBD_OK;
 80099b6:	2300      	movs	r3, #0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b084      	sub	sp, #16
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	68ba      	ldr	r2, [r7, #8]
 80099d0:	2100      	movs	r1, #0
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f000 fbfe 	bl	800a1d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b082      	sub	sp, #8
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2204      	movs	r2, #4
 80099ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80099f2:	2300      	movs	r3, #0
 80099f4:	2200      	movs	r2, #0
 80099f6:	2100      	movs	r1, #0
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fbca 	bl	800a192 <USBD_LL_Transmit>

  return USBD_OK;
 80099fe:	2300      	movs	r3, #0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2205      	movs	r2, #5
 8009a14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a18:	2300      	movs	r3, #0
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fbd8 	bl	800a1d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3708      	adds	r7, #8
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
	...

08009a30 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009a34:	2200      	movs	r2, #0
 8009a36:	490e      	ldr	r1, [pc, #56]	; (8009a70 <MX_USB_DEVICE_Init+0x40>)
 8009a38:	480e      	ldr	r0, [pc, #56]	; (8009a74 <MX_USB_DEVICE_Init+0x44>)
 8009a3a:	f7fe fd23 	bl	8008484 <USBD_Init>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d001      	beq.n	8009a48 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a44:	f7f8 fada 	bl	8001ffc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009a48:	490b      	ldr	r1, [pc, #44]	; (8009a78 <MX_USB_DEVICE_Init+0x48>)
 8009a4a:	480a      	ldr	r0, [pc, #40]	; (8009a74 <MX_USB_DEVICE_Init+0x44>)
 8009a4c:	f7fe fd4a 	bl	80084e4 <USBD_RegisterClass>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d001      	beq.n	8009a5a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a56:	f7f8 fad1 	bl	8001ffc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009a5a:	4806      	ldr	r0, [pc, #24]	; (8009a74 <MX_USB_DEVICE_Init+0x44>)
 8009a5c:	f7fe fd78 	bl	8008550 <USBD_Start>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d001      	beq.n	8009a6a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8009a66:	f7f8 fac9 	bl	8001ffc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009a6a:	bf00      	nop
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	20000094 	.word	0x20000094
 8009a74:	20003798 	.word	0x20003798
 8009a78:	2000001c 	.word	0x2000001c

08009a7c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	4603      	mov	r3, r0
 8009a84:	6039      	str	r1, [r7, #0]
 8009a86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	2212      	movs	r2, #18
 8009a8c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009a8e:	4b03      	ldr	r3, [pc, #12]	; (8009a9c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	200000b0 	.word	0x200000b0

08009aa0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	6039      	str	r1, [r7, #0]
 8009aaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	2204      	movs	r2, #4
 8009ab0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009ab2:	4b03      	ldr	r3, [pc, #12]	; (8009ac0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr
 8009ac0:	200000c4 	.word	0x200000c4

08009ac4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	4603      	mov	r3, r0
 8009acc:	6039      	str	r1, [r7, #0]
 8009ace:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ad0:	79fb      	ldrb	r3, [r7, #7]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d105      	bne.n	8009ae2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	4907      	ldr	r1, [pc, #28]	; (8009af8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ada:	4808      	ldr	r0, [pc, #32]	; (8009afc <USBD_FS_ProductStrDescriptor+0x38>)
 8009adc:	f7ff fee4 	bl	80098a8 <USBD_GetString>
 8009ae0:	e004      	b.n	8009aec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ae2:	683a      	ldr	r2, [r7, #0]
 8009ae4:	4904      	ldr	r1, [pc, #16]	; (8009af8 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ae6:	4805      	ldr	r0, [pc, #20]	; (8009afc <USBD_FS_ProductStrDescriptor+0x38>)
 8009ae8:	f7ff fede 	bl	80098a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009aec:	4b02      	ldr	r3, [pc, #8]	; (8009af8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3708      	adds	r7, #8
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	20003a74 	.word	0x20003a74
 8009afc:	0800d450 	.word	0x0800d450

08009b00 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	4603      	mov	r3, r0
 8009b08:	6039      	str	r1, [r7, #0]
 8009b0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009b0c:	683a      	ldr	r2, [r7, #0]
 8009b0e:	4904      	ldr	r1, [pc, #16]	; (8009b20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009b10:	4804      	ldr	r0, [pc, #16]	; (8009b24 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009b12:	f7ff fec9 	bl	80098a8 <USBD_GetString>
  return USBD_StrDesc;
 8009b16:	4b02      	ldr	r3, [pc, #8]	; (8009b20 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3708      	adds	r7, #8
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	20003a74 	.word	0x20003a74
 8009b24:	0800d45c 	.word	0x0800d45c

08009b28 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	4603      	mov	r3, r0
 8009b30:	6039      	str	r1, [r7, #0]
 8009b32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	221a      	movs	r2, #26
 8009b38:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009b3a:	f000 f843 	bl	8009bc4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009b3e:	4b02      	ldr	r3, [pc, #8]	; (8009b48 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	200000c8 	.word	0x200000c8

08009b4c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	4603      	mov	r3, r0
 8009b54:	6039      	str	r1, [r7, #0]
 8009b56:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009b58:	79fb      	ldrb	r3, [r7, #7]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d105      	bne.n	8009b6a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b5e:	683a      	ldr	r2, [r7, #0]
 8009b60:	4907      	ldr	r1, [pc, #28]	; (8009b80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b62:	4808      	ldr	r0, [pc, #32]	; (8009b84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b64:	f7ff fea0 	bl	80098a8 <USBD_GetString>
 8009b68:	e004      	b.n	8009b74 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b6a:	683a      	ldr	r2, [r7, #0]
 8009b6c:	4904      	ldr	r1, [pc, #16]	; (8009b80 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b6e:	4805      	ldr	r0, [pc, #20]	; (8009b84 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b70:	f7ff fe9a 	bl	80098a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b74:	4b02      	ldr	r3, [pc, #8]	; (8009b80 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3708      	adds	r7, #8
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	20003a74 	.word	0x20003a74
 8009b84:	0800d470 	.word	0x0800d470

08009b88 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	4603      	mov	r3, r0
 8009b90:	6039      	str	r1, [r7, #0]
 8009b92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b94:	79fb      	ldrb	r3, [r7, #7]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d105      	bne.n	8009ba6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b9a:	683a      	ldr	r2, [r7, #0]
 8009b9c:	4907      	ldr	r1, [pc, #28]	; (8009bbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b9e:	4808      	ldr	r0, [pc, #32]	; (8009bc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ba0:	f7ff fe82 	bl	80098a8 <USBD_GetString>
 8009ba4:	e004      	b.n	8009bb0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ba6:	683a      	ldr	r2, [r7, #0]
 8009ba8:	4904      	ldr	r1, [pc, #16]	; (8009bbc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009baa:	4805      	ldr	r0, [pc, #20]	; (8009bc0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009bac:	f7ff fe7c 	bl	80098a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bb0:	4b02      	ldr	r3, [pc, #8]	; (8009bbc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	20003a74 	.word	0x20003a74
 8009bc0:	0800d47c 	.word	0x0800d47c

08009bc4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009bca:	4b0f      	ldr	r3, [pc, #60]	; (8009c08 <Get_SerialNum+0x44>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009bd0:	4b0e      	ldr	r3, [pc, #56]	; (8009c0c <Get_SerialNum+0x48>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009bd6:	4b0e      	ldr	r3, [pc, #56]	; (8009c10 <Get_SerialNum+0x4c>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009bdc:	68fa      	ldr	r2, [r7, #12]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	4413      	add	r3, r2
 8009be2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d009      	beq.n	8009bfe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009bea:	2208      	movs	r2, #8
 8009bec:	4909      	ldr	r1, [pc, #36]	; (8009c14 <Get_SerialNum+0x50>)
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f000 f814 	bl	8009c1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009bf4:	2204      	movs	r2, #4
 8009bf6:	4908      	ldr	r1, [pc, #32]	; (8009c18 <Get_SerialNum+0x54>)
 8009bf8:	68b8      	ldr	r0, [r7, #8]
 8009bfa:	f000 f80f 	bl	8009c1c <IntToUnicode>
  }
}
 8009bfe:	bf00      	nop
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	1fff7a10 	.word	0x1fff7a10
 8009c0c:	1fff7a14 	.word	0x1fff7a14
 8009c10:	1fff7a18 	.word	0x1fff7a18
 8009c14:	200000ca 	.word	0x200000ca
 8009c18:	200000da 	.word	0x200000da

08009c1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b087      	sub	sp, #28
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	60b9      	str	r1, [r7, #8]
 8009c26:	4613      	mov	r3, r2
 8009c28:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009c2e:	2300      	movs	r3, #0
 8009c30:	75fb      	strb	r3, [r7, #23]
 8009c32:	e027      	b.n	8009c84 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	0f1b      	lsrs	r3, r3, #28
 8009c38:	2b09      	cmp	r3, #9
 8009c3a:	d80b      	bhi.n	8009c54 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	0f1b      	lsrs	r3, r3, #28
 8009c40:	b2da      	uxtb	r2, r3
 8009c42:	7dfb      	ldrb	r3, [r7, #23]
 8009c44:	005b      	lsls	r3, r3, #1
 8009c46:	4619      	mov	r1, r3
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	440b      	add	r3, r1
 8009c4c:	3230      	adds	r2, #48	; 0x30
 8009c4e:	b2d2      	uxtb	r2, r2
 8009c50:	701a      	strb	r2, [r3, #0]
 8009c52:	e00a      	b.n	8009c6a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	0f1b      	lsrs	r3, r3, #28
 8009c58:	b2da      	uxtb	r2, r3
 8009c5a:	7dfb      	ldrb	r3, [r7, #23]
 8009c5c:	005b      	lsls	r3, r3, #1
 8009c5e:	4619      	mov	r1, r3
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	440b      	add	r3, r1
 8009c64:	3237      	adds	r2, #55	; 0x37
 8009c66:	b2d2      	uxtb	r2, r2
 8009c68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	011b      	lsls	r3, r3, #4
 8009c6e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009c70:	7dfb      	ldrb	r3, [r7, #23]
 8009c72:	005b      	lsls	r3, r3, #1
 8009c74:	3301      	adds	r3, #1
 8009c76:	68ba      	ldr	r2, [r7, #8]
 8009c78:	4413      	add	r3, r2
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009c7e:	7dfb      	ldrb	r3, [r7, #23]
 8009c80:	3301      	adds	r3, #1
 8009c82:	75fb      	strb	r3, [r7, #23]
 8009c84:	7dfa      	ldrb	r2, [r7, #23]
 8009c86:	79fb      	ldrb	r3, [r7, #7]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d3d3      	bcc.n	8009c34 <IntToUnicode+0x18>
  }
}
 8009c8c:	bf00      	nop
 8009c8e:	bf00      	nop
 8009c90:	371c      	adds	r7, #28
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr
	...

08009c9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b08a      	sub	sp, #40	; 0x28
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ca4:	f107 0314 	add.w	r3, r7, #20
 8009ca8:	2200      	movs	r2, #0
 8009caa:	601a      	str	r2, [r3, #0]
 8009cac:	605a      	str	r2, [r3, #4]
 8009cae:	609a      	str	r2, [r3, #8]
 8009cb0:	60da      	str	r2, [r3, #12]
 8009cb2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009cbc:	d13a      	bne.n	8009d34 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	613b      	str	r3, [r7, #16]
 8009cc2:	4b1e      	ldr	r3, [pc, #120]	; (8009d3c <HAL_PCD_MspInit+0xa0>)
 8009cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cc6:	4a1d      	ldr	r2, [pc, #116]	; (8009d3c <HAL_PCD_MspInit+0xa0>)
 8009cc8:	f043 0301 	orr.w	r3, r3, #1
 8009ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8009cce:	4b1b      	ldr	r3, [pc, #108]	; (8009d3c <HAL_PCD_MspInit+0xa0>)
 8009cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cd2:	f003 0301 	and.w	r3, r3, #1
 8009cd6:	613b      	str	r3, [r7, #16]
 8009cd8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009cda:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ce0:	2302      	movs	r3, #2
 8009ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ce8:	2303      	movs	r3, #3
 8009cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009cec:	230a      	movs	r3, #10
 8009cee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009cf0:	f107 0314 	add.w	r3, r7, #20
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	4812      	ldr	r0, [pc, #72]	; (8009d40 <HAL_PCD_MspInit+0xa4>)
 8009cf8:	f7f8 fd98 	bl	800282c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009cfc:	4b0f      	ldr	r3, [pc, #60]	; (8009d3c <HAL_PCD_MspInit+0xa0>)
 8009cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d00:	4a0e      	ldr	r2, [pc, #56]	; (8009d3c <HAL_PCD_MspInit+0xa0>)
 8009d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d06:	6353      	str	r3, [r2, #52]	; 0x34
 8009d08:	2300      	movs	r3, #0
 8009d0a:	60fb      	str	r3, [r7, #12]
 8009d0c:	4b0b      	ldr	r3, [pc, #44]	; (8009d3c <HAL_PCD_MspInit+0xa0>)
 8009d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d10:	4a0a      	ldr	r2, [pc, #40]	; (8009d3c <HAL_PCD_MspInit+0xa0>)
 8009d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d16:	6453      	str	r3, [r2, #68]	; 0x44
 8009d18:	4b08      	ldr	r3, [pc, #32]	; (8009d3c <HAL_PCD_MspInit+0xa0>)
 8009d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d20:	60fb      	str	r3, [r7, #12]
 8009d22:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009d24:	2200      	movs	r2, #0
 8009d26:	2100      	movs	r1, #0
 8009d28:	2043      	movs	r0, #67	; 0x43
 8009d2a:	f7f8 fd48 	bl	80027be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009d2e:	2043      	movs	r0, #67	; 0x43
 8009d30:	f7f8 fd61 	bl	80027f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009d34:	bf00      	nop
 8009d36:	3728      	adds	r7, #40	; 0x28
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	40023800 	.word	0x40023800
 8009d40:	40020000 	.word	0x40020000

08009d44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009d58:	4619      	mov	r1, r3
 8009d5a:	4610      	mov	r0, r2
 8009d5c:	f7fe fc45 	bl	80085ea <USBD_LL_SetupStage>
}
 8009d60:	bf00      	nop
 8009d62:	3708      	adds	r7, #8
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	460b      	mov	r3, r1
 8009d72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009d7a:	78fa      	ldrb	r2, [r7, #3]
 8009d7c:	6879      	ldr	r1, [r7, #4]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	00db      	lsls	r3, r3, #3
 8009d82:	4413      	add	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	440b      	add	r3, r1
 8009d88:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	78fb      	ldrb	r3, [r7, #3]
 8009d90:	4619      	mov	r1, r3
 8009d92:	f7fe fc7f 	bl	8008694 <USBD_LL_DataOutStage>
}
 8009d96:	bf00      	nop
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b082      	sub	sp, #8
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	460b      	mov	r3, r1
 8009da8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009db0:	78fa      	ldrb	r2, [r7, #3]
 8009db2:	6879      	ldr	r1, [r7, #4]
 8009db4:	4613      	mov	r3, r2
 8009db6:	00db      	lsls	r3, r3, #3
 8009db8:	4413      	add	r3, r2
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	440b      	add	r3, r1
 8009dbe:	334c      	adds	r3, #76	; 0x4c
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	78fb      	ldrb	r3, [r7, #3]
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	f7fe fd18 	bl	80087fa <USBD_LL_DataInStage>
}
 8009dca:	bf00      	nop
 8009dcc:	3708      	adds	r7, #8
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b082      	sub	sp, #8
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009de0:	4618      	mov	r0, r3
 8009de2:	f7fe fe4c 	bl	8008a7e <USBD_LL_SOF>
}
 8009de6:	bf00      	nop
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b084      	sub	sp, #16
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009df6:	2301      	movs	r3, #1
 8009df8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d102      	bne.n	8009e08 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009e02:	2300      	movs	r3, #0
 8009e04:	73fb      	strb	r3, [r7, #15]
 8009e06:	e008      	b.n	8009e1a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d102      	bne.n	8009e16 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009e10:	2301      	movs	r3, #1
 8009e12:	73fb      	strb	r3, [r7, #15]
 8009e14:	e001      	b.n	8009e1a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009e16:	f7f8 f8f1 	bl	8001ffc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e20:	7bfa      	ldrb	r2, [r7, #15]
 8009e22:	4611      	mov	r1, r2
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7fe fdec 	bl	8008a02 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7fe fd94 	bl	800895e <USBD_LL_Reset>
}
 8009e36:	bf00      	nop
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
	...

08009e40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fe fde7 	bl	8008a22 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	6812      	ldr	r2, [r2, #0]
 8009e62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009e66:	f043 0301 	orr.w	r3, r3, #1
 8009e6a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a1b      	ldr	r3, [r3, #32]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d005      	beq.n	8009e80 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e74:	4b04      	ldr	r3, [pc, #16]	; (8009e88 <HAL_PCD_SuspendCallback+0x48>)
 8009e76:	691b      	ldr	r3, [r3, #16]
 8009e78:	4a03      	ldr	r2, [pc, #12]	; (8009e88 <HAL_PCD_SuspendCallback+0x48>)
 8009e7a:	f043 0306 	orr.w	r3, r3, #6
 8009e7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009e80:	bf00      	nop
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	e000ed00 	.word	0xe000ed00

08009e8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fe fdd7 	bl	8008a4e <USBD_LL_Resume>
}
 8009ea0:	bf00      	nop
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009eba:	78fa      	ldrb	r2, [r7, #3]
 8009ebc:	4611      	mov	r1, r2
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f7fe fe2f 	bl	8008b22 <USBD_LL_IsoOUTIncomplete>
}
 8009ec4:	bf00      	nop
 8009ec6:	3708      	adds	r7, #8
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009ede:	78fa      	ldrb	r2, [r7, #3]
 8009ee0:	4611      	mov	r1, r2
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7fe fdeb 	bl	8008abe <USBD_LL_IsoINIncomplete>
}
 8009ee8:	bf00      	nop
 8009eea:	3708      	adds	r7, #8
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fe fe41 	bl	8008b86 <USBD_LL_DevConnected>
}
 8009f04:	bf00      	nop
 8009f06:	3708      	adds	r7, #8
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f7fe fe3e 	bl	8008b9c <USBD_LL_DevDisconnected>
}
 8009f20:	bf00      	nop
 8009f22:	3708      	adds	r7, #8
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d13c      	bne.n	8009fb2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009f38:	4a20      	ldr	r2, [pc, #128]	; (8009fbc <USBD_LL_Init+0x94>)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	4a1e      	ldr	r2, [pc, #120]	; (8009fbc <USBD_LL_Init+0x94>)
 8009f44:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009f48:	4b1c      	ldr	r3, [pc, #112]	; (8009fbc <USBD_LL_Init+0x94>)
 8009f4a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009f4e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009f50:	4b1a      	ldr	r3, [pc, #104]	; (8009fbc <USBD_LL_Init+0x94>)
 8009f52:	2204      	movs	r2, #4
 8009f54:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009f56:	4b19      	ldr	r3, [pc, #100]	; (8009fbc <USBD_LL_Init+0x94>)
 8009f58:	2202      	movs	r2, #2
 8009f5a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009f5c:	4b17      	ldr	r3, [pc, #92]	; (8009fbc <USBD_LL_Init+0x94>)
 8009f5e:	2200      	movs	r2, #0
 8009f60:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009f62:	4b16      	ldr	r3, [pc, #88]	; (8009fbc <USBD_LL_Init+0x94>)
 8009f64:	2202      	movs	r2, #2
 8009f66:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009f68:	4b14      	ldr	r3, [pc, #80]	; (8009fbc <USBD_LL_Init+0x94>)
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009f6e:	4b13      	ldr	r3, [pc, #76]	; (8009fbc <USBD_LL_Init+0x94>)
 8009f70:	2200      	movs	r2, #0
 8009f72:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009f74:	4b11      	ldr	r3, [pc, #68]	; (8009fbc <USBD_LL_Init+0x94>)
 8009f76:	2200      	movs	r2, #0
 8009f78:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009f7a:	4b10      	ldr	r3, [pc, #64]	; (8009fbc <USBD_LL_Init+0x94>)
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009f80:	4b0e      	ldr	r3, [pc, #56]	; (8009fbc <USBD_LL_Init+0x94>)
 8009f82:	2200      	movs	r2, #0
 8009f84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009f86:	480d      	ldr	r0, [pc, #52]	; (8009fbc <USBD_LL_Init+0x94>)
 8009f88:	f7f9 fdc5 	bl	8003b16 <HAL_PCD_Init>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d001      	beq.n	8009f96 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009f92:	f7f8 f833 	bl	8001ffc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009f96:	2180      	movs	r1, #128	; 0x80
 8009f98:	4808      	ldr	r0, [pc, #32]	; (8009fbc <USBD_LL_Init+0x94>)
 8009f9a:	f7fb f804 	bl	8004fa6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009f9e:	2240      	movs	r2, #64	; 0x40
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	4806      	ldr	r0, [pc, #24]	; (8009fbc <USBD_LL_Init+0x94>)
 8009fa4:	f7fa ffb8 	bl	8004f18 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009fa8:	2280      	movs	r2, #128	; 0x80
 8009faa:	2101      	movs	r1, #1
 8009fac:	4803      	ldr	r0, [pc, #12]	; (8009fbc <USBD_LL_Init+0x94>)
 8009fae:	f7fa ffb3 	bl	8004f18 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	20003c74 	.word	0x20003c74

08009fc0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7f9 feba 	bl	8003d50 <HAL_PCD_Start>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fe0:	7bfb      	ldrb	r3, [r7, #15]
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f000 f930 	bl	800a248 <USBD_Get_USB_Status>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fec:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b084      	sub	sp, #16
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
 8009ffe:	4608      	mov	r0, r1
 800a000:	4611      	mov	r1, r2
 800a002:	461a      	mov	r2, r3
 800a004:	4603      	mov	r3, r0
 800a006:	70fb      	strb	r3, [r7, #3]
 800a008:	460b      	mov	r3, r1
 800a00a:	70bb      	strb	r3, [r7, #2]
 800a00c:	4613      	mov	r3, r2
 800a00e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a014:	2300      	movs	r3, #0
 800a016:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a01e:	78bb      	ldrb	r3, [r7, #2]
 800a020:	883a      	ldrh	r2, [r7, #0]
 800a022:	78f9      	ldrb	r1, [r7, #3]
 800a024:	f7fa fb8b 	bl	800473e <HAL_PCD_EP_Open>
 800a028:	4603      	mov	r3, r0
 800a02a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
 800a02e:	4618      	mov	r0, r3
 800a030:	f000 f90a 	bl	800a248 <USBD_Get_USB_Status>
 800a034:	4603      	mov	r3, r0
 800a036:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a038:	7bbb      	ldrb	r3, [r7, #14]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3710      	adds	r7, #16
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b084      	sub	sp, #16
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
 800a04a:	460b      	mov	r3, r1
 800a04c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a04e:	2300      	movs	r3, #0
 800a050:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a052:	2300      	movs	r3, #0
 800a054:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a05c:	78fa      	ldrb	r2, [r7, #3]
 800a05e:	4611      	mov	r1, r2
 800a060:	4618      	mov	r0, r3
 800a062:	f7fa fbd4 	bl	800480e <HAL_PCD_EP_Close>
 800a066:	4603      	mov	r3, r0
 800a068:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a06a:	7bfb      	ldrb	r3, [r7, #15]
 800a06c:	4618      	mov	r0, r3
 800a06e:	f000 f8eb 	bl	800a248 <USBD_Get_USB_Status>
 800a072:	4603      	mov	r3, r0
 800a074:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a076:	7bbb      	ldrb	r3, [r7, #14]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	460b      	mov	r3, r1
 800a08a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a08c:	2300      	movs	r3, #0
 800a08e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a090:	2300      	movs	r3, #0
 800a092:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a09a:	78fa      	ldrb	r2, [r7, #3]
 800a09c:	4611      	mov	r1, r2
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7fa fc94 	bl	80049cc <HAL_PCD_EP_SetStall>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0a8:	7bfb      	ldrb	r3, [r7, #15]
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f000 f8cc 	bl	800a248 <USBD_Get_USB_Status>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b084      	sub	sp, #16
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a0d8:	78fa      	ldrb	r2, [r7, #3]
 800a0da:	4611      	mov	r1, r2
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7fa fcd9 	bl	8004a94 <HAL_PCD_EP_ClrStall>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0e6:	7bfb      	ldrb	r3, [r7, #15]
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f000 f8ad 	bl	800a248 <USBD_Get_USB_Status>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3710      	adds	r7, #16
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b085      	sub	sp, #20
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	460b      	mov	r3, r1
 800a106:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a10e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a114:	2b00      	cmp	r3, #0
 800a116:	da0b      	bge.n	800a130 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a118:	78fb      	ldrb	r3, [r7, #3]
 800a11a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a11e:	68f9      	ldr	r1, [r7, #12]
 800a120:	4613      	mov	r3, r2
 800a122:	00db      	lsls	r3, r3, #3
 800a124:	4413      	add	r3, r2
 800a126:	009b      	lsls	r3, r3, #2
 800a128:	440b      	add	r3, r1
 800a12a:	333e      	adds	r3, #62	; 0x3e
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	e00b      	b.n	800a148 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a130:	78fb      	ldrb	r3, [r7, #3]
 800a132:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a136:	68f9      	ldr	r1, [r7, #12]
 800a138:	4613      	mov	r3, r2
 800a13a:	00db      	lsls	r3, r3, #3
 800a13c:	4413      	add	r3, r2
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	440b      	add	r3, r1
 800a142:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a146:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3714      	adds	r7, #20
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	460b      	mov	r3, r1
 800a15e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a160:	2300      	movs	r3, #0
 800a162:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a164:	2300      	movs	r3, #0
 800a166:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a16e:	78fa      	ldrb	r2, [r7, #3]
 800a170:	4611      	mov	r1, r2
 800a172:	4618      	mov	r0, r3
 800a174:	f7fa fabe 	bl	80046f4 <HAL_PCD_SetAddress>
 800a178:	4603      	mov	r3, r0
 800a17a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a17c:	7bfb      	ldrb	r3, [r7, #15]
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 f862 	bl	800a248 <USBD_Get_USB_Status>
 800a184:	4603      	mov	r3, r0
 800a186:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a188:	7bbb      	ldrb	r3, [r7, #14]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b086      	sub	sp, #24
 800a196:	af00      	add	r7, sp, #0
 800a198:	60f8      	str	r0, [r7, #12]
 800a19a:	607a      	str	r2, [r7, #4]
 800a19c:	603b      	str	r3, [r7, #0]
 800a19e:	460b      	mov	r3, r1
 800a1a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a1b0:	7af9      	ldrb	r1, [r7, #11]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	f7fa fbbf 	bl	8004938 <HAL_PCD_EP_Transmit>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1be:	7dfb      	ldrb	r3, [r7, #23]
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f000 f841 	bl	800a248 <USBD_Get_USB_Status>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1ca:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3718      	adds	r7, #24
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd80      	pop	{r7, pc}

0800a1d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b086      	sub	sp, #24
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	607a      	str	r2, [r7, #4]
 800a1de:	603b      	str	r3, [r7, #0]
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a1f2:	7af9      	ldrb	r1, [r7, #11]
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	f7fa fb53 	bl	80048a2 <HAL_PCD_EP_Receive>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a200:	7dfb      	ldrb	r3, [r7, #23]
 800a202:	4618      	mov	r0, r3
 800a204:	f000 f820 	bl	800a248 <USBD_Get_USB_Status>
 800a208:	4603      	mov	r3, r0
 800a20a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a20c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3718      	adds	r7, #24
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
	...

0800a218 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a220:	4b03      	ldr	r3, [pc, #12]	; (800a230 <USBD_static_malloc+0x18>)
}
 800a222:	4618      	mov	r0, r3
 800a224:	370c      	adds	r7, #12
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	20004180 	.word	0x20004180

0800a234 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]

}
 800a23c:	bf00      	nop
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	4603      	mov	r3, r0
 800a250:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a252:	2300      	movs	r3, #0
 800a254:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a256:	79fb      	ldrb	r3, [r7, #7]
 800a258:	2b03      	cmp	r3, #3
 800a25a:	d817      	bhi.n	800a28c <USBD_Get_USB_Status+0x44>
 800a25c:	a201      	add	r2, pc, #4	; (adr r2, 800a264 <USBD_Get_USB_Status+0x1c>)
 800a25e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a262:	bf00      	nop
 800a264:	0800a275 	.word	0x0800a275
 800a268:	0800a27b 	.word	0x0800a27b
 800a26c:	0800a281 	.word	0x0800a281
 800a270:	0800a287 	.word	0x0800a287
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	73fb      	strb	r3, [r7, #15]
    break;
 800a278:	e00b      	b.n	800a292 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a27a:	2303      	movs	r3, #3
 800a27c:	73fb      	strb	r3, [r7, #15]
    break;
 800a27e:	e008      	b.n	800a292 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a280:	2301      	movs	r3, #1
 800a282:	73fb      	strb	r3, [r7, #15]
    break;
 800a284:	e005      	b.n	800a292 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a286:	2303      	movs	r3, #3
 800a288:	73fb      	strb	r3, [r7, #15]
    break;
 800a28a:	e002      	b.n	800a292 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a28c:	2303      	movs	r3, #3
 800a28e:	73fb      	strb	r3, [r7, #15]
    break;
 800a290:	bf00      	nop
  }
  return usb_status;
 800a292:	7bfb      	ldrb	r3, [r7, #15]
}
 800a294:	4618      	mov	r0, r3
 800a296:	3714      	adds	r7, #20
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <arm_mean_f32>:
 800a2a0:	b430      	push	{r4, r5}
 800a2a2:	088d      	lsrs	r5, r1, #2
 800a2a4:	eddf 7a16 	vldr	s15, [pc, #88]	; 800a300 <arm_mean_f32+0x60>
 800a2a8:	d017      	beq.n	800a2da <arm_mean_f32+0x3a>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	462c      	mov	r4, r5
 800a2ae:	edd3 5a00 	vldr	s11, [r3]
 800a2b2:	ed93 6a01 	vldr	s12, [r3, #4]
 800a2b6:	edd3 6a02 	vldr	s13, [r3, #8]
 800a2ba:	ed93 7a03 	vldr	s14, [r3, #12]
 800a2be:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a2c2:	3c01      	subs	r4, #1
 800a2c4:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a2c8:	f103 0310 	add.w	r3, r3, #16
 800a2cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2d4:	d1eb      	bne.n	800a2ae <arm_mean_f32+0xe>
 800a2d6:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800a2da:	f011 0303 	ands.w	r3, r1, #3
 800a2de:	d005      	beq.n	800a2ec <arm_mean_f32+0x4c>
 800a2e0:	ecb0 7a01 	vldmia	r0!, {s14}
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2ea:	d1f9      	bne.n	800a2e0 <arm_mean_f32+0x40>
 800a2ec:	ee06 1a90 	vmov	s13, r1
 800a2f0:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 800a2f4:	bc30      	pop	{r4, r5}
 800a2f6:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800a2fa:	edc2 7a00 	vstr	s15, [r2]
 800a2fe:	4770      	bx	lr
 800a300:	00000000 	.word	0x00000000

0800a304 <arm_mat_trans_f32>:
 800a304:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a308:	b086      	sub	sp, #24
 800a30a:	8802      	ldrh	r2, [r0, #0]
 800a30c:	9201      	str	r2, [sp, #4]
 800a30e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800a312:	8843      	ldrh	r3, [r0, #2]
 800a314:	6848      	ldr	r0, [r1, #4]
 800a316:	884a      	ldrh	r2, [r1, #2]
 800a318:	9002      	str	r0, [sp, #8]
 800a31a:	9801      	ldr	r0, [sp, #4]
 800a31c:	4282      	cmp	r2, r0
 800a31e:	d15f      	bne.n	800a3e0 <arm_mat_trans_f32+0xdc>
 800a320:	f8b1 a000 	ldrh.w	sl, [r1]
 800a324:	459a      	cmp	sl, r3
 800a326:	d15b      	bne.n	800a3e0 <arm_mat_trans_f32+0xdc>
 800a328:	ea4f 0b9a 	mov.w	fp, sl, lsr #2
 800a32c:	f00a 0a03 	and.w	sl, sl, #3
 800a330:	f10a 32ff 	add.w	r2, sl, #4294967295
 800a334:	b292      	uxth	r2, r2
 800a336:	0084      	lsls	r4, r0, #2
 800a338:	00c7      	lsls	r7, r0, #3
 800a33a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a33e:	3201      	adds	r2, #1
 800a340:	0092      	lsls	r2, r2, #2
 800a342:	b29b      	uxth	r3, r3
 800a344:	193e      	adds	r6, r7, r4
 800a346:	3301      	adds	r3, #1
 800a348:	1931      	adds	r1, r6, r4
 800a34a:	9203      	str	r2, [sp, #12]
 800a34c:	9a01      	ldr	r2, [sp, #4]
 800a34e:	0118      	lsls	r0, r3, #4
 800a350:	fb03 f101 	mul.w	r1, r3, r1
 800a354:	9005      	str	r0, [sp, #20]
 800a356:	9104      	str	r1, [sp, #16]
 800a358:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 800a35c:	f04f 0900 	mov.w	r9, #0
 800a360:	9b02      	ldr	r3, [sp, #8]
 800a362:	eb03 0189 	add.w	r1, r3, r9, lsl #2
 800a366:	f1bb 0f00 	cmp.w	fp, #0
 800a36a:	d01d      	beq.n	800a3a8 <arm_mat_trans_f32+0xa4>
 800a36c:	4642      	mov	r2, r8
 800a36e:	4658      	mov	r0, fp
 800a370:	460b      	mov	r3, r1
 800a372:	6815      	ldr	r5, [r2, #0]
 800a374:	601d      	str	r5, [r3, #0]
 800a376:	edd2 7a01 	vldr	s15, [r2, #4]
 800a37a:	191d      	adds	r5, r3, r4
 800a37c:	edc5 7a00 	vstr	s15, [r5]
 800a380:	edd2 7a02 	vldr	s15, [r2, #8]
 800a384:	19dd      	adds	r5, r3, r7
 800a386:	edc5 7a00 	vstr	s15, [r5]
 800a38a:	edd2 7a03 	vldr	s15, [r2, #12]
 800a38e:	3801      	subs	r0, #1
 800a390:	199d      	adds	r5, r3, r6
 800a392:	b280      	uxth	r0, r0
 800a394:	3210      	adds	r2, #16
 800a396:	edc5 7a00 	vstr	s15, [r5]
 800a39a:	4463      	add	r3, ip
 800a39c:	2800      	cmp	r0, #0
 800a39e:	d1e8      	bne.n	800a372 <arm_mat_trans_f32+0x6e>
 800a3a0:	9805      	ldr	r0, [sp, #20]
 800a3a2:	9a04      	ldr	r2, [sp, #16]
 800a3a4:	4480      	add	r8, r0
 800a3a6:	4411      	add	r1, r2
 800a3a8:	f1ba 0f00 	cmp.w	sl, #0
 800a3ac:	d00b      	beq.n	800a3c6 <arm_mat_trans_f32+0xc2>
 800a3ae:	4653      	mov	r3, sl
 800a3b0:	4642      	mov	r2, r8
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	f852 0b04 	ldr.w	r0, [r2], #4
 800a3b8:	6008      	str	r0, [r1, #0]
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	4421      	add	r1, r4
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1f7      	bne.n	800a3b2 <arm_mat_trans_f32+0xae>
 800a3c2:	9b03      	ldr	r3, [sp, #12]
 800a3c4:	4498      	add	r8, r3
 800a3c6:	f109 0901 	add.w	r9, r9, #1
 800a3ca:	9801      	ldr	r0, [sp, #4]
 800a3cc:	fa1f f989 	uxth.w	r9, r9
 800a3d0:	4581      	cmp	r9, r0
 800a3d2:	d1c5      	bne.n	800a360 <arm_mat_trans_f32+0x5c>
 800a3d4:	2000      	movs	r0, #0
 800a3d6:	b240      	sxtb	r0, r0
 800a3d8:	b006      	add	sp, #24
 800a3da:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a3de:	4770      	bx	lr
 800a3e0:	20fd      	movs	r0, #253	; 0xfd
 800a3e2:	b240      	sxtb	r0, r0
 800a3e4:	b006      	add	sp, #24
 800a3e6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a3ea:	4770      	bx	lr

0800a3ec <arm_mat_mult_f32>:
 800a3ec:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a3f0:	b08a      	sub	sp, #40	; 0x28
 800a3f2:	9102      	str	r1, [sp, #8]
 800a3f4:	9c02      	ldr	r4, [sp, #8]
 800a3f6:	8841      	ldrh	r1, [r0, #2]
 800a3f8:	8823      	ldrh	r3, [r4, #0]
 800a3fa:	6844      	ldr	r4, [r0, #4]
 800a3fc:	9400      	str	r4, [sp, #0]
 800a3fe:	9c02      	ldr	r4, [sp, #8]
 800a400:	8800      	ldrh	r0, [r0, #0]
 800a402:	9005      	str	r0, [sp, #20]
 800a404:	8864      	ldrh	r4, [r4, #2]
 800a406:	6850      	ldr	r0, [r2, #4]
 800a408:	9007      	str	r0, [sp, #28]
 800a40a:	428b      	cmp	r3, r1
 800a40c:	9401      	str	r4, [sp, #4]
 800a40e:	f040 809d 	bne.w	800a54c <arm_mat_mult_f32+0x160>
 800a412:	8811      	ldrh	r1, [r2, #0]
 800a414:	9805      	ldr	r0, [sp, #20]
 800a416:	4281      	cmp	r1, r0
 800a418:	f040 8098 	bne.w	800a54c <arm_mat_mult_f32+0x160>
 800a41c:	8852      	ldrh	r2, [r2, #2]
 800a41e:	42a2      	cmp	r2, r4
 800a420:	f040 8094 	bne.w	800a54c <arm_mat_mult_f32+0x160>
 800a424:	9901      	ldr	r1, [sp, #4]
 800a426:	f8dd c008 	ldr.w	ip, [sp, #8]
 800a42a:	ea4f 0a93 	mov.w	sl, r3, lsr #2
 800a42e:	00a4      	lsls	r4, r4, #2
 800a430:	00cf      	lsls	r7, r1, #3
 800a432:	f10a 30ff 	add.w	r0, sl, #4294967295
 800a436:	193e      	adds	r6, r7, r4
 800a438:	b280      	uxth	r0, r0
 800a43a:	1932      	adds	r2, r6, r4
 800a43c:	fb00 2202 	mla	r2, r0, r2, r2
 800a440:	0105      	lsls	r5, r0, #4
 800a442:	9801      	ldr	r0, [sp, #4]
 800a444:	9204      	str	r2, [sp, #16]
 800a446:	3510      	adds	r5, #16
 800a448:	2200      	movs	r2, #0
 800a44a:	f003 0b03 	and.w	fp, r3, #3
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a454:	9509      	str	r5, [sp, #36]	; 0x24
 800a456:	ea4f 1c00 	mov.w	ip, r0, lsl #4
 800a45a:	9308      	str	r3, [sp, #32]
 800a45c:	9206      	str	r2, [sp, #24]
 800a45e:	4610      	mov	r0, r2
 800a460:	9b07      	ldr	r3, [sp, #28]
 800a462:	9a00      	ldr	r2, [sp, #0]
 800a464:	eb03 0980 	add.w	r9, r3, r0, lsl #2
 800a468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a46a:	441a      	add	r2, r3
 800a46c:	9203      	str	r2, [sp, #12]
 800a46e:	f04f 0800 	mov.w	r8, #0
 800a472:	eddf 7a39 	vldr	s15, [pc, #228]	; 800a558 <arm_mat_mult_f32+0x16c>
 800a476:	f1ba 0f00 	cmp.w	sl, #0
 800a47a:	d05f      	beq.n	800a53c <arm_mat_mult_f32+0x150>
 800a47c:	9b00      	ldr	r3, [sp, #0]
 800a47e:	4650      	mov	r0, sl
 800a480:	460a      	mov	r2, r1
 800a482:	edd2 6a00 	vldr	s13, [r2]
 800a486:	ed93 5a00 	vldr	s10, [r3]
 800a48a:	edd3 5a01 	vldr	s11, [r3, #4]
 800a48e:	ed93 7a02 	vldr	s14, [r3, #8]
 800a492:	ed93 6a03 	vldr	s12, [r3, #12]
 800a496:	1915      	adds	r5, r2, r4
 800a498:	ee25 5a26 	vmul.f32	s10, s10, s13
 800a49c:	edd5 6a00 	vldr	s13, [r5]
 800a4a0:	18bd      	adds	r5, r7, r2
 800a4a2:	ee65 5aa6 	vmul.f32	s11, s11, s13
 800a4a6:	ee75 7a27 	vadd.f32	s15, s10, s15
 800a4aa:	edd5 6a00 	vldr	s13, [r5]
 800a4ae:	4615      	mov	r5, r2
 800a4b0:	4435      	add	r5, r6
 800a4b2:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800a4b6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a4ba:	edd5 6a00 	vldr	s13, [r5]
 800a4be:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a4c2:	3801      	subs	r0, #1
 800a4c4:	ee66 7a26 	vmul.f32	s15, s12, s13
 800a4c8:	b280      	uxth	r0, r0
 800a4ca:	4462      	add	r2, ip
 800a4cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a4d0:	3310      	adds	r3, #16
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	d1d5      	bne.n	800a482 <arm_mat_mult_f32+0x96>
 800a4d6:	9804      	ldr	r0, [sp, #16]
 800a4d8:	9a03      	ldr	r2, [sp, #12]
 800a4da:	4401      	add	r1, r0
 800a4dc:	f1bb 0f00 	cmp.w	fp, #0
 800a4e0:	d00d      	beq.n	800a4fe <arm_mat_mult_f32+0x112>
 800a4e2:	465b      	mov	r3, fp
 800a4e4:	ed91 7a00 	vldr	s14, [r1]
 800a4e8:	ecf2 6a01 	vldmia	r2!, {s13}
 800a4ec:	3b01      	subs	r3, #1
 800a4ee:	ee26 7a87 	vmul.f32	s14, s13, s14
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a4f8:	4421      	add	r1, r4
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d1f2      	bne.n	800a4e4 <arm_mat_mult_f32+0xf8>
 800a4fe:	9902      	ldr	r1, [sp, #8]
 800a500:	ece9 7a01 	vstmia	r9!, {s15}
 800a504:	f108 0801 	add.w	r8, r8, #1
 800a508:	9a01      	ldr	r2, [sp, #4]
 800a50a:	684b      	ldr	r3, [r1, #4]
 800a50c:	fa1f f888 	uxth.w	r8, r8
 800a510:	4590      	cmp	r8, r2
 800a512:	eb03 0188 	add.w	r1, r3, r8, lsl #2
 800a516:	d1ac      	bne.n	800a472 <arm_mat_mult_f32+0x86>
 800a518:	9805      	ldr	r0, [sp, #20]
 800a51a:	4611      	mov	r1, r2
 800a51c:	1e42      	subs	r2, r0, #1
 800a51e:	b292      	uxth	r2, r2
 800a520:	9205      	str	r2, [sp, #20]
 800a522:	9a06      	ldr	r2, [sp, #24]
 800a524:	9808      	ldr	r0, [sp, #32]
 800a526:	440a      	add	r2, r1
 800a528:	b292      	uxth	r2, r2
 800a52a:	9206      	str	r2, [sp, #24]
 800a52c:	9a00      	ldr	r2, [sp, #0]
 800a52e:	9905      	ldr	r1, [sp, #20]
 800a530:	4402      	add	r2, r0
 800a532:	9200      	str	r2, [sp, #0]
 800a534:	b121      	cbz	r1, 800a540 <arm_mat_mult_f32+0x154>
 800a536:	4619      	mov	r1, r3
 800a538:	9806      	ldr	r0, [sp, #24]
 800a53a:	e791      	b.n	800a460 <arm_mat_mult_f32+0x74>
 800a53c:	9a00      	ldr	r2, [sp, #0]
 800a53e:	e7cd      	b.n	800a4dc <arm_mat_mult_f32+0xf0>
 800a540:	4608      	mov	r0, r1
 800a542:	b240      	sxtb	r0, r0
 800a544:	b00a      	add	sp, #40	; 0x28
 800a546:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a54a:	4770      	bx	lr
 800a54c:	20fd      	movs	r0, #253	; 0xfd
 800a54e:	b240      	sxtb	r0, r0
 800a550:	b00a      	add	sp, #40	; 0x28
 800a552:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a556:	4770      	bx	lr
 800a558:	00000000 	.word	0x00000000

0800a55c <arm_mat_inverse_f32>:
 800a55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a560:	b089      	sub	sp, #36	; 0x24
 800a562:	8803      	ldrh	r3, [r0, #0]
 800a564:	8844      	ldrh	r4, [r0, #2]
 800a566:	6842      	ldr	r2, [r0, #4]
 800a568:	9201      	str	r2, [sp, #4]
 800a56a:	429c      	cmp	r4, r3
 800a56c:	684a      	ldr	r2, [r1, #4]
 800a56e:	9202      	str	r2, [sp, #8]
 800a570:	4680      	mov	r8, r0
 800a572:	d004      	beq.n	800a57e <arm_mat_inverse_f32+0x22>
 800a574:	20fd      	movs	r0, #253	; 0xfd
 800a576:	b240      	sxtb	r0, r0
 800a578:	b009      	add	sp, #36	; 0x24
 800a57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a57e:	880a      	ldrh	r2, [r1, #0]
 800a580:	884b      	ldrh	r3, [r1, #2]
 800a582:	4293      	cmp	r3, r2
 800a584:	d1f6      	bne.n	800a574 <arm_mat_inverse_f32+0x18>
 800a586:	429c      	cmp	r4, r3
 800a588:	d1f4      	bne.n	800a574 <arm_mat_inverse_f32+0x18>
 800a58a:	2c00      	cmp	r4, #0
 800a58c:	f000 8105 	beq.w	800a79a <arm_mat_inverse_f32+0x23e>
 800a590:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
 800a594:	3d01      	subs	r5, #1
 800a596:	00ad      	lsls	r5, r5, #2
 800a598:	9e02      	ldr	r6, [sp, #8]
 800a59a:	2701      	movs	r7, #1
 800a59c:	f04f 0a04 	mov.w	sl, #4
 800a5a0:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800a5a4:	e014      	b.n	800a5d0 <arm_mat_inverse_f32+0x74>
 800a5a6:	2100      	movs	r1, #0
 800a5a8:	462a      	mov	r2, r5
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	eb03 0905 	add.w	r9, r3, r5
 800a5b0:	f000 f96c 	bl	800a88c <memset>
 800a5b4:	1d28      	adds	r0, r5, #4
 800a5b6:	4430      	add	r0, r6
 800a5b8:	4652      	mov	r2, sl
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	464e      	mov	r6, r9
 800a5be:	b11f      	cbz	r7, 800a5c8 <arm_mat_inverse_f32+0x6c>
 800a5c0:	f000 f964 	bl	800a88c <memset>
 800a5c4:	eb09 060a 	add.w	r6, r9, sl
 800a5c8:	f10a 0a04 	add.w	sl, sl, #4
 800a5cc:	3d04      	subs	r5, #4
 800a5ce:	3701      	adds	r7, #1
 800a5d0:	42bc      	cmp	r4, r7
 800a5d2:	f8c6 b000 	str.w	fp, [r6]
 800a5d6:	f106 0304 	add.w	r3, r6, #4
 800a5da:	d1e4      	bne.n	800a5a6 <arm_mat_inverse_f32+0x4a>
 800a5dc:	2c00      	cmp	r4, #0
 800a5de:	f000 80dc 	beq.w	800a79a <arm_mat_inverse_f32+0x23e>
 800a5e2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a5e6:	2000      	movs	r0, #0
 800a5e8:	f10c 0304 	add.w	r3, ip, #4
 800a5ec:	1e62      	subs	r2, r4, #1
 800a5ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a5f2:	f8dd a008 	ldr.w	sl, [sp, #8]
 800a5f6:	9306      	str	r3, [sp, #24]
 800a5f8:	f8cd c000 	str.w	ip, [sp]
 800a5fc:	9005      	str	r0, [sp, #20]
 800a5fe:	9203      	str	r2, [sp, #12]
 800a600:	4627      	mov	r7, r4
 800a602:	f8cd 801c 	str.w	r8, [sp, #28]
 800a606:	4284      	cmp	r4, r0
 800a608:	edd9 7a00 	vldr	s15, [r9]
 800a60c:	f240 80c5 	bls.w	800a79a <arm_mat_inverse_f32+0x23e>
 800a610:	eeb0 7a67 	vmov.f32	s14, s15
 800a614:	eddf 6a75 	vldr	s13, [pc, #468]	; 800a7ec <arm_mat_inverse_f32+0x290>
 800a618:	4603      	mov	r3, r0
 800a61a:	464a      	mov	r2, r9
 800a61c:	e001      	b.n	800a622 <arm_mat_inverse_f32+0xc6>
 800a61e:	ed92 7a00 	vldr	s14, [r2]
 800a622:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800a626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a62a:	bfd8      	it	le
 800a62c:	eeb1 7a47 	vnegle.f32	s14, s14
 800a630:	eeb4 7a66 	vcmp.f32	s14, s13
 800a634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a638:	f103 0301 	add.w	r3, r3, #1
 800a63c:	bfc8      	it	gt
 800a63e:	eef0 6a47 	vmovgt.f32	s13, s14
 800a642:	429c      	cmp	r4, r3
 800a644:	4462      	add	r2, ip
 800a646:	d8ea      	bhi.n	800a61e <arm_mat_inverse_f32+0xc2>
 800a648:	eef5 6a40 	vcmp.f32	s13, #0.0
 800a64c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a650:	f000 80a3 	beq.w	800a79a <arm_mat_inverse_f32+0x23e>
 800a654:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a65c:	bfd4      	ite	le
 800a65e:	eeb1 7a67 	vnegle.f32	s14, s15
 800a662:	eeb0 7a67 	vmovgt.f32	s14, s15
 800a666:	eef4 6a47 	vcmp.f32	s13, s14
 800a66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a66e:	d010      	beq.n	800a692 <arm_mat_inverse_f32+0x136>
 800a670:	9b03      	ldr	r3, [sp, #12]
 800a672:	b173      	cbz	r3, 800a692 <arm_mat_inverse_f32+0x136>
 800a674:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a67c:	eeb1 7a67 	vneg.f32	s14, s15
 800a680:	bfc8      	it	gt
 800a682:	eeb0 7a67 	vmovgt.f32	s14, s15
 800a686:	eef4 6a47 	vcmp.f32	s13, s14
 800a68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a68e:	f000 8086 	beq.w	800a79e <arm_mat_inverse_f32+0x242>
 800a692:	9b05      	ldr	r3, [sp, #20]
 800a694:	b933      	cbnz	r3, 800a6a4 <arm_mat_inverse_f32+0x148>
 800a696:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a69e:	d07c      	beq.n	800a79a <arm_mat_inverse_f32+0x23e>
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	9305      	str	r3, [sp, #20]
 800a6a4:	eb0a 020c 	add.w	r2, sl, ip
 800a6a8:	9204      	str	r2, [sp, #16]
 800a6aa:	b14f      	cbz	r7, 800a6c0 <arm_mat_inverse_f32+0x164>
 800a6ac:	463a      	mov	r2, r7
 800a6ae:	464b      	mov	r3, r9
 800a6b0:	ed93 7a00 	vldr	s14, [r3]
 800a6b4:	ee87 7a27 	vdiv.f32	s14, s14, s15
 800a6b8:	3a01      	subs	r2, #1
 800a6ba:	eca3 7a01 	vstmia	r3!, {s14}
 800a6be:	d1f7      	bne.n	800a6b0 <arm_mat_inverse_f32+0x154>
 800a6c0:	4625      	mov	r5, r4
 800a6c2:	4653      	mov	r3, sl
 800a6c4:	ed93 7a00 	vldr	s14, [r3]
 800a6c8:	ee87 7a27 	vdiv.f32	s14, s14, s15
 800a6cc:	3d01      	subs	r5, #1
 800a6ce:	eca3 7a01 	vstmia	r3!, {s14}
 800a6d2:	d1f7      	bne.n	800a6c4 <arm_mat_inverse_f32+0x168>
 800a6d4:	9e02      	ldr	r6, [sp, #8]
 800a6d6:	9901      	ldr	r1, [sp, #4]
 800a6d8:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800a6dc:	4285      	cmp	r5, r0
 800a6de:	f000 8081 	beq.w	800a7e4 <arm_mat_inverse_f32+0x288>
 800a6e2:	edd1 7a00 	vldr	s15, [r1]
 800a6e6:	b187      	cbz	r7, 800a70a <arm_mat_inverse_f32+0x1ae>
 800a6e8:	463a      	mov	r2, r7
 800a6ea:	46cb      	mov	fp, r9
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	ecbb 7a01 	vldmia	fp!, {s14}
 800a6f2:	edd3 6a00 	vldr	s13, [r3]
 800a6f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a6fa:	3a01      	subs	r2, #1
 800a6fc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a700:	eca3 7a01 	vstmia	r3!, {s14}
 800a704:	d1f3      	bne.n	800a6ee <arm_mat_inverse_f32+0x192>
 800a706:	9a00      	ldr	r2, [sp, #0]
 800a708:	4411      	add	r1, r2
 800a70a:	4622      	mov	r2, r4
 800a70c:	46d3      	mov	fp, sl
 800a70e:	4633      	mov	r3, r6
 800a710:	ecbb 7a01 	vldmia	fp!, {s14}
 800a714:	edd3 6a00 	vldr	s13, [r3]
 800a718:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a71c:	3a01      	subs	r2, #1
 800a71e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a722:	eca3 7a01 	vstmia	r3!, {s14}
 800a726:	d1f3      	bne.n	800a710 <arm_mat_inverse_f32+0x1b4>
 800a728:	4466      	add	r6, ip
 800a72a:	3501      	adds	r5, #1
 800a72c:	42ac      	cmp	r4, r5
 800a72e:	4441      	add	r1, r8
 800a730:	d1d4      	bne.n	800a6dc <arm_mat_inverse_f32+0x180>
 800a732:	9b01      	ldr	r3, [sp, #4]
 800a734:	9a06      	ldr	r2, [sp, #24]
 800a736:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a73a:	3304      	adds	r3, #4
 800a73c:	9301      	str	r3, [sp, #4]
 800a73e:	4491      	add	r9, r2
 800a740:	9b03      	ldr	r3, [sp, #12]
 800a742:	9a00      	ldr	r2, [sp, #0]
 800a744:	3b01      	subs	r3, #1
 800a746:	3a04      	subs	r2, #4
 800a748:	3f01      	subs	r7, #1
 800a74a:	f100 0001 	add.w	r0, r0, #1
 800a74e:	9303      	str	r3, [sp, #12]
 800a750:	9200      	str	r2, [sp, #0]
 800a752:	f47f af58 	bne.w	800a606 <arm_mat_inverse_f32+0xaa>
 800a756:	9b05      	ldr	r3, [sp, #20]
 800a758:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d13f      	bne.n	800a7e0 <arm_mat_inverse_f32+0x284>
 800a760:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a768:	d13a      	bne.n	800a7e0 <arm_mat_inverse_f32+0x284>
 800a76a:	fb04 f404 	mul.w	r4, r4, r4
 800a76e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a772:	b194      	cbz	r4, 800a79a <arm_mat_inverse_f32+0x23e>
 800a774:	edd3 7a00 	vldr	s15, [r3]
 800a778:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a780:	d12e      	bne.n	800a7e0 <arm_mat_inverse_f32+0x284>
 800a782:	3304      	adds	r3, #4
 800a784:	e006      	b.n	800a794 <arm_mat_inverse_f32+0x238>
 800a786:	ecf3 7a01 	vldmia	r3!, {s15}
 800a78a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a792:	d123      	bne.n	800a7dc <arm_mat_inverse_f32+0x280>
 800a794:	3701      	adds	r7, #1
 800a796:	42a7      	cmp	r7, r4
 800a798:	d1f5      	bne.n	800a786 <arm_mat_inverse_f32+0x22a>
 800a79a:	20fb      	movs	r0, #251	; 0xfb
 800a79c:	e6eb      	b.n	800a576 <arm_mat_inverse_f32+0x1a>
 800a79e:	b157      	cbz	r7, 800a7b6 <arm_mat_inverse_f32+0x25a>
 800a7a0:	9901      	ldr	r1, [sp, #4]
 800a7a2:	463a      	mov	r2, r7
 800a7a4:	464b      	mov	r3, r9
 800a7a6:	681d      	ldr	r5, [r3, #0]
 800a7a8:	680e      	ldr	r6, [r1, #0]
 800a7aa:	f843 6b04 	str.w	r6, [r3], #4
 800a7ae:	3a01      	subs	r2, #1
 800a7b0:	f841 5b04 	str.w	r5, [r1], #4
 800a7b4:	d1f7      	bne.n	800a7a6 <arm_mat_inverse_f32+0x24a>
 800a7b6:	eb0a 020c 	add.w	r2, sl, ip
 800a7ba:	9204      	str	r2, [sp, #16]
 800a7bc:	4611      	mov	r1, r2
 800a7be:	4623      	mov	r3, r4
 800a7c0:	4652      	mov	r2, sl
 800a7c2:	680d      	ldr	r5, [r1, #0]
 800a7c4:	6816      	ldr	r6, [r2, #0]
 800a7c6:	f841 6b04 	str.w	r6, [r1], #4
 800a7ca:	3b01      	subs	r3, #1
 800a7cc:	f842 5b04 	str.w	r5, [r2], #4
 800a7d0:	d1f7      	bne.n	800a7c2 <arm_mat_inverse_f32+0x266>
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	edd9 7a00 	vldr	s15, [r9]
 800a7d8:	9205      	str	r2, [sp, #20]
 800a7da:	e766      	b.n	800a6aa <arm_mat_inverse_f32+0x14e>
 800a7dc:	42bc      	cmp	r4, r7
 800a7de:	d0dc      	beq.n	800a79a <arm_mat_inverse_f32+0x23e>
 800a7e0:	2000      	movs	r0, #0
 800a7e2:	e6c8      	b.n	800a576 <arm_mat_inverse_f32+0x1a>
 800a7e4:	9b00      	ldr	r3, [sp, #0]
 800a7e6:	4466      	add	r6, ip
 800a7e8:	4419      	add	r1, r3
 800a7ea:	e79e      	b.n	800a72a <arm_mat_inverse_f32+0x1ce>
 800a7ec:	00000000 	.word	0x00000000

0800a7f0 <arm_mat_init_f32>:
 800a7f0:	8001      	strh	r1, [r0, #0]
 800a7f2:	8042      	strh	r2, [r0, #2]
 800a7f4:	6043      	str	r3, [r0, #4]
 800a7f6:	4770      	bx	lr

0800a7f8 <arm_fir_init_f32>:
 800a7f8:	b570      	push	{r4, r5, r6, lr}
 800a7fa:	9d04      	ldr	r5, [sp, #16]
 800a7fc:	6082      	str	r2, [r0, #8]
 800a7fe:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800a802:	3d01      	subs	r5, #1
 800a804:	4604      	mov	r4, r0
 800a806:	440d      	add	r5, r1
 800a808:	8001      	strh	r1, [r0, #0]
 800a80a:	461e      	mov	r6, r3
 800a80c:	00aa      	lsls	r2, r5, #2
 800a80e:	4618      	mov	r0, r3
 800a810:	2100      	movs	r1, #0
 800a812:	f000 f83b 	bl	800a88c <memset>
 800a816:	6066      	str	r6, [r4, #4]
 800a818:	bd70      	pop	{r4, r5, r6, pc}
 800a81a:	bf00      	nop

0800a81c <__errno>:
 800a81c:	4b01      	ldr	r3, [pc, #4]	; (800a824 <__errno+0x8>)
 800a81e:	6818      	ldr	r0, [r3, #0]
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop
 800a824:	200000e4 	.word	0x200000e4

0800a828 <__libc_init_array>:
 800a828:	b570      	push	{r4, r5, r6, lr}
 800a82a:	4d0d      	ldr	r5, [pc, #52]	; (800a860 <__libc_init_array+0x38>)
 800a82c:	4c0d      	ldr	r4, [pc, #52]	; (800a864 <__libc_init_array+0x3c>)
 800a82e:	1b64      	subs	r4, r4, r5
 800a830:	10a4      	asrs	r4, r4, #2
 800a832:	2600      	movs	r6, #0
 800a834:	42a6      	cmp	r6, r4
 800a836:	d109      	bne.n	800a84c <__libc_init_array+0x24>
 800a838:	4d0b      	ldr	r5, [pc, #44]	; (800a868 <__libc_init_array+0x40>)
 800a83a:	4c0c      	ldr	r4, [pc, #48]	; (800a86c <__libc_init_array+0x44>)
 800a83c:	f002 fdfa 	bl	800d434 <_init>
 800a840:	1b64      	subs	r4, r4, r5
 800a842:	10a4      	asrs	r4, r4, #2
 800a844:	2600      	movs	r6, #0
 800a846:	42a6      	cmp	r6, r4
 800a848:	d105      	bne.n	800a856 <__libc_init_array+0x2e>
 800a84a:	bd70      	pop	{r4, r5, r6, pc}
 800a84c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a850:	4798      	blx	r3
 800a852:	3601      	adds	r6, #1
 800a854:	e7ee      	b.n	800a834 <__libc_init_array+0xc>
 800a856:	f855 3b04 	ldr.w	r3, [r5], #4
 800a85a:	4798      	blx	r3
 800a85c:	3601      	adds	r6, #1
 800a85e:	e7f2      	b.n	800a846 <__libc_init_array+0x1e>
 800a860:	0800d884 	.word	0x0800d884
 800a864:	0800d884 	.word	0x0800d884
 800a868:	0800d884 	.word	0x0800d884
 800a86c:	0800d888 	.word	0x0800d888

0800a870 <memcpy>:
 800a870:	440a      	add	r2, r1
 800a872:	4291      	cmp	r1, r2
 800a874:	f100 33ff 	add.w	r3, r0, #4294967295
 800a878:	d100      	bne.n	800a87c <memcpy+0xc>
 800a87a:	4770      	bx	lr
 800a87c:	b510      	push	{r4, lr}
 800a87e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a882:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a886:	4291      	cmp	r1, r2
 800a888:	d1f9      	bne.n	800a87e <memcpy+0xe>
 800a88a:	bd10      	pop	{r4, pc}

0800a88c <memset>:
 800a88c:	4402      	add	r2, r0
 800a88e:	4603      	mov	r3, r0
 800a890:	4293      	cmp	r3, r2
 800a892:	d100      	bne.n	800a896 <memset+0xa>
 800a894:	4770      	bx	lr
 800a896:	f803 1b01 	strb.w	r1, [r3], #1
 800a89a:	e7f9      	b.n	800a890 <memset+0x4>

0800a89c <__cvt>:
 800a89c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8a0:	ec55 4b10 	vmov	r4, r5, d0
 800a8a4:	2d00      	cmp	r5, #0
 800a8a6:	460e      	mov	r6, r1
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	462b      	mov	r3, r5
 800a8ac:	bfbb      	ittet	lt
 800a8ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a8b2:	461d      	movlt	r5, r3
 800a8b4:	2300      	movge	r3, #0
 800a8b6:	232d      	movlt	r3, #45	; 0x2d
 800a8b8:	700b      	strb	r3, [r1, #0]
 800a8ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a8c0:	4691      	mov	r9, r2
 800a8c2:	f023 0820 	bic.w	r8, r3, #32
 800a8c6:	bfbc      	itt	lt
 800a8c8:	4622      	movlt	r2, r4
 800a8ca:	4614      	movlt	r4, r2
 800a8cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8d0:	d005      	beq.n	800a8de <__cvt+0x42>
 800a8d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a8d6:	d100      	bne.n	800a8da <__cvt+0x3e>
 800a8d8:	3601      	adds	r6, #1
 800a8da:	2102      	movs	r1, #2
 800a8dc:	e000      	b.n	800a8e0 <__cvt+0x44>
 800a8de:	2103      	movs	r1, #3
 800a8e0:	ab03      	add	r3, sp, #12
 800a8e2:	9301      	str	r3, [sp, #4]
 800a8e4:	ab02      	add	r3, sp, #8
 800a8e6:	9300      	str	r3, [sp, #0]
 800a8e8:	ec45 4b10 	vmov	d0, r4, r5
 800a8ec:	4653      	mov	r3, sl
 800a8ee:	4632      	mov	r2, r6
 800a8f0:	f000 fcca 	bl	800b288 <_dtoa_r>
 800a8f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a8f8:	4607      	mov	r7, r0
 800a8fa:	d102      	bne.n	800a902 <__cvt+0x66>
 800a8fc:	f019 0f01 	tst.w	r9, #1
 800a900:	d022      	beq.n	800a948 <__cvt+0xac>
 800a902:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a906:	eb07 0906 	add.w	r9, r7, r6
 800a90a:	d110      	bne.n	800a92e <__cvt+0x92>
 800a90c:	783b      	ldrb	r3, [r7, #0]
 800a90e:	2b30      	cmp	r3, #48	; 0x30
 800a910:	d10a      	bne.n	800a928 <__cvt+0x8c>
 800a912:	2200      	movs	r2, #0
 800a914:	2300      	movs	r3, #0
 800a916:	4620      	mov	r0, r4
 800a918:	4629      	mov	r1, r5
 800a91a:	f7f6 f8dd 	bl	8000ad8 <__aeabi_dcmpeq>
 800a91e:	b918      	cbnz	r0, 800a928 <__cvt+0x8c>
 800a920:	f1c6 0601 	rsb	r6, r6, #1
 800a924:	f8ca 6000 	str.w	r6, [sl]
 800a928:	f8da 3000 	ldr.w	r3, [sl]
 800a92c:	4499      	add	r9, r3
 800a92e:	2200      	movs	r2, #0
 800a930:	2300      	movs	r3, #0
 800a932:	4620      	mov	r0, r4
 800a934:	4629      	mov	r1, r5
 800a936:	f7f6 f8cf 	bl	8000ad8 <__aeabi_dcmpeq>
 800a93a:	b108      	cbz	r0, 800a940 <__cvt+0xa4>
 800a93c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a940:	2230      	movs	r2, #48	; 0x30
 800a942:	9b03      	ldr	r3, [sp, #12]
 800a944:	454b      	cmp	r3, r9
 800a946:	d307      	bcc.n	800a958 <__cvt+0xbc>
 800a948:	9b03      	ldr	r3, [sp, #12]
 800a94a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a94c:	1bdb      	subs	r3, r3, r7
 800a94e:	4638      	mov	r0, r7
 800a950:	6013      	str	r3, [r2, #0]
 800a952:	b004      	add	sp, #16
 800a954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a958:	1c59      	adds	r1, r3, #1
 800a95a:	9103      	str	r1, [sp, #12]
 800a95c:	701a      	strb	r2, [r3, #0]
 800a95e:	e7f0      	b.n	800a942 <__cvt+0xa6>

0800a960 <__exponent>:
 800a960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a962:	4603      	mov	r3, r0
 800a964:	2900      	cmp	r1, #0
 800a966:	bfb8      	it	lt
 800a968:	4249      	neglt	r1, r1
 800a96a:	f803 2b02 	strb.w	r2, [r3], #2
 800a96e:	bfb4      	ite	lt
 800a970:	222d      	movlt	r2, #45	; 0x2d
 800a972:	222b      	movge	r2, #43	; 0x2b
 800a974:	2909      	cmp	r1, #9
 800a976:	7042      	strb	r2, [r0, #1]
 800a978:	dd2a      	ble.n	800a9d0 <__exponent+0x70>
 800a97a:	f10d 0407 	add.w	r4, sp, #7
 800a97e:	46a4      	mov	ip, r4
 800a980:	270a      	movs	r7, #10
 800a982:	46a6      	mov	lr, r4
 800a984:	460a      	mov	r2, r1
 800a986:	fb91 f6f7 	sdiv	r6, r1, r7
 800a98a:	fb07 1516 	mls	r5, r7, r6, r1
 800a98e:	3530      	adds	r5, #48	; 0x30
 800a990:	2a63      	cmp	r2, #99	; 0x63
 800a992:	f104 34ff 	add.w	r4, r4, #4294967295
 800a996:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a99a:	4631      	mov	r1, r6
 800a99c:	dcf1      	bgt.n	800a982 <__exponent+0x22>
 800a99e:	3130      	adds	r1, #48	; 0x30
 800a9a0:	f1ae 0502 	sub.w	r5, lr, #2
 800a9a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a9a8:	1c44      	adds	r4, r0, #1
 800a9aa:	4629      	mov	r1, r5
 800a9ac:	4561      	cmp	r1, ip
 800a9ae:	d30a      	bcc.n	800a9c6 <__exponent+0x66>
 800a9b0:	f10d 0209 	add.w	r2, sp, #9
 800a9b4:	eba2 020e 	sub.w	r2, r2, lr
 800a9b8:	4565      	cmp	r5, ip
 800a9ba:	bf88      	it	hi
 800a9bc:	2200      	movhi	r2, #0
 800a9be:	4413      	add	r3, r2
 800a9c0:	1a18      	subs	r0, r3, r0
 800a9c2:	b003      	add	sp, #12
 800a9c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a9ce:	e7ed      	b.n	800a9ac <__exponent+0x4c>
 800a9d0:	2330      	movs	r3, #48	; 0x30
 800a9d2:	3130      	adds	r1, #48	; 0x30
 800a9d4:	7083      	strb	r3, [r0, #2]
 800a9d6:	70c1      	strb	r1, [r0, #3]
 800a9d8:	1d03      	adds	r3, r0, #4
 800a9da:	e7f1      	b.n	800a9c0 <__exponent+0x60>

0800a9dc <_printf_float>:
 800a9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e0:	ed2d 8b02 	vpush	{d8}
 800a9e4:	b08d      	sub	sp, #52	; 0x34
 800a9e6:	460c      	mov	r4, r1
 800a9e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a9ec:	4616      	mov	r6, r2
 800a9ee:	461f      	mov	r7, r3
 800a9f0:	4605      	mov	r5, r0
 800a9f2:	f001 fa37 	bl	800be64 <_localeconv_r>
 800a9f6:	f8d0 a000 	ldr.w	sl, [r0]
 800a9fa:	4650      	mov	r0, sl
 800a9fc:	f7f5 fbf0 	bl	80001e0 <strlen>
 800aa00:	2300      	movs	r3, #0
 800aa02:	930a      	str	r3, [sp, #40]	; 0x28
 800aa04:	6823      	ldr	r3, [r4, #0]
 800aa06:	9305      	str	r3, [sp, #20]
 800aa08:	f8d8 3000 	ldr.w	r3, [r8]
 800aa0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aa10:	3307      	adds	r3, #7
 800aa12:	f023 0307 	bic.w	r3, r3, #7
 800aa16:	f103 0208 	add.w	r2, r3, #8
 800aa1a:	f8c8 2000 	str.w	r2, [r8]
 800aa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa22:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aa26:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800aa2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aa2e:	9307      	str	r3, [sp, #28]
 800aa30:	f8cd 8018 	str.w	r8, [sp, #24]
 800aa34:	ee08 0a10 	vmov	s16, r0
 800aa38:	4b9f      	ldr	r3, [pc, #636]	; (800acb8 <_printf_float+0x2dc>)
 800aa3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa3e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa42:	f7f6 f87b 	bl	8000b3c <__aeabi_dcmpun>
 800aa46:	bb88      	cbnz	r0, 800aaac <_printf_float+0xd0>
 800aa48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa4c:	4b9a      	ldr	r3, [pc, #616]	; (800acb8 <_printf_float+0x2dc>)
 800aa4e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa52:	f7f6 f855 	bl	8000b00 <__aeabi_dcmple>
 800aa56:	bb48      	cbnz	r0, 800aaac <_printf_float+0xd0>
 800aa58:	2200      	movs	r2, #0
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	4640      	mov	r0, r8
 800aa5e:	4649      	mov	r1, r9
 800aa60:	f7f6 f844 	bl	8000aec <__aeabi_dcmplt>
 800aa64:	b110      	cbz	r0, 800aa6c <_printf_float+0x90>
 800aa66:	232d      	movs	r3, #45	; 0x2d
 800aa68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa6c:	4b93      	ldr	r3, [pc, #588]	; (800acbc <_printf_float+0x2e0>)
 800aa6e:	4894      	ldr	r0, [pc, #592]	; (800acc0 <_printf_float+0x2e4>)
 800aa70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aa74:	bf94      	ite	ls
 800aa76:	4698      	movls	r8, r3
 800aa78:	4680      	movhi	r8, r0
 800aa7a:	2303      	movs	r3, #3
 800aa7c:	6123      	str	r3, [r4, #16]
 800aa7e:	9b05      	ldr	r3, [sp, #20]
 800aa80:	f023 0204 	bic.w	r2, r3, #4
 800aa84:	6022      	str	r2, [r4, #0]
 800aa86:	f04f 0900 	mov.w	r9, #0
 800aa8a:	9700      	str	r7, [sp, #0]
 800aa8c:	4633      	mov	r3, r6
 800aa8e:	aa0b      	add	r2, sp, #44	; 0x2c
 800aa90:	4621      	mov	r1, r4
 800aa92:	4628      	mov	r0, r5
 800aa94:	f000 f9d8 	bl	800ae48 <_printf_common>
 800aa98:	3001      	adds	r0, #1
 800aa9a:	f040 8090 	bne.w	800abbe <_printf_float+0x1e2>
 800aa9e:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa2:	b00d      	add	sp, #52	; 0x34
 800aaa4:	ecbd 8b02 	vpop	{d8}
 800aaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaac:	4642      	mov	r2, r8
 800aaae:	464b      	mov	r3, r9
 800aab0:	4640      	mov	r0, r8
 800aab2:	4649      	mov	r1, r9
 800aab4:	f7f6 f842 	bl	8000b3c <__aeabi_dcmpun>
 800aab8:	b140      	cbz	r0, 800aacc <_printf_float+0xf0>
 800aaba:	464b      	mov	r3, r9
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	bfbc      	itt	lt
 800aac0:	232d      	movlt	r3, #45	; 0x2d
 800aac2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aac6:	487f      	ldr	r0, [pc, #508]	; (800acc4 <_printf_float+0x2e8>)
 800aac8:	4b7f      	ldr	r3, [pc, #508]	; (800acc8 <_printf_float+0x2ec>)
 800aaca:	e7d1      	b.n	800aa70 <_printf_float+0x94>
 800aacc:	6863      	ldr	r3, [r4, #4]
 800aace:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aad2:	9206      	str	r2, [sp, #24]
 800aad4:	1c5a      	adds	r2, r3, #1
 800aad6:	d13f      	bne.n	800ab58 <_printf_float+0x17c>
 800aad8:	2306      	movs	r3, #6
 800aada:	6063      	str	r3, [r4, #4]
 800aadc:	9b05      	ldr	r3, [sp, #20]
 800aade:	6861      	ldr	r1, [r4, #4]
 800aae0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aae4:	2300      	movs	r3, #0
 800aae6:	9303      	str	r3, [sp, #12]
 800aae8:	ab0a      	add	r3, sp, #40	; 0x28
 800aaea:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aaee:	ab09      	add	r3, sp, #36	; 0x24
 800aaf0:	ec49 8b10 	vmov	d0, r8, r9
 800aaf4:	9300      	str	r3, [sp, #0]
 800aaf6:	6022      	str	r2, [r4, #0]
 800aaf8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aafc:	4628      	mov	r0, r5
 800aafe:	f7ff fecd 	bl	800a89c <__cvt>
 800ab02:	9b06      	ldr	r3, [sp, #24]
 800ab04:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab06:	2b47      	cmp	r3, #71	; 0x47
 800ab08:	4680      	mov	r8, r0
 800ab0a:	d108      	bne.n	800ab1e <_printf_float+0x142>
 800ab0c:	1cc8      	adds	r0, r1, #3
 800ab0e:	db02      	blt.n	800ab16 <_printf_float+0x13a>
 800ab10:	6863      	ldr	r3, [r4, #4]
 800ab12:	4299      	cmp	r1, r3
 800ab14:	dd41      	ble.n	800ab9a <_printf_float+0x1be>
 800ab16:	f1ab 0b02 	sub.w	fp, fp, #2
 800ab1a:	fa5f fb8b 	uxtb.w	fp, fp
 800ab1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab22:	d820      	bhi.n	800ab66 <_printf_float+0x18a>
 800ab24:	3901      	subs	r1, #1
 800ab26:	465a      	mov	r2, fp
 800ab28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ab2c:	9109      	str	r1, [sp, #36]	; 0x24
 800ab2e:	f7ff ff17 	bl	800a960 <__exponent>
 800ab32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab34:	1813      	adds	r3, r2, r0
 800ab36:	2a01      	cmp	r2, #1
 800ab38:	4681      	mov	r9, r0
 800ab3a:	6123      	str	r3, [r4, #16]
 800ab3c:	dc02      	bgt.n	800ab44 <_printf_float+0x168>
 800ab3e:	6822      	ldr	r2, [r4, #0]
 800ab40:	07d2      	lsls	r2, r2, #31
 800ab42:	d501      	bpl.n	800ab48 <_printf_float+0x16c>
 800ab44:	3301      	adds	r3, #1
 800ab46:	6123      	str	r3, [r4, #16]
 800ab48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d09c      	beq.n	800aa8a <_printf_float+0xae>
 800ab50:	232d      	movs	r3, #45	; 0x2d
 800ab52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab56:	e798      	b.n	800aa8a <_printf_float+0xae>
 800ab58:	9a06      	ldr	r2, [sp, #24]
 800ab5a:	2a47      	cmp	r2, #71	; 0x47
 800ab5c:	d1be      	bne.n	800aadc <_printf_float+0x100>
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d1bc      	bne.n	800aadc <_printf_float+0x100>
 800ab62:	2301      	movs	r3, #1
 800ab64:	e7b9      	b.n	800aada <_printf_float+0xfe>
 800ab66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ab6a:	d118      	bne.n	800ab9e <_printf_float+0x1c2>
 800ab6c:	2900      	cmp	r1, #0
 800ab6e:	6863      	ldr	r3, [r4, #4]
 800ab70:	dd0b      	ble.n	800ab8a <_printf_float+0x1ae>
 800ab72:	6121      	str	r1, [r4, #16]
 800ab74:	b913      	cbnz	r3, 800ab7c <_printf_float+0x1a0>
 800ab76:	6822      	ldr	r2, [r4, #0]
 800ab78:	07d0      	lsls	r0, r2, #31
 800ab7a:	d502      	bpl.n	800ab82 <_printf_float+0x1a6>
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	440b      	add	r3, r1
 800ab80:	6123      	str	r3, [r4, #16]
 800ab82:	65a1      	str	r1, [r4, #88]	; 0x58
 800ab84:	f04f 0900 	mov.w	r9, #0
 800ab88:	e7de      	b.n	800ab48 <_printf_float+0x16c>
 800ab8a:	b913      	cbnz	r3, 800ab92 <_printf_float+0x1b6>
 800ab8c:	6822      	ldr	r2, [r4, #0]
 800ab8e:	07d2      	lsls	r2, r2, #31
 800ab90:	d501      	bpl.n	800ab96 <_printf_float+0x1ba>
 800ab92:	3302      	adds	r3, #2
 800ab94:	e7f4      	b.n	800ab80 <_printf_float+0x1a4>
 800ab96:	2301      	movs	r3, #1
 800ab98:	e7f2      	b.n	800ab80 <_printf_float+0x1a4>
 800ab9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ab9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aba0:	4299      	cmp	r1, r3
 800aba2:	db05      	blt.n	800abb0 <_printf_float+0x1d4>
 800aba4:	6823      	ldr	r3, [r4, #0]
 800aba6:	6121      	str	r1, [r4, #16]
 800aba8:	07d8      	lsls	r0, r3, #31
 800abaa:	d5ea      	bpl.n	800ab82 <_printf_float+0x1a6>
 800abac:	1c4b      	adds	r3, r1, #1
 800abae:	e7e7      	b.n	800ab80 <_printf_float+0x1a4>
 800abb0:	2900      	cmp	r1, #0
 800abb2:	bfd4      	ite	le
 800abb4:	f1c1 0202 	rsble	r2, r1, #2
 800abb8:	2201      	movgt	r2, #1
 800abba:	4413      	add	r3, r2
 800abbc:	e7e0      	b.n	800ab80 <_printf_float+0x1a4>
 800abbe:	6823      	ldr	r3, [r4, #0]
 800abc0:	055a      	lsls	r2, r3, #21
 800abc2:	d407      	bmi.n	800abd4 <_printf_float+0x1f8>
 800abc4:	6923      	ldr	r3, [r4, #16]
 800abc6:	4642      	mov	r2, r8
 800abc8:	4631      	mov	r1, r6
 800abca:	4628      	mov	r0, r5
 800abcc:	47b8      	blx	r7
 800abce:	3001      	adds	r0, #1
 800abd0:	d12c      	bne.n	800ac2c <_printf_float+0x250>
 800abd2:	e764      	b.n	800aa9e <_printf_float+0xc2>
 800abd4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800abd8:	f240 80e0 	bls.w	800ad9c <_printf_float+0x3c0>
 800abdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800abe0:	2200      	movs	r2, #0
 800abe2:	2300      	movs	r3, #0
 800abe4:	f7f5 ff78 	bl	8000ad8 <__aeabi_dcmpeq>
 800abe8:	2800      	cmp	r0, #0
 800abea:	d034      	beq.n	800ac56 <_printf_float+0x27a>
 800abec:	4a37      	ldr	r2, [pc, #220]	; (800accc <_printf_float+0x2f0>)
 800abee:	2301      	movs	r3, #1
 800abf0:	4631      	mov	r1, r6
 800abf2:	4628      	mov	r0, r5
 800abf4:	47b8      	blx	r7
 800abf6:	3001      	adds	r0, #1
 800abf8:	f43f af51 	beq.w	800aa9e <_printf_float+0xc2>
 800abfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac00:	429a      	cmp	r2, r3
 800ac02:	db02      	blt.n	800ac0a <_printf_float+0x22e>
 800ac04:	6823      	ldr	r3, [r4, #0]
 800ac06:	07d8      	lsls	r0, r3, #31
 800ac08:	d510      	bpl.n	800ac2c <_printf_float+0x250>
 800ac0a:	ee18 3a10 	vmov	r3, s16
 800ac0e:	4652      	mov	r2, sl
 800ac10:	4631      	mov	r1, r6
 800ac12:	4628      	mov	r0, r5
 800ac14:	47b8      	blx	r7
 800ac16:	3001      	adds	r0, #1
 800ac18:	f43f af41 	beq.w	800aa9e <_printf_float+0xc2>
 800ac1c:	f04f 0800 	mov.w	r8, #0
 800ac20:	f104 091a 	add.w	r9, r4, #26
 800ac24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac26:	3b01      	subs	r3, #1
 800ac28:	4543      	cmp	r3, r8
 800ac2a:	dc09      	bgt.n	800ac40 <_printf_float+0x264>
 800ac2c:	6823      	ldr	r3, [r4, #0]
 800ac2e:	079b      	lsls	r3, r3, #30
 800ac30:	f100 8105 	bmi.w	800ae3e <_printf_float+0x462>
 800ac34:	68e0      	ldr	r0, [r4, #12]
 800ac36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac38:	4298      	cmp	r0, r3
 800ac3a:	bfb8      	it	lt
 800ac3c:	4618      	movlt	r0, r3
 800ac3e:	e730      	b.n	800aaa2 <_printf_float+0xc6>
 800ac40:	2301      	movs	r3, #1
 800ac42:	464a      	mov	r2, r9
 800ac44:	4631      	mov	r1, r6
 800ac46:	4628      	mov	r0, r5
 800ac48:	47b8      	blx	r7
 800ac4a:	3001      	adds	r0, #1
 800ac4c:	f43f af27 	beq.w	800aa9e <_printf_float+0xc2>
 800ac50:	f108 0801 	add.w	r8, r8, #1
 800ac54:	e7e6      	b.n	800ac24 <_printf_float+0x248>
 800ac56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	dc39      	bgt.n	800acd0 <_printf_float+0x2f4>
 800ac5c:	4a1b      	ldr	r2, [pc, #108]	; (800accc <_printf_float+0x2f0>)
 800ac5e:	2301      	movs	r3, #1
 800ac60:	4631      	mov	r1, r6
 800ac62:	4628      	mov	r0, r5
 800ac64:	47b8      	blx	r7
 800ac66:	3001      	adds	r0, #1
 800ac68:	f43f af19 	beq.w	800aa9e <_printf_float+0xc2>
 800ac6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac70:	4313      	orrs	r3, r2
 800ac72:	d102      	bne.n	800ac7a <_printf_float+0x29e>
 800ac74:	6823      	ldr	r3, [r4, #0]
 800ac76:	07d9      	lsls	r1, r3, #31
 800ac78:	d5d8      	bpl.n	800ac2c <_printf_float+0x250>
 800ac7a:	ee18 3a10 	vmov	r3, s16
 800ac7e:	4652      	mov	r2, sl
 800ac80:	4631      	mov	r1, r6
 800ac82:	4628      	mov	r0, r5
 800ac84:	47b8      	blx	r7
 800ac86:	3001      	adds	r0, #1
 800ac88:	f43f af09 	beq.w	800aa9e <_printf_float+0xc2>
 800ac8c:	f04f 0900 	mov.w	r9, #0
 800ac90:	f104 0a1a 	add.w	sl, r4, #26
 800ac94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac96:	425b      	negs	r3, r3
 800ac98:	454b      	cmp	r3, r9
 800ac9a:	dc01      	bgt.n	800aca0 <_printf_float+0x2c4>
 800ac9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac9e:	e792      	b.n	800abc6 <_printf_float+0x1ea>
 800aca0:	2301      	movs	r3, #1
 800aca2:	4652      	mov	r2, sl
 800aca4:	4631      	mov	r1, r6
 800aca6:	4628      	mov	r0, r5
 800aca8:	47b8      	blx	r7
 800acaa:	3001      	adds	r0, #1
 800acac:	f43f aef7 	beq.w	800aa9e <_printf_float+0xc2>
 800acb0:	f109 0901 	add.w	r9, r9, #1
 800acb4:	e7ee      	b.n	800ac94 <_printf_float+0x2b8>
 800acb6:	bf00      	nop
 800acb8:	7fefffff 	.word	0x7fefffff
 800acbc:	0800d4a8 	.word	0x0800d4a8
 800acc0:	0800d4ac 	.word	0x0800d4ac
 800acc4:	0800d4b4 	.word	0x0800d4b4
 800acc8:	0800d4b0 	.word	0x0800d4b0
 800accc:	0800d4b8 	.word	0x0800d4b8
 800acd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800acd4:	429a      	cmp	r2, r3
 800acd6:	bfa8      	it	ge
 800acd8:	461a      	movge	r2, r3
 800acda:	2a00      	cmp	r2, #0
 800acdc:	4691      	mov	r9, r2
 800acde:	dc37      	bgt.n	800ad50 <_printf_float+0x374>
 800ace0:	f04f 0b00 	mov.w	fp, #0
 800ace4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ace8:	f104 021a 	add.w	r2, r4, #26
 800acec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800acee:	9305      	str	r3, [sp, #20]
 800acf0:	eba3 0309 	sub.w	r3, r3, r9
 800acf4:	455b      	cmp	r3, fp
 800acf6:	dc33      	bgt.n	800ad60 <_printf_float+0x384>
 800acf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800acfc:	429a      	cmp	r2, r3
 800acfe:	db3b      	blt.n	800ad78 <_printf_float+0x39c>
 800ad00:	6823      	ldr	r3, [r4, #0]
 800ad02:	07da      	lsls	r2, r3, #31
 800ad04:	d438      	bmi.n	800ad78 <_printf_float+0x39c>
 800ad06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad08:	9a05      	ldr	r2, [sp, #20]
 800ad0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad0c:	1a9a      	subs	r2, r3, r2
 800ad0e:	eba3 0901 	sub.w	r9, r3, r1
 800ad12:	4591      	cmp	r9, r2
 800ad14:	bfa8      	it	ge
 800ad16:	4691      	movge	r9, r2
 800ad18:	f1b9 0f00 	cmp.w	r9, #0
 800ad1c:	dc35      	bgt.n	800ad8a <_printf_float+0x3ae>
 800ad1e:	f04f 0800 	mov.w	r8, #0
 800ad22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad26:	f104 0a1a 	add.w	sl, r4, #26
 800ad2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad2e:	1a9b      	subs	r3, r3, r2
 800ad30:	eba3 0309 	sub.w	r3, r3, r9
 800ad34:	4543      	cmp	r3, r8
 800ad36:	f77f af79 	ble.w	800ac2c <_printf_float+0x250>
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	4652      	mov	r2, sl
 800ad3e:	4631      	mov	r1, r6
 800ad40:	4628      	mov	r0, r5
 800ad42:	47b8      	blx	r7
 800ad44:	3001      	adds	r0, #1
 800ad46:	f43f aeaa 	beq.w	800aa9e <_printf_float+0xc2>
 800ad4a:	f108 0801 	add.w	r8, r8, #1
 800ad4e:	e7ec      	b.n	800ad2a <_printf_float+0x34e>
 800ad50:	4613      	mov	r3, r2
 800ad52:	4631      	mov	r1, r6
 800ad54:	4642      	mov	r2, r8
 800ad56:	4628      	mov	r0, r5
 800ad58:	47b8      	blx	r7
 800ad5a:	3001      	adds	r0, #1
 800ad5c:	d1c0      	bne.n	800ace0 <_printf_float+0x304>
 800ad5e:	e69e      	b.n	800aa9e <_printf_float+0xc2>
 800ad60:	2301      	movs	r3, #1
 800ad62:	4631      	mov	r1, r6
 800ad64:	4628      	mov	r0, r5
 800ad66:	9205      	str	r2, [sp, #20]
 800ad68:	47b8      	blx	r7
 800ad6a:	3001      	adds	r0, #1
 800ad6c:	f43f ae97 	beq.w	800aa9e <_printf_float+0xc2>
 800ad70:	9a05      	ldr	r2, [sp, #20]
 800ad72:	f10b 0b01 	add.w	fp, fp, #1
 800ad76:	e7b9      	b.n	800acec <_printf_float+0x310>
 800ad78:	ee18 3a10 	vmov	r3, s16
 800ad7c:	4652      	mov	r2, sl
 800ad7e:	4631      	mov	r1, r6
 800ad80:	4628      	mov	r0, r5
 800ad82:	47b8      	blx	r7
 800ad84:	3001      	adds	r0, #1
 800ad86:	d1be      	bne.n	800ad06 <_printf_float+0x32a>
 800ad88:	e689      	b.n	800aa9e <_printf_float+0xc2>
 800ad8a:	9a05      	ldr	r2, [sp, #20]
 800ad8c:	464b      	mov	r3, r9
 800ad8e:	4442      	add	r2, r8
 800ad90:	4631      	mov	r1, r6
 800ad92:	4628      	mov	r0, r5
 800ad94:	47b8      	blx	r7
 800ad96:	3001      	adds	r0, #1
 800ad98:	d1c1      	bne.n	800ad1e <_printf_float+0x342>
 800ad9a:	e680      	b.n	800aa9e <_printf_float+0xc2>
 800ad9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad9e:	2a01      	cmp	r2, #1
 800ada0:	dc01      	bgt.n	800ada6 <_printf_float+0x3ca>
 800ada2:	07db      	lsls	r3, r3, #31
 800ada4:	d538      	bpl.n	800ae18 <_printf_float+0x43c>
 800ada6:	2301      	movs	r3, #1
 800ada8:	4642      	mov	r2, r8
 800adaa:	4631      	mov	r1, r6
 800adac:	4628      	mov	r0, r5
 800adae:	47b8      	blx	r7
 800adb0:	3001      	adds	r0, #1
 800adb2:	f43f ae74 	beq.w	800aa9e <_printf_float+0xc2>
 800adb6:	ee18 3a10 	vmov	r3, s16
 800adba:	4652      	mov	r2, sl
 800adbc:	4631      	mov	r1, r6
 800adbe:	4628      	mov	r0, r5
 800adc0:	47b8      	blx	r7
 800adc2:	3001      	adds	r0, #1
 800adc4:	f43f ae6b 	beq.w	800aa9e <_printf_float+0xc2>
 800adc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800adcc:	2200      	movs	r2, #0
 800adce:	2300      	movs	r3, #0
 800add0:	f7f5 fe82 	bl	8000ad8 <__aeabi_dcmpeq>
 800add4:	b9d8      	cbnz	r0, 800ae0e <_printf_float+0x432>
 800add6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800add8:	f108 0201 	add.w	r2, r8, #1
 800addc:	3b01      	subs	r3, #1
 800adde:	4631      	mov	r1, r6
 800ade0:	4628      	mov	r0, r5
 800ade2:	47b8      	blx	r7
 800ade4:	3001      	adds	r0, #1
 800ade6:	d10e      	bne.n	800ae06 <_printf_float+0x42a>
 800ade8:	e659      	b.n	800aa9e <_printf_float+0xc2>
 800adea:	2301      	movs	r3, #1
 800adec:	4652      	mov	r2, sl
 800adee:	4631      	mov	r1, r6
 800adf0:	4628      	mov	r0, r5
 800adf2:	47b8      	blx	r7
 800adf4:	3001      	adds	r0, #1
 800adf6:	f43f ae52 	beq.w	800aa9e <_printf_float+0xc2>
 800adfa:	f108 0801 	add.w	r8, r8, #1
 800adfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae00:	3b01      	subs	r3, #1
 800ae02:	4543      	cmp	r3, r8
 800ae04:	dcf1      	bgt.n	800adea <_printf_float+0x40e>
 800ae06:	464b      	mov	r3, r9
 800ae08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ae0c:	e6dc      	b.n	800abc8 <_printf_float+0x1ec>
 800ae0e:	f04f 0800 	mov.w	r8, #0
 800ae12:	f104 0a1a 	add.w	sl, r4, #26
 800ae16:	e7f2      	b.n	800adfe <_printf_float+0x422>
 800ae18:	2301      	movs	r3, #1
 800ae1a:	4642      	mov	r2, r8
 800ae1c:	e7df      	b.n	800adde <_printf_float+0x402>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	464a      	mov	r2, r9
 800ae22:	4631      	mov	r1, r6
 800ae24:	4628      	mov	r0, r5
 800ae26:	47b8      	blx	r7
 800ae28:	3001      	adds	r0, #1
 800ae2a:	f43f ae38 	beq.w	800aa9e <_printf_float+0xc2>
 800ae2e:	f108 0801 	add.w	r8, r8, #1
 800ae32:	68e3      	ldr	r3, [r4, #12]
 800ae34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae36:	1a5b      	subs	r3, r3, r1
 800ae38:	4543      	cmp	r3, r8
 800ae3a:	dcf0      	bgt.n	800ae1e <_printf_float+0x442>
 800ae3c:	e6fa      	b.n	800ac34 <_printf_float+0x258>
 800ae3e:	f04f 0800 	mov.w	r8, #0
 800ae42:	f104 0919 	add.w	r9, r4, #25
 800ae46:	e7f4      	b.n	800ae32 <_printf_float+0x456>

0800ae48 <_printf_common>:
 800ae48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae4c:	4616      	mov	r6, r2
 800ae4e:	4699      	mov	r9, r3
 800ae50:	688a      	ldr	r2, [r1, #8]
 800ae52:	690b      	ldr	r3, [r1, #16]
 800ae54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	bfb8      	it	lt
 800ae5c:	4613      	movlt	r3, r2
 800ae5e:	6033      	str	r3, [r6, #0]
 800ae60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae64:	4607      	mov	r7, r0
 800ae66:	460c      	mov	r4, r1
 800ae68:	b10a      	cbz	r2, 800ae6e <_printf_common+0x26>
 800ae6a:	3301      	adds	r3, #1
 800ae6c:	6033      	str	r3, [r6, #0]
 800ae6e:	6823      	ldr	r3, [r4, #0]
 800ae70:	0699      	lsls	r1, r3, #26
 800ae72:	bf42      	ittt	mi
 800ae74:	6833      	ldrmi	r3, [r6, #0]
 800ae76:	3302      	addmi	r3, #2
 800ae78:	6033      	strmi	r3, [r6, #0]
 800ae7a:	6825      	ldr	r5, [r4, #0]
 800ae7c:	f015 0506 	ands.w	r5, r5, #6
 800ae80:	d106      	bne.n	800ae90 <_printf_common+0x48>
 800ae82:	f104 0a19 	add.w	sl, r4, #25
 800ae86:	68e3      	ldr	r3, [r4, #12]
 800ae88:	6832      	ldr	r2, [r6, #0]
 800ae8a:	1a9b      	subs	r3, r3, r2
 800ae8c:	42ab      	cmp	r3, r5
 800ae8e:	dc26      	bgt.n	800aede <_printf_common+0x96>
 800ae90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae94:	1e13      	subs	r3, r2, #0
 800ae96:	6822      	ldr	r2, [r4, #0]
 800ae98:	bf18      	it	ne
 800ae9a:	2301      	movne	r3, #1
 800ae9c:	0692      	lsls	r2, r2, #26
 800ae9e:	d42b      	bmi.n	800aef8 <_printf_common+0xb0>
 800aea0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aea4:	4649      	mov	r1, r9
 800aea6:	4638      	mov	r0, r7
 800aea8:	47c0      	blx	r8
 800aeaa:	3001      	adds	r0, #1
 800aeac:	d01e      	beq.n	800aeec <_printf_common+0xa4>
 800aeae:	6823      	ldr	r3, [r4, #0]
 800aeb0:	68e5      	ldr	r5, [r4, #12]
 800aeb2:	6832      	ldr	r2, [r6, #0]
 800aeb4:	f003 0306 	and.w	r3, r3, #6
 800aeb8:	2b04      	cmp	r3, #4
 800aeba:	bf08      	it	eq
 800aebc:	1aad      	subeq	r5, r5, r2
 800aebe:	68a3      	ldr	r3, [r4, #8]
 800aec0:	6922      	ldr	r2, [r4, #16]
 800aec2:	bf0c      	ite	eq
 800aec4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aec8:	2500      	movne	r5, #0
 800aeca:	4293      	cmp	r3, r2
 800aecc:	bfc4      	itt	gt
 800aece:	1a9b      	subgt	r3, r3, r2
 800aed0:	18ed      	addgt	r5, r5, r3
 800aed2:	2600      	movs	r6, #0
 800aed4:	341a      	adds	r4, #26
 800aed6:	42b5      	cmp	r5, r6
 800aed8:	d11a      	bne.n	800af10 <_printf_common+0xc8>
 800aeda:	2000      	movs	r0, #0
 800aedc:	e008      	b.n	800aef0 <_printf_common+0xa8>
 800aede:	2301      	movs	r3, #1
 800aee0:	4652      	mov	r2, sl
 800aee2:	4649      	mov	r1, r9
 800aee4:	4638      	mov	r0, r7
 800aee6:	47c0      	blx	r8
 800aee8:	3001      	adds	r0, #1
 800aeea:	d103      	bne.n	800aef4 <_printf_common+0xac>
 800aeec:	f04f 30ff 	mov.w	r0, #4294967295
 800aef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aef4:	3501      	adds	r5, #1
 800aef6:	e7c6      	b.n	800ae86 <_printf_common+0x3e>
 800aef8:	18e1      	adds	r1, r4, r3
 800aefa:	1c5a      	adds	r2, r3, #1
 800aefc:	2030      	movs	r0, #48	; 0x30
 800aefe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af02:	4422      	add	r2, r4
 800af04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af0c:	3302      	adds	r3, #2
 800af0e:	e7c7      	b.n	800aea0 <_printf_common+0x58>
 800af10:	2301      	movs	r3, #1
 800af12:	4622      	mov	r2, r4
 800af14:	4649      	mov	r1, r9
 800af16:	4638      	mov	r0, r7
 800af18:	47c0      	blx	r8
 800af1a:	3001      	adds	r0, #1
 800af1c:	d0e6      	beq.n	800aeec <_printf_common+0xa4>
 800af1e:	3601      	adds	r6, #1
 800af20:	e7d9      	b.n	800aed6 <_printf_common+0x8e>
	...

0800af24 <_printf_i>:
 800af24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af28:	7e0f      	ldrb	r7, [r1, #24]
 800af2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af2c:	2f78      	cmp	r7, #120	; 0x78
 800af2e:	4691      	mov	r9, r2
 800af30:	4680      	mov	r8, r0
 800af32:	460c      	mov	r4, r1
 800af34:	469a      	mov	sl, r3
 800af36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af3a:	d807      	bhi.n	800af4c <_printf_i+0x28>
 800af3c:	2f62      	cmp	r7, #98	; 0x62
 800af3e:	d80a      	bhi.n	800af56 <_printf_i+0x32>
 800af40:	2f00      	cmp	r7, #0
 800af42:	f000 80d8 	beq.w	800b0f6 <_printf_i+0x1d2>
 800af46:	2f58      	cmp	r7, #88	; 0x58
 800af48:	f000 80a3 	beq.w	800b092 <_printf_i+0x16e>
 800af4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af54:	e03a      	b.n	800afcc <_printf_i+0xa8>
 800af56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af5a:	2b15      	cmp	r3, #21
 800af5c:	d8f6      	bhi.n	800af4c <_printf_i+0x28>
 800af5e:	a101      	add	r1, pc, #4	; (adr r1, 800af64 <_printf_i+0x40>)
 800af60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af64:	0800afbd 	.word	0x0800afbd
 800af68:	0800afd1 	.word	0x0800afd1
 800af6c:	0800af4d 	.word	0x0800af4d
 800af70:	0800af4d 	.word	0x0800af4d
 800af74:	0800af4d 	.word	0x0800af4d
 800af78:	0800af4d 	.word	0x0800af4d
 800af7c:	0800afd1 	.word	0x0800afd1
 800af80:	0800af4d 	.word	0x0800af4d
 800af84:	0800af4d 	.word	0x0800af4d
 800af88:	0800af4d 	.word	0x0800af4d
 800af8c:	0800af4d 	.word	0x0800af4d
 800af90:	0800b0dd 	.word	0x0800b0dd
 800af94:	0800b001 	.word	0x0800b001
 800af98:	0800b0bf 	.word	0x0800b0bf
 800af9c:	0800af4d 	.word	0x0800af4d
 800afa0:	0800af4d 	.word	0x0800af4d
 800afa4:	0800b0ff 	.word	0x0800b0ff
 800afa8:	0800af4d 	.word	0x0800af4d
 800afac:	0800b001 	.word	0x0800b001
 800afb0:	0800af4d 	.word	0x0800af4d
 800afb4:	0800af4d 	.word	0x0800af4d
 800afb8:	0800b0c7 	.word	0x0800b0c7
 800afbc:	682b      	ldr	r3, [r5, #0]
 800afbe:	1d1a      	adds	r2, r3, #4
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	602a      	str	r2, [r5, #0]
 800afc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800afcc:	2301      	movs	r3, #1
 800afce:	e0a3      	b.n	800b118 <_printf_i+0x1f4>
 800afd0:	6820      	ldr	r0, [r4, #0]
 800afd2:	6829      	ldr	r1, [r5, #0]
 800afd4:	0606      	lsls	r6, r0, #24
 800afd6:	f101 0304 	add.w	r3, r1, #4
 800afda:	d50a      	bpl.n	800aff2 <_printf_i+0xce>
 800afdc:	680e      	ldr	r6, [r1, #0]
 800afde:	602b      	str	r3, [r5, #0]
 800afe0:	2e00      	cmp	r6, #0
 800afe2:	da03      	bge.n	800afec <_printf_i+0xc8>
 800afe4:	232d      	movs	r3, #45	; 0x2d
 800afe6:	4276      	negs	r6, r6
 800afe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afec:	485e      	ldr	r0, [pc, #376]	; (800b168 <_printf_i+0x244>)
 800afee:	230a      	movs	r3, #10
 800aff0:	e019      	b.n	800b026 <_printf_i+0x102>
 800aff2:	680e      	ldr	r6, [r1, #0]
 800aff4:	602b      	str	r3, [r5, #0]
 800aff6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800affa:	bf18      	it	ne
 800affc:	b236      	sxthne	r6, r6
 800affe:	e7ef      	b.n	800afe0 <_printf_i+0xbc>
 800b000:	682b      	ldr	r3, [r5, #0]
 800b002:	6820      	ldr	r0, [r4, #0]
 800b004:	1d19      	adds	r1, r3, #4
 800b006:	6029      	str	r1, [r5, #0]
 800b008:	0601      	lsls	r1, r0, #24
 800b00a:	d501      	bpl.n	800b010 <_printf_i+0xec>
 800b00c:	681e      	ldr	r6, [r3, #0]
 800b00e:	e002      	b.n	800b016 <_printf_i+0xf2>
 800b010:	0646      	lsls	r6, r0, #25
 800b012:	d5fb      	bpl.n	800b00c <_printf_i+0xe8>
 800b014:	881e      	ldrh	r6, [r3, #0]
 800b016:	4854      	ldr	r0, [pc, #336]	; (800b168 <_printf_i+0x244>)
 800b018:	2f6f      	cmp	r7, #111	; 0x6f
 800b01a:	bf0c      	ite	eq
 800b01c:	2308      	moveq	r3, #8
 800b01e:	230a      	movne	r3, #10
 800b020:	2100      	movs	r1, #0
 800b022:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b026:	6865      	ldr	r5, [r4, #4]
 800b028:	60a5      	str	r5, [r4, #8]
 800b02a:	2d00      	cmp	r5, #0
 800b02c:	bfa2      	ittt	ge
 800b02e:	6821      	ldrge	r1, [r4, #0]
 800b030:	f021 0104 	bicge.w	r1, r1, #4
 800b034:	6021      	strge	r1, [r4, #0]
 800b036:	b90e      	cbnz	r6, 800b03c <_printf_i+0x118>
 800b038:	2d00      	cmp	r5, #0
 800b03a:	d04d      	beq.n	800b0d8 <_printf_i+0x1b4>
 800b03c:	4615      	mov	r5, r2
 800b03e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b042:	fb03 6711 	mls	r7, r3, r1, r6
 800b046:	5dc7      	ldrb	r7, [r0, r7]
 800b048:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b04c:	4637      	mov	r7, r6
 800b04e:	42bb      	cmp	r3, r7
 800b050:	460e      	mov	r6, r1
 800b052:	d9f4      	bls.n	800b03e <_printf_i+0x11a>
 800b054:	2b08      	cmp	r3, #8
 800b056:	d10b      	bne.n	800b070 <_printf_i+0x14c>
 800b058:	6823      	ldr	r3, [r4, #0]
 800b05a:	07de      	lsls	r6, r3, #31
 800b05c:	d508      	bpl.n	800b070 <_printf_i+0x14c>
 800b05e:	6923      	ldr	r3, [r4, #16]
 800b060:	6861      	ldr	r1, [r4, #4]
 800b062:	4299      	cmp	r1, r3
 800b064:	bfde      	ittt	le
 800b066:	2330      	movle	r3, #48	; 0x30
 800b068:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b06c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b070:	1b52      	subs	r2, r2, r5
 800b072:	6122      	str	r2, [r4, #16]
 800b074:	f8cd a000 	str.w	sl, [sp]
 800b078:	464b      	mov	r3, r9
 800b07a:	aa03      	add	r2, sp, #12
 800b07c:	4621      	mov	r1, r4
 800b07e:	4640      	mov	r0, r8
 800b080:	f7ff fee2 	bl	800ae48 <_printf_common>
 800b084:	3001      	adds	r0, #1
 800b086:	d14c      	bne.n	800b122 <_printf_i+0x1fe>
 800b088:	f04f 30ff 	mov.w	r0, #4294967295
 800b08c:	b004      	add	sp, #16
 800b08e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b092:	4835      	ldr	r0, [pc, #212]	; (800b168 <_printf_i+0x244>)
 800b094:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b098:	6829      	ldr	r1, [r5, #0]
 800b09a:	6823      	ldr	r3, [r4, #0]
 800b09c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b0a0:	6029      	str	r1, [r5, #0]
 800b0a2:	061d      	lsls	r5, r3, #24
 800b0a4:	d514      	bpl.n	800b0d0 <_printf_i+0x1ac>
 800b0a6:	07df      	lsls	r7, r3, #31
 800b0a8:	bf44      	itt	mi
 800b0aa:	f043 0320 	orrmi.w	r3, r3, #32
 800b0ae:	6023      	strmi	r3, [r4, #0]
 800b0b0:	b91e      	cbnz	r6, 800b0ba <_printf_i+0x196>
 800b0b2:	6823      	ldr	r3, [r4, #0]
 800b0b4:	f023 0320 	bic.w	r3, r3, #32
 800b0b8:	6023      	str	r3, [r4, #0]
 800b0ba:	2310      	movs	r3, #16
 800b0bc:	e7b0      	b.n	800b020 <_printf_i+0xfc>
 800b0be:	6823      	ldr	r3, [r4, #0]
 800b0c0:	f043 0320 	orr.w	r3, r3, #32
 800b0c4:	6023      	str	r3, [r4, #0]
 800b0c6:	2378      	movs	r3, #120	; 0x78
 800b0c8:	4828      	ldr	r0, [pc, #160]	; (800b16c <_printf_i+0x248>)
 800b0ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b0ce:	e7e3      	b.n	800b098 <_printf_i+0x174>
 800b0d0:	0659      	lsls	r1, r3, #25
 800b0d2:	bf48      	it	mi
 800b0d4:	b2b6      	uxthmi	r6, r6
 800b0d6:	e7e6      	b.n	800b0a6 <_printf_i+0x182>
 800b0d8:	4615      	mov	r5, r2
 800b0da:	e7bb      	b.n	800b054 <_printf_i+0x130>
 800b0dc:	682b      	ldr	r3, [r5, #0]
 800b0de:	6826      	ldr	r6, [r4, #0]
 800b0e0:	6961      	ldr	r1, [r4, #20]
 800b0e2:	1d18      	adds	r0, r3, #4
 800b0e4:	6028      	str	r0, [r5, #0]
 800b0e6:	0635      	lsls	r5, r6, #24
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	d501      	bpl.n	800b0f0 <_printf_i+0x1cc>
 800b0ec:	6019      	str	r1, [r3, #0]
 800b0ee:	e002      	b.n	800b0f6 <_printf_i+0x1d2>
 800b0f0:	0670      	lsls	r0, r6, #25
 800b0f2:	d5fb      	bpl.n	800b0ec <_printf_i+0x1c8>
 800b0f4:	8019      	strh	r1, [r3, #0]
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	6123      	str	r3, [r4, #16]
 800b0fa:	4615      	mov	r5, r2
 800b0fc:	e7ba      	b.n	800b074 <_printf_i+0x150>
 800b0fe:	682b      	ldr	r3, [r5, #0]
 800b100:	1d1a      	adds	r2, r3, #4
 800b102:	602a      	str	r2, [r5, #0]
 800b104:	681d      	ldr	r5, [r3, #0]
 800b106:	6862      	ldr	r2, [r4, #4]
 800b108:	2100      	movs	r1, #0
 800b10a:	4628      	mov	r0, r5
 800b10c:	f7f5 f870 	bl	80001f0 <memchr>
 800b110:	b108      	cbz	r0, 800b116 <_printf_i+0x1f2>
 800b112:	1b40      	subs	r0, r0, r5
 800b114:	6060      	str	r0, [r4, #4]
 800b116:	6863      	ldr	r3, [r4, #4]
 800b118:	6123      	str	r3, [r4, #16]
 800b11a:	2300      	movs	r3, #0
 800b11c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b120:	e7a8      	b.n	800b074 <_printf_i+0x150>
 800b122:	6923      	ldr	r3, [r4, #16]
 800b124:	462a      	mov	r2, r5
 800b126:	4649      	mov	r1, r9
 800b128:	4640      	mov	r0, r8
 800b12a:	47d0      	blx	sl
 800b12c:	3001      	adds	r0, #1
 800b12e:	d0ab      	beq.n	800b088 <_printf_i+0x164>
 800b130:	6823      	ldr	r3, [r4, #0]
 800b132:	079b      	lsls	r3, r3, #30
 800b134:	d413      	bmi.n	800b15e <_printf_i+0x23a>
 800b136:	68e0      	ldr	r0, [r4, #12]
 800b138:	9b03      	ldr	r3, [sp, #12]
 800b13a:	4298      	cmp	r0, r3
 800b13c:	bfb8      	it	lt
 800b13e:	4618      	movlt	r0, r3
 800b140:	e7a4      	b.n	800b08c <_printf_i+0x168>
 800b142:	2301      	movs	r3, #1
 800b144:	4632      	mov	r2, r6
 800b146:	4649      	mov	r1, r9
 800b148:	4640      	mov	r0, r8
 800b14a:	47d0      	blx	sl
 800b14c:	3001      	adds	r0, #1
 800b14e:	d09b      	beq.n	800b088 <_printf_i+0x164>
 800b150:	3501      	adds	r5, #1
 800b152:	68e3      	ldr	r3, [r4, #12]
 800b154:	9903      	ldr	r1, [sp, #12]
 800b156:	1a5b      	subs	r3, r3, r1
 800b158:	42ab      	cmp	r3, r5
 800b15a:	dcf2      	bgt.n	800b142 <_printf_i+0x21e>
 800b15c:	e7eb      	b.n	800b136 <_printf_i+0x212>
 800b15e:	2500      	movs	r5, #0
 800b160:	f104 0619 	add.w	r6, r4, #25
 800b164:	e7f5      	b.n	800b152 <_printf_i+0x22e>
 800b166:	bf00      	nop
 800b168:	0800d4ba 	.word	0x0800d4ba
 800b16c:	0800d4cb 	.word	0x0800d4cb

0800b170 <quorem>:
 800b170:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b174:	6903      	ldr	r3, [r0, #16]
 800b176:	690c      	ldr	r4, [r1, #16]
 800b178:	42a3      	cmp	r3, r4
 800b17a:	4607      	mov	r7, r0
 800b17c:	f2c0 8081 	blt.w	800b282 <quorem+0x112>
 800b180:	3c01      	subs	r4, #1
 800b182:	f101 0814 	add.w	r8, r1, #20
 800b186:	f100 0514 	add.w	r5, r0, #20
 800b18a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b18e:	9301      	str	r3, [sp, #4]
 800b190:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b194:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b198:	3301      	adds	r3, #1
 800b19a:	429a      	cmp	r2, r3
 800b19c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b1a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b1a4:	fbb2 f6f3 	udiv	r6, r2, r3
 800b1a8:	d331      	bcc.n	800b20e <quorem+0x9e>
 800b1aa:	f04f 0e00 	mov.w	lr, #0
 800b1ae:	4640      	mov	r0, r8
 800b1b0:	46ac      	mov	ip, r5
 800b1b2:	46f2      	mov	sl, lr
 800b1b4:	f850 2b04 	ldr.w	r2, [r0], #4
 800b1b8:	b293      	uxth	r3, r2
 800b1ba:	fb06 e303 	mla	r3, r6, r3, lr
 800b1be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	ebaa 0303 	sub.w	r3, sl, r3
 800b1c8:	f8dc a000 	ldr.w	sl, [ip]
 800b1cc:	0c12      	lsrs	r2, r2, #16
 800b1ce:	fa13 f38a 	uxtah	r3, r3, sl
 800b1d2:	fb06 e202 	mla	r2, r6, r2, lr
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	9b00      	ldr	r3, [sp, #0]
 800b1da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b1de:	b292      	uxth	r2, r2
 800b1e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b1e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b1e8:	f8bd 3000 	ldrh.w	r3, [sp]
 800b1ec:	4581      	cmp	r9, r0
 800b1ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1f2:	f84c 3b04 	str.w	r3, [ip], #4
 800b1f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b1fa:	d2db      	bcs.n	800b1b4 <quorem+0x44>
 800b1fc:	f855 300b 	ldr.w	r3, [r5, fp]
 800b200:	b92b      	cbnz	r3, 800b20e <quorem+0x9e>
 800b202:	9b01      	ldr	r3, [sp, #4]
 800b204:	3b04      	subs	r3, #4
 800b206:	429d      	cmp	r5, r3
 800b208:	461a      	mov	r2, r3
 800b20a:	d32e      	bcc.n	800b26a <quorem+0xfa>
 800b20c:	613c      	str	r4, [r7, #16]
 800b20e:	4638      	mov	r0, r7
 800b210:	f001 f8b6 	bl	800c380 <__mcmp>
 800b214:	2800      	cmp	r0, #0
 800b216:	db24      	blt.n	800b262 <quorem+0xf2>
 800b218:	3601      	adds	r6, #1
 800b21a:	4628      	mov	r0, r5
 800b21c:	f04f 0c00 	mov.w	ip, #0
 800b220:	f858 2b04 	ldr.w	r2, [r8], #4
 800b224:	f8d0 e000 	ldr.w	lr, [r0]
 800b228:	b293      	uxth	r3, r2
 800b22a:	ebac 0303 	sub.w	r3, ip, r3
 800b22e:	0c12      	lsrs	r2, r2, #16
 800b230:	fa13 f38e 	uxtah	r3, r3, lr
 800b234:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b238:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b242:	45c1      	cmp	r9, r8
 800b244:	f840 3b04 	str.w	r3, [r0], #4
 800b248:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b24c:	d2e8      	bcs.n	800b220 <quorem+0xb0>
 800b24e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b252:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b256:	b922      	cbnz	r2, 800b262 <quorem+0xf2>
 800b258:	3b04      	subs	r3, #4
 800b25a:	429d      	cmp	r5, r3
 800b25c:	461a      	mov	r2, r3
 800b25e:	d30a      	bcc.n	800b276 <quorem+0x106>
 800b260:	613c      	str	r4, [r7, #16]
 800b262:	4630      	mov	r0, r6
 800b264:	b003      	add	sp, #12
 800b266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b26a:	6812      	ldr	r2, [r2, #0]
 800b26c:	3b04      	subs	r3, #4
 800b26e:	2a00      	cmp	r2, #0
 800b270:	d1cc      	bne.n	800b20c <quorem+0x9c>
 800b272:	3c01      	subs	r4, #1
 800b274:	e7c7      	b.n	800b206 <quorem+0x96>
 800b276:	6812      	ldr	r2, [r2, #0]
 800b278:	3b04      	subs	r3, #4
 800b27a:	2a00      	cmp	r2, #0
 800b27c:	d1f0      	bne.n	800b260 <quorem+0xf0>
 800b27e:	3c01      	subs	r4, #1
 800b280:	e7eb      	b.n	800b25a <quorem+0xea>
 800b282:	2000      	movs	r0, #0
 800b284:	e7ee      	b.n	800b264 <quorem+0xf4>
	...

0800b288 <_dtoa_r>:
 800b288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b28c:	ed2d 8b04 	vpush	{d8-d9}
 800b290:	ec57 6b10 	vmov	r6, r7, d0
 800b294:	b093      	sub	sp, #76	; 0x4c
 800b296:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b298:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b29c:	9106      	str	r1, [sp, #24]
 800b29e:	ee10 aa10 	vmov	sl, s0
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	9209      	str	r2, [sp, #36]	; 0x24
 800b2a6:	930c      	str	r3, [sp, #48]	; 0x30
 800b2a8:	46bb      	mov	fp, r7
 800b2aa:	b975      	cbnz	r5, 800b2ca <_dtoa_r+0x42>
 800b2ac:	2010      	movs	r0, #16
 800b2ae:	f000 fddd 	bl	800be6c <malloc>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	6260      	str	r0, [r4, #36]	; 0x24
 800b2b6:	b920      	cbnz	r0, 800b2c2 <_dtoa_r+0x3a>
 800b2b8:	4ba7      	ldr	r3, [pc, #668]	; (800b558 <_dtoa_r+0x2d0>)
 800b2ba:	21ea      	movs	r1, #234	; 0xea
 800b2bc:	48a7      	ldr	r0, [pc, #668]	; (800b55c <_dtoa_r+0x2d4>)
 800b2be:	f001 fa67 	bl	800c790 <__assert_func>
 800b2c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b2c6:	6005      	str	r5, [r0, #0]
 800b2c8:	60c5      	str	r5, [r0, #12]
 800b2ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2cc:	6819      	ldr	r1, [r3, #0]
 800b2ce:	b151      	cbz	r1, 800b2e6 <_dtoa_r+0x5e>
 800b2d0:	685a      	ldr	r2, [r3, #4]
 800b2d2:	604a      	str	r2, [r1, #4]
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	4093      	lsls	r3, r2
 800b2d8:	608b      	str	r3, [r1, #8]
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f000 fe0e 	bl	800befc <_Bfree>
 800b2e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	601a      	str	r2, [r3, #0]
 800b2e6:	1e3b      	subs	r3, r7, #0
 800b2e8:	bfaa      	itet	ge
 800b2ea:	2300      	movge	r3, #0
 800b2ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b2f0:	f8c8 3000 	strge.w	r3, [r8]
 800b2f4:	4b9a      	ldr	r3, [pc, #616]	; (800b560 <_dtoa_r+0x2d8>)
 800b2f6:	bfbc      	itt	lt
 800b2f8:	2201      	movlt	r2, #1
 800b2fa:	f8c8 2000 	strlt.w	r2, [r8]
 800b2fe:	ea33 030b 	bics.w	r3, r3, fp
 800b302:	d11b      	bne.n	800b33c <_dtoa_r+0xb4>
 800b304:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b306:	f242 730f 	movw	r3, #9999	; 0x270f
 800b30a:	6013      	str	r3, [r2, #0]
 800b30c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b310:	4333      	orrs	r3, r6
 800b312:	f000 8592 	beq.w	800be3a <_dtoa_r+0xbb2>
 800b316:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b318:	b963      	cbnz	r3, 800b334 <_dtoa_r+0xac>
 800b31a:	4b92      	ldr	r3, [pc, #584]	; (800b564 <_dtoa_r+0x2dc>)
 800b31c:	e022      	b.n	800b364 <_dtoa_r+0xdc>
 800b31e:	4b92      	ldr	r3, [pc, #584]	; (800b568 <_dtoa_r+0x2e0>)
 800b320:	9301      	str	r3, [sp, #4]
 800b322:	3308      	adds	r3, #8
 800b324:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b326:	6013      	str	r3, [r2, #0]
 800b328:	9801      	ldr	r0, [sp, #4]
 800b32a:	b013      	add	sp, #76	; 0x4c
 800b32c:	ecbd 8b04 	vpop	{d8-d9}
 800b330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b334:	4b8b      	ldr	r3, [pc, #556]	; (800b564 <_dtoa_r+0x2dc>)
 800b336:	9301      	str	r3, [sp, #4]
 800b338:	3303      	adds	r3, #3
 800b33a:	e7f3      	b.n	800b324 <_dtoa_r+0x9c>
 800b33c:	2200      	movs	r2, #0
 800b33e:	2300      	movs	r3, #0
 800b340:	4650      	mov	r0, sl
 800b342:	4659      	mov	r1, fp
 800b344:	f7f5 fbc8 	bl	8000ad8 <__aeabi_dcmpeq>
 800b348:	ec4b ab19 	vmov	d9, sl, fp
 800b34c:	4680      	mov	r8, r0
 800b34e:	b158      	cbz	r0, 800b368 <_dtoa_r+0xe0>
 800b350:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b352:	2301      	movs	r3, #1
 800b354:	6013      	str	r3, [r2, #0]
 800b356:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b358:	2b00      	cmp	r3, #0
 800b35a:	f000 856b 	beq.w	800be34 <_dtoa_r+0xbac>
 800b35e:	4883      	ldr	r0, [pc, #524]	; (800b56c <_dtoa_r+0x2e4>)
 800b360:	6018      	str	r0, [r3, #0]
 800b362:	1e43      	subs	r3, r0, #1
 800b364:	9301      	str	r3, [sp, #4]
 800b366:	e7df      	b.n	800b328 <_dtoa_r+0xa0>
 800b368:	ec4b ab10 	vmov	d0, sl, fp
 800b36c:	aa10      	add	r2, sp, #64	; 0x40
 800b36e:	a911      	add	r1, sp, #68	; 0x44
 800b370:	4620      	mov	r0, r4
 800b372:	f001 f8ab 	bl	800c4cc <__d2b>
 800b376:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b37a:	ee08 0a10 	vmov	s16, r0
 800b37e:	2d00      	cmp	r5, #0
 800b380:	f000 8084 	beq.w	800b48c <_dtoa_r+0x204>
 800b384:	ee19 3a90 	vmov	r3, s19
 800b388:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b38c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b390:	4656      	mov	r6, sl
 800b392:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b396:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b39a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b39e:	4b74      	ldr	r3, [pc, #464]	; (800b570 <_dtoa_r+0x2e8>)
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	4639      	mov	r1, r7
 800b3a6:	f7f4 ff77 	bl	8000298 <__aeabi_dsub>
 800b3aa:	a365      	add	r3, pc, #404	; (adr r3, 800b540 <_dtoa_r+0x2b8>)
 800b3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b0:	f7f5 f92a 	bl	8000608 <__aeabi_dmul>
 800b3b4:	a364      	add	r3, pc, #400	; (adr r3, 800b548 <_dtoa_r+0x2c0>)
 800b3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ba:	f7f4 ff6f 	bl	800029c <__adddf3>
 800b3be:	4606      	mov	r6, r0
 800b3c0:	4628      	mov	r0, r5
 800b3c2:	460f      	mov	r7, r1
 800b3c4:	f7f5 f8b6 	bl	8000534 <__aeabi_i2d>
 800b3c8:	a361      	add	r3, pc, #388	; (adr r3, 800b550 <_dtoa_r+0x2c8>)
 800b3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ce:	f7f5 f91b 	bl	8000608 <__aeabi_dmul>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	4630      	mov	r0, r6
 800b3d8:	4639      	mov	r1, r7
 800b3da:	f7f4 ff5f 	bl	800029c <__adddf3>
 800b3de:	4606      	mov	r6, r0
 800b3e0:	460f      	mov	r7, r1
 800b3e2:	f7f5 fbc1 	bl	8000b68 <__aeabi_d2iz>
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	9000      	str	r0, [sp, #0]
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	4630      	mov	r0, r6
 800b3ee:	4639      	mov	r1, r7
 800b3f0:	f7f5 fb7c 	bl	8000aec <__aeabi_dcmplt>
 800b3f4:	b150      	cbz	r0, 800b40c <_dtoa_r+0x184>
 800b3f6:	9800      	ldr	r0, [sp, #0]
 800b3f8:	f7f5 f89c 	bl	8000534 <__aeabi_i2d>
 800b3fc:	4632      	mov	r2, r6
 800b3fe:	463b      	mov	r3, r7
 800b400:	f7f5 fb6a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b404:	b910      	cbnz	r0, 800b40c <_dtoa_r+0x184>
 800b406:	9b00      	ldr	r3, [sp, #0]
 800b408:	3b01      	subs	r3, #1
 800b40a:	9300      	str	r3, [sp, #0]
 800b40c:	9b00      	ldr	r3, [sp, #0]
 800b40e:	2b16      	cmp	r3, #22
 800b410:	d85a      	bhi.n	800b4c8 <_dtoa_r+0x240>
 800b412:	9a00      	ldr	r2, [sp, #0]
 800b414:	4b57      	ldr	r3, [pc, #348]	; (800b574 <_dtoa_r+0x2ec>)
 800b416:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41e:	ec51 0b19 	vmov	r0, r1, d9
 800b422:	f7f5 fb63 	bl	8000aec <__aeabi_dcmplt>
 800b426:	2800      	cmp	r0, #0
 800b428:	d050      	beq.n	800b4cc <_dtoa_r+0x244>
 800b42a:	9b00      	ldr	r3, [sp, #0]
 800b42c:	3b01      	subs	r3, #1
 800b42e:	9300      	str	r3, [sp, #0]
 800b430:	2300      	movs	r3, #0
 800b432:	930b      	str	r3, [sp, #44]	; 0x2c
 800b434:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b436:	1b5d      	subs	r5, r3, r5
 800b438:	1e6b      	subs	r3, r5, #1
 800b43a:	9305      	str	r3, [sp, #20]
 800b43c:	bf45      	ittet	mi
 800b43e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b442:	9304      	strmi	r3, [sp, #16]
 800b444:	2300      	movpl	r3, #0
 800b446:	2300      	movmi	r3, #0
 800b448:	bf4c      	ite	mi
 800b44a:	9305      	strmi	r3, [sp, #20]
 800b44c:	9304      	strpl	r3, [sp, #16]
 800b44e:	9b00      	ldr	r3, [sp, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	db3d      	blt.n	800b4d0 <_dtoa_r+0x248>
 800b454:	9b05      	ldr	r3, [sp, #20]
 800b456:	9a00      	ldr	r2, [sp, #0]
 800b458:	920a      	str	r2, [sp, #40]	; 0x28
 800b45a:	4413      	add	r3, r2
 800b45c:	9305      	str	r3, [sp, #20]
 800b45e:	2300      	movs	r3, #0
 800b460:	9307      	str	r3, [sp, #28]
 800b462:	9b06      	ldr	r3, [sp, #24]
 800b464:	2b09      	cmp	r3, #9
 800b466:	f200 8089 	bhi.w	800b57c <_dtoa_r+0x2f4>
 800b46a:	2b05      	cmp	r3, #5
 800b46c:	bfc4      	itt	gt
 800b46e:	3b04      	subgt	r3, #4
 800b470:	9306      	strgt	r3, [sp, #24]
 800b472:	9b06      	ldr	r3, [sp, #24]
 800b474:	f1a3 0302 	sub.w	r3, r3, #2
 800b478:	bfcc      	ite	gt
 800b47a:	2500      	movgt	r5, #0
 800b47c:	2501      	movle	r5, #1
 800b47e:	2b03      	cmp	r3, #3
 800b480:	f200 8087 	bhi.w	800b592 <_dtoa_r+0x30a>
 800b484:	e8df f003 	tbb	[pc, r3]
 800b488:	59383a2d 	.word	0x59383a2d
 800b48c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b490:	441d      	add	r5, r3
 800b492:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b496:	2b20      	cmp	r3, #32
 800b498:	bfc1      	itttt	gt
 800b49a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b49e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b4a2:	fa0b f303 	lslgt.w	r3, fp, r3
 800b4a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b4aa:	bfda      	itte	le
 800b4ac:	f1c3 0320 	rsble	r3, r3, #32
 800b4b0:	fa06 f003 	lslle.w	r0, r6, r3
 800b4b4:	4318      	orrgt	r0, r3
 800b4b6:	f7f5 f82d 	bl	8000514 <__aeabi_ui2d>
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	4606      	mov	r6, r0
 800b4be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b4c2:	3d01      	subs	r5, #1
 800b4c4:	930e      	str	r3, [sp, #56]	; 0x38
 800b4c6:	e76a      	b.n	800b39e <_dtoa_r+0x116>
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	e7b2      	b.n	800b432 <_dtoa_r+0x1aa>
 800b4cc:	900b      	str	r0, [sp, #44]	; 0x2c
 800b4ce:	e7b1      	b.n	800b434 <_dtoa_r+0x1ac>
 800b4d0:	9b04      	ldr	r3, [sp, #16]
 800b4d2:	9a00      	ldr	r2, [sp, #0]
 800b4d4:	1a9b      	subs	r3, r3, r2
 800b4d6:	9304      	str	r3, [sp, #16]
 800b4d8:	4253      	negs	r3, r2
 800b4da:	9307      	str	r3, [sp, #28]
 800b4dc:	2300      	movs	r3, #0
 800b4de:	930a      	str	r3, [sp, #40]	; 0x28
 800b4e0:	e7bf      	b.n	800b462 <_dtoa_r+0x1da>
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	9308      	str	r3, [sp, #32]
 800b4e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	dc55      	bgt.n	800b598 <_dtoa_r+0x310>
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	9209      	str	r2, [sp, #36]	; 0x24
 800b4f6:	e00c      	b.n	800b512 <_dtoa_r+0x28a>
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e7f3      	b.n	800b4e4 <_dtoa_r+0x25c>
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b500:	9308      	str	r3, [sp, #32]
 800b502:	9b00      	ldr	r3, [sp, #0]
 800b504:	4413      	add	r3, r2
 800b506:	9302      	str	r3, [sp, #8]
 800b508:	3301      	adds	r3, #1
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	9303      	str	r3, [sp, #12]
 800b50e:	bfb8      	it	lt
 800b510:	2301      	movlt	r3, #1
 800b512:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b514:	2200      	movs	r2, #0
 800b516:	6042      	str	r2, [r0, #4]
 800b518:	2204      	movs	r2, #4
 800b51a:	f102 0614 	add.w	r6, r2, #20
 800b51e:	429e      	cmp	r6, r3
 800b520:	6841      	ldr	r1, [r0, #4]
 800b522:	d93d      	bls.n	800b5a0 <_dtoa_r+0x318>
 800b524:	4620      	mov	r0, r4
 800b526:	f000 fca9 	bl	800be7c <_Balloc>
 800b52a:	9001      	str	r0, [sp, #4]
 800b52c:	2800      	cmp	r0, #0
 800b52e:	d13b      	bne.n	800b5a8 <_dtoa_r+0x320>
 800b530:	4b11      	ldr	r3, [pc, #68]	; (800b578 <_dtoa_r+0x2f0>)
 800b532:	4602      	mov	r2, r0
 800b534:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b538:	e6c0      	b.n	800b2bc <_dtoa_r+0x34>
 800b53a:	2301      	movs	r3, #1
 800b53c:	e7df      	b.n	800b4fe <_dtoa_r+0x276>
 800b53e:	bf00      	nop
 800b540:	636f4361 	.word	0x636f4361
 800b544:	3fd287a7 	.word	0x3fd287a7
 800b548:	8b60c8b3 	.word	0x8b60c8b3
 800b54c:	3fc68a28 	.word	0x3fc68a28
 800b550:	509f79fb 	.word	0x509f79fb
 800b554:	3fd34413 	.word	0x3fd34413
 800b558:	0800d4e9 	.word	0x0800d4e9
 800b55c:	0800d500 	.word	0x0800d500
 800b560:	7ff00000 	.word	0x7ff00000
 800b564:	0800d4e5 	.word	0x0800d4e5
 800b568:	0800d4dc 	.word	0x0800d4dc
 800b56c:	0800d4b9 	.word	0x0800d4b9
 800b570:	3ff80000 	.word	0x3ff80000
 800b574:	0800d5f0 	.word	0x0800d5f0
 800b578:	0800d55b 	.word	0x0800d55b
 800b57c:	2501      	movs	r5, #1
 800b57e:	2300      	movs	r3, #0
 800b580:	9306      	str	r3, [sp, #24]
 800b582:	9508      	str	r5, [sp, #32]
 800b584:	f04f 33ff 	mov.w	r3, #4294967295
 800b588:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b58c:	2200      	movs	r2, #0
 800b58e:	2312      	movs	r3, #18
 800b590:	e7b0      	b.n	800b4f4 <_dtoa_r+0x26c>
 800b592:	2301      	movs	r3, #1
 800b594:	9308      	str	r3, [sp, #32]
 800b596:	e7f5      	b.n	800b584 <_dtoa_r+0x2fc>
 800b598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b59a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b59e:	e7b8      	b.n	800b512 <_dtoa_r+0x28a>
 800b5a0:	3101      	adds	r1, #1
 800b5a2:	6041      	str	r1, [r0, #4]
 800b5a4:	0052      	lsls	r2, r2, #1
 800b5a6:	e7b8      	b.n	800b51a <_dtoa_r+0x292>
 800b5a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5aa:	9a01      	ldr	r2, [sp, #4]
 800b5ac:	601a      	str	r2, [r3, #0]
 800b5ae:	9b03      	ldr	r3, [sp, #12]
 800b5b0:	2b0e      	cmp	r3, #14
 800b5b2:	f200 809d 	bhi.w	800b6f0 <_dtoa_r+0x468>
 800b5b6:	2d00      	cmp	r5, #0
 800b5b8:	f000 809a 	beq.w	800b6f0 <_dtoa_r+0x468>
 800b5bc:	9b00      	ldr	r3, [sp, #0]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	dd32      	ble.n	800b628 <_dtoa_r+0x3a0>
 800b5c2:	4ab7      	ldr	r2, [pc, #732]	; (800b8a0 <_dtoa_r+0x618>)
 800b5c4:	f003 030f 	and.w	r3, r3, #15
 800b5c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b5cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b5d0:	9b00      	ldr	r3, [sp, #0]
 800b5d2:	05d8      	lsls	r0, r3, #23
 800b5d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b5d8:	d516      	bpl.n	800b608 <_dtoa_r+0x380>
 800b5da:	4bb2      	ldr	r3, [pc, #712]	; (800b8a4 <_dtoa_r+0x61c>)
 800b5dc:	ec51 0b19 	vmov	r0, r1, d9
 800b5e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b5e4:	f7f5 f93a 	bl	800085c <__aeabi_ddiv>
 800b5e8:	f007 070f 	and.w	r7, r7, #15
 800b5ec:	4682      	mov	sl, r0
 800b5ee:	468b      	mov	fp, r1
 800b5f0:	2503      	movs	r5, #3
 800b5f2:	4eac      	ldr	r6, [pc, #688]	; (800b8a4 <_dtoa_r+0x61c>)
 800b5f4:	b957      	cbnz	r7, 800b60c <_dtoa_r+0x384>
 800b5f6:	4642      	mov	r2, r8
 800b5f8:	464b      	mov	r3, r9
 800b5fa:	4650      	mov	r0, sl
 800b5fc:	4659      	mov	r1, fp
 800b5fe:	f7f5 f92d 	bl	800085c <__aeabi_ddiv>
 800b602:	4682      	mov	sl, r0
 800b604:	468b      	mov	fp, r1
 800b606:	e028      	b.n	800b65a <_dtoa_r+0x3d2>
 800b608:	2502      	movs	r5, #2
 800b60a:	e7f2      	b.n	800b5f2 <_dtoa_r+0x36a>
 800b60c:	07f9      	lsls	r1, r7, #31
 800b60e:	d508      	bpl.n	800b622 <_dtoa_r+0x39a>
 800b610:	4640      	mov	r0, r8
 800b612:	4649      	mov	r1, r9
 800b614:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b618:	f7f4 fff6 	bl	8000608 <__aeabi_dmul>
 800b61c:	3501      	adds	r5, #1
 800b61e:	4680      	mov	r8, r0
 800b620:	4689      	mov	r9, r1
 800b622:	107f      	asrs	r7, r7, #1
 800b624:	3608      	adds	r6, #8
 800b626:	e7e5      	b.n	800b5f4 <_dtoa_r+0x36c>
 800b628:	f000 809b 	beq.w	800b762 <_dtoa_r+0x4da>
 800b62c:	9b00      	ldr	r3, [sp, #0]
 800b62e:	4f9d      	ldr	r7, [pc, #628]	; (800b8a4 <_dtoa_r+0x61c>)
 800b630:	425e      	negs	r6, r3
 800b632:	4b9b      	ldr	r3, [pc, #620]	; (800b8a0 <_dtoa_r+0x618>)
 800b634:	f006 020f 	and.w	r2, r6, #15
 800b638:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b640:	ec51 0b19 	vmov	r0, r1, d9
 800b644:	f7f4 ffe0 	bl	8000608 <__aeabi_dmul>
 800b648:	1136      	asrs	r6, r6, #4
 800b64a:	4682      	mov	sl, r0
 800b64c:	468b      	mov	fp, r1
 800b64e:	2300      	movs	r3, #0
 800b650:	2502      	movs	r5, #2
 800b652:	2e00      	cmp	r6, #0
 800b654:	d17a      	bne.n	800b74c <_dtoa_r+0x4c4>
 800b656:	2b00      	cmp	r3, #0
 800b658:	d1d3      	bne.n	800b602 <_dtoa_r+0x37a>
 800b65a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	f000 8082 	beq.w	800b766 <_dtoa_r+0x4de>
 800b662:	4b91      	ldr	r3, [pc, #580]	; (800b8a8 <_dtoa_r+0x620>)
 800b664:	2200      	movs	r2, #0
 800b666:	4650      	mov	r0, sl
 800b668:	4659      	mov	r1, fp
 800b66a:	f7f5 fa3f 	bl	8000aec <__aeabi_dcmplt>
 800b66e:	2800      	cmp	r0, #0
 800b670:	d079      	beq.n	800b766 <_dtoa_r+0x4de>
 800b672:	9b03      	ldr	r3, [sp, #12]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d076      	beq.n	800b766 <_dtoa_r+0x4de>
 800b678:	9b02      	ldr	r3, [sp, #8]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	dd36      	ble.n	800b6ec <_dtoa_r+0x464>
 800b67e:	9b00      	ldr	r3, [sp, #0]
 800b680:	4650      	mov	r0, sl
 800b682:	4659      	mov	r1, fp
 800b684:	1e5f      	subs	r7, r3, #1
 800b686:	2200      	movs	r2, #0
 800b688:	4b88      	ldr	r3, [pc, #544]	; (800b8ac <_dtoa_r+0x624>)
 800b68a:	f7f4 ffbd 	bl	8000608 <__aeabi_dmul>
 800b68e:	9e02      	ldr	r6, [sp, #8]
 800b690:	4682      	mov	sl, r0
 800b692:	468b      	mov	fp, r1
 800b694:	3501      	adds	r5, #1
 800b696:	4628      	mov	r0, r5
 800b698:	f7f4 ff4c 	bl	8000534 <__aeabi_i2d>
 800b69c:	4652      	mov	r2, sl
 800b69e:	465b      	mov	r3, fp
 800b6a0:	f7f4 ffb2 	bl	8000608 <__aeabi_dmul>
 800b6a4:	4b82      	ldr	r3, [pc, #520]	; (800b8b0 <_dtoa_r+0x628>)
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f7f4 fdf8 	bl	800029c <__adddf3>
 800b6ac:	46d0      	mov	r8, sl
 800b6ae:	46d9      	mov	r9, fp
 800b6b0:	4682      	mov	sl, r0
 800b6b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b6b6:	2e00      	cmp	r6, #0
 800b6b8:	d158      	bne.n	800b76c <_dtoa_r+0x4e4>
 800b6ba:	4b7e      	ldr	r3, [pc, #504]	; (800b8b4 <_dtoa_r+0x62c>)
 800b6bc:	2200      	movs	r2, #0
 800b6be:	4640      	mov	r0, r8
 800b6c0:	4649      	mov	r1, r9
 800b6c2:	f7f4 fde9 	bl	8000298 <__aeabi_dsub>
 800b6c6:	4652      	mov	r2, sl
 800b6c8:	465b      	mov	r3, fp
 800b6ca:	4680      	mov	r8, r0
 800b6cc:	4689      	mov	r9, r1
 800b6ce:	f7f5 fa2b 	bl	8000b28 <__aeabi_dcmpgt>
 800b6d2:	2800      	cmp	r0, #0
 800b6d4:	f040 8295 	bne.w	800bc02 <_dtoa_r+0x97a>
 800b6d8:	4652      	mov	r2, sl
 800b6da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b6de:	4640      	mov	r0, r8
 800b6e0:	4649      	mov	r1, r9
 800b6e2:	f7f5 fa03 	bl	8000aec <__aeabi_dcmplt>
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	f040 8289 	bne.w	800bbfe <_dtoa_r+0x976>
 800b6ec:	ec5b ab19 	vmov	sl, fp, d9
 800b6f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	f2c0 8148 	blt.w	800b988 <_dtoa_r+0x700>
 800b6f8:	9a00      	ldr	r2, [sp, #0]
 800b6fa:	2a0e      	cmp	r2, #14
 800b6fc:	f300 8144 	bgt.w	800b988 <_dtoa_r+0x700>
 800b700:	4b67      	ldr	r3, [pc, #412]	; (800b8a0 <_dtoa_r+0x618>)
 800b702:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b706:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b70a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	f280 80d5 	bge.w	800b8bc <_dtoa_r+0x634>
 800b712:	9b03      	ldr	r3, [sp, #12]
 800b714:	2b00      	cmp	r3, #0
 800b716:	f300 80d1 	bgt.w	800b8bc <_dtoa_r+0x634>
 800b71a:	f040 826f 	bne.w	800bbfc <_dtoa_r+0x974>
 800b71e:	4b65      	ldr	r3, [pc, #404]	; (800b8b4 <_dtoa_r+0x62c>)
 800b720:	2200      	movs	r2, #0
 800b722:	4640      	mov	r0, r8
 800b724:	4649      	mov	r1, r9
 800b726:	f7f4 ff6f 	bl	8000608 <__aeabi_dmul>
 800b72a:	4652      	mov	r2, sl
 800b72c:	465b      	mov	r3, fp
 800b72e:	f7f5 f9f1 	bl	8000b14 <__aeabi_dcmpge>
 800b732:	9e03      	ldr	r6, [sp, #12]
 800b734:	4637      	mov	r7, r6
 800b736:	2800      	cmp	r0, #0
 800b738:	f040 8245 	bne.w	800bbc6 <_dtoa_r+0x93e>
 800b73c:	9d01      	ldr	r5, [sp, #4]
 800b73e:	2331      	movs	r3, #49	; 0x31
 800b740:	f805 3b01 	strb.w	r3, [r5], #1
 800b744:	9b00      	ldr	r3, [sp, #0]
 800b746:	3301      	adds	r3, #1
 800b748:	9300      	str	r3, [sp, #0]
 800b74a:	e240      	b.n	800bbce <_dtoa_r+0x946>
 800b74c:	07f2      	lsls	r2, r6, #31
 800b74e:	d505      	bpl.n	800b75c <_dtoa_r+0x4d4>
 800b750:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b754:	f7f4 ff58 	bl	8000608 <__aeabi_dmul>
 800b758:	3501      	adds	r5, #1
 800b75a:	2301      	movs	r3, #1
 800b75c:	1076      	asrs	r6, r6, #1
 800b75e:	3708      	adds	r7, #8
 800b760:	e777      	b.n	800b652 <_dtoa_r+0x3ca>
 800b762:	2502      	movs	r5, #2
 800b764:	e779      	b.n	800b65a <_dtoa_r+0x3d2>
 800b766:	9f00      	ldr	r7, [sp, #0]
 800b768:	9e03      	ldr	r6, [sp, #12]
 800b76a:	e794      	b.n	800b696 <_dtoa_r+0x40e>
 800b76c:	9901      	ldr	r1, [sp, #4]
 800b76e:	4b4c      	ldr	r3, [pc, #304]	; (800b8a0 <_dtoa_r+0x618>)
 800b770:	4431      	add	r1, r6
 800b772:	910d      	str	r1, [sp, #52]	; 0x34
 800b774:	9908      	ldr	r1, [sp, #32]
 800b776:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b77a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b77e:	2900      	cmp	r1, #0
 800b780:	d043      	beq.n	800b80a <_dtoa_r+0x582>
 800b782:	494d      	ldr	r1, [pc, #308]	; (800b8b8 <_dtoa_r+0x630>)
 800b784:	2000      	movs	r0, #0
 800b786:	f7f5 f869 	bl	800085c <__aeabi_ddiv>
 800b78a:	4652      	mov	r2, sl
 800b78c:	465b      	mov	r3, fp
 800b78e:	f7f4 fd83 	bl	8000298 <__aeabi_dsub>
 800b792:	9d01      	ldr	r5, [sp, #4]
 800b794:	4682      	mov	sl, r0
 800b796:	468b      	mov	fp, r1
 800b798:	4649      	mov	r1, r9
 800b79a:	4640      	mov	r0, r8
 800b79c:	f7f5 f9e4 	bl	8000b68 <__aeabi_d2iz>
 800b7a0:	4606      	mov	r6, r0
 800b7a2:	f7f4 fec7 	bl	8000534 <__aeabi_i2d>
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	4640      	mov	r0, r8
 800b7ac:	4649      	mov	r1, r9
 800b7ae:	f7f4 fd73 	bl	8000298 <__aeabi_dsub>
 800b7b2:	3630      	adds	r6, #48	; 0x30
 800b7b4:	f805 6b01 	strb.w	r6, [r5], #1
 800b7b8:	4652      	mov	r2, sl
 800b7ba:	465b      	mov	r3, fp
 800b7bc:	4680      	mov	r8, r0
 800b7be:	4689      	mov	r9, r1
 800b7c0:	f7f5 f994 	bl	8000aec <__aeabi_dcmplt>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	d163      	bne.n	800b890 <_dtoa_r+0x608>
 800b7c8:	4642      	mov	r2, r8
 800b7ca:	464b      	mov	r3, r9
 800b7cc:	4936      	ldr	r1, [pc, #216]	; (800b8a8 <_dtoa_r+0x620>)
 800b7ce:	2000      	movs	r0, #0
 800b7d0:	f7f4 fd62 	bl	8000298 <__aeabi_dsub>
 800b7d4:	4652      	mov	r2, sl
 800b7d6:	465b      	mov	r3, fp
 800b7d8:	f7f5 f988 	bl	8000aec <__aeabi_dcmplt>
 800b7dc:	2800      	cmp	r0, #0
 800b7de:	f040 80b5 	bne.w	800b94c <_dtoa_r+0x6c4>
 800b7e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7e4:	429d      	cmp	r5, r3
 800b7e6:	d081      	beq.n	800b6ec <_dtoa_r+0x464>
 800b7e8:	4b30      	ldr	r3, [pc, #192]	; (800b8ac <_dtoa_r+0x624>)
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	4650      	mov	r0, sl
 800b7ee:	4659      	mov	r1, fp
 800b7f0:	f7f4 ff0a 	bl	8000608 <__aeabi_dmul>
 800b7f4:	4b2d      	ldr	r3, [pc, #180]	; (800b8ac <_dtoa_r+0x624>)
 800b7f6:	4682      	mov	sl, r0
 800b7f8:	468b      	mov	fp, r1
 800b7fa:	4640      	mov	r0, r8
 800b7fc:	4649      	mov	r1, r9
 800b7fe:	2200      	movs	r2, #0
 800b800:	f7f4 ff02 	bl	8000608 <__aeabi_dmul>
 800b804:	4680      	mov	r8, r0
 800b806:	4689      	mov	r9, r1
 800b808:	e7c6      	b.n	800b798 <_dtoa_r+0x510>
 800b80a:	4650      	mov	r0, sl
 800b80c:	4659      	mov	r1, fp
 800b80e:	f7f4 fefb 	bl	8000608 <__aeabi_dmul>
 800b812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b814:	9d01      	ldr	r5, [sp, #4]
 800b816:	930f      	str	r3, [sp, #60]	; 0x3c
 800b818:	4682      	mov	sl, r0
 800b81a:	468b      	mov	fp, r1
 800b81c:	4649      	mov	r1, r9
 800b81e:	4640      	mov	r0, r8
 800b820:	f7f5 f9a2 	bl	8000b68 <__aeabi_d2iz>
 800b824:	4606      	mov	r6, r0
 800b826:	f7f4 fe85 	bl	8000534 <__aeabi_i2d>
 800b82a:	3630      	adds	r6, #48	; 0x30
 800b82c:	4602      	mov	r2, r0
 800b82e:	460b      	mov	r3, r1
 800b830:	4640      	mov	r0, r8
 800b832:	4649      	mov	r1, r9
 800b834:	f7f4 fd30 	bl	8000298 <__aeabi_dsub>
 800b838:	f805 6b01 	strb.w	r6, [r5], #1
 800b83c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b83e:	429d      	cmp	r5, r3
 800b840:	4680      	mov	r8, r0
 800b842:	4689      	mov	r9, r1
 800b844:	f04f 0200 	mov.w	r2, #0
 800b848:	d124      	bne.n	800b894 <_dtoa_r+0x60c>
 800b84a:	4b1b      	ldr	r3, [pc, #108]	; (800b8b8 <_dtoa_r+0x630>)
 800b84c:	4650      	mov	r0, sl
 800b84e:	4659      	mov	r1, fp
 800b850:	f7f4 fd24 	bl	800029c <__adddf3>
 800b854:	4602      	mov	r2, r0
 800b856:	460b      	mov	r3, r1
 800b858:	4640      	mov	r0, r8
 800b85a:	4649      	mov	r1, r9
 800b85c:	f7f5 f964 	bl	8000b28 <__aeabi_dcmpgt>
 800b860:	2800      	cmp	r0, #0
 800b862:	d173      	bne.n	800b94c <_dtoa_r+0x6c4>
 800b864:	4652      	mov	r2, sl
 800b866:	465b      	mov	r3, fp
 800b868:	4913      	ldr	r1, [pc, #76]	; (800b8b8 <_dtoa_r+0x630>)
 800b86a:	2000      	movs	r0, #0
 800b86c:	f7f4 fd14 	bl	8000298 <__aeabi_dsub>
 800b870:	4602      	mov	r2, r0
 800b872:	460b      	mov	r3, r1
 800b874:	4640      	mov	r0, r8
 800b876:	4649      	mov	r1, r9
 800b878:	f7f5 f938 	bl	8000aec <__aeabi_dcmplt>
 800b87c:	2800      	cmp	r0, #0
 800b87e:	f43f af35 	beq.w	800b6ec <_dtoa_r+0x464>
 800b882:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b884:	1e6b      	subs	r3, r5, #1
 800b886:	930f      	str	r3, [sp, #60]	; 0x3c
 800b888:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b88c:	2b30      	cmp	r3, #48	; 0x30
 800b88e:	d0f8      	beq.n	800b882 <_dtoa_r+0x5fa>
 800b890:	9700      	str	r7, [sp, #0]
 800b892:	e049      	b.n	800b928 <_dtoa_r+0x6a0>
 800b894:	4b05      	ldr	r3, [pc, #20]	; (800b8ac <_dtoa_r+0x624>)
 800b896:	f7f4 feb7 	bl	8000608 <__aeabi_dmul>
 800b89a:	4680      	mov	r8, r0
 800b89c:	4689      	mov	r9, r1
 800b89e:	e7bd      	b.n	800b81c <_dtoa_r+0x594>
 800b8a0:	0800d5f0 	.word	0x0800d5f0
 800b8a4:	0800d5c8 	.word	0x0800d5c8
 800b8a8:	3ff00000 	.word	0x3ff00000
 800b8ac:	40240000 	.word	0x40240000
 800b8b0:	401c0000 	.word	0x401c0000
 800b8b4:	40140000 	.word	0x40140000
 800b8b8:	3fe00000 	.word	0x3fe00000
 800b8bc:	9d01      	ldr	r5, [sp, #4]
 800b8be:	4656      	mov	r6, sl
 800b8c0:	465f      	mov	r7, fp
 800b8c2:	4642      	mov	r2, r8
 800b8c4:	464b      	mov	r3, r9
 800b8c6:	4630      	mov	r0, r6
 800b8c8:	4639      	mov	r1, r7
 800b8ca:	f7f4 ffc7 	bl	800085c <__aeabi_ddiv>
 800b8ce:	f7f5 f94b 	bl	8000b68 <__aeabi_d2iz>
 800b8d2:	4682      	mov	sl, r0
 800b8d4:	f7f4 fe2e 	bl	8000534 <__aeabi_i2d>
 800b8d8:	4642      	mov	r2, r8
 800b8da:	464b      	mov	r3, r9
 800b8dc:	f7f4 fe94 	bl	8000608 <__aeabi_dmul>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	4630      	mov	r0, r6
 800b8e6:	4639      	mov	r1, r7
 800b8e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b8ec:	f7f4 fcd4 	bl	8000298 <__aeabi_dsub>
 800b8f0:	f805 6b01 	strb.w	r6, [r5], #1
 800b8f4:	9e01      	ldr	r6, [sp, #4]
 800b8f6:	9f03      	ldr	r7, [sp, #12]
 800b8f8:	1bae      	subs	r6, r5, r6
 800b8fa:	42b7      	cmp	r7, r6
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	460b      	mov	r3, r1
 800b900:	d135      	bne.n	800b96e <_dtoa_r+0x6e6>
 800b902:	f7f4 fccb 	bl	800029c <__adddf3>
 800b906:	4642      	mov	r2, r8
 800b908:	464b      	mov	r3, r9
 800b90a:	4606      	mov	r6, r0
 800b90c:	460f      	mov	r7, r1
 800b90e:	f7f5 f90b 	bl	8000b28 <__aeabi_dcmpgt>
 800b912:	b9d0      	cbnz	r0, 800b94a <_dtoa_r+0x6c2>
 800b914:	4642      	mov	r2, r8
 800b916:	464b      	mov	r3, r9
 800b918:	4630      	mov	r0, r6
 800b91a:	4639      	mov	r1, r7
 800b91c:	f7f5 f8dc 	bl	8000ad8 <__aeabi_dcmpeq>
 800b920:	b110      	cbz	r0, 800b928 <_dtoa_r+0x6a0>
 800b922:	f01a 0f01 	tst.w	sl, #1
 800b926:	d110      	bne.n	800b94a <_dtoa_r+0x6c2>
 800b928:	4620      	mov	r0, r4
 800b92a:	ee18 1a10 	vmov	r1, s16
 800b92e:	f000 fae5 	bl	800befc <_Bfree>
 800b932:	2300      	movs	r3, #0
 800b934:	9800      	ldr	r0, [sp, #0]
 800b936:	702b      	strb	r3, [r5, #0]
 800b938:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b93a:	3001      	adds	r0, #1
 800b93c:	6018      	str	r0, [r3, #0]
 800b93e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b940:	2b00      	cmp	r3, #0
 800b942:	f43f acf1 	beq.w	800b328 <_dtoa_r+0xa0>
 800b946:	601d      	str	r5, [r3, #0]
 800b948:	e4ee      	b.n	800b328 <_dtoa_r+0xa0>
 800b94a:	9f00      	ldr	r7, [sp, #0]
 800b94c:	462b      	mov	r3, r5
 800b94e:	461d      	mov	r5, r3
 800b950:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b954:	2a39      	cmp	r2, #57	; 0x39
 800b956:	d106      	bne.n	800b966 <_dtoa_r+0x6de>
 800b958:	9a01      	ldr	r2, [sp, #4]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d1f7      	bne.n	800b94e <_dtoa_r+0x6c6>
 800b95e:	9901      	ldr	r1, [sp, #4]
 800b960:	2230      	movs	r2, #48	; 0x30
 800b962:	3701      	adds	r7, #1
 800b964:	700a      	strb	r2, [r1, #0]
 800b966:	781a      	ldrb	r2, [r3, #0]
 800b968:	3201      	adds	r2, #1
 800b96a:	701a      	strb	r2, [r3, #0]
 800b96c:	e790      	b.n	800b890 <_dtoa_r+0x608>
 800b96e:	4ba6      	ldr	r3, [pc, #664]	; (800bc08 <_dtoa_r+0x980>)
 800b970:	2200      	movs	r2, #0
 800b972:	f7f4 fe49 	bl	8000608 <__aeabi_dmul>
 800b976:	2200      	movs	r2, #0
 800b978:	2300      	movs	r3, #0
 800b97a:	4606      	mov	r6, r0
 800b97c:	460f      	mov	r7, r1
 800b97e:	f7f5 f8ab 	bl	8000ad8 <__aeabi_dcmpeq>
 800b982:	2800      	cmp	r0, #0
 800b984:	d09d      	beq.n	800b8c2 <_dtoa_r+0x63a>
 800b986:	e7cf      	b.n	800b928 <_dtoa_r+0x6a0>
 800b988:	9a08      	ldr	r2, [sp, #32]
 800b98a:	2a00      	cmp	r2, #0
 800b98c:	f000 80d7 	beq.w	800bb3e <_dtoa_r+0x8b6>
 800b990:	9a06      	ldr	r2, [sp, #24]
 800b992:	2a01      	cmp	r2, #1
 800b994:	f300 80ba 	bgt.w	800bb0c <_dtoa_r+0x884>
 800b998:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b99a:	2a00      	cmp	r2, #0
 800b99c:	f000 80b2 	beq.w	800bb04 <_dtoa_r+0x87c>
 800b9a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b9a4:	9e07      	ldr	r6, [sp, #28]
 800b9a6:	9d04      	ldr	r5, [sp, #16]
 800b9a8:	9a04      	ldr	r2, [sp, #16]
 800b9aa:	441a      	add	r2, r3
 800b9ac:	9204      	str	r2, [sp, #16]
 800b9ae:	9a05      	ldr	r2, [sp, #20]
 800b9b0:	2101      	movs	r1, #1
 800b9b2:	441a      	add	r2, r3
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	9205      	str	r2, [sp, #20]
 800b9b8:	f000 fb58 	bl	800c06c <__i2b>
 800b9bc:	4607      	mov	r7, r0
 800b9be:	2d00      	cmp	r5, #0
 800b9c0:	dd0c      	ble.n	800b9dc <_dtoa_r+0x754>
 800b9c2:	9b05      	ldr	r3, [sp, #20]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	dd09      	ble.n	800b9dc <_dtoa_r+0x754>
 800b9c8:	42ab      	cmp	r3, r5
 800b9ca:	9a04      	ldr	r2, [sp, #16]
 800b9cc:	bfa8      	it	ge
 800b9ce:	462b      	movge	r3, r5
 800b9d0:	1ad2      	subs	r2, r2, r3
 800b9d2:	9204      	str	r2, [sp, #16]
 800b9d4:	9a05      	ldr	r2, [sp, #20]
 800b9d6:	1aed      	subs	r5, r5, r3
 800b9d8:	1ad3      	subs	r3, r2, r3
 800b9da:	9305      	str	r3, [sp, #20]
 800b9dc:	9b07      	ldr	r3, [sp, #28]
 800b9de:	b31b      	cbz	r3, 800ba28 <_dtoa_r+0x7a0>
 800b9e0:	9b08      	ldr	r3, [sp, #32]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	f000 80af 	beq.w	800bb46 <_dtoa_r+0x8be>
 800b9e8:	2e00      	cmp	r6, #0
 800b9ea:	dd13      	ble.n	800ba14 <_dtoa_r+0x78c>
 800b9ec:	4639      	mov	r1, r7
 800b9ee:	4632      	mov	r2, r6
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	f000 fbfb 	bl	800c1ec <__pow5mult>
 800b9f6:	ee18 2a10 	vmov	r2, s16
 800b9fa:	4601      	mov	r1, r0
 800b9fc:	4607      	mov	r7, r0
 800b9fe:	4620      	mov	r0, r4
 800ba00:	f000 fb4a 	bl	800c098 <__multiply>
 800ba04:	ee18 1a10 	vmov	r1, s16
 800ba08:	4680      	mov	r8, r0
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	f000 fa76 	bl	800befc <_Bfree>
 800ba10:	ee08 8a10 	vmov	s16, r8
 800ba14:	9b07      	ldr	r3, [sp, #28]
 800ba16:	1b9a      	subs	r2, r3, r6
 800ba18:	d006      	beq.n	800ba28 <_dtoa_r+0x7a0>
 800ba1a:	ee18 1a10 	vmov	r1, s16
 800ba1e:	4620      	mov	r0, r4
 800ba20:	f000 fbe4 	bl	800c1ec <__pow5mult>
 800ba24:	ee08 0a10 	vmov	s16, r0
 800ba28:	2101      	movs	r1, #1
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	f000 fb1e 	bl	800c06c <__i2b>
 800ba30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	4606      	mov	r6, r0
 800ba36:	f340 8088 	ble.w	800bb4a <_dtoa_r+0x8c2>
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	4601      	mov	r1, r0
 800ba3e:	4620      	mov	r0, r4
 800ba40:	f000 fbd4 	bl	800c1ec <__pow5mult>
 800ba44:	9b06      	ldr	r3, [sp, #24]
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	4606      	mov	r6, r0
 800ba4a:	f340 8081 	ble.w	800bb50 <_dtoa_r+0x8c8>
 800ba4e:	f04f 0800 	mov.w	r8, #0
 800ba52:	6933      	ldr	r3, [r6, #16]
 800ba54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ba58:	6918      	ldr	r0, [r3, #16]
 800ba5a:	f000 fab7 	bl	800bfcc <__hi0bits>
 800ba5e:	f1c0 0020 	rsb	r0, r0, #32
 800ba62:	9b05      	ldr	r3, [sp, #20]
 800ba64:	4418      	add	r0, r3
 800ba66:	f010 001f 	ands.w	r0, r0, #31
 800ba6a:	f000 8092 	beq.w	800bb92 <_dtoa_r+0x90a>
 800ba6e:	f1c0 0320 	rsb	r3, r0, #32
 800ba72:	2b04      	cmp	r3, #4
 800ba74:	f340 808a 	ble.w	800bb8c <_dtoa_r+0x904>
 800ba78:	f1c0 001c 	rsb	r0, r0, #28
 800ba7c:	9b04      	ldr	r3, [sp, #16]
 800ba7e:	4403      	add	r3, r0
 800ba80:	9304      	str	r3, [sp, #16]
 800ba82:	9b05      	ldr	r3, [sp, #20]
 800ba84:	4403      	add	r3, r0
 800ba86:	4405      	add	r5, r0
 800ba88:	9305      	str	r3, [sp, #20]
 800ba8a:	9b04      	ldr	r3, [sp, #16]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	dd07      	ble.n	800baa0 <_dtoa_r+0x818>
 800ba90:	ee18 1a10 	vmov	r1, s16
 800ba94:	461a      	mov	r2, r3
 800ba96:	4620      	mov	r0, r4
 800ba98:	f000 fc02 	bl	800c2a0 <__lshift>
 800ba9c:	ee08 0a10 	vmov	s16, r0
 800baa0:	9b05      	ldr	r3, [sp, #20]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	dd05      	ble.n	800bab2 <_dtoa_r+0x82a>
 800baa6:	4631      	mov	r1, r6
 800baa8:	461a      	mov	r2, r3
 800baaa:	4620      	mov	r0, r4
 800baac:	f000 fbf8 	bl	800c2a0 <__lshift>
 800bab0:	4606      	mov	r6, r0
 800bab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d06e      	beq.n	800bb96 <_dtoa_r+0x90e>
 800bab8:	ee18 0a10 	vmov	r0, s16
 800babc:	4631      	mov	r1, r6
 800babe:	f000 fc5f 	bl	800c380 <__mcmp>
 800bac2:	2800      	cmp	r0, #0
 800bac4:	da67      	bge.n	800bb96 <_dtoa_r+0x90e>
 800bac6:	9b00      	ldr	r3, [sp, #0]
 800bac8:	3b01      	subs	r3, #1
 800baca:	ee18 1a10 	vmov	r1, s16
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	220a      	movs	r2, #10
 800bad2:	2300      	movs	r3, #0
 800bad4:	4620      	mov	r0, r4
 800bad6:	f000 fa33 	bl	800bf40 <__multadd>
 800bada:	9b08      	ldr	r3, [sp, #32]
 800badc:	ee08 0a10 	vmov	s16, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	f000 81b1 	beq.w	800be48 <_dtoa_r+0xbc0>
 800bae6:	2300      	movs	r3, #0
 800bae8:	4639      	mov	r1, r7
 800baea:	220a      	movs	r2, #10
 800baec:	4620      	mov	r0, r4
 800baee:	f000 fa27 	bl	800bf40 <__multadd>
 800baf2:	9b02      	ldr	r3, [sp, #8]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	4607      	mov	r7, r0
 800baf8:	f300 808e 	bgt.w	800bc18 <_dtoa_r+0x990>
 800bafc:	9b06      	ldr	r3, [sp, #24]
 800bafe:	2b02      	cmp	r3, #2
 800bb00:	dc51      	bgt.n	800bba6 <_dtoa_r+0x91e>
 800bb02:	e089      	b.n	800bc18 <_dtoa_r+0x990>
 800bb04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bb0a:	e74b      	b.n	800b9a4 <_dtoa_r+0x71c>
 800bb0c:	9b03      	ldr	r3, [sp, #12]
 800bb0e:	1e5e      	subs	r6, r3, #1
 800bb10:	9b07      	ldr	r3, [sp, #28]
 800bb12:	42b3      	cmp	r3, r6
 800bb14:	bfbf      	itttt	lt
 800bb16:	9b07      	ldrlt	r3, [sp, #28]
 800bb18:	9607      	strlt	r6, [sp, #28]
 800bb1a:	1af2      	sublt	r2, r6, r3
 800bb1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bb1e:	bfb6      	itet	lt
 800bb20:	189b      	addlt	r3, r3, r2
 800bb22:	1b9e      	subge	r6, r3, r6
 800bb24:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bb26:	9b03      	ldr	r3, [sp, #12]
 800bb28:	bfb8      	it	lt
 800bb2a:	2600      	movlt	r6, #0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	bfb7      	itett	lt
 800bb30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bb34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bb38:	1a9d      	sublt	r5, r3, r2
 800bb3a:	2300      	movlt	r3, #0
 800bb3c:	e734      	b.n	800b9a8 <_dtoa_r+0x720>
 800bb3e:	9e07      	ldr	r6, [sp, #28]
 800bb40:	9d04      	ldr	r5, [sp, #16]
 800bb42:	9f08      	ldr	r7, [sp, #32]
 800bb44:	e73b      	b.n	800b9be <_dtoa_r+0x736>
 800bb46:	9a07      	ldr	r2, [sp, #28]
 800bb48:	e767      	b.n	800ba1a <_dtoa_r+0x792>
 800bb4a:	9b06      	ldr	r3, [sp, #24]
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	dc18      	bgt.n	800bb82 <_dtoa_r+0x8fa>
 800bb50:	f1ba 0f00 	cmp.w	sl, #0
 800bb54:	d115      	bne.n	800bb82 <_dtoa_r+0x8fa>
 800bb56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb5a:	b993      	cbnz	r3, 800bb82 <_dtoa_r+0x8fa>
 800bb5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bb60:	0d1b      	lsrs	r3, r3, #20
 800bb62:	051b      	lsls	r3, r3, #20
 800bb64:	b183      	cbz	r3, 800bb88 <_dtoa_r+0x900>
 800bb66:	9b04      	ldr	r3, [sp, #16]
 800bb68:	3301      	adds	r3, #1
 800bb6a:	9304      	str	r3, [sp, #16]
 800bb6c:	9b05      	ldr	r3, [sp, #20]
 800bb6e:	3301      	adds	r3, #1
 800bb70:	9305      	str	r3, [sp, #20]
 800bb72:	f04f 0801 	mov.w	r8, #1
 800bb76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f47f af6a 	bne.w	800ba52 <_dtoa_r+0x7ca>
 800bb7e:	2001      	movs	r0, #1
 800bb80:	e76f      	b.n	800ba62 <_dtoa_r+0x7da>
 800bb82:	f04f 0800 	mov.w	r8, #0
 800bb86:	e7f6      	b.n	800bb76 <_dtoa_r+0x8ee>
 800bb88:	4698      	mov	r8, r3
 800bb8a:	e7f4      	b.n	800bb76 <_dtoa_r+0x8ee>
 800bb8c:	f43f af7d 	beq.w	800ba8a <_dtoa_r+0x802>
 800bb90:	4618      	mov	r0, r3
 800bb92:	301c      	adds	r0, #28
 800bb94:	e772      	b.n	800ba7c <_dtoa_r+0x7f4>
 800bb96:	9b03      	ldr	r3, [sp, #12]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	dc37      	bgt.n	800bc0c <_dtoa_r+0x984>
 800bb9c:	9b06      	ldr	r3, [sp, #24]
 800bb9e:	2b02      	cmp	r3, #2
 800bba0:	dd34      	ble.n	800bc0c <_dtoa_r+0x984>
 800bba2:	9b03      	ldr	r3, [sp, #12]
 800bba4:	9302      	str	r3, [sp, #8]
 800bba6:	9b02      	ldr	r3, [sp, #8]
 800bba8:	b96b      	cbnz	r3, 800bbc6 <_dtoa_r+0x93e>
 800bbaa:	4631      	mov	r1, r6
 800bbac:	2205      	movs	r2, #5
 800bbae:	4620      	mov	r0, r4
 800bbb0:	f000 f9c6 	bl	800bf40 <__multadd>
 800bbb4:	4601      	mov	r1, r0
 800bbb6:	4606      	mov	r6, r0
 800bbb8:	ee18 0a10 	vmov	r0, s16
 800bbbc:	f000 fbe0 	bl	800c380 <__mcmp>
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	f73f adbb 	bgt.w	800b73c <_dtoa_r+0x4b4>
 800bbc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbc8:	9d01      	ldr	r5, [sp, #4]
 800bbca:	43db      	mvns	r3, r3
 800bbcc:	9300      	str	r3, [sp, #0]
 800bbce:	f04f 0800 	mov.w	r8, #0
 800bbd2:	4631      	mov	r1, r6
 800bbd4:	4620      	mov	r0, r4
 800bbd6:	f000 f991 	bl	800befc <_Bfree>
 800bbda:	2f00      	cmp	r7, #0
 800bbdc:	f43f aea4 	beq.w	800b928 <_dtoa_r+0x6a0>
 800bbe0:	f1b8 0f00 	cmp.w	r8, #0
 800bbe4:	d005      	beq.n	800bbf2 <_dtoa_r+0x96a>
 800bbe6:	45b8      	cmp	r8, r7
 800bbe8:	d003      	beq.n	800bbf2 <_dtoa_r+0x96a>
 800bbea:	4641      	mov	r1, r8
 800bbec:	4620      	mov	r0, r4
 800bbee:	f000 f985 	bl	800befc <_Bfree>
 800bbf2:	4639      	mov	r1, r7
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	f000 f981 	bl	800befc <_Bfree>
 800bbfa:	e695      	b.n	800b928 <_dtoa_r+0x6a0>
 800bbfc:	2600      	movs	r6, #0
 800bbfe:	4637      	mov	r7, r6
 800bc00:	e7e1      	b.n	800bbc6 <_dtoa_r+0x93e>
 800bc02:	9700      	str	r7, [sp, #0]
 800bc04:	4637      	mov	r7, r6
 800bc06:	e599      	b.n	800b73c <_dtoa_r+0x4b4>
 800bc08:	40240000 	.word	0x40240000
 800bc0c:	9b08      	ldr	r3, [sp, #32]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	f000 80ca 	beq.w	800bda8 <_dtoa_r+0xb20>
 800bc14:	9b03      	ldr	r3, [sp, #12]
 800bc16:	9302      	str	r3, [sp, #8]
 800bc18:	2d00      	cmp	r5, #0
 800bc1a:	dd05      	ble.n	800bc28 <_dtoa_r+0x9a0>
 800bc1c:	4639      	mov	r1, r7
 800bc1e:	462a      	mov	r2, r5
 800bc20:	4620      	mov	r0, r4
 800bc22:	f000 fb3d 	bl	800c2a0 <__lshift>
 800bc26:	4607      	mov	r7, r0
 800bc28:	f1b8 0f00 	cmp.w	r8, #0
 800bc2c:	d05b      	beq.n	800bce6 <_dtoa_r+0xa5e>
 800bc2e:	6879      	ldr	r1, [r7, #4]
 800bc30:	4620      	mov	r0, r4
 800bc32:	f000 f923 	bl	800be7c <_Balloc>
 800bc36:	4605      	mov	r5, r0
 800bc38:	b928      	cbnz	r0, 800bc46 <_dtoa_r+0x9be>
 800bc3a:	4b87      	ldr	r3, [pc, #540]	; (800be58 <_dtoa_r+0xbd0>)
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bc42:	f7ff bb3b 	b.w	800b2bc <_dtoa_r+0x34>
 800bc46:	693a      	ldr	r2, [r7, #16]
 800bc48:	3202      	adds	r2, #2
 800bc4a:	0092      	lsls	r2, r2, #2
 800bc4c:	f107 010c 	add.w	r1, r7, #12
 800bc50:	300c      	adds	r0, #12
 800bc52:	f7fe fe0d 	bl	800a870 <memcpy>
 800bc56:	2201      	movs	r2, #1
 800bc58:	4629      	mov	r1, r5
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	f000 fb20 	bl	800c2a0 <__lshift>
 800bc60:	9b01      	ldr	r3, [sp, #4]
 800bc62:	f103 0901 	add.w	r9, r3, #1
 800bc66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bc6a:	4413      	add	r3, r2
 800bc6c:	9305      	str	r3, [sp, #20]
 800bc6e:	f00a 0301 	and.w	r3, sl, #1
 800bc72:	46b8      	mov	r8, r7
 800bc74:	9304      	str	r3, [sp, #16]
 800bc76:	4607      	mov	r7, r0
 800bc78:	4631      	mov	r1, r6
 800bc7a:	ee18 0a10 	vmov	r0, s16
 800bc7e:	f7ff fa77 	bl	800b170 <quorem>
 800bc82:	4641      	mov	r1, r8
 800bc84:	9002      	str	r0, [sp, #8]
 800bc86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bc8a:	ee18 0a10 	vmov	r0, s16
 800bc8e:	f000 fb77 	bl	800c380 <__mcmp>
 800bc92:	463a      	mov	r2, r7
 800bc94:	9003      	str	r0, [sp, #12]
 800bc96:	4631      	mov	r1, r6
 800bc98:	4620      	mov	r0, r4
 800bc9a:	f000 fb8d 	bl	800c3b8 <__mdiff>
 800bc9e:	68c2      	ldr	r2, [r0, #12]
 800bca0:	f109 3bff 	add.w	fp, r9, #4294967295
 800bca4:	4605      	mov	r5, r0
 800bca6:	bb02      	cbnz	r2, 800bcea <_dtoa_r+0xa62>
 800bca8:	4601      	mov	r1, r0
 800bcaa:	ee18 0a10 	vmov	r0, s16
 800bcae:	f000 fb67 	bl	800c380 <__mcmp>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	4629      	mov	r1, r5
 800bcb6:	4620      	mov	r0, r4
 800bcb8:	9207      	str	r2, [sp, #28]
 800bcba:	f000 f91f 	bl	800befc <_Bfree>
 800bcbe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bcc2:	ea43 0102 	orr.w	r1, r3, r2
 800bcc6:	9b04      	ldr	r3, [sp, #16]
 800bcc8:	430b      	orrs	r3, r1
 800bcca:	464d      	mov	r5, r9
 800bccc:	d10f      	bne.n	800bcee <_dtoa_r+0xa66>
 800bcce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bcd2:	d02a      	beq.n	800bd2a <_dtoa_r+0xaa2>
 800bcd4:	9b03      	ldr	r3, [sp, #12]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	dd02      	ble.n	800bce0 <_dtoa_r+0xa58>
 800bcda:	9b02      	ldr	r3, [sp, #8]
 800bcdc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bce0:	f88b a000 	strb.w	sl, [fp]
 800bce4:	e775      	b.n	800bbd2 <_dtoa_r+0x94a>
 800bce6:	4638      	mov	r0, r7
 800bce8:	e7ba      	b.n	800bc60 <_dtoa_r+0x9d8>
 800bcea:	2201      	movs	r2, #1
 800bcec:	e7e2      	b.n	800bcb4 <_dtoa_r+0xa2c>
 800bcee:	9b03      	ldr	r3, [sp, #12]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	db04      	blt.n	800bcfe <_dtoa_r+0xa76>
 800bcf4:	9906      	ldr	r1, [sp, #24]
 800bcf6:	430b      	orrs	r3, r1
 800bcf8:	9904      	ldr	r1, [sp, #16]
 800bcfa:	430b      	orrs	r3, r1
 800bcfc:	d122      	bne.n	800bd44 <_dtoa_r+0xabc>
 800bcfe:	2a00      	cmp	r2, #0
 800bd00:	ddee      	ble.n	800bce0 <_dtoa_r+0xa58>
 800bd02:	ee18 1a10 	vmov	r1, s16
 800bd06:	2201      	movs	r2, #1
 800bd08:	4620      	mov	r0, r4
 800bd0a:	f000 fac9 	bl	800c2a0 <__lshift>
 800bd0e:	4631      	mov	r1, r6
 800bd10:	ee08 0a10 	vmov	s16, r0
 800bd14:	f000 fb34 	bl	800c380 <__mcmp>
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	dc03      	bgt.n	800bd24 <_dtoa_r+0xa9c>
 800bd1c:	d1e0      	bne.n	800bce0 <_dtoa_r+0xa58>
 800bd1e:	f01a 0f01 	tst.w	sl, #1
 800bd22:	d0dd      	beq.n	800bce0 <_dtoa_r+0xa58>
 800bd24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bd28:	d1d7      	bne.n	800bcda <_dtoa_r+0xa52>
 800bd2a:	2339      	movs	r3, #57	; 0x39
 800bd2c:	f88b 3000 	strb.w	r3, [fp]
 800bd30:	462b      	mov	r3, r5
 800bd32:	461d      	mov	r5, r3
 800bd34:	3b01      	subs	r3, #1
 800bd36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bd3a:	2a39      	cmp	r2, #57	; 0x39
 800bd3c:	d071      	beq.n	800be22 <_dtoa_r+0xb9a>
 800bd3e:	3201      	adds	r2, #1
 800bd40:	701a      	strb	r2, [r3, #0]
 800bd42:	e746      	b.n	800bbd2 <_dtoa_r+0x94a>
 800bd44:	2a00      	cmp	r2, #0
 800bd46:	dd07      	ble.n	800bd58 <_dtoa_r+0xad0>
 800bd48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bd4c:	d0ed      	beq.n	800bd2a <_dtoa_r+0xaa2>
 800bd4e:	f10a 0301 	add.w	r3, sl, #1
 800bd52:	f88b 3000 	strb.w	r3, [fp]
 800bd56:	e73c      	b.n	800bbd2 <_dtoa_r+0x94a>
 800bd58:	9b05      	ldr	r3, [sp, #20]
 800bd5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bd5e:	4599      	cmp	r9, r3
 800bd60:	d047      	beq.n	800bdf2 <_dtoa_r+0xb6a>
 800bd62:	ee18 1a10 	vmov	r1, s16
 800bd66:	2300      	movs	r3, #0
 800bd68:	220a      	movs	r2, #10
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	f000 f8e8 	bl	800bf40 <__multadd>
 800bd70:	45b8      	cmp	r8, r7
 800bd72:	ee08 0a10 	vmov	s16, r0
 800bd76:	f04f 0300 	mov.w	r3, #0
 800bd7a:	f04f 020a 	mov.w	r2, #10
 800bd7e:	4641      	mov	r1, r8
 800bd80:	4620      	mov	r0, r4
 800bd82:	d106      	bne.n	800bd92 <_dtoa_r+0xb0a>
 800bd84:	f000 f8dc 	bl	800bf40 <__multadd>
 800bd88:	4680      	mov	r8, r0
 800bd8a:	4607      	mov	r7, r0
 800bd8c:	f109 0901 	add.w	r9, r9, #1
 800bd90:	e772      	b.n	800bc78 <_dtoa_r+0x9f0>
 800bd92:	f000 f8d5 	bl	800bf40 <__multadd>
 800bd96:	4639      	mov	r1, r7
 800bd98:	4680      	mov	r8, r0
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	220a      	movs	r2, #10
 800bd9e:	4620      	mov	r0, r4
 800bda0:	f000 f8ce 	bl	800bf40 <__multadd>
 800bda4:	4607      	mov	r7, r0
 800bda6:	e7f1      	b.n	800bd8c <_dtoa_r+0xb04>
 800bda8:	9b03      	ldr	r3, [sp, #12]
 800bdaa:	9302      	str	r3, [sp, #8]
 800bdac:	9d01      	ldr	r5, [sp, #4]
 800bdae:	ee18 0a10 	vmov	r0, s16
 800bdb2:	4631      	mov	r1, r6
 800bdb4:	f7ff f9dc 	bl	800b170 <quorem>
 800bdb8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bdbc:	9b01      	ldr	r3, [sp, #4]
 800bdbe:	f805 ab01 	strb.w	sl, [r5], #1
 800bdc2:	1aea      	subs	r2, r5, r3
 800bdc4:	9b02      	ldr	r3, [sp, #8]
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	dd09      	ble.n	800bdde <_dtoa_r+0xb56>
 800bdca:	ee18 1a10 	vmov	r1, s16
 800bdce:	2300      	movs	r3, #0
 800bdd0:	220a      	movs	r2, #10
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f000 f8b4 	bl	800bf40 <__multadd>
 800bdd8:	ee08 0a10 	vmov	s16, r0
 800bddc:	e7e7      	b.n	800bdae <_dtoa_r+0xb26>
 800bdde:	9b02      	ldr	r3, [sp, #8]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	bfc8      	it	gt
 800bde4:	461d      	movgt	r5, r3
 800bde6:	9b01      	ldr	r3, [sp, #4]
 800bde8:	bfd8      	it	le
 800bdea:	2501      	movle	r5, #1
 800bdec:	441d      	add	r5, r3
 800bdee:	f04f 0800 	mov.w	r8, #0
 800bdf2:	ee18 1a10 	vmov	r1, s16
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	f000 fa51 	bl	800c2a0 <__lshift>
 800bdfe:	4631      	mov	r1, r6
 800be00:	ee08 0a10 	vmov	s16, r0
 800be04:	f000 fabc 	bl	800c380 <__mcmp>
 800be08:	2800      	cmp	r0, #0
 800be0a:	dc91      	bgt.n	800bd30 <_dtoa_r+0xaa8>
 800be0c:	d102      	bne.n	800be14 <_dtoa_r+0xb8c>
 800be0e:	f01a 0f01 	tst.w	sl, #1
 800be12:	d18d      	bne.n	800bd30 <_dtoa_r+0xaa8>
 800be14:	462b      	mov	r3, r5
 800be16:	461d      	mov	r5, r3
 800be18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be1c:	2a30      	cmp	r2, #48	; 0x30
 800be1e:	d0fa      	beq.n	800be16 <_dtoa_r+0xb8e>
 800be20:	e6d7      	b.n	800bbd2 <_dtoa_r+0x94a>
 800be22:	9a01      	ldr	r2, [sp, #4]
 800be24:	429a      	cmp	r2, r3
 800be26:	d184      	bne.n	800bd32 <_dtoa_r+0xaaa>
 800be28:	9b00      	ldr	r3, [sp, #0]
 800be2a:	3301      	adds	r3, #1
 800be2c:	9300      	str	r3, [sp, #0]
 800be2e:	2331      	movs	r3, #49	; 0x31
 800be30:	7013      	strb	r3, [r2, #0]
 800be32:	e6ce      	b.n	800bbd2 <_dtoa_r+0x94a>
 800be34:	4b09      	ldr	r3, [pc, #36]	; (800be5c <_dtoa_r+0xbd4>)
 800be36:	f7ff ba95 	b.w	800b364 <_dtoa_r+0xdc>
 800be3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	f47f aa6e 	bne.w	800b31e <_dtoa_r+0x96>
 800be42:	4b07      	ldr	r3, [pc, #28]	; (800be60 <_dtoa_r+0xbd8>)
 800be44:	f7ff ba8e 	b.w	800b364 <_dtoa_r+0xdc>
 800be48:	9b02      	ldr	r3, [sp, #8]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	dcae      	bgt.n	800bdac <_dtoa_r+0xb24>
 800be4e:	9b06      	ldr	r3, [sp, #24]
 800be50:	2b02      	cmp	r3, #2
 800be52:	f73f aea8 	bgt.w	800bba6 <_dtoa_r+0x91e>
 800be56:	e7a9      	b.n	800bdac <_dtoa_r+0xb24>
 800be58:	0800d55b 	.word	0x0800d55b
 800be5c:	0800d4b8 	.word	0x0800d4b8
 800be60:	0800d4dc 	.word	0x0800d4dc

0800be64 <_localeconv_r>:
 800be64:	4800      	ldr	r0, [pc, #0]	; (800be68 <_localeconv_r+0x4>)
 800be66:	4770      	bx	lr
 800be68:	20000238 	.word	0x20000238

0800be6c <malloc>:
 800be6c:	4b02      	ldr	r3, [pc, #8]	; (800be78 <malloc+0xc>)
 800be6e:	4601      	mov	r1, r0
 800be70:	6818      	ldr	r0, [r3, #0]
 800be72:	f000 bc09 	b.w	800c688 <_malloc_r>
 800be76:	bf00      	nop
 800be78:	200000e4 	.word	0x200000e4

0800be7c <_Balloc>:
 800be7c:	b570      	push	{r4, r5, r6, lr}
 800be7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800be80:	4604      	mov	r4, r0
 800be82:	460d      	mov	r5, r1
 800be84:	b976      	cbnz	r6, 800bea4 <_Balloc+0x28>
 800be86:	2010      	movs	r0, #16
 800be88:	f7ff fff0 	bl	800be6c <malloc>
 800be8c:	4602      	mov	r2, r0
 800be8e:	6260      	str	r0, [r4, #36]	; 0x24
 800be90:	b920      	cbnz	r0, 800be9c <_Balloc+0x20>
 800be92:	4b18      	ldr	r3, [pc, #96]	; (800bef4 <_Balloc+0x78>)
 800be94:	4818      	ldr	r0, [pc, #96]	; (800bef8 <_Balloc+0x7c>)
 800be96:	2166      	movs	r1, #102	; 0x66
 800be98:	f000 fc7a 	bl	800c790 <__assert_func>
 800be9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bea0:	6006      	str	r6, [r0, #0]
 800bea2:	60c6      	str	r6, [r0, #12]
 800bea4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bea6:	68f3      	ldr	r3, [r6, #12]
 800bea8:	b183      	cbz	r3, 800becc <_Balloc+0x50>
 800beaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800beac:	68db      	ldr	r3, [r3, #12]
 800beae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800beb2:	b9b8      	cbnz	r0, 800bee4 <_Balloc+0x68>
 800beb4:	2101      	movs	r1, #1
 800beb6:	fa01 f605 	lsl.w	r6, r1, r5
 800beba:	1d72      	adds	r2, r6, #5
 800bebc:	0092      	lsls	r2, r2, #2
 800bebe:	4620      	mov	r0, r4
 800bec0:	f000 fb60 	bl	800c584 <_calloc_r>
 800bec4:	b160      	cbz	r0, 800bee0 <_Balloc+0x64>
 800bec6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800beca:	e00e      	b.n	800beea <_Balloc+0x6e>
 800becc:	2221      	movs	r2, #33	; 0x21
 800bece:	2104      	movs	r1, #4
 800bed0:	4620      	mov	r0, r4
 800bed2:	f000 fb57 	bl	800c584 <_calloc_r>
 800bed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bed8:	60f0      	str	r0, [r6, #12]
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d1e4      	bne.n	800beaa <_Balloc+0x2e>
 800bee0:	2000      	movs	r0, #0
 800bee2:	bd70      	pop	{r4, r5, r6, pc}
 800bee4:	6802      	ldr	r2, [r0, #0]
 800bee6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800beea:	2300      	movs	r3, #0
 800beec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bef0:	e7f7      	b.n	800bee2 <_Balloc+0x66>
 800bef2:	bf00      	nop
 800bef4:	0800d4e9 	.word	0x0800d4e9
 800bef8:	0800d56c 	.word	0x0800d56c

0800befc <_Bfree>:
 800befc:	b570      	push	{r4, r5, r6, lr}
 800befe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf00:	4605      	mov	r5, r0
 800bf02:	460c      	mov	r4, r1
 800bf04:	b976      	cbnz	r6, 800bf24 <_Bfree+0x28>
 800bf06:	2010      	movs	r0, #16
 800bf08:	f7ff ffb0 	bl	800be6c <malloc>
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	6268      	str	r0, [r5, #36]	; 0x24
 800bf10:	b920      	cbnz	r0, 800bf1c <_Bfree+0x20>
 800bf12:	4b09      	ldr	r3, [pc, #36]	; (800bf38 <_Bfree+0x3c>)
 800bf14:	4809      	ldr	r0, [pc, #36]	; (800bf3c <_Bfree+0x40>)
 800bf16:	218a      	movs	r1, #138	; 0x8a
 800bf18:	f000 fc3a 	bl	800c790 <__assert_func>
 800bf1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf20:	6006      	str	r6, [r0, #0]
 800bf22:	60c6      	str	r6, [r0, #12]
 800bf24:	b13c      	cbz	r4, 800bf36 <_Bfree+0x3a>
 800bf26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bf28:	6862      	ldr	r2, [r4, #4]
 800bf2a:	68db      	ldr	r3, [r3, #12]
 800bf2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf30:	6021      	str	r1, [r4, #0]
 800bf32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf36:	bd70      	pop	{r4, r5, r6, pc}
 800bf38:	0800d4e9 	.word	0x0800d4e9
 800bf3c:	0800d56c 	.word	0x0800d56c

0800bf40 <__multadd>:
 800bf40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf44:	690d      	ldr	r5, [r1, #16]
 800bf46:	4607      	mov	r7, r0
 800bf48:	460c      	mov	r4, r1
 800bf4a:	461e      	mov	r6, r3
 800bf4c:	f101 0c14 	add.w	ip, r1, #20
 800bf50:	2000      	movs	r0, #0
 800bf52:	f8dc 3000 	ldr.w	r3, [ip]
 800bf56:	b299      	uxth	r1, r3
 800bf58:	fb02 6101 	mla	r1, r2, r1, r6
 800bf5c:	0c1e      	lsrs	r6, r3, #16
 800bf5e:	0c0b      	lsrs	r3, r1, #16
 800bf60:	fb02 3306 	mla	r3, r2, r6, r3
 800bf64:	b289      	uxth	r1, r1
 800bf66:	3001      	adds	r0, #1
 800bf68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf6c:	4285      	cmp	r5, r0
 800bf6e:	f84c 1b04 	str.w	r1, [ip], #4
 800bf72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf76:	dcec      	bgt.n	800bf52 <__multadd+0x12>
 800bf78:	b30e      	cbz	r6, 800bfbe <__multadd+0x7e>
 800bf7a:	68a3      	ldr	r3, [r4, #8]
 800bf7c:	42ab      	cmp	r3, r5
 800bf7e:	dc19      	bgt.n	800bfb4 <__multadd+0x74>
 800bf80:	6861      	ldr	r1, [r4, #4]
 800bf82:	4638      	mov	r0, r7
 800bf84:	3101      	adds	r1, #1
 800bf86:	f7ff ff79 	bl	800be7c <_Balloc>
 800bf8a:	4680      	mov	r8, r0
 800bf8c:	b928      	cbnz	r0, 800bf9a <__multadd+0x5a>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	4b0c      	ldr	r3, [pc, #48]	; (800bfc4 <__multadd+0x84>)
 800bf92:	480d      	ldr	r0, [pc, #52]	; (800bfc8 <__multadd+0x88>)
 800bf94:	21b5      	movs	r1, #181	; 0xb5
 800bf96:	f000 fbfb 	bl	800c790 <__assert_func>
 800bf9a:	6922      	ldr	r2, [r4, #16]
 800bf9c:	3202      	adds	r2, #2
 800bf9e:	f104 010c 	add.w	r1, r4, #12
 800bfa2:	0092      	lsls	r2, r2, #2
 800bfa4:	300c      	adds	r0, #12
 800bfa6:	f7fe fc63 	bl	800a870 <memcpy>
 800bfaa:	4621      	mov	r1, r4
 800bfac:	4638      	mov	r0, r7
 800bfae:	f7ff ffa5 	bl	800befc <_Bfree>
 800bfb2:	4644      	mov	r4, r8
 800bfb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bfb8:	3501      	adds	r5, #1
 800bfba:	615e      	str	r6, [r3, #20]
 800bfbc:	6125      	str	r5, [r4, #16]
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfc4:	0800d55b 	.word	0x0800d55b
 800bfc8:	0800d56c 	.word	0x0800d56c

0800bfcc <__hi0bits>:
 800bfcc:	0c03      	lsrs	r3, r0, #16
 800bfce:	041b      	lsls	r3, r3, #16
 800bfd0:	b9d3      	cbnz	r3, 800c008 <__hi0bits+0x3c>
 800bfd2:	0400      	lsls	r0, r0, #16
 800bfd4:	2310      	movs	r3, #16
 800bfd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bfda:	bf04      	itt	eq
 800bfdc:	0200      	lsleq	r0, r0, #8
 800bfde:	3308      	addeq	r3, #8
 800bfe0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bfe4:	bf04      	itt	eq
 800bfe6:	0100      	lsleq	r0, r0, #4
 800bfe8:	3304      	addeq	r3, #4
 800bfea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bfee:	bf04      	itt	eq
 800bff0:	0080      	lsleq	r0, r0, #2
 800bff2:	3302      	addeq	r3, #2
 800bff4:	2800      	cmp	r0, #0
 800bff6:	db05      	blt.n	800c004 <__hi0bits+0x38>
 800bff8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bffc:	f103 0301 	add.w	r3, r3, #1
 800c000:	bf08      	it	eq
 800c002:	2320      	moveq	r3, #32
 800c004:	4618      	mov	r0, r3
 800c006:	4770      	bx	lr
 800c008:	2300      	movs	r3, #0
 800c00a:	e7e4      	b.n	800bfd6 <__hi0bits+0xa>

0800c00c <__lo0bits>:
 800c00c:	6803      	ldr	r3, [r0, #0]
 800c00e:	f013 0207 	ands.w	r2, r3, #7
 800c012:	4601      	mov	r1, r0
 800c014:	d00b      	beq.n	800c02e <__lo0bits+0x22>
 800c016:	07da      	lsls	r2, r3, #31
 800c018:	d423      	bmi.n	800c062 <__lo0bits+0x56>
 800c01a:	0798      	lsls	r0, r3, #30
 800c01c:	bf49      	itett	mi
 800c01e:	085b      	lsrmi	r3, r3, #1
 800c020:	089b      	lsrpl	r3, r3, #2
 800c022:	2001      	movmi	r0, #1
 800c024:	600b      	strmi	r3, [r1, #0]
 800c026:	bf5c      	itt	pl
 800c028:	600b      	strpl	r3, [r1, #0]
 800c02a:	2002      	movpl	r0, #2
 800c02c:	4770      	bx	lr
 800c02e:	b298      	uxth	r0, r3
 800c030:	b9a8      	cbnz	r0, 800c05e <__lo0bits+0x52>
 800c032:	0c1b      	lsrs	r3, r3, #16
 800c034:	2010      	movs	r0, #16
 800c036:	b2da      	uxtb	r2, r3
 800c038:	b90a      	cbnz	r2, 800c03e <__lo0bits+0x32>
 800c03a:	3008      	adds	r0, #8
 800c03c:	0a1b      	lsrs	r3, r3, #8
 800c03e:	071a      	lsls	r2, r3, #28
 800c040:	bf04      	itt	eq
 800c042:	091b      	lsreq	r3, r3, #4
 800c044:	3004      	addeq	r0, #4
 800c046:	079a      	lsls	r2, r3, #30
 800c048:	bf04      	itt	eq
 800c04a:	089b      	lsreq	r3, r3, #2
 800c04c:	3002      	addeq	r0, #2
 800c04e:	07da      	lsls	r2, r3, #31
 800c050:	d403      	bmi.n	800c05a <__lo0bits+0x4e>
 800c052:	085b      	lsrs	r3, r3, #1
 800c054:	f100 0001 	add.w	r0, r0, #1
 800c058:	d005      	beq.n	800c066 <__lo0bits+0x5a>
 800c05a:	600b      	str	r3, [r1, #0]
 800c05c:	4770      	bx	lr
 800c05e:	4610      	mov	r0, r2
 800c060:	e7e9      	b.n	800c036 <__lo0bits+0x2a>
 800c062:	2000      	movs	r0, #0
 800c064:	4770      	bx	lr
 800c066:	2020      	movs	r0, #32
 800c068:	4770      	bx	lr
	...

0800c06c <__i2b>:
 800c06c:	b510      	push	{r4, lr}
 800c06e:	460c      	mov	r4, r1
 800c070:	2101      	movs	r1, #1
 800c072:	f7ff ff03 	bl	800be7c <_Balloc>
 800c076:	4602      	mov	r2, r0
 800c078:	b928      	cbnz	r0, 800c086 <__i2b+0x1a>
 800c07a:	4b05      	ldr	r3, [pc, #20]	; (800c090 <__i2b+0x24>)
 800c07c:	4805      	ldr	r0, [pc, #20]	; (800c094 <__i2b+0x28>)
 800c07e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c082:	f000 fb85 	bl	800c790 <__assert_func>
 800c086:	2301      	movs	r3, #1
 800c088:	6144      	str	r4, [r0, #20]
 800c08a:	6103      	str	r3, [r0, #16]
 800c08c:	bd10      	pop	{r4, pc}
 800c08e:	bf00      	nop
 800c090:	0800d55b 	.word	0x0800d55b
 800c094:	0800d56c 	.word	0x0800d56c

0800c098 <__multiply>:
 800c098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c09c:	4691      	mov	r9, r2
 800c09e:	690a      	ldr	r2, [r1, #16]
 800c0a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	bfb8      	it	lt
 800c0a8:	460b      	movlt	r3, r1
 800c0aa:	460c      	mov	r4, r1
 800c0ac:	bfbc      	itt	lt
 800c0ae:	464c      	movlt	r4, r9
 800c0b0:	4699      	movlt	r9, r3
 800c0b2:	6927      	ldr	r7, [r4, #16]
 800c0b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c0b8:	68a3      	ldr	r3, [r4, #8]
 800c0ba:	6861      	ldr	r1, [r4, #4]
 800c0bc:	eb07 060a 	add.w	r6, r7, sl
 800c0c0:	42b3      	cmp	r3, r6
 800c0c2:	b085      	sub	sp, #20
 800c0c4:	bfb8      	it	lt
 800c0c6:	3101      	addlt	r1, #1
 800c0c8:	f7ff fed8 	bl	800be7c <_Balloc>
 800c0cc:	b930      	cbnz	r0, 800c0dc <__multiply+0x44>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	4b44      	ldr	r3, [pc, #272]	; (800c1e4 <__multiply+0x14c>)
 800c0d2:	4845      	ldr	r0, [pc, #276]	; (800c1e8 <__multiply+0x150>)
 800c0d4:	f240 115d 	movw	r1, #349	; 0x15d
 800c0d8:	f000 fb5a 	bl	800c790 <__assert_func>
 800c0dc:	f100 0514 	add.w	r5, r0, #20
 800c0e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c0e4:	462b      	mov	r3, r5
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	4543      	cmp	r3, r8
 800c0ea:	d321      	bcc.n	800c130 <__multiply+0x98>
 800c0ec:	f104 0314 	add.w	r3, r4, #20
 800c0f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c0f4:	f109 0314 	add.w	r3, r9, #20
 800c0f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c0fc:	9202      	str	r2, [sp, #8]
 800c0fe:	1b3a      	subs	r2, r7, r4
 800c100:	3a15      	subs	r2, #21
 800c102:	f022 0203 	bic.w	r2, r2, #3
 800c106:	3204      	adds	r2, #4
 800c108:	f104 0115 	add.w	r1, r4, #21
 800c10c:	428f      	cmp	r7, r1
 800c10e:	bf38      	it	cc
 800c110:	2204      	movcc	r2, #4
 800c112:	9201      	str	r2, [sp, #4]
 800c114:	9a02      	ldr	r2, [sp, #8]
 800c116:	9303      	str	r3, [sp, #12]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d80c      	bhi.n	800c136 <__multiply+0x9e>
 800c11c:	2e00      	cmp	r6, #0
 800c11e:	dd03      	ble.n	800c128 <__multiply+0x90>
 800c120:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c124:	2b00      	cmp	r3, #0
 800c126:	d05a      	beq.n	800c1de <__multiply+0x146>
 800c128:	6106      	str	r6, [r0, #16]
 800c12a:	b005      	add	sp, #20
 800c12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c130:	f843 2b04 	str.w	r2, [r3], #4
 800c134:	e7d8      	b.n	800c0e8 <__multiply+0x50>
 800c136:	f8b3 a000 	ldrh.w	sl, [r3]
 800c13a:	f1ba 0f00 	cmp.w	sl, #0
 800c13e:	d024      	beq.n	800c18a <__multiply+0xf2>
 800c140:	f104 0e14 	add.w	lr, r4, #20
 800c144:	46a9      	mov	r9, r5
 800c146:	f04f 0c00 	mov.w	ip, #0
 800c14a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c14e:	f8d9 1000 	ldr.w	r1, [r9]
 800c152:	fa1f fb82 	uxth.w	fp, r2
 800c156:	b289      	uxth	r1, r1
 800c158:	fb0a 110b 	mla	r1, sl, fp, r1
 800c15c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c160:	f8d9 2000 	ldr.w	r2, [r9]
 800c164:	4461      	add	r1, ip
 800c166:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c16a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c16e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c172:	b289      	uxth	r1, r1
 800c174:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c178:	4577      	cmp	r7, lr
 800c17a:	f849 1b04 	str.w	r1, [r9], #4
 800c17e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c182:	d8e2      	bhi.n	800c14a <__multiply+0xb2>
 800c184:	9a01      	ldr	r2, [sp, #4]
 800c186:	f845 c002 	str.w	ip, [r5, r2]
 800c18a:	9a03      	ldr	r2, [sp, #12]
 800c18c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c190:	3304      	adds	r3, #4
 800c192:	f1b9 0f00 	cmp.w	r9, #0
 800c196:	d020      	beq.n	800c1da <__multiply+0x142>
 800c198:	6829      	ldr	r1, [r5, #0]
 800c19a:	f104 0c14 	add.w	ip, r4, #20
 800c19e:	46ae      	mov	lr, r5
 800c1a0:	f04f 0a00 	mov.w	sl, #0
 800c1a4:	f8bc b000 	ldrh.w	fp, [ip]
 800c1a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c1ac:	fb09 220b 	mla	r2, r9, fp, r2
 800c1b0:	4492      	add	sl, r2
 800c1b2:	b289      	uxth	r1, r1
 800c1b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c1b8:	f84e 1b04 	str.w	r1, [lr], #4
 800c1bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c1c0:	f8be 1000 	ldrh.w	r1, [lr]
 800c1c4:	0c12      	lsrs	r2, r2, #16
 800c1c6:	fb09 1102 	mla	r1, r9, r2, r1
 800c1ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c1ce:	4567      	cmp	r7, ip
 800c1d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c1d4:	d8e6      	bhi.n	800c1a4 <__multiply+0x10c>
 800c1d6:	9a01      	ldr	r2, [sp, #4]
 800c1d8:	50a9      	str	r1, [r5, r2]
 800c1da:	3504      	adds	r5, #4
 800c1dc:	e79a      	b.n	800c114 <__multiply+0x7c>
 800c1de:	3e01      	subs	r6, #1
 800c1e0:	e79c      	b.n	800c11c <__multiply+0x84>
 800c1e2:	bf00      	nop
 800c1e4:	0800d55b 	.word	0x0800d55b
 800c1e8:	0800d56c 	.word	0x0800d56c

0800c1ec <__pow5mult>:
 800c1ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1f0:	4615      	mov	r5, r2
 800c1f2:	f012 0203 	ands.w	r2, r2, #3
 800c1f6:	4606      	mov	r6, r0
 800c1f8:	460f      	mov	r7, r1
 800c1fa:	d007      	beq.n	800c20c <__pow5mult+0x20>
 800c1fc:	4c25      	ldr	r4, [pc, #148]	; (800c294 <__pow5mult+0xa8>)
 800c1fe:	3a01      	subs	r2, #1
 800c200:	2300      	movs	r3, #0
 800c202:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c206:	f7ff fe9b 	bl	800bf40 <__multadd>
 800c20a:	4607      	mov	r7, r0
 800c20c:	10ad      	asrs	r5, r5, #2
 800c20e:	d03d      	beq.n	800c28c <__pow5mult+0xa0>
 800c210:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c212:	b97c      	cbnz	r4, 800c234 <__pow5mult+0x48>
 800c214:	2010      	movs	r0, #16
 800c216:	f7ff fe29 	bl	800be6c <malloc>
 800c21a:	4602      	mov	r2, r0
 800c21c:	6270      	str	r0, [r6, #36]	; 0x24
 800c21e:	b928      	cbnz	r0, 800c22c <__pow5mult+0x40>
 800c220:	4b1d      	ldr	r3, [pc, #116]	; (800c298 <__pow5mult+0xac>)
 800c222:	481e      	ldr	r0, [pc, #120]	; (800c29c <__pow5mult+0xb0>)
 800c224:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c228:	f000 fab2 	bl	800c790 <__assert_func>
 800c22c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c230:	6004      	str	r4, [r0, #0]
 800c232:	60c4      	str	r4, [r0, #12]
 800c234:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c238:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c23c:	b94c      	cbnz	r4, 800c252 <__pow5mult+0x66>
 800c23e:	f240 2171 	movw	r1, #625	; 0x271
 800c242:	4630      	mov	r0, r6
 800c244:	f7ff ff12 	bl	800c06c <__i2b>
 800c248:	2300      	movs	r3, #0
 800c24a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c24e:	4604      	mov	r4, r0
 800c250:	6003      	str	r3, [r0, #0]
 800c252:	f04f 0900 	mov.w	r9, #0
 800c256:	07eb      	lsls	r3, r5, #31
 800c258:	d50a      	bpl.n	800c270 <__pow5mult+0x84>
 800c25a:	4639      	mov	r1, r7
 800c25c:	4622      	mov	r2, r4
 800c25e:	4630      	mov	r0, r6
 800c260:	f7ff ff1a 	bl	800c098 <__multiply>
 800c264:	4639      	mov	r1, r7
 800c266:	4680      	mov	r8, r0
 800c268:	4630      	mov	r0, r6
 800c26a:	f7ff fe47 	bl	800befc <_Bfree>
 800c26e:	4647      	mov	r7, r8
 800c270:	106d      	asrs	r5, r5, #1
 800c272:	d00b      	beq.n	800c28c <__pow5mult+0xa0>
 800c274:	6820      	ldr	r0, [r4, #0]
 800c276:	b938      	cbnz	r0, 800c288 <__pow5mult+0x9c>
 800c278:	4622      	mov	r2, r4
 800c27a:	4621      	mov	r1, r4
 800c27c:	4630      	mov	r0, r6
 800c27e:	f7ff ff0b 	bl	800c098 <__multiply>
 800c282:	6020      	str	r0, [r4, #0]
 800c284:	f8c0 9000 	str.w	r9, [r0]
 800c288:	4604      	mov	r4, r0
 800c28a:	e7e4      	b.n	800c256 <__pow5mult+0x6a>
 800c28c:	4638      	mov	r0, r7
 800c28e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c292:	bf00      	nop
 800c294:	0800d6b8 	.word	0x0800d6b8
 800c298:	0800d4e9 	.word	0x0800d4e9
 800c29c:	0800d56c 	.word	0x0800d56c

0800c2a0 <__lshift>:
 800c2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2a4:	460c      	mov	r4, r1
 800c2a6:	6849      	ldr	r1, [r1, #4]
 800c2a8:	6923      	ldr	r3, [r4, #16]
 800c2aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c2ae:	68a3      	ldr	r3, [r4, #8]
 800c2b0:	4607      	mov	r7, r0
 800c2b2:	4691      	mov	r9, r2
 800c2b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c2b8:	f108 0601 	add.w	r6, r8, #1
 800c2bc:	42b3      	cmp	r3, r6
 800c2be:	db0b      	blt.n	800c2d8 <__lshift+0x38>
 800c2c0:	4638      	mov	r0, r7
 800c2c2:	f7ff fddb 	bl	800be7c <_Balloc>
 800c2c6:	4605      	mov	r5, r0
 800c2c8:	b948      	cbnz	r0, 800c2de <__lshift+0x3e>
 800c2ca:	4602      	mov	r2, r0
 800c2cc:	4b2a      	ldr	r3, [pc, #168]	; (800c378 <__lshift+0xd8>)
 800c2ce:	482b      	ldr	r0, [pc, #172]	; (800c37c <__lshift+0xdc>)
 800c2d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c2d4:	f000 fa5c 	bl	800c790 <__assert_func>
 800c2d8:	3101      	adds	r1, #1
 800c2da:	005b      	lsls	r3, r3, #1
 800c2dc:	e7ee      	b.n	800c2bc <__lshift+0x1c>
 800c2de:	2300      	movs	r3, #0
 800c2e0:	f100 0114 	add.w	r1, r0, #20
 800c2e4:	f100 0210 	add.w	r2, r0, #16
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	4553      	cmp	r3, sl
 800c2ec:	db37      	blt.n	800c35e <__lshift+0xbe>
 800c2ee:	6920      	ldr	r0, [r4, #16]
 800c2f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c2f4:	f104 0314 	add.w	r3, r4, #20
 800c2f8:	f019 091f 	ands.w	r9, r9, #31
 800c2fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c300:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c304:	d02f      	beq.n	800c366 <__lshift+0xc6>
 800c306:	f1c9 0e20 	rsb	lr, r9, #32
 800c30a:	468a      	mov	sl, r1
 800c30c:	f04f 0c00 	mov.w	ip, #0
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	fa02 f209 	lsl.w	r2, r2, r9
 800c316:	ea42 020c 	orr.w	r2, r2, ip
 800c31a:	f84a 2b04 	str.w	r2, [sl], #4
 800c31e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c322:	4298      	cmp	r0, r3
 800c324:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c328:	d8f2      	bhi.n	800c310 <__lshift+0x70>
 800c32a:	1b03      	subs	r3, r0, r4
 800c32c:	3b15      	subs	r3, #21
 800c32e:	f023 0303 	bic.w	r3, r3, #3
 800c332:	3304      	adds	r3, #4
 800c334:	f104 0215 	add.w	r2, r4, #21
 800c338:	4290      	cmp	r0, r2
 800c33a:	bf38      	it	cc
 800c33c:	2304      	movcc	r3, #4
 800c33e:	f841 c003 	str.w	ip, [r1, r3]
 800c342:	f1bc 0f00 	cmp.w	ip, #0
 800c346:	d001      	beq.n	800c34c <__lshift+0xac>
 800c348:	f108 0602 	add.w	r6, r8, #2
 800c34c:	3e01      	subs	r6, #1
 800c34e:	4638      	mov	r0, r7
 800c350:	612e      	str	r6, [r5, #16]
 800c352:	4621      	mov	r1, r4
 800c354:	f7ff fdd2 	bl	800befc <_Bfree>
 800c358:	4628      	mov	r0, r5
 800c35a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c35e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c362:	3301      	adds	r3, #1
 800c364:	e7c1      	b.n	800c2ea <__lshift+0x4a>
 800c366:	3904      	subs	r1, #4
 800c368:	f853 2b04 	ldr.w	r2, [r3], #4
 800c36c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c370:	4298      	cmp	r0, r3
 800c372:	d8f9      	bhi.n	800c368 <__lshift+0xc8>
 800c374:	e7ea      	b.n	800c34c <__lshift+0xac>
 800c376:	bf00      	nop
 800c378:	0800d55b 	.word	0x0800d55b
 800c37c:	0800d56c 	.word	0x0800d56c

0800c380 <__mcmp>:
 800c380:	b530      	push	{r4, r5, lr}
 800c382:	6902      	ldr	r2, [r0, #16]
 800c384:	690c      	ldr	r4, [r1, #16]
 800c386:	1b12      	subs	r2, r2, r4
 800c388:	d10e      	bne.n	800c3a8 <__mcmp+0x28>
 800c38a:	f100 0314 	add.w	r3, r0, #20
 800c38e:	3114      	adds	r1, #20
 800c390:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c394:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c398:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c39c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c3a0:	42a5      	cmp	r5, r4
 800c3a2:	d003      	beq.n	800c3ac <__mcmp+0x2c>
 800c3a4:	d305      	bcc.n	800c3b2 <__mcmp+0x32>
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	4610      	mov	r0, r2
 800c3aa:	bd30      	pop	{r4, r5, pc}
 800c3ac:	4283      	cmp	r3, r0
 800c3ae:	d3f3      	bcc.n	800c398 <__mcmp+0x18>
 800c3b0:	e7fa      	b.n	800c3a8 <__mcmp+0x28>
 800c3b2:	f04f 32ff 	mov.w	r2, #4294967295
 800c3b6:	e7f7      	b.n	800c3a8 <__mcmp+0x28>

0800c3b8 <__mdiff>:
 800c3b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3bc:	460c      	mov	r4, r1
 800c3be:	4606      	mov	r6, r0
 800c3c0:	4611      	mov	r1, r2
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	4690      	mov	r8, r2
 800c3c6:	f7ff ffdb 	bl	800c380 <__mcmp>
 800c3ca:	1e05      	subs	r5, r0, #0
 800c3cc:	d110      	bne.n	800c3f0 <__mdiff+0x38>
 800c3ce:	4629      	mov	r1, r5
 800c3d0:	4630      	mov	r0, r6
 800c3d2:	f7ff fd53 	bl	800be7c <_Balloc>
 800c3d6:	b930      	cbnz	r0, 800c3e6 <__mdiff+0x2e>
 800c3d8:	4b3a      	ldr	r3, [pc, #232]	; (800c4c4 <__mdiff+0x10c>)
 800c3da:	4602      	mov	r2, r0
 800c3dc:	f240 2132 	movw	r1, #562	; 0x232
 800c3e0:	4839      	ldr	r0, [pc, #228]	; (800c4c8 <__mdiff+0x110>)
 800c3e2:	f000 f9d5 	bl	800c790 <__assert_func>
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c3ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f0:	bfa4      	itt	ge
 800c3f2:	4643      	movge	r3, r8
 800c3f4:	46a0      	movge	r8, r4
 800c3f6:	4630      	mov	r0, r6
 800c3f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c3fc:	bfa6      	itte	ge
 800c3fe:	461c      	movge	r4, r3
 800c400:	2500      	movge	r5, #0
 800c402:	2501      	movlt	r5, #1
 800c404:	f7ff fd3a 	bl	800be7c <_Balloc>
 800c408:	b920      	cbnz	r0, 800c414 <__mdiff+0x5c>
 800c40a:	4b2e      	ldr	r3, [pc, #184]	; (800c4c4 <__mdiff+0x10c>)
 800c40c:	4602      	mov	r2, r0
 800c40e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c412:	e7e5      	b.n	800c3e0 <__mdiff+0x28>
 800c414:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c418:	6926      	ldr	r6, [r4, #16]
 800c41a:	60c5      	str	r5, [r0, #12]
 800c41c:	f104 0914 	add.w	r9, r4, #20
 800c420:	f108 0514 	add.w	r5, r8, #20
 800c424:	f100 0e14 	add.w	lr, r0, #20
 800c428:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c42c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c430:	f108 0210 	add.w	r2, r8, #16
 800c434:	46f2      	mov	sl, lr
 800c436:	2100      	movs	r1, #0
 800c438:	f859 3b04 	ldr.w	r3, [r9], #4
 800c43c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c440:	fa1f f883 	uxth.w	r8, r3
 800c444:	fa11 f18b 	uxtah	r1, r1, fp
 800c448:	0c1b      	lsrs	r3, r3, #16
 800c44a:	eba1 0808 	sub.w	r8, r1, r8
 800c44e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c452:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c456:	fa1f f888 	uxth.w	r8, r8
 800c45a:	1419      	asrs	r1, r3, #16
 800c45c:	454e      	cmp	r6, r9
 800c45e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c462:	f84a 3b04 	str.w	r3, [sl], #4
 800c466:	d8e7      	bhi.n	800c438 <__mdiff+0x80>
 800c468:	1b33      	subs	r3, r6, r4
 800c46a:	3b15      	subs	r3, #21
 800c46c:	f023 0303 	bic.w	r3, r3, #3
 800c470:	3304      	adds	r3, #4
 800c472:	3415      	adds	r4, #21
 800c474:	42a6      	cmp	r6, r4
 800c476:	bf38      	it	cc
 800c478:	2304      	movcc	r3, #4
 800c47a:	441d      	add	r5, r3
 800c47c:	4473      	add	r3, lr
 800c47e:	469e      	mov	lr, r3
 800c480:	462e      	mov	r6, r5
 800c482:	4566      	cmp	r6, ip
 800c484:	d30e      	bcc.n	800c4a4 <__mdiff+0xec>
 800c486:	f10c 0203 	add.w	r2, ip, #3
 800c48a:	1b52      	subs	r2, r2, r5
 800c48c:	f022 0203 	bic.w	r2, r2, #3
 800c490:	3d03      	subs	r5, #3
 800c492:	45ac      	cmp	ip, r5
 800c494:	bf38      	it	cc
 800c496:	2200      	movcc	r2, #0
 800c498:	441a      	add	r2, r3
 800c49a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c49e:	b17b      	cbz	r3, 800c4c0 <__mdiff+0x108>
 800c4a0:	6107      	str	r7, [r0, #16]
 800c4a2:	e7a3      	b.n	800c3ec <__mdiff+0x34>
 800c4a4:	f856 8b04 	ldr.w	r8, [r6], #4
 800c4a8:	fa11 f288 	uxtah	r2, r1, r8
 800c4ac:	1414      	asrs	r4, r2, #16
 800c4ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c4b2:	b292      	uxth	r2, r2
 800c4b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c4b8:	f84e 2b04 	str.w	r2, [lr], #4
 800c4bc:	1421      	asrs	r1, r4, #16
 800c4be:	e7e0      	b.n	800c482 <__mdiff+0xca>
 800c4c0:	3f01      	subs	r7, #1
 800c4c2:	e7ea      	b.n	800c49a <__mdiff+0xe2>
 800c4c4:	0800d55b 	.word	0x0800d55b
 800c4c8:	0800d56c 	.word	0x0800d56c

0800c4cc <__d2b>:
 800c4cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c4d0:	4689      	mov	r9, r1
 800c4d2:	2101      	movs	r1, #1
 800c4d4:	ec57 6b10 	vmov	r6, r7, d0
 800c4d8:	4690      	mov	r8, r2
 800c4da:	f7ff fccf 	bl	800be7c <_Balloc>
 800c4de:	4604      	mov	r4, r0
 800c4e0:	b930      	cbnz	r0, 800c4f0 <__d2b+0x24>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	4b25      	ldr	r3, [pc, #148]	; (800c57c <__d2b+0xb0>)
 800c4e6:	4826      	ldr	r0, [pc, #152]	; (800c580 <__d2b+0xb4>)
 800c4e8:	f240 310a 	movw	r1, #778	; 0x30a
 800c4ec:	f000 f950 	bl	800c790 <__assert_func>
 800c4f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c4f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c4f8:	bb35      	cbnz	r5, 800c548 <__d2b+0x7c>
 800c4fa:	2e00      	cmp	r6, #0
 800c4fc:	9301      	str	r3, [sp, #4]
 800c4fe:	d028      	beq.n	800c552 <__d2b+0x86>
 800c500:	4668      	mov	r0, sp
 800c502:	9600      	str	r6, [sp, #0]
 800c504:	f7ff fd82 	bl	800c00c <__lo0bits>
 800c508:	9900      	ldr	r1, [sp, #0]
 800c50a:	b300      	cbz	r0, 800c54e <__d2b+0x82>
 800c50c:	9a01      	ldr	r2, [sp, #4]
 800c50e:	f1c0 0320 	rsb	r3, r0, #32
 800c512:	fa02 f303 	lsl.w	r3, r2, r3
 800c516:	430b      	orrs	r3, r1
 800c518:	40c2      	lsrs	r2, r0
 800c51a:	6163      	str	r3, [r4, #20]
 800c51c:	9201      	str	r2, [sp, #4]
 800c51e:	9b01      	ldr	r3, [sp, #4]
 800c520:	61a3      	str	r3, [r4, #24]
 800c522:	2b00      	cmp	r3, #0
 800c524:	bf14      	ite	ne
 800c526:	2202      	movne	r2, #2
 800c528:	2201      	moveq	r2, #1
 800c52a:	6122      	str	r2, [r4, #16]
 800c52c:	b1d5      	cbz	r5, 800c564 <__d2b+0x98>
 800c52e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c532:	4405      	add	r5, r0
 800c534:	f8c9 5000 	str.w	r5, [r9]
 800c538:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c53c:	f8c8 0000 	str.w	r0, [r8]
 800c540:	4620      	mov	r0, r4
 800c542:	b003      	add	sp, #12
 800c544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c54c:	e7d5      	b.n	800c4fa <__d2b+0x2e>
 800c54e:	6161      	str	r1, [r4, #20]
 800c550:	e7e5      	b.n	800c51e <__d2b+0x52>
 800c552:	a801      	add	r0, sp, #4
 800c554:	f7ff fd5a 	bl	800c00c <__lo0bits>
 800c558:	9b01      	ldr	r3, [sp, #4]
 800c55a:	6163      	str	r3, [r4, #20]
 800c55c:	2201      	movs	r2, #1
 800c55e:	6122      	str	r2, [r4, #16]
 800c560:	3020      	adds	r0, #32
 800c562:	e7e3      	b.n	800c52c <__d2b+0x60>
 800c564:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c568:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c56c:	f8c9 0000 	str.w	r0, [r9]
 800c570:	6918      	ldr	r0, [r3, #16]
 800c572:	f7ff fd2b 	bl	800bfcc <__hi0bits>
 800c576:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c57a:	e7df      	b.n	800c53c <__d2b+0x70>
 800c57c:	0800d55b 	.word	0x0800d55b
 800c580:	0800d56c 	.word	0x0800d56c

0800c584 <_calloc_r>:
 800c584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c586:	fba1 2402 	umull	r2, r4, r1, r2
 800c58a:	b94c      	cbnz	r4, 800c5a0 <_calloc_r+0x1c>
 800c58c:	4611      	mov	r1, r2
 800c58e:	9201      	str	r2, [sp, #4]
 800c590:	f000 f87a 	bl	800c688 <_malloc_r>
 800c594:	9a01      	ldr	r2, [sp, #4]
 800c596:	4605      	mov	r5, r0
 800c598:	b930      	cbnz	r0, 800c5a8 <_calloc_r+0x24>
 800c59a:	4628      	mov	r0, r5
 800c59c:	b003      	add	sp, #12
 800c59e:	bd30      	pop	{r4, r5, pc}
 800c5a0:	220c      	movs	r2, #12
 800c5a2:	6002      	str	r2, [r0, #0]
 800c5a4:	2500      	movs	r5, #0
 800c5a6:	e7f8      	b.n	800c59a <_calloc_r+0x16>
 800c5a8:	4621      	mov	r1, r4
 800c5aa:	f7fe f96f 	bl	800a88c <memset>
 800c5ae:	e7f4      	b.n	800c59a <_calloc_r+0x16>

0800c5b0 <_free_r>:
 800c5b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5b2:	2900      	cmp	r1, #0
 800c5b4:	d044      	beq.n	800c640 <_free_r+0x90>
 800c5b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5ba:	9001      	str	r0, [sp, #4]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	f1a1 0404 	sub.w	r4, r1, #4
 800c5c2:	bfb8      	it	lt
 800c5c4:	18e4      	addlt	r4, r4, r3
 800c5c6:	f000 f925 	bl	800c814 <__malloc_lock>
 800c5ca:	4a1e      	ldr	r2, [pc, #120]	; (800c644 <_free_r+0x94>)
 800c5cc:	9801      	ldr	r0, [sp, #4]
 800c5ce:	6813      	ldr	r3, [r2, #0]
 800c5d0:	b933      	cbnz	r3, 800c5e0 <_free_r+0x30>
 800c5d2:	6063      	str	r3, [r4, #4]
 800c5d4:	6014      	str	r4, [r2, #0]
 800c5d6:	b003      	add	sp, #12
 800c5d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c5dc:	f000 b920 	b.w	800c820 <__malloc_unlock>
 800c5e0:	42a3      	cmp	r3, r4
 800c5e2:	d908      	bls.n	800c5f6 <_free_r+0x46>
 800c5e4:	6825      	ldr	r5, [r4, #0]
 800c5e6:	1961      	adds	r1, r4, r5
 800c5e8:	428b      	cmp	r3, r1
 800c5ea:	bf01      	itttt	eq
 800c5ec:	6819      	ldreq	r1, [r3, #0]
 800c5ee:	685b      	ldreq	r3, [r3, #4]
 800c5f0:	1949      	addeq	r1, r1, r5
 800c5f2:	6021      	streq	r1, [r4, #0]
 800c5f4:	e7ed      	b.n	800c5d2 <_free_r+0x22>
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	b10b      	cbz	r3, 800c600 <_free_r+0x50>
 800c5fc:	42a3      	cmp	r3, r4
 800c5fe:	d9fa      	bls.n	800c5f6 <_free_r+0x46>
 800c600:	6811      	ldr	r1, [r2, #0]
 800c602:	1855      	adds	r5, r2, r1
 800c604:	42a5      	cmp	r5, r4
 800c606:	d10b      	bne.n	800c620 <_free_r+0x70>
 800c608:	6824      	ldr	r4, [r4, #0]
 800c60a:	4421      	add	r1, r4
 800c60c:	1854      	adds	r4, r2, r1
 800c60e:	42a3      	cmp	r3, r4
 800c610:	6011      	str	r1, [r2, #0]
 800c612:	d1e0      	bne.n	800c5d6 <_free_r+0x26>
 800c614:	681c      	ldr	r4, [r3, #0]
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	6053      	str	r3, [r2, #4]
 800c61a:	4421      	add	r1, r4
 800c61c:	6011      	str	r1, [r2, #0]
 800c61e:	e7da      	b.n	800c5d6 <_free_r+0x26>
 800c620:	d902      	bls.n	800c628 <_free_r+0x78>
 800c622:	230c      	movs	r3, #12
 800c624:	6003      	str	r3, [r0, #0]
 800c626:	e7d6      	b.n	800c5d6 <_free_r+0x26>
 800c628:	6825      	ldr	r5, [r4, #0]
 800c62a:	1961      	adds	r1, r4, r5
 800c62c:	428b      	cmp	r3, r1
 800c62e:	bf04      	itt	eq
 800c630:	6819      	ldreq	r1, [r3, #0]
 800c632:	685b      	ldreq	r3, [r3, #4]
 800c634:	6063      	str	r3, [r4, #4]
 800c636:	bf04      	itt	eq
 800c638:	1949      	addeq	r1, r1, r5
 800c63a:	6021      	streq	r1, [r4, #0]
 800c63c:	6054      	str	r4, [r2, #4]
 800c63e:	e7ca      	b.n	800c5d6 <_free_r+0x26>
 800c640:	b003      	add	sp, #12
 800c642:	bd30      	pop	{r4, r5, pc}
 800c644:	20004194 	.word	0x20004194

0800c648 <sbrk_aligned>:
 800c648:	b570      	push	{r4, r5, r6, lr}
 800c64a:	4e0e      	ldr	r6, [pc, #56]	; (800c684 <sbrk_aligned+0x3c>)
 800c64c:	460c      	mov	r4, r1
 800c64e:	6831      	ldr	r1, [r6, #0]
 800c650:	4605      	mov	r5, r0
 800c652:	b911      	cbnz	r1, 800c65a <sbrk_aligned+0x12>
 800c654:	f000 f88c 	bl	800c770 <_sbrk_r>
 800c658:	6030      	str	r0, [r6, #0]
 800c65a:	4621      	mov	r1, r4
 800c65c:	4628      	mov	r0, r5
 800c65e:	f000 f887 	bl	800c770 <_sbrk_r>
 800c662:	1c43      	adds	r3, r0, #1
 800c664:	d00a      	beq.n	800c67c <sbrk_aligned+0x34>
 800c666:	1cc4      	adds	r4, r0, #3
 800c668:	f024 0403 	bic.w	r4, r4, #3
 800c66c:	42a0      	cmp	r0, r4
 800c66e:	d007      	beq.n	800c680 <sbrk_aligned+0x38>
 800c670:	1a21      	subs	r1, r4, r0
 800c672:	4628      	mov	r0, r5
 800c674:	f000 f87c 	bl	800c770 <_sbrk_r>
 800c678:	3001      	adds	r0, #1
 800c67a:	d101      	bne.n	800c680 <sbrk_aligned+0x38>
 800c67c:	f04f 34ff 	mov.w	r4, #4294967295
 800c680:	4620      	mov	r0, r4
 800c682:	bd70      	pop	{r4, r5, r6, pc}
 800c684:	20004198 	.word	0x20004198

0800c688 <_malloc_r>:
 800c688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c68c:	1ccd      	adds	r5, r1, #3
 800c68e:	f025 0503 	bic.w	r5, r5, #3
 800c692:	3508      	adds	r5, #8
 800c694:	2d0c      	cmp	r5, #12
 800c696:	bf38      	it	cc
 800c698:	250c      	movcc	r5, #12
 800c69a:	2d00      	cmp	r5, #0
 800c69c:	4607      	mov	r7, r0
 800c69e:	db01      	blt.n	800c6a4 <_malloc_r+0x1c>
 800c6a0:	42a9      	cmp	r1, r5
 800c6a2:	d905      	bls.n	800c6b0 <_malloc_r+0x28>
 800c6a4:	230c      	movs	r3, #12
 800c6a6:	603b      	str	r3, [r7, #0]
 800c6a8:	2600      	movs	r6, #0
 800c6aa:	4630      	mov	r0, r6
 800c6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6b0:	4e2e      	ldr	r6, [pc, #184]	; (800c76c <_malloc_r+0xe4>)
 800c6b2:	f000 f8af 	bl	800c814 <__malloc_lock>
 800c6b6:	6833      	ldr	r3, [r6, #0]
 800c6b8:	461c      	mov	r4, r3
 800c6ba:	bb34      	cbnz	r4, 800c70a <_malloc_r+0x82>
 800c6bc:	4629      	mov	r1, r5
 800c6be:	4638      	mov	r0, r7
 800c6c0:	f7ff ffc2 	bl	800c648 <sbrk_aligned>
 800c6c4:	1c43      	adds	r3, r0, #1
 800c6c6:	4604      	mov	r4, r0
 800c6c8:	d14d      	bne.n	800c766 <_malloc_r+0xde>
 800c6ca:	6834      	ldr	r4, [r6, #0]
 800c6cc:	4626      	mov	r6, r4
 800c6ce:	2e00      	cmp	r6, #0
 800c6d0:	d140      	bne.n	800c754 <_malloc_r+0xcc>
 800c6d2:	6823      	ldr	r3, [r4, #0]
 800c6d4:	4631      	mov	r1, r6
 800c6d6:	4638      	mov	r0, r7
 800c6d8:	eb04 0803 	add.w	r8, r4, r3
 800c6dc:	f000 f848 	bl	800c770 <_sbrk_r>
 800c6e0:	4580      	cmp	r8, r0
 800c6e2:	d13a      	bne.n	800c75a <_malloc_r+0xd2>
 800c6e4:	6821      	ldr	r1, [r4, #0]
 800c6e6:	3503      	adds	r5, #3
 800c6e8:	1a6d      	subs	r5, r5, r1
 800c6ea:	f025 0503 	bic.w	r5, r5, #3
 800c6ee:	3508      	adds	r5, #8
 800c6f0:	2d0c      	cmp	r5, #12
 800c6f2:	bf38      	it	cc
 800c6f4:	250c      	movcc	r5, #12
 800c6f6:	4629      	mov	r1, r5
 800c6f8:	4638      	mov	r0, r7
 800c6fa:	f7ff ffa5 	bl	800c648 <sbrk_aligned>
 800c6fe:	3001      	adds	r0, #1
 800c700:	d02b      	beq.n	800c75a <_malloc_r+0xd2>
 800c702:	6823      	ldr	r3, [r4, #0]
 800c704:	442b      	add	r3, r5
 800c706:	6023      	str	r3, [r4, #0]
 800c708:	e00e      	b.n	800c728 <_malloc_r+0xa0>
 800c70a:	6822      	ldr	r2, [r4, #0]
 800c70c:	1b52      	subs	r2, r2, r5
 800c70e:	d41e      	bmi.n	800c74e <_malloc_r+0xc6>
 800c710:	2a0b      	cmp	r2, #11
 800c712:	d916      	bls.n	800c742 <_malloc_r+0xba>
 800c714:	1961      	adds	r1, r4, r5
 800c716:	42a3      	cmp	r3, r4
 800c718:	6025      	str	r5, [r4, #0]
 800c71a:	bf18      	it	ne
 800c71c:	6059      	strne	r1, [r3, #4]
 800c71e:	6863      	ldr	r3, [r4, #4]
 800c720:	bf08      	it	eq
 800c722:	6031      	streq	r1, [r6, #0]
 800c724:	5162      	str	r2, [r4, r5]
 800c726:	604b      	str	r3, [r1, #4]
 800c728:	4638      	mov	r0, r7
 800c72a:	f104 060b 	add.w	r6, r4, #11
 800c72e:	f000 f877 	bl	800c820 <__malloc_unlock>
 800c732:	f026 0607 	bic.w	r6, r6, #7
 800c736:	1d23      	adds	r3, r4, #4
 800c738:	1af2      	subs	r2, r6, r3
 800c73a:	d0b6      	beq.n	800c6aa <_malloc_r+0x22>
 800c73c:	1b9b      	subs	r3, r3, r6
 800c73e:	50a3      	str	r3, [r4, r2]
 800c740:	e7b3      	b.n	800c6aa <_malloc_r+0x22>
 800c742:	6862      	ldr	r2, [r4, #4]
 800c744:	42a3      	cmp	r3, r4
 800c746:	bf0c      	ite	eq
 800c748:	6032      	streq	r2, [r6, #0]
 800c74a:	605a      	strne	r2, [r3, #4]
 800c74c:	e7ec      	b.n	800c728 <_malloc_r+0xa0>
 800c74e:	4623      	mov	r3, r4
 800c750:	6864      	ldr	r4, [r4, #4]
 800c752:	e7b2      	b.n	800c6ba <_malloc_r+0x32>
 800c754:	4634      	mov	r4, r6
 800c756:	6876      	ldr	r6, [r6, #4]
 800c758:	e7b9      	b.n	800c6ce <_malloc_r+0x46>
 800c75a:	230c      	movs	r3, #12
 800c75c:	603b      	str	r3, [r7, #0]
 800c75e:	4638      	mov	r0, r7
 800c760:	f000 f85e 	bl	800c820 <__malloc_unlock>
 800c764:	e7a1      	b.n	800c6aa <_malloc_r+0x22>
 800c766:	6025      	str	r5, [r4, #0]
 800c768:	e7de      	b.n	800c728 <_malloc_r+0xa0>
 800c76a:	bf00      	nop
 800c76c:	20004194 	.word	0x20004194

0800c770 <_sbrk_r>:
 800c770:	b538      	push	{r3, r4, r5, lr}
 800c772:	4d06      	ldr	r5, [pc, #24]	; (800c78c <_sbrk_r+0x1c>)
 800c774:	2300      	movs	r3, #0
 800c776:	4604      	mov	r4, r0
 800c778:	4608      	mov	r0, r1
 800c77a:	602b      	str	r3, [r5, #0]
 800c77c:	f7f5 fdfc 	bl	8002378 <_sbrk>
 800c780:	1c43      	adds	r3, r0, #1
 800c782:	d102      	bne.n	800c78a <_sbrk_r+0x1a>
 800c784:	682b      	ldr	r3, [r5, #0]
 800c786:	b103      	cbz	r3, 800c78a <_sbrk_r+0x1a>
 800c788:	6023      	str	r3, [r4, #0]
 800c78a:	bd38      	pop	{r3, r4, r5, pc}
 800c78c:	2000419c 	.word	0x2000419c

0800c790 <__assert_func>:
 800c790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c792:	4614      	mov	r4, r2
 800c794:	461a      	mov	r2, r3
 800c796:	4b09      	ldr	r3, [pc, #36]	; (800c7bc <__assert_func+0x2c>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4605      	mov	r5, r0
 800c79c:	68d8      	ldr	r0, [r3, #12]
 800c79e:	b14c      	cbz	r4, 800c7b4 <__assert_func+0x24>
 800c7a0:	4b07      	ldr	r3, [pc, #28]	; (800c7c0 <__assert_func+0x30>)
 800c7a2:	9100      	str	r1, [sp, #0]
 800c7a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c7a8:	4906      	ldr	r1, [pc, #24]	; (800c7c4 <__assert_func+0x34>)
 800c7aa:	462b      	mov	r3, r5
 800c7ac:	f000 f80e 	bl	800c7cc <fiprintf>
 800c7b0:	f000 fa64 	bl	800cc7c <abort>
 800c7b4:	4b04      	ldr	r3, [pc, #16]	; (800c7c8 <__assert_func+0x38>)
 800c7b6:	461c      	mov	r4, r3
 800c7b8:	e7f3      	b.n	800c7a2 <__assert_func+0x12>
 800c7ba:	bf00      	nop
 800c7bc:	200000e4 	.word	0x200000e4
 800c7c0:	0800d6c4 	.word	0x0800d6c4
 800c7c4:	0800d6d1 	.word	0x0800d6d1
 800c7c8:	0800d6ff 	.word	0x0800d6ff

0800c7cc <fiprintf>:
 800c7cc:	b40e      	push	{r1, r2, r3}
 800c7ce:	b503      	push	{r0, r1, lr}
 800c7d0:	4601      	mov	r1, r0
 800c7d2:	ab03      	add	r3, sp, #12
 800c7d4:	4805      	ldr	r0, [pc, #20]	; (800c7ec <fiprintf+0x20>)
 800c7d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7da:	6800      	ldr	r0, [r0, #0]
 800c7dc:	9301      	str	r3, [sp, #4]
 800c7de:	f000 f84f 	bl	800c880 <_vfiprintf_r>
 800c7e2:	b002      	add	sp, #8
 800c7e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7e8:	b003      	add	sp, #12
 800c7ea:	4770      	bx	lr
 800c7ec:	200000e4 	.word	0x200000e4

0800c7f0 <__ascii_mbtowc>:
 800c7f0:	b082      	sub	sp, #8
 800c7f2:	b901      	cbnz	r1, 800c7f6 <__ascii_mbtowc+0x6>
 800c7f4:	a901      	add	r1, sp, #4
 800c7f6:	b142      	cbz	r2, 800c80a <__ascii_mbtowc+0x1a>
 800c7f8:	b14b      	cbz	r3, 800c80e <__ascii_mbtowc+0x1e>
 800c7fa:	7813      	ldrb	r3, [r2, #0]
 800c7fc:	600b      	str	r3, [r1, #0]
 800c7fe:	7812      	ldrb	r2, [r2, #0]
 800c800:	1e10      	subs	r0, r2, #0
 800c802:	bf18      	it	ne
 800c804:	2001      	movne	r0, #1
 800c806:	b002      	add	sp, #8
 800c808:	4770      	bx	lr
 800c80a:	4610      	mov	r0, r2
 800c80c:	e7fb      	b.n	800c806 <__ascii_mbtowc+0x16>
 800c80e:	f06f 0001 	mvn.w	r0, #1
 800c812:	e7f8      	b.n	800c806 <__ascii_mbtowc+0x16>

0800c814 <__malloc_lock>:
 800c814:	4801      	ldr	r0, [pc, #4]	; (800c81c <__malloc_lock+0x8>)
 800c816:	f000 bbf1 	b.w	800cffc <__retarget_lock_acquire_recursive>
 800c81a:	bf00      	nop
 800c81c:	200041a0 	.word	0x200041a0

0800c820 <__malloc_unlock>:
 800c820:	4801      	ldr	r0, [pc, #4]	; (800c828 <__malloc_unlock+0x8>)
 800c822:	f000 bbec 	b.w	800cffe <__retarget_lock_release_recursive>
 800c826:	bf00      	nop
 800c828:	200041a0 	.word	0x200041a0

0800c82c <__sfputc_r>:
 800c82c:	6893      	ldr	r3, [r2, #8]
 800c82e:	3b01      	subs	r3, #1
 800c830:	2b00      	cmp	r3, #0
 800c832:	b410      	push	{r4}
 800c834:	6093      	str	r3, [r2, #8]
 800c836:	da08      	bge.n	800c84a <__sfputc_r+0x1e>
 800c838:	6994      	ldr	r4, [r2, #24]
 800c83a:	42a3      	cmp	r3, r4
 800c83c:	db01      	blt.n	800c842 <__sfputc_r+0x16>
 800c83e:	290a      	cmp	r1, #10
 800c840:	d103      	bne.n	800c84a <__sfputc_r+0x1e>
 800c842:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c846:	f000 b94b 	b.w	800cae0 <__swbuf_r>
 800c84a:	6813      	ldr	r3, [r2, #0]
 800c84c:	1c58      	adds	r0, r3, #1
 800c84e:	6010      	str	r0, [r2, #0]
 800c850:	7019      	strb	r1, [r3, #0]
 800c852:	4608      	mov	r0, r1
 800c854:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c858:	4770      	bx	lr

0800c85a <__sfputs_r>:
 800c85a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c85c:	4606      	mov	r6, r0
 800c85e:	460f      	mov	r7, r1
 800c860:	4614      	mov	r4, r2
 800c862:	18d5      	adds	r5, r2, r3
 800c864:	42ac      	cmp	r4, r5
 800c866:	d101      	bne.n	800c86c <__sfputs_r+0x12>
 800c868:	2000      	movs	r0, #0
 800c86a:	e007      	b.n	800c87c <__sfputs_r+0x22>
 800c86c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c870:	463a      	mov	r2, r7
 800c872:	4630      	mov	r0, r6
 800c874:	f7ff ffda 	bl	800c82c <__sfputc_r>
 800c878:	1c43      	adds	r3, r0, #1
 800c87a:	d1f3      	bne.n	800c864 <__sfputs_r+0xa>
 800c87c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c880 <_vfiprintf_r>:
 800c880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c884:	460d      	mov	r5, r1
 800c886:	b09d      	sub	sp, #116	; 0x74
 800c888:	4614      	mov	r4, r2
 800c88a:	4698      	mov	r8, r3
 800c88c:	4606      	mov	r6, r0
 800c88e:	b118      	cbz	r0, 800c898 <_vfiprintf_r+0x18>
 800c890:	6983      	ldr	r3, [r0, #24]
 800c892:	b90b      	cbnz	r3, 800c898 <_vfiprintf_r+0x18>
 800c894:	f000 fb14 	bl	800cec0 <__sinit>
 800c898:	4b89      	ldr	r3, [pc, #548]	; (800cac0 <_vfiprintf_r+0x240>)
 800c89a:	429d      	cmp	r5, r3
 800c89c:	d11b      	bne.n	800c8d6 <_vfiprintf_r+0x56>
 800c89e:	6875      	ldr	r5, [r6, #4]
 800c8a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8a2:	07d9      	lsls	r1, r3, #31
 800c8a4:	d405      	bmi.n	800c8b2 <_vfiprintf_r+0x32>
 800c8a6:	89ab      	ldrh	r3, [r5, #12]
 800c8a8:	059a      	lsls	r2, r3, #22
 800c8aa:	d402      	bmi.n	800c8b2 <_vfiprintf_r+0x32>
 800c8ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8ae:	f000 fba5 	bl	800cffc <__retarget_lock_acquire_recursive>
 800c8b2:	89ab      	ldrh	r3, [r5, #12]
 800c8b4:	071b      	lsls	r3, r3, #28
 800c8b6:	d501      	bpl.n	800c8bc <_vfiprintf_r+0x3c>
 800c8b8:	692b      	ldr	r3, [r5, #16]
 800c8ba:	b9eb      	cbnz	r3, 800c8f8 <_vfiprintf_r+0x78>
 800c8bc:	4629      	mov	r1, r5
 800c8be:	4630      	mov	r0, r6
 800c8c0:	f000 f96e 	bl	800cba0 <__swsetup_r>
 800c8c4:	b1c0      	cbz	r0, 800c8f8 <_vfiprintf_r+0x78>
 800c8c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8c8:	07dc      	lsls	r4, r3, #31
 800c8ca:	d50e      	bpl.n	800c8ea <_vfiprintf_r+0x6a>
 800c8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d0:	b01d      	add	sp, #116	; 0x74
 800c8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8d6:	4b7b      	ldr	r3, [pc, #492]	; (800cac4 <_vfiprintf_r+0x244>)
 800c8d8:	429d      	cmp	r5, r3
 800c8da:	d101      	bne.n	800c8e0 <_vfiprintf_r+0x60>
 800c8dc:	68b5      	ldr	r5, [r6, #8]
 800c8de:	e7df      	b.n	800c8a0 <_vfiprintf_r+0x20>
 800c8e0:	4b79      	ldr	r3, [pc, #484]	; (800cac8 <_vfiprintf_r+0x248>)
 800c8e2:	429d      	cmp	r5, r3
 800c8e4:	bf08      	it	eq
 800c8e6:	68f5      	ldreq	r5, [r6, #12]
 800c8e8:	e7da      	b.n	800c8a0 <_vfiprintf_r+0x20>
 800c8ea:	89ab      	ldrh	r3, [r5, #12]
 800c8ec:	0598      	lsls	r0, r3, #22
 800c8ee:	d4ed      	bmi.n	800c8cc <_vfiprintf_r+0x4c>
 800c8f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8f2:	f000 fb84 	bl	800cffe <__retarget_lock_release_recursive>
 800c8f6:	e7e9      	b.n	800c8cc <_vfiprintf_r+0x4c>
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	9309      	str	r3, [sp, #36]	; 0x24
 800c8fc:	2320      	movs	r3, #32
 800c8fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c902:	f8cd 800c 	str.w	r8, [sp, #12]
 800c906:	2330      	movs	r3, #48	; 0x30
 800c908:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cacc <_vfiprintf_r+0x24c>
 800c90c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c910:	f04f 0901 	mov.w	r9, #1
 800c914:	4623      	mov	r3, r4
 800c916:	469a      	mov	sl, r3
 800c918:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c91c:	b10a      	cbz	r2, 800c922 <_vfiprintf_r+0xa2>
 800c91e:	2a25      	cmp	r2, #37	; 0x25
 800c920:	d1f9      	bne.n	800c916 <_vfiprintf_r+0x96>
 800c922:	ebba 0b04 	subs.w	fp, sl, r4
 800c926:	d00b      	beq.n	800c940 <_vfiprintf_r+0xc0>
 800c928:	465b      	mov	r3, fp
 800c92a:	4622      	mov	r2, r4
 800c92c:	4629      	mov	r1, r5
 800c92e:	4630      	mov	r0, r6
 800c930:	f7ff ff93 	bl	800c85a <__sfputs_r>
 800c934:	3001      	adds	r0, #1
 800c936:	f000 80aa 	beq.w	800ca8e <_vfiprintf_r+0x20e>
 800c93a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c93c:	445a      	add	r2, fp
 800c93e:	9209      	str	r2, [sp, #36]	; 0x24
 800c940:	f89a 3000 	ldrb.w	r3, [sl]
 800c944:	2b00      	cmp	r3, #0
 800c946:	f000 80a2 	beq.w	800ca8e <_vfiprintf_r+0x20e>
 800c94a:	2300      	movs	r3, #0
 800c94c:	f04f 32ff 	mov.w	r2, #4294967295
 800c950:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c954:	f10a 0a01 	add.w	sl, sl, #1
 800c958:	9304      	str	r3, [sp, #16]
 800c95a:	9307      	str	r3, [sp, #28]
 800c95c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c960:	931a      	str	r3, [sp, #104]	; 0x68
 800c962:	4654      	mov	r4, sl
 800c964:	2205      	movs	r2, #5
 800c966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c96a:	4858      	ldr	r0, [pc, #352]	; (800cacc <_vfiprintf_r+0x24c>)
 800c96c:	f7f3 fc40 	bl	80001f0 <memchr>
 800c970:	9a04      	ldr	r2, [sp, #16]
 800c972:	b9d8      	cbnz	r0, 800c9ac <_vfiprintf_r+0x12c>
 800c974:	06d1      	lsls	r1, r2, #27
 800c976:	bf44      	itt	mi
 800c978:	2320      	movmi	r3, #32
 800c97a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c97e:	0713      	lsls	r3, r2, #28
 800c980:	bf44      	itt	mi
 800c982:	232b      	movmi	r3, #43	; 0x2b
 800c984:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c988:	f89a 3000 	ldrb.w	r3, [sl]
 800c98c:	2b2a      	cmp	r3, #42	; 0x2a
 800c98e:	d015      	beq.n	800c9bc <_vfiprintf_r+0x13c>
 800c990:	9a07      	ldr	r2, [sp, #28]
 800c992:	4654      	mov	r4, sl
 800c994:	2000      	movs	r0, #0
 800c996:	f04f 0c0a 	mov.w	ip, #10
 800c99a:	4621      	mov	r1, r4
 800c99c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c9a0:	3b30      	subs	r3, #48	; 0x30
 800c9a2:	2b09      	cmp	r3, #9
 800c9a4:	d94e      	bls.n	800ca44 <_vfiprintf_r+0x1c4>
 800c9a6:	b1b0      	cbz	r0, 800c9d6 <_vfiprintf_r+0x156>
 800c9a8:	9207      	str	r2, [sp, #28]
 800c9aa:	e014      	b.n	800c9d6 <_vfiprintf_r+0x156>
 800c9ac:	eba0 0308 	sub.w	r3, r0, r8
 800c9b0:	fa09 f303 	lsl.w	r3, r9, r3
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	9304      	str	r3, [sp, #16]
 800c9b8:	46a2      	mov	sl, r4
 800c9ba:	e7d2      	b.n	800c962 <_vfiprintf_r+0xe2>
 800c9bc:	9b03      	ldr	r3, [sp, #12]
 800c9be:	1d19      	adds	r1, r3, #4
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	9103      	str	r1, [sp, #12]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	bfbb      	ittet	lt
 800c9c8:	425b      	neglt	r3, r3
 800c9ca:	f042 0202 	orrlt.w	r2, r2, #2
 800c9ce:	9307      	strge	r3, [sp, #28]
 800c9d0:	9307      	strlt	r3, [sp, #28]
 800c9d2:	bfb8      	it	lt
 800c9d4:	9204      	strlt	r2, [sp, #16]
 800c9d6:	7823      	ldrb	r3, [r4, #0]
 800c9d8:	2b2e      	cmp	r3, #46	; 0x2e
 800c9da:	d10c      	bne.n	800c9f6 <_vfiprintf_r+0x176>
 800c9dc:	7863      	ldrb	r3, [r4, #1]
 800c9de:	2b2a      	cmp	r3, #42	; 0x2a
 800c9e0:	d135      	bne.n	800ca4e <_vfiprintf_r+0x1ce>
 800c9e2:	9b03      	ldr	r3, [sp, #12]
 800c9e4:	1d1a      	adds	r2, r3, #4
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	9203      	str	r2, [sp, #12]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	bfb8      	it	lt
 800c9ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9f2:	3402      	adds	r4, #2
 800c9f4:	9305      	str	r3, [sp, #20]
 800c9f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cadc <_vfiprintf_r+0x25c>
 800c9fa:	7821      	ldrb	r1, [r4, #0]
 800c9fc:	2203      	movs	r2, #3
 800c9fe:	4650      	mov	r0, sl
 800ca00:	f7f3 fbf6 	bl	80001f0 <memchr>
 800ca04:	b140      	cbz	r0, 800ca18 <_vfiprintf_r+0x198>
 800ca06:	2340      	movs	r3, #64	; 0x40
 800ca08:	eba0 000a 	sub.w	r0, r0, sl
 800ca0c:	fa03 f000 	lsl.w	r0, r3, r0
 800ca10:	9b04      	ldr	r3, [sp, #16]
 800ca12:	4303      	orrs	r3, r0
 800ca14:	3401      	adds	r4, #1
 800ca16:	9304      	str	r3, [sp, #16]
 800ca18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca1c:	482c      	ldr	r0, [pc, #176]	; (800cad0 <_vfiprintf_r+0x250>)
 800ca1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca22:	2206      	movs	r2, #6
 800ca24:	f7f3 fbe4 	bl	80001f0 <memchr>
 800ca28:	2800      	cmp	r0, #0
 800ca2a:	d03f      	beq.n	800caac <_vfiprintf_r+0x22c>
 800ca2c:	4b29      	ldr	r3, [pc, #164]	; (800cad4 <_vfiprintf_r+0x254>)
 800ca2e:	bb1b      	cbnz	r3, 800ca78 <_vfiprintf_r+0x1f8>
 800ca30:	9b03      	ldr	r3, [sp, #12]
 800ca32:	3307      	adds	r3, #7
 800ca34:	f023 0307 	bic.w	r3, r3, #7
 800ca38:	3308      	adds	r3, #8
 800ca3a:	9303      	str	r3, [sp, #12]
 800ca3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca3e:	443b      	add	r3, r7
 800ca40:	9309      	str	r3, [sp, #36]	; 0x24
 800ca42:	e767      	b.n	800c914 <_vfiprintf_r+0x94>
 800ca44:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca48:	460c      	mov	r4, r1
 800ca4a:	2001      	movs	r0, #1
 800ca4c:	e7a5      	b.n	800c99a <_vfiprintf_r+0x11a>
 800ca4e:	2300      	movs	r3, #0
 800ca50:	3401      	adds	r4, #1
 800ca52:	9305      	str	r3, [sp, #20]
 800ca54:	4619      	mov	r1, r3
 800ca56:	f04f 0c0a 	mov.w	ip, #10
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca60:	3a30      	subs	r2, #48	; 0x30
 800ca62:	2a09      	cmp	r2, #9
 800ca64:	d903      	bls.n	800ca6e <_vfiprintf_r+0x1ee>
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d0c5      	beq.n	800c9f6 <_vfiprintf_r+0x176>
 800ca6a:	9105      	str	r1, [sp, #20]
 800ca6c:	e7c3      	b.n	800c9f6 <_vfiprintf_r+0x176>
 800ca6e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca72:	4604      	mov	r4, r0
 800ca74:	2301      	movs	r3, #1
 800ca76:	e7f0      	b.n	800ca5a <_vfiprintf_r+0x1da>
 800ca78:	ab03      	add	r3, sp, #12
 800ca7a:	9300      	str	r3, [sp, #0]
 800ca7c:	462a      	mov	r2, r5
 800ca7e:	4b16      	ldr	r3, [pc, #88]	; (800cad8 <_vfiprintf_r+0x258>)
 800ca80:	a904      	add	r1, sp, #16
 800ca82:	4630      	mov	r0, r6
 800ca84:	f7fd ffaa 	bl	800a9dc <_printf_float>
 800ca88:	4607      	mov	r7, r0
 800ca8a:	1c78      	adds	r0, r7, #1
 800ca8c:	d1d6      	bne.n	800ca3c <_vfiprintf_r+0x1bc>
 800ca8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca90:	07d9      	lsls	r1, r3, #31
 800ca92:	d405      	bmi.n	800caa0 <_vfiprintf_r+0x220>
 800ca94:	89ab      	ldrh	r3, [r5, #12]
 800ca96:	059a      	lsls	r2, r3, #22
 800ca98:	d402      	bmi.n	800caa0 <_vfiprintf_r+0x220>
 800ca9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca9c:	f000 faaf 	bl	800cffe <__retarget_lock_release_recursive>
 800caa0:	89ab      	ldrh	r3, [r5, #12]
 800caa2:	065b      	lsls	r3, r3, #25
 800caa4:	f53f af12 	bmi.w	800c8cc <_vfiprintf_r+0x4c>
 800caa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800caaa:	e711      	b.n	800c8d0 <_vfiprintf_r+0x50>
 800caac:	ab03      	add	r3, sp, #12
 800caae:	9300      	str	r3, [sp, #0]
 800cab0:	462a      	mov	r2, r5
 800cab2:	4b09      	ldr	r3, [pc, #36]	; (800cad8 <_vfiprintf_r+0x258>)
 800cab4:	a904      	add	r1, sp, #16
 800cab6:	4630      	mov	r0, r6
 800cab8:	f7fe fa34 	bl	800af24 <_printf_i>
 800cabc:	e7e4      	b.n	800ca88 <_vfiprintf_r+0x208>
 800cabe:	bf00      	nop
 800cac0:	0800d83c 	.word	0x0800d83c
 800cac4:	0800d85c 	.word	0x0800d85c
 800cac8:	0800d81c 	.word	0x0800d81c
 800cacc:	0800d70a 	.word	0x0800d70a
 800cad0:	0800d714 	.word	0x0800d714
 800cad4:	0800a9dd 	.word	0x0800a9dd
 800cad8:	0800c85b 	.word	0x0800c85b
 800cadc:	0800d710 	.word	0x0800d710

0800cae0 <__swbuf_r>:
 800cae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cae2:	460e      	mov	r6, r1
 800cae4:	4614      	mov	r4, r2
 800cae6:	4605      	mov	r5, r0
 800cae8:	b118      	cbz	r0, 800caf2 <__swbuf_r+0x12>
 800caea:	6983      	ldr	r3, [r0, #24]
 800caec:	b90b      	cbnz	r3, 800caf2 <__swbuf_r+0x12>
 800caee:	f000 f9e7 	bl	800cec0 <__sinit>
 800caf2:	4b21      	ldr	r3, [pc, #132]	; (800cb78 <__swbuf_r+0x98>)
 800caf4:	429c      	cmp	r4, r3
 800caf6:	d12b      	bne.n	800cb50 <__swbuf_r+0x70>
 800caf8:	686c      	ldr	r4, [r5, #4]
 800cafa:	69a3      	ldr	r3, [r4, #24]
 800cafc:	60a3      	str	r3, [r4, #8]
 800cafe:	89a3      	ldrh	r3, [r4, #12]
 800cb00:	071a      	lsls	r2, r3, #28
 800cb02:	d52f      	bpl.n	800cb64 <__swbuf_r+0x84>
 800cb04:	6923      	ldr	r3, [r4, #16]
 800cb06:	b36b      	cbz	r3, 800cb64 <__swbuf_r+0x84>
 800cb08:	6923      	ldr	r3, [r4, #16]
 800cb0a:	6820      	ldr	r0, [r4, #0]
 800cb0c:	1ac0      	subs	r0, r0, r3
 800cb0e:	6963      	ldr	r3, [r4, #20]
 800cb10:	b2f6      	uxtb	r6, r6
 800cb12:	4283      	cmp	r3, r0
 800cb14:	4637      	mov	r7, r6
 800cb16:	dc04      	bgt.n	800cb22 <__swbuf_r+0x42>
 800cb18:	4621      	mov	r1, r4
 800cb1a:	4628      	mov	r0, r5
 800cb1c:	f000 f93c 	bl	800cd98 <_fflush_r>
 800cb20:	bb30      	cbnz	r0, 800cb70 <__swbuf_r+0x90>
 800cb22:	68a3      	ldr	r3, [r4, #8]
 800cb24:	3b01      	subs	r3, #1
 800cb26:	60a3      	str	r3, [r4, #8]
 800cb28:	6823      	ldr	r3, [r4, #0]
 800cb2a:	1c5a      	adds	r2, r3, #1
 800cb2c:	6022      	str	r2, [r4, #0]
 800cb2e:	701e      	strb	r6, [r3, #0]
 800cb30:	6963      	ldr	r3, [r4, #20]
 800cb32:	3001      	adds	r0, #1
 800cb34:	4283      	cmp	r3, r0
 800cb36:	d004      	beq.n	800cb42 <__swbuf_r+0x62>
 800cb38:	89a3      	ldrh	r3, [r4, #12]
 800cb3a:	07db      	lsls	r3, r3, #31
 800cb3c:	d506      	bpl.n	800cb4c <__swbuf_r+0x6c>
 800cb3e:	2e0a      	cmp	r6, #10
 800cb40:	d104      	bne.n	800cb4c <__swbuf_r+0x6c>
 800cb42:	4621      	mov	r1, r4
 800cb44:	4628      	mov	r0, r5
 800cb46:	f000 f927 	bl	800cd98 <_fflush_r>
 800cb4a:	b988      	cbnz	r0, 800cb70 <__swbuf_r+0x90>
 800cb4c:	4638      	mov	r0, r7
 800cb4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb50:	4b0a      	ldr	r3, [pc, #40]	; (800cb7c <__swbuf_r+0x9c>)
 800cb52:	429c      	cmp	r4, r3
 800cb54:	d101      	bne.n	800cb5a <__swbuf_r+0x7a>
 800cb56:	68ac      	ldr	r4, [r5, #8]
 800cb58:	e7cf      	b.n	800cafa <__swbuf_r+0x1a>
 800cb5a:	4b09      	ldr	r3, [pc, #36]	; (800cb80 <__swbuf_r+0xa0>)
 800cb5c:	429c      	cmp	r4, r3
 800cb5e:	bf08      	it	eq
 800cb60:	68ec      	ldreq	r4, [r5, #12]
 800cb62:	e7ca      	b.n	800cafa <__swbuf_r+0x1a>
 800cb64:	4621      	mov	r1, r4
 800cb66:	4628      	mov	r0, r5
 800cb68:	f000 f81a 	bl	800cba0 <__swsetup_r>
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	d0cb      	beq.n	800cb08 <__swbuf_r+0x28>
 800cb70:	f04f 37ff 	mov.w	r7, #4294967295
 800cb74:	e7ea      	b.n	800cb4c <__swbuf_r+0x6c>
 800cb76:	bf00      	nop
 800cb78:	0800d83c 	.word	0x0800d83c
 800cb7c:	0800d85c 	.word	0x0800d85c
 800cb80:	0800d81c 	.word	0x0800d81c

0800cb84 <__ascii_wctomb>:
 800cb84:	b149      	cbz	r1, 800cb9a <__ascii_wctomb+0x16>
 800cb86:	2aff      	cmp	r2, #255	; 0xff
 800cb88:	bf85      	ittet	hi
 800cb8a:	238a      	movhi	r3, #138	; 0x8a
 800cb8c:	6003      	strhi	r3, [r0, #0]
 800cb8e:	700a      	strbls	r2, [r1, #0]
 800cb90:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb94:	bf98      	it	ls
 800cb96:	2001      	movls	r0, #1
 800cb98:	4770      	bx	lr
 800cb9a:	4608      	mov	r0, r1
 800cb9c:	4770      	bx	lr
	...

0800cba0 <__swsetup_r>:
 800cba0:	4b32      	ldr	r3, [pc, #200]	; (800cc6c <__swsetup_r+0xcc>)
 800cba2:	b570      	push	{r4, r5, r6, lr}
 800cba4:	681d      	ldr	r5, [r3, #0]
 800cba6:	4606      	mov	r6, r0
 800cba8:	460c      	mov	r4, r1
 800cbaa:	b125      	cbz	r5, 800cbb6 <__swsetup_r+0x16>
 800cbac:	69ab      	ldr	r3, [r5, #24]
 800cbae:	b913      	cbnz	r3, 800cbb6 <__swsetup_r+0x16>
 800cbb0:	4628      	mov	r0, r5
 800cbb2:	f000 f985 	bl	800cec0 <__sinit>
 800cbb6:	4b2e      	ldr	r3, [pc, #184]	; (800cc70 <__swsetup_r+0xd0>)
 800cbb8:	429c      	cmp	r4, r3
 800cbba:	d10f      	bne.n	800cbdc <__swsetup_r+0x3c>
 800cbbc:	686c      	ldr	r4, [r5, #4]
 800cbbe:	89a3      	ldrh	r3, [r4, #12]
 800cbc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbc4:	0719      	lsls	r1, r3, #28
 800cbc6:	d42c      	bmi.n	800cc22 <__swsetup_r+0x82>
 800cbc8:	06dd      	lsls	r5, r3, #27
 800cbca:	d411      	bmi.n	800cbf0 <__swsetup_r+0x50>
 800cbcc:	2309      	movs	r3, #9
 800cbce:	6033      	str	r3, [r6, #0]
 800cbd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cbd4:	81a3      	strh	r3, [r4, #12]
 800cbd6:	f04f 30ff 	mov.w	r0, #4294967295
 800cbda:	e03e      	b.n	800cc5a <__swsetup_r+0xba>
 800cbdc:	4b25      	ldr	r3, [pc, #148]	; (800cc74 <__swsetup_r+0xd4>)
 800cbde:	429c      	cmp	r4, r3
 800cbe0:	d101      	bne.n	800cbe6 <__swsetup_r+0x46>
 800cbe2:	68ac      	ldr	r4, [r5, #8]
 800cbe4:	e7eb      	b.n	800cbbe <__swsetup_r+0x1e>
 800cbe6:	4b24      	ldr	r3, [pc, #144]	; (800cc78 <__swsetup_r+0xd8>)
 800cbe8:	429c      	cmp	r4, r3
 800cbea:	bf08      	it	eq
 800cbec:	68ec      	ldreq	r4, [r5, #12]
 800cbee:	e7e6      	b.n	800cbbe <__swsetup_r+0x1e>
 800cbf0:	0758      	lsls	r0, r3, #29
 800cbf2:	d512      	bpl.n	800cc1a <__swsetup_r+0x7a>
 800cbf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbf6:	b141      	cbz	r1, 800cc0a <__swsetup_r+0x6a>
 800cbf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbfc:	4299      	cmp	r1, r3
 800cbfe:	d002      	beq.n	800cc06 <__swsetup_r+0x66>
 800cc00:	4630      	mov	r0, r6
 800cc02:	f7ff fcd5 	bl	800c5b0 <_free_r>
 800cc06:	2300      	movs	r3, #0
 800cc08:	6363      	str	r3, [r4, #52]	; 0x34
 800cc0a:	89a3      	ldrh	r3, [r4, #12]
 800cc0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cc10:	81a3      	strh	r3, [r4, #12]
 800cc12:	2300      	movs	r3, #0
 800cc14:	6063      	str	r3, [r4, #4]
 800cc16:	6923      	ldr	r3, [r4, #16]
 800cc18:	6023      	str	r3, [r4, #0]
 800cc1a:	89a3      	ldrh	r3, [r4, #12]
 800cc1c:	f043 0308 	orr.w	r3, r3, #8
 800cc20:	81a3      	strh	r3, [r4, #12]
 800cc22:	6923      	ldr	r3, [r4, #16]
 800cc24:	b94b      	cbnz	r3, 800cc3a <__swsetup_r+0x9a>
 800cc26:	89a3      	ldrh	r3, [r4, #12]
 800cc28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cc2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc30:	d003      	beq.n	800cc3a <__swsetup_r+0x9a>
 800cc32:	4621      	mov	r1, r4
 800cc34:	4630      	mov	r0, r6
 800cc36:	f000 fa09 	bl	800d04c <__smakebuf_r>
 800cc3a:	89a0      	ldrh	r0, [r4, #12]
 800cc3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc40:	f010 0301 	ands.w	r3, r0, #1
 800cc44:	d00a      	beq.n	800cc5c <__swsetup_r+0xbc>
 800cc46:	2300      	movs	r3, #0
 800cc48:	60a3      	str	r3, [r4, #8]
 800cc4a:	6963      	ldr	r3, [r4, #20]
 800cc4c:	425b      	negs	r3, r3
 800cc4e:	61a3      	str	r3, [r4, #24]
 800cc50:	6923      	ldr	r3, [r4, #16]
 800cc52:	b943      	cbnz	r3, 800cc66 <__swsetup_r+0xc6>
 800cc54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cc58:	d1ba      	bne.n	800cbd0 <__swsetup_r+0x30>
 800cc5a:	bd70      	pop	{r4, r5, r6, pc}
 800cc5c:	0781      	lsls	r1, r0, #30
 800cc5e:	bf58      	it	pl
 800cc60:	6963      	ldrpl	r3, [r4, #20]
 800cc62:	60a3      	str	r3, [r4, #8]
 800cc64:	e7f4      	b.n	800cc50 <__swsetup_r+0xb0>
 800cc66:	2000      	movs	r0, #0
 800cc68:	e7f7      	b.n	800cc5a <__swsetup_r+0xba>
 800cc6a:	bf00      	nop
 800cc6c:	200000e4 	.word	0x200000e4
 800cc70:	0800d83c 	.word	0x0800d83c
 800cc74:	0800d85c 	.word	0x0800d85c
 800cc78:	0800d81c 	.word	0x0800d81c

0800cc7c <abort>:
 800cc7c:	b508      	push	{r3, lr}
 800cc7e:	2006      	movs	r0, #6
 800cc80:	f000 fa4c 	bl	800d11c <raise>
 800cc84:	2001      	movs	r0, #1
 800cc86:	f7f5 faff 	bl	8002288 <_exit>
	...

0800cc8c <__sflush_r>:
 800cc8c:	898a      	ldrh	r2, [r1, #12]
 800cc8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc92:	4605      	mov	r5, r0
 800cc94:	0710      	lsls	r0, r2, #28
 800cc96:	460c      	mov	r4, r1
 800cc98:	d458      	bmi.n	800cd4c <__sflush_r+0xc0>
 800cc9a:	684b      	ldr	r3, [r1, #4]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	dc05      	bgt.n	800ccac <__sflush_r+0x20>
 800cca0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	dc02      	bgt.n	800ccac <__sflush_r+0x20>
 800cca6:	2000      	movs	r0, #0
 800cca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccae:	2e00      	cmp	r6, #0
 800ccb0:	d0f9      	beq.n	800cca6 <__sflush_r+0x1a>
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ccb8:	682f      	ldr	r7, [r5, #0]
 800ccba:	602b      	str	r3, [r5, #0]
 800ccbc:	d032      	beq.n	800cd24 <__sflush_r+0x98>
 800ccbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ccc0:	89a3      	ldrh	r3, [r4, #12]
 800ccc2:	075a      	lsls	r2, r3, #29
 800ccc4:	d505      	bpl.n	800ccd2 <__sflush_r+0x46>
 800ccc6:	6863      	ldr	r3, [r4, #4]
 800ccc8:	1ac0      	subs	r0, r0, r3
 800ccca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cccc:	b10b      	cbz	r3, 800ccd2 <__sflush_r+0x46>
 800ccce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ccd0:	1ac0      	subs	r0, r0, r3
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccd8:	6a21      	ldr	r1, [r4, #32]
 800ccda:	4628      	mov	r0, r5
 800ccdc:	47b0      	blx	r6
 800ccde:	1c43      	adds	r3, r0, #1
 800cce0:	89a3      	ldrh	r3, [r4, #12]
 800cce2:	d106      	bne.n	800ccf2 <__sflush_r+0x66>
 800cce4:	6829      	ldr	r1, [r5, #0]
 800cce6:	291d      	cmp	r1, #29
 800cce8:	d82c      	bhi.n	800cd44 <__sflush_r+0xb8>
 800ccea:	4a2a      	ldr	r2, [pc, #168]	; (800cd94 <__sflush_r+0x108>)
 800ccec:	40ca      	lsrs	r2, r1
 800ccee:	07d6      	lsls	r6, r2, #31
 800ccf0:	d528      	bpl.n	800cd44 <__sflush_r+0xb8>
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	6062      	str	r2, [r4, #4]
 800ccf6:	04d9      	lsls	r1, r3, #19
 800ccf8:	6922      	ldr	r2, [r4, #16]
 800ccfa:	6022      	str	r2, [r4, #0]
 800ccfc:	d504      	bpl.n	800cd08 <__sflush_r+0x7c>
 800ccfe:	1c42      	adds	r2, r0, #1
 800cd00:	d101      	bne.n	800cd06 <__sflush_r+0x7a>
 800cd02:	682b      	ldr	r3, [r5, #0]
 800cd04:	b903      	cbnz	r3, 800cd08 <__sflush_r+0x7c>
 800cd06:	6560      	str	r0, [r4, #84]	; 0x54
 800cd08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd0a:	602f      	str	r7, [r5, #0]
 800cd0c:	2900      	cmp	r1, #0
 800cd0e:	d0ca      	beq.n	800cca6 <__sflush_r+0x1a>
 800cd10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd14:	4299      	cmp	r1, r3
 800cd16:	d002      	beq.n	800cd1e <__sflush_r+0x92>
 800cd18:	4628      	mov	r0, r5
 800cd1a:	f7ff fc49 	bl	800c5b0 <_free_r>
 800cd1e:	2000      	movs	r0, #0
 800cd20:	6360      	str	r0, [r4, #52]	; 0x34
 800cd22:	e7c1      	b.n	800cca8 <__sflush_r+0x1c>
 800cd24:	6a21      	ldr	r1, [r4, #32]
 800cd26:	2301      	movs	r3, #1
 800cd28:	4628      	mov	r0, r5
 800cd2a:	47b0      	blx	r6
 800cd2c:	1c41      	adds	r1, r0, #1
 800cd2e:	d1c7      	bne.n	800ccc0 <__sflush_r+0x34>
 800cd30:	682b      	ldr	r3, [r5, #0]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d0c4      	beq.n	800ccc0 <__sflush_r+0x34>
 800cd36:	2b1d      	cmp	r3, #29
 800cd38:	d001      	beq.n	800cd3e <__sflush_r+0xb2>
 800cd3a:	2b16      	cmp	r3, #22
 800cd3c:	d101      	bne.n	800cd42 <__sflush_r+0xb6>
 800cd3e:	602f      	str	r7, [r5, #0]
 800cd40:	e7b1      	b.n	800cca6 <__sflush_r+0x1a>
 800cd42:	89a3      	ldrh	r3, [r4, #12]
 800cd44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd48:	81a3      	strh	r3, [r4, #12]
 800cd4a:	e7ad      	b.n	800cca8 <__sflush_r+0x1c>
 800cd4c:	690f      	ldr	r7, [r1, #16]
 800cd4e:	2f00      	cmp	r7, #0
 800cd50:	d0a9      	beq.n	800cca6 <__sflush_r+0x1a>
 800cd52:	0793      	lsls	r3, r2, #30
 800cd54:	680e      	ldr	r6, [r1, #0]
 800cd56:	bf08      	it	eq
 800cd58:	694b      	ldreq	r3, [r1, #20]
 800cd5a:	600f      	str	r7, [r1, #0]
 800cd5c:	bf18      	it	ne
 800cd5e:	2300      	movne	r3, #0
 800cd60:	eba6 0807 	sub.w	r8, r6, r7
 800cd64:	608b      	str	r3, [r1, #8]
 800cd66:	f1b8 0f00 	cmp.w	r8, #0
 800cd6a:	dd9c      	ble.n	800cca6 <__sflush_r+0x1a>
 800cd6c:	6a21      	ldr	r1, [r4, #32]
 800cd6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd70:	4643      	mov	r3, r8
 800cd72:	463a      	mov	r2, r7
 800cd74:	4628      	mov	r0, r5
 800cd76:	47b0      	blx	r6
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	dc06      	bgt.n	800cd8a <__sflush_r+0xfe>
 800cd7c:	89a3      	ldrh	r3, [r4, #12]
 800cd7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd82:	81a3      	strh	r3, [r4, #12]
 800cd84:	f04f 30ff 	mov.w	r0, #4294967295
 800cd88:	e78e      	b.n	800cca8 <__sflush_r+0x1c>
 800cd8a:	4407      	add	r7, r0
 800cd8c:	eba8 0800 	sub.w	r8, r8, r0
 800cd90:	e7e9      	b.n	800cd66 <__sflush_r+0xda>
 800cd92:	bf00      	nop
 800cd94:	20400001 	.word	0x20400001

0800cd98 <_fflush_r>:
 800cd98:	b538      	push	{r3, r4, r5, lr}
 800cd9a:	690b      	ldr	r3, [r1, #16]
 800cd9c:	4605      	mov	r5, r0
 800cd9e:	460c      	mov	r4, r1
 800cda0:	b913      	cbnz	r3, 800cda8 <_fflush_r+0x10>
 800cda2:	2500      	movs	r5, #0
 800cda4:	4628      	mov	r0, r5
 800cda6:	bd38      	pop	{r3, r4, r5, pc}
 800cda8:	b118      	cbz	r0, 800cdb2 <_fflush_r+0x1a>
 800cdaa:	6983      	ldr	r3, [r0, #24]
 800cdac:	b90b      	cbnz	r3, 800cdb2 <_fflush_r+0x1a>
 800cdae:	f000 f887 	bl	800cec0 <__sinit>
 800cdb2:	4b14      	ldr	r3, [pc, #80]	; (800ce04 <_fflush_r+0x6c>)
 800cdb4:	429c      	cmp	r4, r3
 800cdb6:	d11b      	bne.n	800cdf0 <_fflush_r+0x58>
 800cdb8:	686c      	ldr	r4, [r5, #4]
 800cdba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d0ef      	beq.n	800cda2 <_fflush_r+0xa>
 800cdc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cdc4:	07d0      	lsls	r0, r2, #31
 800cdc6:	d404      	bmi.n	800cdd2 <_fflush_r+0x3a>
 800cdc8:	0599      	lsls	r1, r3, #22
 800cdca:	d402      	bmi.n	800cdd2 <_fflush_r+0x3a>
 800cdcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdce:	f000 f915 	bl	800cffc <__retarget_lock_acquire_recursive>
 800cdd2:	4628      	mov	r0, r5
 800cdd4:	4621      	mov	r1, r4
 800cdd6:	f7ff ff59 	bl	800cc8c <__sflush_r>
 800cdda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cddc:	07da      	lsls	r2, r3, #31
 800cdde:	4605      	mov	r5, r0
 800cde0:	d4e0      	bmi.n	800cda4 <_fflush_r+0xc>
 800cde2:	89a3      	ldrh	r3, [r4, #12]
 800cde4:	059b      	lsls	r3, r3, #22
 800cde6:	d4dd      	bmi.n	800cda4 <_fflush_r+0xc>
 800cde8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdea:	f000 f908 	bl	800cffe <__retarget_lock_release_recursive>
 800cdee:	e7d9      	b.n	800cda4 <_fflush_r+0xc>
 800cdf0:	4b05      	ldr	r3, [pc, #20]	; (800ce08 <_fflush_r+0x70>)
 800cdf2:	429c      	cmp	r4, r3
 800cdf4:	d101      	bne.n	800cdfa <_fflush_r+0x62>
 800cdf6:	68ac      	ldr	r4, [r5, #8]
 800cdf8:	e7df      	b.n	800cdba <_fflush_r+0x22>
 800cdfa:	4b04      	ldr	r3, [pc, #16]	; (800ce0c <_fflush_r+0x74>)
 800cdfc:	429c      	cmp	r4, r3
 800cdfe:	bf08      	it	eq
 800ce00:	68ec      	ldreq	r4, [r5, #12]
 800ce02:	e7da      	b.n	800cdba <_fflush_r+0x22>
 800ce04:	0800d83c 	.word	0x0800d83c
 800ce08:	0800d85c 	.word	0x0800d85c
 800ce0c:	0800d81c 	.word	0x0800d81c

0800ce10 <std>:
 800ce10:	2300      	movs	r3, #0
 800ce12:	b510      	push	{r4, lr}
 800ce14:	4604      	mov	r4, r0
 800ce16:	e9c0 3300 	strd	r3, r3, [r0]
 800ce1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce1e:	6083      	str	r3, [r0, #8]
 800ce20:	8181      	strh	r1, [r0, #12]
 800ce22:	6643      	str	r3, [r0, #100]	; 0x64
 800ce24:	81c2      	strh	r2, [r0, #14]
 800ce26:	6183      	str	r3, [r0, #24]
 800ce28:	4619      	mov	r1, r3
 800ce2a:	2208      	movs	r2, #8
 800ce2c:	305c      	adds	r0, #92	; 0x5c
 800ce2e:	f7fd fd2d 	bl	800a88c <memset>
 800ce32:	4b05      	ldr	r3, [pc, #20]	; (800ce48 <std+0x38>)
 800ce34:	6263      	str	r3, [r4, #36]	; 0x24
 800ce36:	4b05      	ldr	r3, [pc, #20]	; (800ce4c <std+0x3c>)
 800ce38:	62a3      	str	r3, [r4, #40]	; 0x28
 800ce3a:	4b05      	ldr	r3, [pc, #20]	; (800ce50 <std+0x40>)
 800ce3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ce3e:	4b05      	ldr	r3, [pc, #20]	; (800ce54 <std+0x44>)
 800ce40:	6224      	str	r4, [r4, #32]
 800ce42:	6323      	str	r3, [r4, #48]	; 0x30
 800ce44:	bd10      	pop	{r4, pc}
 800ce46:	bf00      	nop
 800ce48:	0800d155 	.word	0x0800d155
 800ce4c:	0800d177 	.word	0x0800d177
 800ce50:	0800d1af 	.word	0x0800d1af
 800ce54:	0800d1d3 	.word	0x0800d1d3

0800ce58 <_cleanup_r>:
 800ce58:	4901      	ldr	r1, [pc, #4]	; (800ce60 <_cleanup_r+0x8>)
 800ce5a:	f000 b8af 	b.w	800cfbc <_fwalk_reent>
 800ce5e:	bf00      	nop
 800ce60:	0800cd99 	.word	0x0800cd99

0800ce64 <__sfmoreglue>:
 800ce64:	b570      	push	{r4, r5, r6, lr}
 800ce66:	2268      	movs	r2, #104	; 0x68
 800ce68:	1e4d      	subs	r5, r1, #1
 800ce6a:	4355      	muls	r5, r2
 800ce6c:	460e      	mov	r6, r1
 800ce6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ce72:	f7ff fc09 	bl	800c688 <_malloc_r>
 800ce76:	4604      	mov	r4, r0
 800ce78:	b140      	cbz	r0, 800ce8c <__sfmoreglue+0x28>
 800ce7a:	2100      	movs	r1, #0
 800ce7c:	e9c0 1600 	strd	r1, r6, [r0]
 800ce80:	300c      	adds	r0, #12
 800ce82:	60a0      	str	r0, [r4, #8]
 800ce84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ce88:	f7fd fd00 	bl	800a88c <memset>
 800ce8c:	4620      	mov	r0, r4
 800ce8e:	bd70      	pop	{r4, r5, r6, pc}

0800ce90 <__sfp_lock_acquire>:
 800ce90:	4801      	ldr	r0, [pc, #4]	; (800ce98 <__sfp_lock_acquire+0x8>)
 800ce92:	f000 b8b3 	b.w	800cffc <__retarget_lock_acquire_recursive>
 800ce96:	bf00      	nop
 800ce98:	200041a1 	.word	0x200041a1

0800ce9c <__sfp_lock_release>:
 800ce9c:	4801      	ldr	r0, [pc, #4]	; (800cea4 <__sfp_lock_release+0x8>)
 800ce9e:	f000 b8ae 	b.w	800cffe <__retarget_lock_release_recursive>
 800cea2:	bf00      	nop
 800cea4:	200041a1 	.word	0x200041a1

0800cea8 <__sinit_lock_acquire>:
 800cea8:	4801      	ldr	r0, [pc, #4]	; (800ceb0 <__sinit_lock_acquire+0x8>)
 800ceaa:	f000 b8a7 	b.w	800cffc <__retarget_lock_acquire_recursive>
 800ceae:	bf00      	nop
 800ceb0:	200041a2 	.word	0x200041a2

0800ceb4 <__sinit_lock_release>:
 800ceb4:	4801      	ldr	r0, [pc, #4]	; (800cebc <__sinit_lock_release+0x8>)
 800ceb6:	f000 b8a2 	b.w	800cffe <__retarget_lock_release_recursive>
 800ceba:	bf00      	nop
 800cebc:	200041a2 	.word	0x200041a2

0800cec0 <__sinit>:
 800cec0:	b510      	push	{r4, lr}
 800cec2:	4604      	mov	r4, r0
 800cec4:	f7ff fff0 	bl	800cea8 <__sinit_lock_acquire>
 800cec8:	69a3      	ldr	r3, [r4, #24]
 800ceca:	b11b      	cbz	r3, 800ced4 <__sinit+0x14>
 800cecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ced0:	f7ff bff0 	b.w	800ceb4 <__sinit_lock_release>
 800ced4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ced8:	6523      	str	r3, [r4, #80]	; 0x50
 800ceda:	4b13      	ldr	r3, [pc, #76]	; (800cf28 <__sinit+0x68>)
 800cedc:	4a13      	ldr	r2, [pc, #76]	; (800cf2c <__sinit+0x6c>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	62a2      	str	r2, [r4, #40]	; 0x28
 800cee2:	42a3      	cmp	r3, r4
 800cee4:	bf04      	itt	eq
 800cee6:	2301      	moveq	r3, #1
 800cee8:	61a3      	streq	r3, [r4, #24]
 800ceea:	4620      	mov	r0, r4
 800ceec:	f000 f820 	bl	800cf30 <__sfp>
 800cef0:	6060      	str	r0, [r4, #4]
 800cef2:	4620      	mov	r0, r4
 800cef4:	f000 f81c 	bl	800cf30 <__sfp>
 800cef8:	60a0      	str	r0, [r4, #8]
 800cefa:	4620      	mov	r0, r4
 800cefc:	f000 f818 	bl	800cf30 <__sfp>
 800cf00:	2200      	movs	r2, #0
 800cf02:	60e0      	str	r0, [r4, #12]
 800cf04:	2104      	movs	r1, #4
 800cf06:	6860      	ldr	r0, [r4, #4]
 800cf08:	f7ff ff82 	bl	800ce10 <std>
 800cf0c:	68a0      	ldr	r0, [r4, #8]
 800cf0e:	2201      	movs	r2, #1
 800cf10:	2109      	movs	r1, #9
 800cf12:	f7ff ff7d 	bl	800ce10 <std>
 800cf16:	68e0      	ldr	r0, [r4, #12]
 800cf18:	2202      	movs	r2, #2
 800cf1a:	2112      	movs	r1, #18
 800cf1c:	f7ff ff78 	bl	800ce10 <std>
 800cf20:	2301      	movs	r3, #1
 800cf22:	61a3      	str	r3, [r4, #24]
 800cf24:	e7d2      	b.n	800cecc <__sinit+0xc>
 800cf26:	bf00      	nop
 800cf28:	0800d4a4 	.word	0x0800d4a4
 800cf2c:	0800ce59 	.word	0x0800ce59

0800cf30 <__sfp>:
 800cf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf32:	4607      	mov	r7, r0
 800cf34:	f7ff ffac 	bl	800ce90 <__sfp_lock_acquire>
 800cf38:	4b1e      	ldr	r3, [pc, #120]	; (800cfb4 <__sfp+0x84>)
 800cf3a:	681e      	ldr	r6, [r3, #0]
 800cf3c:	69b3      	ldr	r3, [r6, #24]
 800cf3e:	b913      	cbnz	r3, 800cf46 <__sfp+0x16>
 800cf40:	4630      	mov	r0, r6
 800cf42:	f7ff ffbd 	bl	800cec0 <__sinit>
 800cf46:	3648      	adds	r6, #72	; 0x48
 800cf48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cf4c:	3b01      	subs	r3, #1
 800cf4e:	d503      	bpl.n	800cf58 <__sfp+0x28>
 800cf50:	6833      	ldr	r3, [r6, #0]
 800cf52:	b30b      	cbz	r3, 800cf98 <__sfp+0x68>
 800cf54:	6836      	ldr	r6, [r6, #0]
 800cf56:	e7f7      	b.n	800cf48 <__sfp+0x18>
 800cf58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cf5c:	b9d5      	cbnz	r5, 800cf94 <__sfp+0x64>
 800cf5e:	4b16      	ldr	r3, [pc, #88]	; (800cfb8 <__sfp+0x88>)
 800cf60:	60e3      	str	r3, [r4, #12]
 800cf62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cf66:	6665      	str	r5, [r4, #100]	; 0x64
 800cf68:	f000 f847 	bl	800cffa <__retarget_lock_init_recursive>
 800cf6c:	f7ff ff96 	bl	800ce9c <__sfp_lock_release>
 800cf70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cf74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cf78:	6025      	str	r5, [r4, #0]
 800cf7a:	61a5      	str	r5, [r4, #24]
 800cf7c:	2208      	movs	r2, #8
 800cf7e:	4629      	mov	r1, r5
 800cf80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cf84:	f7fd fc82 	bl	800a88c <memset>
 800cf88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cf8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cf90:	4620      	mov	r0, r4
 800cf92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf94:	3468      	adds	r4, #104	; 0x68
 800cf96:	e7d9      	b.n	800cf4c <__sfp+0x1c>
 800cf98:	2104      	movs	r1, #4
 800cf9a:	4638      	mov	r0, r7
 800cf9c:	f7ff ff62 	bl	800ce64 <__sfmoreglue>
 800cfa0:	4604      	mov	r4, r0
 800cfa2:	6030      	str	r0, [r6, #0]
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	d1d5      	bne.n	800cf54 <__sfp+0x24>
 800cfa8:	f7ff ff78 	bl	800ce9c <__sfp_lock_release>
 800cfac:	230c      	movs	r3, #12
 800cfae:	603b      	str	r3, [r7, #0]
 800cfb0:	e7ee      	b.n	800cf90 <__sfp+0x60>
 800cfb2:	bf00      	nop
 800cfb4:	0800d4a4 	.word	0x0800d4a4
 800cfb8:	ffff0001 	.word	0xffff0001

0800cfbc <_fwalk_reent>:
 800cfbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfc0:	4606      	mov	r6, r0
 800cfc2:	4688      	mov	r8, r1
 800cfc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cfc8:	2700      	movs	r7, #0
 800cfca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cfce:	f1b9 0901 	subs.w	r9, r9, #1
 800cfd2:	d505      	bpl.n	800cfe0 <_fwalk_reent+0x24>
 800cfd4:	6824      	ldr	r4, [r4, #0]
 800cfd6:	2c00      	cmp	r4, #0
 800cfd8:	d1f7      	bne.n	800cfca <_fwalk_reent+0xe>
 800cfda:	4638      	mov	r0, r7
 800cfdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfe0:	89ab      	ldrh	r3, [r5, #12]
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	d907      	bls.n	800cff6 <_fwalk_reent+0x3a>
 800cfe6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfea:	3301      	adds	r3, #1
 800cfec:	d003      	beq.n	800cff6 <_fwalk_reent+0x3a>
 800cfee:	4629      	mov	r1, r5
 800cff0:	4630      	mov	r0, r6
 800cff2:	47c0      	blx	r8
 800cff4:	4307      	orrs	r7, r0
 800cff6:	3568      	adds	r5, #104	; 0x68
 800cff8:	e7e9      	b.n	800cfce <_fwalk_reent+0x12>

0800cffa <__retarget_lock_init_recursive>:
 800cffa:	4770      	bx	lr

0800cffc <__retarget_lock_acquire_recursive>:
 800cffc:	4770      	bx	lr

0800cffe <__retarget_lock_release_recursive>:
 800cffe:	4770      	bx	lr

0800d000 <__swhatbuf_r>:
 800d000:	b570      	push	{r4, r5, r6, lr}
 800d002:	460e      	mov	r6, r1
 800d004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d008:	2900      	cmp	r1, #0
 800d00a:	b096      	sub	sp, #88	; 0x58
 800d00c:	4614      	mov	r4, r2
 800d00e:	461d      	mov	r5, r3
 800d010:	da08      	bge.n	800d024 <__swhatbuf_r+0x24>
 800d012:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d016:	2200      	movs	r2, #0
 800d018:	602a      	str	r2, [r5, #0]
 800d01a:	061a      	lsls	r2, r3, #24
 800d01c:	d410      	bmi.n	800d040 <__swhatbuf_r+0x40>
 800d01e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d022:	e00e      	b.n	800d042 <__swhatbuf_r+0x42>
 800d024:	466a      	mov	r2, sp
 800d026:	f000 f8fb 	bl	800d220 <_fstat_r>
 800d02a:	2800      	cmp	r0, #0
 800d02c:	dbf1      	blt.n	800d012 <__swhatbuf_r+0x12>
 800d02e:	9a01      	ldr	r2, [sp, #4]
 800d030:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d034:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d038:	425a      	negs	r2, r3
 800d03a:	415a      	adcs	r2, r3
 800d03c:	602a      	str	r2, [r5, #0]
 800d03e:	e7ee      	b.n	800d01e <__swhatbuf_r+0x1e>
 800d040:	2340      	movs	r3, #64	; 0x40
 800d042:	2000      	movs	r0, #0
 800d044:	6023      	str	r3, [r4, #0]
 800d046:	b016      	add	sp, #88	; 0x58
 800d048:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d04c <__smakebuf_r>:
 800d04c:	898b      	ldrh	r3, [r1, #12]
 800d04e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d050:	079d      	lsls	r5, r3, #30
 800d052:	4606      	mov	r6, r0
 800d054:	460c      	mov	r4, r1
 800d056:	d507      	bpl.n	800d068 <__smakebuf_r+0x1c>
 800d058:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d05c:	6023      	str	r3, [r4, #0]
 800d05e:	6123      	str	r3, [r4, #16]
 800d060:	2301      	movs	r3, #1
 800d062:	6163      	str	r3, [r4, #20]
 800d064:	b002      	add	sp, #8
 800d066:	bd70      	pop	{r4, r5, r6, pc}
 800d068:	ab01      	add	r3, sp, #4
 800d06a:	466a      	mov	r2, sp
 800d06c:	f7ff ffc8 	bl	800d000 <__swhatbuf_r>
 800d070:	9900      	ldr	r1, [sp, #0]
 800d072:	4605      	mov	r5, r0
 800d074:	4630      	mov	r0, r6
 800d076:	f7ff fb07 	bl	800c688 <_malloc_r>
 800d07a:	b948      	cbnz	r0, 800d090 <__smakebuf_r+0x44>
 800d07c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d080:	059a      	lsls	r2, r3, #22
 800d082:	d4ef      	bmi.n	800d064 <__smakebuf_r+0x18>
 800d084:	f023 0303 	bic.w	r3, r3, #3
 800d088:	f043 0302 	orr.w	r3, r3, #2
 800d08c:	81a3      	strh	r3, [r4, #12]
 800d08e:	e7e3      	b.n	800d058 <__smakebuf_r+0xc>
 800d090:	4b0d      	ldr	r3, [pc, #52]	; (800d0c8 <__smakebuf_r+0x7c>)
 800d092:	62b3      	str	r3, [r6, #40]	; 0x28
 800d094:	89a3      	ldrh	r3, [r4, #12]
 800d096:	6020      	str	r0, [r4, #0]
 800d098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d09c:	81a3      	strh	r3, [r4, #12]
 800d09e:	9b00      	ldr	r3, [sp, #0]
 800d0a0:	6163      	str	r3, [r4, #20]
 800d0a2:	9b01      	ldr	r3, [sp, #4]
 800d0a4:	6120      	str	r0, [r4, #16]
 800d0a6:	b15b      	cbz	r3, 800d0c0 <__smakebuf_r+0x74>
 800d0a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0ac:	4630      	mov	r0, r6
 800d0ae:	f000 f8c9 	bl	800d244 <_isatty_r>
 800d0b2:	b128      	cbz	r0, 800d0c0 <__smakebuf_r+0x74>
 800d0b4:	89a3      	ldrh	r3, [r4, #12]
 800d0b6:	f023 0303 	bic.w	r3, r3, #3
 800d0ba:	f043 0301 	orr.w	r3, r3, #1
 800d0be:	81a3      	strh	r3, [r4, #12]
 800d0c0:	89a0      	ldrh	r0, [r4, #12]
 800d0c2:	4305      	orrs	r5, r0
 800d0c4:	81a5      	strh	r5, [r4, #12]
 800d0c6:	e7cd      	b.n	800d064 <__smakebuf_r+0x18>
 800d0c8:	0800ce59 	.word	0x0800ce59

0800d0cc <_raise_r>:
 800d0cc:	291f      	cmp	r1, #31
 800d0ce:	b538      	push	{r3, r4, r5, lr}
 800d0d0:	4604      	mov	r4, r0
 800d0d2:	460d      	mov	r5, r1
 800d0d4:	d904      	bls.n	800d0e0 <_raise_r+0x14>
 800d0d6:	2316      	movs	r3, #22
 800d0d8:	6003      	str	r3, [r0, #0]
 800d0da:	f04f 30ff 	mov.w	r0, #4294967295
 800d0de:	bd38      	pop	{r3, r4, r5, pc}
 800d0e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d0e2:	b112      	cbz	r2, 800d0ea <_raise_r+0x1e>
 800d0e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d0e8:	b94b      	cbnz	r3, 800d0fe <_raise_r+0x32>
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	f000 f830 	bl	800d150 <_getpid_r>
 800d0f0:	462a      	mov	r2, r5
 800d0f2:	4601      	mov	r1, r0
 800d0f4:	4620      	mov	r0, r4
 800d0f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0fa:	f000 b817 	b.w	800d12c <_kill_r>
 800d0fe:	2b01      	cmp	r3, #1
 800d100:	d00a      	beq.n	800d118 <_raise_r+0x4c>
 800d102:	1c59      	adds	r1, r3, #1
 800d104:	d103      	bne.n	800d10e <_raise_r+0x42>
 800d106:	2316      	movs	r3, #22
 800d108:	6003      	str	r3, [r0, #0]
 800d10a:	2001      	movs	r0, #1
 800d10c:	e7e7      	b.n	800d0de <_raise_r+0x12>
 800d10e:	2400      	movs	r4, #0
 800d110:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d114:	4628      	mov	r0, r5
 800d116:	4798      	blx	r3
 800d118:	2000      	movs	r0, #0
 800d11a:	e7e0      	b.n	800d0de <_raise_r+0x12>

0800d11c <raise>:
 800d11c:	4b02      	ldr	r3, [pc, #8]	; (800d128 <raise+0xc>)
 800d11e:	4601      	mov	r1, r0
 800d120:	6818      	ldr	r0, [r3, #0]
 800d122:	f7ff bfd3 	b.w	800d0cc <_raise_r>
 800d126:	bf00      	nop
 800d128:	200000e4 	.word	0x200000e4

0800d12c <_kill_r>:
 800d12c:	b538      	push	{r3, r4, r5, lr}
 800d12e:	4d07      	ldr	r5, [pc, #28]	; (800d14c <_kill_r+0x20>)
 800d130:	2300      	movs	r3, #0
 800d132:	4604      	mov	r4, r0
 800d134:	4608      	mov	r0, r1
 800d136:	4611      	mov	r1, r2
 800d138:	602b      	str	r3, [r5, #0]
 800d13a:	f7f5 f895 	bl	8002268 <_kill>
 800d13e:	1c43      	adds	r3, r0, #1
 800d140:	d102      	bne.n	800d148 <_kill_r+0x1c>
 800d142:	682b      	ldr	r3, [r5, #0]
 800d144:	b103      	cbz	r3, 800d148 <_kill_r+0x1c>
 800d146:	6023      	str	r3, [r4, #0]
 800d148:	bd38      	pop	{r3, r4, r5, pc}
 800d14a:	bf00      	nop
 800d14c:	2000419c 	.word	0x2000419c

0800d150 <_getpid_r>:
 800d150:	f7f5 b882 	b.w	8002258 <_getpid>

0800d154 <__sread>:
 800d154:	b510      	push	{r4, lr}
 800d156:	460c      	mov	r4, r1
 800d158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d15c:	f000 f894 	bl	800d288 <_read_r>
 800d160:	2800      	cmp	r0, #0
 800d162:	bfab      	itete	ge
 800d164:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d166:	89a3      	ldrhlt	r3, [r4, #12]
 800d168:	181b      	addge	r3, r3, r0
 800d16a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d16e:	bfac      	ite	ge
 800d170:	6563      	strge	r3, [r4, #84]	; 0x54
 800d172:	81a3      	strhlt	r3, [r4, #12]
 800d174:	bd10      	pop	{r4, pc}

0800d176 <__swrite>:
 800d176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d17a:	461f      	mov	r7, r3
 800d17c:	898b      	ldrh	r3, [r1, #12]
 800d17e:	05db      	lsls	r3, r3, #23
 800d180:	4605      	mov	r5, r0
 800d182:	460c      	mov	r4, r1
 800d184:	4616      	mov	r6, r2
 800d186:	d505      	bpl.n	800d194 <__swrite+0x1e>
 800d188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d18c:	2302      	movs	r3, #2
 800d18e:	2200      	movs	r2, #0
 800d190:	f000 f868 	bl	800d264 <_lseek_r>
 800d194:	89a3      	ldrh	r3, [r4, #12]
 800d196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d19a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d19e:	81a3      	strh	r3, [r4, #12]
 800d1a0:	4632      	mov	r2, r6
 800d1a2:	463b      	mov	r3, r7
 800d1a4:	4628      	mov	r0, r5
 800d1a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1aa:	f000 b817 	b.w	800d1dc <_write_r>

0800d1ae <__sseek>:
 800d1ae:	b510      	push	{r4, lr}
 800d1b0:	460c      	mov	r4, r1
 800d1b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1b6:	f000 f855 	bl	800d264 <_lseek_r>
 800d1ba:	1c43      	adds	r3, r0, #1
 800d1bc:	89a3      	ldrh	r3, [r4, #12]
 800d1be:	bf15      	itete	ne
 800d1c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800d1c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d1c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d1ca:	81a3      	strheq	r3, [r4, #12]
 800d1cc:	bf18      	it	ne
 800d1ce:	81a3      	strhne	r3, [r4, #12]
 800d1d0:	bd10      	pop	{r4, pc}

0800d1d2 <__sclose>:
 800d1d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1d6:	f000 b813 	b.w	800d200 <_close_r>
	...

0800d1dc <_write_r>:
 800d1dc:	b538      	push	{r3, r4, r5, lr}
 800d1de:	4d07      	ldr	r5, [pc, #28]	; (800d1fc <_write_r+0x20>)
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	4608      	mov	r0, r1
 800d1e4:	4611      	mov	r1, r2
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	602a      	str	r2, [r5, #0]
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	f7f5 f873 	bl	80022d6 <_write>
 800d1f0:	1c43      	adds	r3, r0, #1
 800d1f2:	d102      	bne.n	800d1fa <_write_r+0x1e>
 800d1f4:	682b      	ldr	r3, [r5, #0]
 800d1f6:	b103      	cbz	r3, 800d1fa <_write_r+0x1e>
 800d1f8:	6023      	str	r3, [r4, #0]
 800d1fa:	bd38      	pop	{r3, r4, r5, pc}
 800d1fc:	2000419c 	.word	0x2000419c

0800d200 <_close_r>:
 800d200:	b538      	push	{r3, r4, r5, lr}
 800d202:	4d06      	ldr	r5, [pc, #24]	; (800d21c <_close_r+0x1c>)
 800d204:	2300      	movs	r3, #0
 800d206:	4604      	mov	r4, r0
 800d208:	4608      	mov	r0, r1
 800d20a:	602b      	str	r3, [r5, #0]
 800d20c:	f7f5 f87f 	bl	800230e <_close>
 800d210:	1c43      	adds	r3, r0, #1
 800d212:	d102      	bne.n	800d21a <_close_r+0x1a>
 800d214:	682b      	ldr	r3, [r5, #0]
 800d216:	b103      	cbz	r3, 800d21a <_close_r+0x1a>
 800d218:	6023      	str	r3, [r4, #0]
 800d21a:	bd38      	pop	{r3, r4, r5, pc}
 800d21c:	2000419c 	.word	0x2000419c

0800d220 <_fstat_r>:
 800d220:	b538      	push	{r3, r4, r5, lr}
 800d222:	4d07      	ldr	r5, [pc, #28]	; (800d240 <_fstat_r+0x20>)
 800d224:	2300      	movs	r3, #0
 800d226:	4604      	mov	r4, r0
 800d228:	4608      	mov	r0, r1
 800d22a:	4611      	mov	r1, r2
 800d22c:	602b      	str	r3, [r5, #0]
 800d22e:	f7f5 f87a 	bl	8002326 <_fstat>
 800d232:	1c43      	adds	r3, r0, #1
 800d234:	d102      	bne.n	800d23c <_fstat_r+0x1c>
 800d236:	682b      	ldr	r3, [r5, #0]
 800d238:	b103      	cbz	r3, 800d23c <_fstat_r+0x1c>
 800d23a:	6023      	str	r3, [r4, #0]
 800d23c:	bd38      	pop	{r3, r4, r5, pc}
 800d23e:	bf00      	nop
 800d240:	2000419c 	.word	0x2000419c

0800d244 <_isatty_r>:
 800d244:	b538      	push	{r3, r4, r5, lr}
 800d246:	4d06      	ldr	r5, [pc, #24]	; (800d260 <_isatty_r+0x1c>)
 800d248:	2300      	movs	r3, #0
 800d24a:	4604      	mov	r4, r0
 800d24c:	4608      	mov	r0, r1
 800d24e:	602b      	str	r3, [r5, #0]
 800d250:	f7f5 f879 	bl	8002346 <_isatty>
 800d254:	1c43      	adds	r3, r0, #1
 800d256:	d102      	bne.n	800d25e <_isatty_r+0x1a>
 800d258:	682b      	ldr	r3, [r5, #0]
 800d25a:	b103      	cbz	r3, 800d25e <_isatty_r+0x1a>
 800d25c:	6023      	str	r3, [r4, #0]
 800d25e:	bd38      	pop	{r3, r4, r5, pc}
 800d260:	2000419c 	.word	0x2000419c

0800d264 <_lseek_r>:
 800d264:	b538      	push	{r3, r4, r5, lr}
 800d266:	4d07      	ldr	r5, [pc, #28]	; (800d284 <_lseek_r+0x20>)
 800d268:	4604      	mov	r4, r0
 800d26a:	4608      	mov	r0, r1
 800d26c:	4611      	mov	r1, r2
 800d26e:	2200      	movs	r2, #0
 800d270:	602a      	str	r2, [r5, #0]
 800d272:	461a      	mov	r2, r3
 800d274:	f7f5 f872 	bl	800235c <_lseek>
 800d278:	1c43      	adds	r3, r0, #1
 800d27a:	d102      	bne.n	800d282 <_lseek_r+0x1e>
 800d27c:	682b      	ldr	r3, [r5, #0]
 800d27e:	b103      	cbz	r3, 800d282 <_lseek_r+0x1e>
 800d280:	6023      	str	r3, [r4, #0]
 800d282:	bd38      	pop	{r3, r4, r5, pc}
 800d284:	2000419c 	.word	0x2000419c

0800d288 <_read_r>:
 800d288:	b538      	push	{r3, r4, r5, lr}
 800d28a:	4d07      	ldr	r5, [pc, #28]	; (800d2a8 <_read_r+0x20>)
 800d28c:	4604      	mov	r4, r0
 800d28e:	4608      	mov	r0, r1
 800d290:	4611      	mov	r1, r2
 800d292:	2200      	movs	r2, #0
 800d294:	602a      	str	r2, [r5, #0]
 800d296:	461a      	mov	r2, r3
 800d298:	f7f5 f800 	bl	800229c <_read>
 800d29c:	1c43      	adds	r3, r0, #1
 800d29e:	d102      	bne.n	800d2a6 <_read_r+0x1e>
 800d2a0:	682b      	ldr	r3, [r5, #0]
 800d2a2:	b103      	cbz	r3, 800d2a6 <_read_r+0x1e>
 800d2a4:	6023      	str	r3, [r4, #0]
 800d2a6:	bd38      	pop	{r3, r4, r5, pc}
 800d2a8:	2000419c 	.word	0x2000419c
 800d2ac:	00000000 	.word	0x00000000

0800d2b0 <cbrt>:
 800d2b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2b4:	ec51 0b10 	vmov	r0, r1, d0
 800d2b8:	4a5b      	ldr	r2, [pc, #364]	; (800d428 <cbrt+0x178>)
 800d2ba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	ed2d 8b02 	vpush	{d8}
 800d2c4:	ee10 2a10 	vmov	r2, s0
 800d2c8:	468a      	mov	sl, r1
 800d2ca:	d908      	bls.n	800d2de <cbrt+0x2e>
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	f7f2 ffe5 	bl	800029c <__adddf3>
 800d2d2:	ecbd 8b02 	vpop	{d8}
 800d2d6:	ec41 0b10 	vmov	d0, r0, r1
 800d2da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2de:	431a      	orrs	r2, r3
 800d2e0:	d0f7      	beq.n	800d2d2 <cbrt+0x22>
 800d2e2:	4a52      	ldr	r2, [pc, #328]	; (800d42c <cbrt+0x17c>)
 800d2e4:	ea0a 0202 	and.w	r2, sl, r2
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	4604      	mov	r4, r0
 800d2ec:	461d      	mov	r5, r3
 800d2ee:	2a00      	cmp	r2, #0
 800d2f0:	d17b      	bne.n	800d3ea <cbrt+0x13a>
 800d2f2:	4b4f      	ldr	r3, [pc, #316]	; (800d430 <cbrt+0x180>)
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	f7f3 f987 	bl	8000608 <__aeabi_dmul>
 800d2fa:	2203      	movs	r2, #3
 800d2fc:	fbb1 f3f2 	udiv	r3, r1, r2
 800d300:	f103 5725 	add.w	r7, r3, #692060160	; 0x29400000
 800d304:	f507 177d 	add.w	r7, r7, #4145152	; 0x3f4000
 800d308:	f507 5762 	add.w	r7, r7, #14464	; 0x3880
 800d30c:	4606      	mov	r6, r0
 800d30e:	3713      	adds	r7, #19
 800d310:	4632      	mov	r2, r6
 800d312:	463b      	mov	r3, r7
 800d314:	4630      	mov	r0, r6
 800d316:	4639      	mov	r1, r7
 800d318:	f7f3 f976 	bl	8000608 <__aeabi_dmul>
 800d31c:	4622      	mov	r2, r4
 800d31e:	462b      	mov	r3, r5
 800d320:	f7f3 fa9c 	bl	800085c <__aeabi_ddiv>
 800d324:	4632      	mov	r2, r6
 800d326:	463b      	mov	r3, r7
 800d328:	f7f3 f96e 	bl	8000608 <__aeabi_dmul>
 800d32c:	a334      	add	r3, pc, #208	; (adr r3, 800d400 <cbrt+0x150>)
 800d32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d332:	f7f2 ffb3 	bl	800029c <__adddf3>
 800d336:	a334      	add	r3, pc, #208	; (adr r3, 800d408 <cbrt+0x158>)
 800d338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33c:	4680      	mov	r8, r0
 800d33e:	4689      	mov	r9, r1
 800d340:	f7f2 ffac 	bl	800029c <__adddf3>
 800d344:	4642      	mov	r2, r8
 800d346:	464b      	mov	r3, r9
 800d348:	ec41 0b18 	vmov	d8, r0, r1
 800d34c:	a130      	add	r1, pc, #192	; (adr r1, 800d410 <cbrt+0x160>)
 800d34e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d352:	f7f3 fa83 	bl	800085c <__aeabi_ddiv>
 800d356:	4602      	mov	r2, r0
 800d358:	460b      	mov	r3, r1
 800d35a:	ec51 0b18 	vmov	r0, r1, d8
 800d35e:	f7f2 ff9d 	bl	800029c <__adddf3>
 800d362:	4602      	mov	r2, r0
 800d364:	460b      	mov	r3, r1
 800d366:	a12c      	add	r1, pc, #176	; (adr r1, 800d418 <cbrt+0x168>)
 800d368:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d36c:	f7f3 fa76 	bl	800085c <__aeabi_ddiv>
 800d370:	a32b      	add	r3, pc, #172	; (adr r3, 800d420 <cbrt+0x170>)
 800d372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d376:	f7f2 ff91 	bl	800029c <__adddf3>
 800d37a:	4632      	mov	r2, r6
 800d37c:	463b      	mov	r3, r7
 800d37e:	f7f3 f943 	bl	8000608 <__aeabi_dmul>
 800d382:	2600      	movs	r6, #0
 800d384:	1c4f      	adds	r7, r1, #1
 800d386:	4632      	mov	r2, r6
 800d388:	463b      	mov	r3, r7
 800d38a:	4630      	mov	r0, r6
 800d38c:	4639      	mov	r1, r7
 800d38e:	f7f3 f93b 	bl	8000608 <__aeabi_dmul>
 800d392:	4602      	mov	r2, r0
 800d394:	460b      	mov	r3, r1
 800d396:	4620      	mov	r0, r4
 800d398:	4629      	mov	r1, r5
 800d39a:	f7f3 fa5f 	bl	800085c <__aeabi_ddiv>
 800d39e:	4632      	mov	r2, r6
 800d3a0:	463b      	mov	r3, r7
 800d3a2:	4680      	mov	r8, r0
 800d3a4:	4689      	mov	r9, r1
 800d3a6:	f7f2 ff77 	bl	8000298 <__aeabi_dsub>
 800d3aa:	4632      	mov	r2, r6
 800d3ac:	460d      	mov	r5, r1
 800d3ae:	4604      	mov	r4, r0
 800d3b0:	463b      	mov	r3, r7
 800d3b2:	4630      	mov	r0, r6
 800d3b4:	4639      	mov	r1, r7
 800d3b6:	f7f2 ff71 	bl	800029c <__adddf3>
 800d3ba:	4642      	mov	r2, r8
 800d3bc:	464b      	mov	r3, r9
 800d3be:	f7f2 ff6d 	bl	800029c <__adddf3>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	4620      	mov	r0, r4
 800d3c8:	4629      	mov	r1, r5
 800d3ca:	f7f3 fa47 	bl	800085c <__aeabi_ddiv>
 800d3ce:	4632      	mov	r2, r6
 800d3d0:	463b      	mov	r3, r7
 800d3d2:	f7f3 f919 	bl	8000608 <__aeabi_dmul>
 800d3d6:	463b      	mov	r3, r7
 800d3d8:	4632      	mov	r2, r6
 800d3da:	f7f2 ff5f 	bl	800029c <__adddf3>
 800d3de:	f00a 4300 	and.w	r3, sl, #2147483648	; 0x80000000
 800d3e2:	ea43 0501 	orr.w	r5, r3, r1
 800d3e6:	4629      	mov	r1, r5
 800d3e8:	e773      	b.n	800d2d2 <cbrt+0x22>
 800d3ea:	2203      	movs	r2, #3
 800d3ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3f0:	f103 572c 	add.w	r7, r3, #721420288	; 0x2b000000
 800d3f4:	f5a7 07c1 	sub.w	r7, r7, #6324224	; 0x608000
 800d3f8:	2600      	movs	r6, #0
 800d3fa:	f2a7 776d 	subw	r7, r7, #1901	; 0x76d
 800d3fe:	e787      	b.n	800d310 <cbrt+0x60>
 800d400:	f15f15f1 	.word	0xf15f15f1
 800d404:	3fe15f15 	.word	0x3fe15f15
 800d408:	0ea0ea0f 	.word	0x0ea0ea0f
 800d40c:	3ff6a0ea 	.word	0x3ff6a0ea
 800d410:	2532c834 	.word	0x2532c834
 800d414:	bfe691de 	.word	0xbfe691de
 800d418:	6db6db6e 	.word	0x6db6db6e
 800d41c:	3ff9b6db 	.word	0x3ff9b6db
 800d420:	b6db6db7 	.word	0xb6db6db7
 800d424:	3fd6db6d 	.word	0x3fd6db6d
 800d428:	7fefffff 	.word	0x7fefffff
 800d42c:	7ff00000 	.word	0x7ff00000
 800d430:	43500000 	.word	0x43500000

0800d434 <_init>:
 800d434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d436:	bf00      	nop
 800d438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d43a:	bc08      	pop	{r3}
 800d43c:	469e      	mov	lr, r3
 800d43e:	4770      	bx	lr

0800d440 <_fini>:
 800d440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d442:	bf00      	nop
 800d444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d446:	bc08      	pop	{r3}
 800d448:	469e      	mov	lr, r3
 800d44a:	4770      	bx	lr
