
RowerPlusFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800d848  0800d848  0001d848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc74  0800dc74  000202f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc74  0800dc74  0001dc74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc7c  0800dc7c  000202f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc7c  0800dc7c  0001dc7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc80  0800dc80  0001dc80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f0  20000000  0800dc84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003704  200002f0  0800df74  000202f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200039f4  0800df74  000239f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c667  00000000  00000000  0002031e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043fa  00000000  00000000  0003c985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001840  00000000  00000000  00040d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001668  00000000  00000000  000425c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb24  00000000  00000000  00043c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ee2b  00000000  00000000  0005f74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096a8b  00000000  00000000  0007e577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  00115002  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007500  00000000  00000000  001150c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00001360  00000000  00000000  0011c5c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002f0 	.word	0x200002f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d82c 	.word	0x0800d82c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002f4 	.word	0x200002f4
 80001dc:	0800d82c 	.word	0x0800d82c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <storage_write>:
} storage_internal_data_t;

storage_internal_data_t int_data = {0};

void storage_write(storage_data_t* data)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af04      	add	r7, sp, #16
 8000f62:	6078      	str	r0, [r7, #4]
	memset(&int_data, 0, sizeof(storage_internal_data_t));
 8000f64:	2210      	movs	r2, #16
 8000f66:	2100      	movs	r1, #0
 8000f68:	481f      	ldr	r0, [pc, #124]	; (8000fe8 <storage_write+0x8c>)
 8000f6a:	f009 fe8b 	bl	800ac84 <memset>
	int_data.ka = data->ka;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <storage_write+0x8c>)
 8000f74:	6013      	str	r3, [r2, #0]
	int_data.km = data->km;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <storage_write+0x8c>)
 8000f7c:	6053      	str	r3, [r2, #4]
	int_data.ks = data->ks;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <storage_write+0x8c>)
 8000f84:	6093      	str	r3, [r2, #8]

	for(uint32_t i = 0; i < sizeof(storage_internal_data_t); i++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	e013      	b.n	8000fb4 <storage_write+0x58>
	{
		if(i != 12 && i != 13)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2b0c      	cmp	r3, #12
 8000f90:	d00d      	beq.n	8000fae <storage_write+0x52>
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2b0d      	cmp	r3, #13
 8000f96:	d00a      	beq.n	8000fae <storage_write+0x52>
		{
			int_data.checksum += ((char*)&int_data)[i];
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <storage_write+0x8c>)
 8000f9a:	899a      	ldrh	r2, [r3, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4912      	ldr	r1, [pc, #72]	; (8000fe8 <storage_write+0x8c>)
 8000fa0:	440b      	add	r3, r1
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <storage_write+0x8c>)
 8000fac:	819a      	strh	r2, [r3, #12]
	for(uint32_t i = 0; i < sizeof(storage_internal_data_t); i++)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b0f      	cmp	r3, #15
 8000fb8:	d9e8      	bls.n	8000f8c <storage_write+0x30>
		}
	}

	int_data.checksum += 10;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <storage_write+0x8c>)
 8000fbc:	899b      	ldrh	r3, [r3, #12]
 8000fbe:	330a      	adds	r3, #10
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <storage_write+0x8c>)
 8000fc4:	819a      	strh	r2, [r3, #12]

	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, 0, 2, &int_data, sizeof(storage_internal_data_t), 100);
 8000fc6:	2364      	movs	r3, #100	; 0x64
 8000fc8:	9302      	str	r3, [sp, #8]
 8000fca:	2310      	movs	r3, #16
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <storage_write+0x8c>)
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	21a0      	movs	r1, #160	; 0xa0
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <storage_write+0x90>)
 8000fda:	f002 f84d 	bl	8003078 <HAL_I2C_Mem_Write>
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	2000030c 	.word	0x2000030c
 8000fec:	2000269c 	.word	0x2000269c

08000ff0 <storage_read>:

BOOL storage_read(storage_data_t* output)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	6078      	str	r0, [r7, #4]
	memset(&int_data, 0, sizeof(storage_internal_data_t));
 8000ff8:	2210      	movs	r2, #16
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4821      	ldr	r0, [pc, #132]	; (8001084 <storage_read+0x94>)
 8000ffe:	f009 fe41 	bl	800ac84 <memset>
	if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, 0, 2, &int_data, sizeof(storage_internal_data_t), 100) == HAL_OK)
 8001002:	2364      	movs	r3, #100	; 0x64
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	2310      	movs	r3, #16
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <storage_read+0x94>)
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2302      	movs	r3, #2
 8001010:	2200      	movs	r2, #0
 8001012:	21a0      	movs	r1, #160	; 0xa0
 8001014:	481c      	ldr	r0, [pc, #112]	; (8001088 <storage_read+0x98>)
 8001016:	f002 f929 	bl	800326c <HAL_I2C_Mem_Read>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d12b      	bne.n	8001078 <storage_read+0x88>
	{
		uint16_t checksum = 10;
 8001020:	230a      	movs	r3, #10
 8001022:	81fb      	strh	r3, [r7, #14]

		for(uint32_t i = 0; i < sizeof(storage_internal_data_t); i++)
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	e010      	b.n	800104c <storage_read+0x5c>
		{
			if(i != 12 && i != 13)
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	2b0c      	cmp	r3, #12
 800102e:	d00a      	beq.n	8001046 <storage_read+0x56>
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b0d      	cmp	r3, #13
 8001034:	d007      	beq.n	8001046 <storage_read+0x56>
			{
				checksum += ((char*)&int_data)[i];
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	4a12      	ldr	r2, [pc, #72]	; (8001084 <storage_read+0x94>)
 800103a:	4413      	add	r3, r2
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b29a      	uxth	r2, r3
 8001040:	89fb      	ldrh	r3, [r7, #14]
 8001042:	4413      	add	r3, r2
 8001044:	81fb      	strh	r3, [r7, #14]
		for(uint32_t i = 0; i < sizeof(storage_internal_data_t); i++)
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	3301      	adds	r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	2b0f      	cmp	r3, #15
 8001050:	d9eb      	bls.n	800102a <storage_read+0x3a>
			}
		}

		if(checksum == int_data.checksum)
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <storage_read+0x94>)
 8001054:	899b      	ldrh	r3, [r3, #12]
 8001056:	89fa      	ldrh	r2, [r7, #14]
 8001058:	429a      	cmp	r2, r3
 800105a:	d10d      	bne.n	8001078 <storage_read+0x88>
		{
			output->ka = int_data.ka;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <storage_read+0x94>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	601a      	str	r2, [r3, #0]
			output->km = int_data.km;
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <storage_read+0x94>)
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	605a      	str	r2, [r3, #4]
			output->ks = int_data.ks;
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <storage_read+0x94>)
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	609a      	str	r2, [r3, #8]

			return TRUE;
 8001074:	2301      	movs	r3, #1
 8001076:	e000      	b.n	800107a <storage_read+0x8a>
		}
	}

	return FALSE;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000030c 	.word	0x2000030c
 8001088:	2000269c 	.word	0x2000269c

0800108c <fixed_vector_f_push_back>:
void fixed_vector_st_shift_l(fixed_vector_float_t* fixed_vector);

// =================================================

BOOL fixed_vector_f_push_back(fixed_vector_float_t* fixed_vector, float value)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	ed87 0a00 	vstr	s0, [r7]
	if(fixed_vector->size < FIXED_VECTOR_SIZE)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800109e:	2b7f      	cmp	r3, #127	; 0x7f
 80010a0:	d810      	bhi.n	80010c4 <fixed_vector_f_push_back+0x38>
	{
		fixed_vector->buffer[fixed_vector->size] = value;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	4413      	add	r3, r2
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	601a      	str	r2, [r3, #0]
		fixed_vector->size++;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80010b8:	1c5a      	adds	r2, r3, #1
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		return TRUE;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e000      	b.n	80010c6 <fixed_vector_f_push_back+0x3a>
	}
	return FALSE;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <fixed_vector_st_push_back>:
BOOL fixed_vector_st_push_back(fixed_vector_systemtime_t* fixed_vector, const systemtime_t* value)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]
	if(fixed_vector->size < FIXED_VECTOR_SIZE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80010e2:	2b7f      	cmp	r3, #127	; 0x7f
 80010e4:	d813      	bhi.n	800110e <fixed_vector_st_push_back+0x3c>
	{
		memcpy(&fixed_vector->buffer[fixed_vector->size], value, sizeof(systemtime_t));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	2208      	movs	r2, #8
 80010f4:	6839      	ldr	r1, [r7, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f009 fdb6 	bl	800ac68 <memcpy>
		fixed_vector->size++;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

		return TRUE;
 800110a:	2301      	movs	r3, #1
 800110c:	e000      	b.n	8001110 <fixed_vector_st_push_back+0x3e>
	}
	return FALSE;
 800110e:	2300      	movs	r3, #0
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <fixed_vector_f_get>:
	}
	return FALSE;
}

float* fixed_vector_f_get(fixed_vector_float_t* fixed_vector, size_t index)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
	if(index < fixed_vector->size)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d204      	bcs.n	8001138 <fixed_vector_f_get+0x20>
	{
		return &fixed_vector->buffer[index];
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	e000      	b.n	800113a <fixed_vector_f_get+0x22>
	}
	return NULL;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <fixed_vector_st_get>:
systemtime_t* fixed_vector_st_get(fixed_vector_systemtime_t* fixed_vector, size_t index)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
	if(index < fixed_vector->size)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	429a      	cmp	r2, r3
 800115a:	d204      	bcs.n	8001166 <fixed_vector_st_get+0x20>
	{
		return &fixed_vector->buffer[index];
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	4413      	add	r3, r2
 8001164:	e000      	b.n	8001168 <fixed_vector_st_get+0x22>
	}
	return NULL;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <fixed_vector_f_clear>:
{
	return fixed_vector->size;
}

void fixed_vector_f_clear(fixed_vector_float_t* fixed_vector)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	fixed_vector->size = 0;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <fixed_vector_st_clear>:
void fixed_vector_st_clear(fixed_vector_systemtime_t* fixed_vector)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	fixed_vector->size = 0;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <hall_parser_init>:
extern TIM_HandleTypeDef htim2;

ergometer_stroke_params_t stroke_params = {0};

void hall_parser_init()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af02      	add	r7, sp, #8
	arm_fir_init_f32(&fir_instance, ANGULAR_VELOCITY_FIR_COEFFS_SIZE, fir_coefficients, fir_state_buffer, FIR_BLOCK_SIZE);
 80011b2:	2340      	movs	r3, #64	; 0x40
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <hall_parser_init+0x1c>)
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <hall_parser_init+0x20>)
 80011ba:	2104      	movs	r1, #4
 80011bc:	4804      	ldr	r0, [pc, #16]	; (80011d0 <hall_parser_init+0x24>)
 80011be:	f009 fd17 	bl	800abf0 <arm_fir_init_f32>
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000328 	.word	0x20000328
 80011cc:	20000000 	.word	0x20000000
 80011d0:	2000031c 	.word	0x2000031c

080011d4 <hall_parser_push_trigger>:

void hall_parser_push_trigger(hall_parser_t* parser)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	systemtime_get_time(&system_time);
 80011dc:	4825      	ldr	r0, [pc, #148]	; (8001274 <hall_parser_push_trigger+0xa0>)
 80011de:	f001 fa4d 	bl	800267c <systemtime_get_time>
	uint32_t delta_t = systemtime_time_diff_us(&system_time, fixed_vector_st_get(&parser->angular_velocities_times, parser->angular_velocities_times.size - 1));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f503 7206 	add.w	r2, r3, #536	; 0x218
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f8d3 3618 	ldr.w	r3, [r3, #1560]	; 0x618
 80011ee:	3b01      	subs	r3, #1
 80011f0:	4619      	mov	r1, r3
 80011f2:	4610      	mov	r0, r2
 80011f4:	f7ff ffa7 	bl	8001146 <fixed_vector_st_get>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4619      	mov	r1, r3
 80011fc:	481d      	ldr	r0, [pc, #116]	; (8001274 <hall_parser_push_trigger+0xa0>)
 80011fe:	f001 fa55 	bl	80026ac <systemtime_time_diff_us>
 8001202:	60f8      	str	r0, [r7, #12]

	float w = (float)ANG_VEL_NUMERATOR/delta_t;
 8001204:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001278 <hall_parser_push_trigger+0xa4>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	ee07 3a90 	vmov	s15, r3
 800120e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001216:	edc7 7a02 	vstr	s15, [r7, #8]

	if(w > ANGULAR_VELOCITY_MAX_LIMIT)
 800121a:	edd7 7a02 	vldr	s15, [r7, #8]
 800121e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800127c <hall_parser_push_trigger+0xa8>
 8001222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800122a:	dc1f      	bgt.n	800126c <hall_parser_push_trigger+0x98>
	{
		return;
	}

	fixed_vector_f_push_back(&parser->angular_velocities, w);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3314      	adds	r3, #20
 8001230:	ed97 0a02 	vldr	s0, [r7, #8]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff29 	bl	800108c <fixed_vector_f_push_back>
	fixed_vector_st_push_back(&parser->angular_velocities_times, &system_time);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8001240:	490c      	ldr	r1, [pc, #48]	; (8001274 <hall_parser_push_trigger+0xa0>)
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff ff45 	bl	80010d2 <fixed_vector_st_push_back>

	if(parser->angular_velocities_times.size >= 4 && w > ANGULAR_VELOCITY_MIN_LIMIT)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f8d3 3618 	ldr.w	r3, [r3, #1560]	; 0x618
 800124e:	2b03      	cmp	r3, #3
 8001250:	d90d      	bls.n	800126e <hall_parser_push_trigger+0x9a>
 8001252:	edd7 7a02 	vldr	s15, [r7, #8]
 8001256:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800125a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800125e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001262:	dd04      	ble.n	800126e <hall_parser_push_trigger+0x9a>
	{
		angular_velocity_measurement_received(parser);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 f80b 	bl	8001280 <angular_velocity_measurement_received>
 800126a:	e000      	b.n	800126e <hall_parser_push_trigger+0x9a>
		return;
 800126c:	bf00      	nop
	}
}
 800126e:	3710      	adds	r7, #16
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000834 	.word	0x20000834
 8001278:	49bfbf63 	.word	0x49bfbf63
 800127c:	437a0000 	.word	0x437a0000

08001280 <angular_velocity_measurement_received>:

static inline void angular_velocity_measurement_received(hall_parser_t* parser)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	// Apply filter (just averaging the last measurement with the previous ones to remove zig-zag from curve)
	float filtered_angular_velocity = get_angular_velocity_filtered(parser);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 fb0b 	bl	80018a4 <get_angular_velocity_filtered>
 800128e:	ed87 0a03 	vstr	s0, [r7, #12]
	fixed_vector_f_push_back(&parser->angular_velocities_filtered, filtered_angular_velocity);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8001298:	ed97 0a03 	vldr	s0, [r7, #12]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fef5 	bl	800108c <fixed_vector_f_push_back>

	parser->angular_velocity_callback(filtered_angular_velocity);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 80012a8:	ed97 0a03 	vldr	s0, [r7, #12]
 80012ac:	4798      	blx	r3

	if(parser->angular_velocities_filtered.size > ANGULAR_VELOCITIES_LAG*2)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 80012b4:	2b06      	cmp	r3, #6
 80012b6:	d93c      	bls.n	8001332 <angular_velocity_measurement_received+0xb2>
	{
		STROKE_STATE new_state = get_stroke_state(parser);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 f83e 	bl	800133a <get_stroke_state>
 80012be:	4603      	mov	r3, r0
 80012c0:	72fb      	strb	r3, [r7, #11]

		if(is_w_a_maximum(parser))//parser->stroke_state == PULLING && new_state == DECELERATING)
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 fbbd 	bl	8001a42 <is_w_a_maximum>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d014      	beq.n	80012f8 <angular_velocity_measurement_received+0x78>
		{
			compute_stroke(parser);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f862 	bl	8001398 <compute_stroke>

			fixed_vector_f_clear(&parser->angular_velocities);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3314      	adds	r3, #20
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff4b 	bl	8001174 <fixed_vector_f_clear>
			fixed_vector_f_clear(&parser->angular_velocities_filtered);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff45 	bl	8001174 <fixed_vector_f_clear>
			fixed_vector_st_clear(&parser->angular_velocities_times);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff4d 	bl	8001190 <fixed_vector_st_clear>
 80012f6:	e019      	b.n	800132c <angular_velocity_measurement_received+0xac>
		} else if (is_w_a_minimum(parser))//(parser->stroke_state == DECELERATING || parser->stroke_state == REST) && new_state == PULLING)
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f000 fb61 	bl	80019c0 <is_w_a_minimum>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d013      	beq.n	800132c <angular_velocity_measurement_received+0xac>
		{
			compute_stroke_params(parser);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 f947 	bl	8001598 <compute_stroke_params>

			fixed_vector_f_clear(&parser->angular_velocities);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3314      	adds	r3, #20
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff30 	bl	8001174 <fixed_vector_f_clear>
			fixed_vector_f_clear(&parser->angular_velocities_filtered);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff2a 	bl	8001174 <fixed_vector_f_clear>
			fixed_vector_st_clear(&parser->angular_velocities_times);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff32 	bl	8001190 <fixed_vector_st_clear>
		}

		parser->stroke_state = new_state;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	7afa      	ldrb	r2, [r7, #11]
 8001330:	701a      	strb	r2, [r3, #0]
	}
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <get_stroke_state>:

static inline STROKE_STATE get_stroke_state(hall_parser_t* parser)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
	if(*fixed_vector_f_get(&parser->angular_velocities, parser->angular_velocities.size-1) > ANGULAR_VELOCITY_ACTIVATION_TRESHOLD)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f103 0214 	add.w	r2, r3, #20
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800134e:	3b01      	subs	r3, #1
 8001350:	4619      	mov	r1, r3
 8001352:	4610      	mov	r0, r2
 8001354:	f7ff fee0 	bl	8001118 <fixed_vector_f_get>
 8001358:	4603      	mov	r3, r0
 800135a:	edd3 7a00 	vldr	s15, [r3]
 800135e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136a:	dd0f      	ble.n	800138c <get_stroke_state+0x52>
		/*
		 * We operate on filtered data to remove the noise that would make the detection
		 * of slope change more difficult
		 */
		//apply_fir(&fir_instance, parser->angular_velocities, parser->angular_velocities_filtered, ANGULAR_VELOCITIES_BUFFER_SIZE);
		if(is_w_a_maximum(parser))
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 fb68 	bl	8001a42 <is_w_a_maximum>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <get_stroke_state+0x42>
		{
			return DECELERATING;
 8001378:	2301      	movs	r3, #1
 800137a:	e008      	b.n	800138e <get_stroke_state+0x54>
		} else if(is_w_a_minimum(parser))
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 fb1f 	bl	80019c0 <is_w_a_minimum>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <get_stroke_state+0x52>
		{
			return PULLING;
 8001388:	2302      	movs	r3, #2
 800138a:	e000      	b.n	800138e <get_stroke_state+0x54>
		}
	}

	return REST;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <compute_stroke>:
		arm_fir_f32(instance, data + i * FIR_BLOCK_SIZE, out_data + i * FIR_BLOCK_SIZE, FIR_BLOCK_SIZE);
	}
}

static inline void compute_stroke(hall_parser_t* parser)
{
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	ed2d 8b02 	vpush	{d8}
 800139e:	b08d      	sub	sp, #52	; 0x34
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	// We discard 3 points at the end because the peak detection has a delay of 3 points
	int to_discard_end = 3;
 80013a4:	2303      	movs	r3, #3
 80013a6:	623b      	str	r3, [r7, #32]

	int points_count = parser->angular_velocities_filtered.size - to_discard_end;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 80013ae:	6a3b      	ldr	r3, [r7, #32]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	61fb      	str	r3, [r7, #28]
	if(points_count > STROKE_PULL_MIN_POINTS)
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	2b07      	cmp	r3, #7
 80013b8:	f340 80dc 	ble.w	8001574 <compute_stroke+0x1dc>
	{
		// If we don't have damping params (kA and kM) we can't go on
		if(parser->damping_constants.has_params == TRUE)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	791b      	ldrb	r3, [r3, #4]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	f040 80d7 	bne.w	8001574 <compute_stroke+0x1dc>
		{
			// Compute the energy spent
			float energy = 0.0f;
 80013c6:	f04f 0300 	mov.w	r3, #0
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
			float distance = 0.0f;
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28

			float ka_c = parser->damping_constants.ka / DISTANCE_CORRELATION_COEFFICIENT;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	ed93 7a02 	vldr	s14, [r3, #8]
 80013d8:	eddf 6a69 	vldr	s13, [pc, #420]	; 8001580 <compute_stroke+0x1e8>
 80013dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e0:	edc7 7a06 	vstr	s15, [r7, #24]
			float km_c = parser->damping_constants.km / DISTANCE_CORRELATION_COEFFICIENT;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80013ea:	eddf 6a65 	vldr	s13, [pc, #404]	; 8001580 <compute_stroke+0x1e8>
 80013ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013f2:	edc7 7a05 	vstr	s15, [r7, #20]
			float ks_c = parser->damping_constants.ks / DISTANCE_CORRELATION_COEFFICIENT;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	ed93 7a04 	vldr	s14, [r3, #16]
 80013fc:	eddf 6a60 	vldr	s13, [pc, #384]	; 8001580 <compute_stroke+0x1e8>
 8001400:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001404:	edc7 7a04 	vstr	s15, [r7, #16]

			for(uint32_t i = 0; i < parser->angular_velocities_filtered.size - 1 - to_discard_end; i++)
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
 800140c:	e059      	b.n	80014c2 <compute_stroke+0x12a>
			{
				energy += compute_energy(parser, *fixed_vector_f_get(&parser->angular_velocities_filtered, i), *fixed_vector_f_get(&parser->angular_velocities_filtered, i-1),
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8001414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fe7e 	bl	8001118 <fixed_vector_f_get>
 800141c:	4603      	mov	r3, r0
 800141e:	ed93 8a00 	vldr	s16, [r3]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f203 621c 	addw	r2, r3, #1564	; 0x61c
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	3b01      	subs	r3, #1
 800142c:	4619      	mov	r1, r3
 800142e:	4610      	mov	r0, r2
 8001430:	f7ff fe72 	bl	8001118 <fixed_vector_f_get>
 8001434:	4603      	mov	r3, r0
 8001436:	edd3 8a00 	vldr	s17, [r3]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8001440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fe7f 	bl	8001146 <fixed_vector_st_get>
 8001448:	4604      	mov	r4, r0
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f503 7206 	add.w	r2, r3, #536	; 0x218
						fixed_vector_st_get(&parser->angular_velocities_times, i), fixed_vector_st_get(&parser->angular_velocities_times, i-1));
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	3b01      	subs	r3, #1
				energy += compute_energy(parser, *fixed_vector_f_get(&parser->angular_velocities_filtered, i), *fixed_vector_f_get(&parser->angular_velocities_filtered, i-1),
 8001454:	4619      	mov	r1, r3
 8001456:	4610      	mov	r0, r2
 8001458:	f7ff fe75 	bl	8001146 <fixed_vector_st_get>
 800145c:	4603      	mov	r3, r0
 800145e:	461a      	mov	r2, r3
 8001460:	4621      	mov	r1, r4
 8001462:	eef0 0a68 	vmov.f32	s1, s17
 8001466:	eeb0 0a48 	vmov.f32	s0, s16
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f9b0 	bl	80017d0 <compute_energy>
 8001470:	eeb0 7a40 	vmov.f32	s14, s0
 8001474:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001478:	ee77 7a87 	vadd.f32	s15, s15, s14
 800147c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				distance += compute_distance(M_PI_2, *fixed_vector_f_get(&parser->angular_velocities_filtered, i), ka_c, km_c, ks_c);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8001486:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fe45 	bl	8001118 <fixed_vector_f_get>
 800148e:	4603      	mov	r3, r0
 8001490:	edd3 7a00 	vldr	s15, [r3]
 8001494:	ed97 2a04 	vldr	s4, [r7, #16]
 8001498:	edd7 1a05 	vldr	s3, [r7, #20]
 800149c:	ed97 1a06 	vldr	s2, [r7, #24]
 80014a0:	eef0 0a67 	vmov.f32	s1, s15
 80014a4:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8001584 <compute_stroke+0x1ec>
 80014a8:	f000 f94a 	bl	8001740 <compute_distance>
 80014ac:	eeb0 7a40 	vmov.f32	s14, s0
 80014b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80014b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014b8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			for(uint32_t i = 0; i < parser->angular_velocities_filtered.size - 1 - to_discard_end; i++)
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	3301      	adds	r3, #1
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	3b01      	subs	r3, #1
 80014ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d39c      	bcc.n	800140e <compute_stroke+0x76>
			}

			// Compute other variables
			uint32_t stroke_time = systemtime_time_diff_us(fixed_vector_st_get(&parser->angular_velocities_times, parser->angular_velocities_times.size - 1 - to_discard_end), fixed_vector_st_get(&parser->angular_velocities_times, 0));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f503 7006 	add.w	r0, r3, #536	; 0x218
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f8d3 2618 	ldr.w	r2, [r3, #1560]	; 0x618
 80014e0:	6a3b      	ldr	r3, [r7, #32]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	3b01      	subs	r3, #1
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff fe2d 	bl	8001146 <fixed_vector_st_get>
 80014ec:	4604      	mov	r4, r0
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80014f4:	2100      	movs	r1, #0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fe25 	bl	8001146 <fixed_vector_st_get>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4619      	mov	r1, r3
 8001500:	4620      	mov	r0, r4
 8001502:	f001 f8d3 	bl	80026ac <systemtime_time_diff_us>
 8001506:	60f8      	str	r0, [r7, #12]
			float mean_power = (float)(1e6*energy) / stroke_time;
 8001508:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800150c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001588 <compute_stroke+0x1f0>
 8001510:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	ee07 3a90 	vmov	s15, r3
 800151a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800151e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001522:	edc7 7a02 	vstr	s15, [r7, #8]

			// Send the stroke results
			stroke_params.energy_j = (4 * energy + 0.35f * stroke_time / 1e6f) / 4187.0f;
 8001526:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800152a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800152e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	ee07 3a90 	vmov	s15, r3
 8001538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800153c:	eddf 6a13 	vldr	s13, [pc, #76]	; 800158c <compute_stroke+0x1f4>
 8001540:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001544:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8001588 <compute_stroke+0x1f0>
 8001548:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800154c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001550:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001590 <compute_stroke+0x1f8>
 8001554:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001558:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <compute_stroke+0x1fc>)
 800155a:	edc3 7a00 	vstr	s15, [r3]
			stroke_params.mean_power = mean_power;
 800155e:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <compute_stroke+0x1fc>)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	6053      	str	r3, [r2, #4]
			stroke_params.distance = distance;
 8001564:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <compute_stroke+0x1fc>)
 8001566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001568:	6093      	str	r3, [r2, #8]
			parser->callback(&stroke_params);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 8001570:	4808      	ldr	r0, [pc, #32]	; (8001594 <compute_stroke+0x1fc>)
 8001572:	4798      	blx	r3
		}
	}
}
 8001574:	bf00      	nop
 8001576:	3734      	adds	r7, #52	; 0x34
 8001578:	46bd      	mov	sp, r7
 800157a:	ecbd 8b02 	vpop	{d8}
 800157e:	bd90      	pop	{r4, r7, pc}
 8001580:	40333333 	.word	0x40333333
 8001584:	3fc90fdb 	.word	0x3fc90fdb
 8001588:	49742400 	.word	0x49742400
 800158c:	3eb33333 	.word	0x3eb33333
 8001590:	4582d800 	.word	0x4582d800
 8001594:	2000083c 	.word	0x2000083c

08001598 <compute_stroke_params>:

static inline void compute_stroke_params(hall_parser_t* parser)
{
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	ed2d 8b02 	vpush	{d8}
 800159e:	b08b      	sub	sp, #44	; 0x2c
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

	// We have to discard:
	// 2 measurements at the beginning (because we're too close to the peak, the flywheel is still subject to external torque)
	// 4 measurements at the end (because we have a couple of points of the next pull phase (due to the filter lag) and the error gets large due to low w)

	int to_discard_begin = 2;
 80015a4:	2302      	movs	r3, #2
 80015a6:	61fb      	str	r3, [r7, #28]
	int to_discard_end = 4;
 80015a8:	2304      	movs	r3, #4
 80015aa:	61bb      	str	r3, [r7, #24]

	// The points used for the regression are the measurements minus the points discarded (for the previous reasons)
	// minus an additional point because having to calculate the angular acceleration (w1 - w0) we have to discard
	// another point
	int regression_count = parser->angular_velocities_filtered.size - to_discard_begin - to_discard_end - 1;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	1ad2      	subs	r2, r2, r3
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	3b01      	subs	r3, #1
 80015bc:	617b      	str	r3, [r7, #20]

	if(regression_count > REGRESSION_MIN_POINTS)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	2b18      	cmp	r3, #24
 80015c2:	f340 80af 	ble.w	8001724 <compute_stroke_params+0x18c>
	{
		int n = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
		for(uint32_t i = to_discard_begin + 1; i < parser->angular_velocities_filtered.size - to_discard_end; i++)
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3301      	adds	r3, #1
 80015ce:	623b      	str	r3, [r7, #32]
 80015d0:	e05a      	b.n	8001688 <compute_stroke_params+0xf0>
		{
			float angular_accel = 1e6f*(*fixed_vector_f_get(&parser->angular_velocities_filtered, i) - *fixed_vector_f_get(&parser->angular_velocities_filtered, i-1))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 80015d8:	6a39      	ldr	r1, [r7, #32]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fd9c 	bl	8001118 <fixed_vector_f_get>
 80015e0:	4603      	mov	r3, r0
 80015e2:	ed93 8a00 	vldr	s16, [r3]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f203 621c 	addw	r2, r3, #1564	; 0x61c
 80015ec:	6a3b      	ldr	r3, [r7, #32]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	4619      	mov	r1, r3
 80015f2:	4610      	mov	r0, r2
 80015f4:	f7ff fd90 	bl	8001118 <fixed_vector_f_get>
 80015f8:	4603      	mov	r3, r0
 80015fa:	edd3 7a00 	vldr	s15, [r3]
 80015fe:	ee78 7a67 	vsub.f32	s15, s16, s15
 8001602:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001730 <compute_stroke_params+0x198>
 8001606:	ee27 8a87 	vmul.f32	s16, s15, s14
																			/ systemtime_time_diff_us(fixed_vector_st_get(&parser->angular_velocities_times, i), fixed_vector_st_get(&parser->angular_velocities_times, i-1));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 8001610:	6a39      	ldr	r1, [r7, #32]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fd97 	bl	8001146 <fixed_vector_st_get>
 8001618:	4604      	mov	r4, r0
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f503 7206 	add.w	r2, r3, #536	; 0x218
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	3b01      	subs	r3, #1
 8001624:	4619      	mov	r1, r3
 8001626:	4610      	mov	r0, r2
 8001628:	f7ff fd8d 	bl	8001146 <fixed_vector_st_get>
 800162c:	4603      	mov	r3, r0
 800162e:	4619      	mov	r1, r3
 8001630:	4620      	mov	r0, r4
 8001632:	f001 f83b 	bl	80026ac <systemtime_time_diff_us>
 8001636:	ee07 0a90 	vmov	s15, r0
 800163a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
			float angular_accel = 1e6f*(*fixed_vector_f_get(&parser->angular_velocities_filtered, i) - *fixed_vector_f_get(&parser->angular_velocities_filtered, i-1))
 800163e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001642:	edc7 7a03 	vstr	s15, [r7, #12]
			if(angular_accel<0) {
 8001646:	edd7 7a03 	vldr	s15, [r7, #12]
 800164a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800164e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001652:	d513      	bpl.n	800167c <compute_stroke_params+0xe4>
				regression_y[n] = angular_accel;
 8001654:	4a37      	ldr	r2, [pc, #220]	; (8001734 <compute_stroke_params+0x19c>)
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	601a      	str	r2, [r3, #0]
				regression_x[n] = *fixed_vector_f_get(&parser->angular_velocities_filtered, i);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8001666:	6a39      	ldr	r1, [r7, #32]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fd55 	bl	8001118 <fixed_vector_f_get>
 800166e:	4603      	mov	r3, r0
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4931      	ldr	r1, [pc, #196]	; (8001738 <compute_stroke_params+0x1a0>)
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	601a      	str	r2, [r3, #0]
			}
			n++;
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	3301      	adds	r3, #1
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
		for(uint32_t i = to_discard_begin + 1; i < parser->angular_velocities_filtered.size - to_discard_end; i++)
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	3301      	adds	r3, #1
 8001686:	623b      	str	r3, [r7, #32]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	6a3a      	ldr	r2, [r7, #32]
 8001694:	429a      	cmp	r2, r3
 8001696:	d39c      	bcc.n	80015d2 <compute_stroke_params+0x3a>
		}

		lms_result_t* result = lms_quadratic(regression_y, regression_x, n);
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	461a      	mov	r2, r3
 800169c:	4926      	ldr	r1, [pc, #152]	; (8001738 <compute_stroke_params+0x1a0>)
 800169e:	4825      	ldr	r0, [pc, #148]	; (8001734 <compute_stroke_params+0x19c>)
 80016a0:	f000 fa10 	bl	8001ac4 <lms_quadratic>
 80016a4:	6138      	str	r0, [r7, #16]

		// Here we check if the regression is good enough through the R2 parameter,
		// otherwise we discard the results
		if(result != NULL && result->r2 > LINREG_R2_MIN_TRESHOLD)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d03b      	beq.n	8001724 <compute_stroke_params+0x18c>
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80016b2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800173c <compute_stroke_params+0x1a4>
 80016b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016be:	dc00      	bgt.n	80016c2 <compute_stroke_params+0x12a>
			sprintf(buffer, "kA=%4.3e,kM=%4.3e,kS=%4.3e,r2=%.3f\r\n", result->c, result->b, result->a, result->r2);
			HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 100);
#endif
		}
	}
}
 80016c0:	e030      	b.n	8001724 <compute_stroke_params+0x18c>
			parser->damping_constants.ka = result->c * parser->params.I;
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f603 032c 	addw	r3, r3, #2092	; 0x82c
 80016ce:	edd3 7a00 	vldr	s15, [r3]
 80016d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	edc3 7a02 	vstr	s15, [r3, #8]
			parser->damping_constants.km = result->b * parser->params.I;
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	ed93 7a01 	vldr	s14, [r3, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f603 032c 	addw	r3, r3, #2092	; 0x82c
 80016e8:	edd3 7a00 	vldr	s15, [r3]
 80016ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	edc3 7a03 	vstr	s15, [r3, #12]
			parser->damping_constants.ks = result->a * parser->params.I;
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	ed93 7a00 	vldr	s14, [r3]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f603 032c 	addw	r3, r3, #2092	; 0x82c
 8001702:	edd3 7a00 	vldr	s15, [r3]
 8001706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	edc3 7a04 	vstr	s15, [r3, #16]
			parser->damping_constants.has_params = TRUE;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	711a      	strb	r2, [r3, #4]
			parser->damping_params_callback(&parser->damping_constants);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	3204      	adds	r2, #4
 8001720:	4610      	mov	r0, r2
 8001722:	4798      	blx	r3
}
 8001724:	bf00      	nop
 8001726:	372c      	adds	r7, #44	; 0x2c
 8001728:	46bd      	mov	sp, r7
 800172a:	ecbd 8b02 	vpop	{d8}
 800172e:	bd90      	pop	{r4, r7, pc}
 8001730:	49742400 	.word	0x49742400
 8001734:	20000634 	.word	0x20000634
 8001738:	20000434 	.word	0x20000434
 800173c:	3f666666 	.word	0x3f666666

08001740 <compute_distance>:

static inline float compute_distance(float angle, float w2, float ka_c, float km_c, float ks_c)
{
 8001740:	b5b0      	push	{r4, r5, r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	ed87 0a05 	vstr	s0, [r7, #20]
 800174a:	edc7 0a04 	vstr	s1, [r7, #16]
 800174e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001752:	edc7 1a02 	vstr	s3, [r7, #8]
 8001756:	ed87 2a01 	vstr	s4, [r7, #4]
	return -(angle * cbrt(ka_c + km_c/w2 + ks_c/sqr(w2)));
 800175a:	6978      	ldr	r0, [r7, #20]
 800175c:	f7fe fefc 	bl	8000558 <__aeabi_f2d>
 8001760:	4604      	mov	r4, r0
 8001762:	460d      	mov	r5, r1
 8001764:	edd7 6a02 	vldr	s13, [r7, #8]
 8001768:	edd7 7a04 	vldr	s15, [r7, #16]
 800176c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001770:	edd7 7a03 	vldr	s15, [r7, #12]
 8001774:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001778:	edd7 7a04 	vldr	s15, [r7, #16]
 800177c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8001780:	ed97 6a01 	vldr	s12, [r7, #4]
 8001784:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800178c:	ee17 0a90 	vmov	r0, s15
 8001790:	f7fe fee2 	bl	8000558 <__aeabi_f2d>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	ec43 2b10 	vmov	d0, r2, r3
 800179c:	f00b ff84 	bl	800d6a8 <cbrt>
 80017a0:	ec53 2b10 	vmov	r2, r3, d0
 80017a4:	4620      	mov	r0, r4
 80017a6:	4629      	mov	r1, r5
 80017a8:	f7fe ff2e 	bl	8000608 <__aeabi_dmul>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4610      	mov	r0, r2
 80017b2:	4619      	mov	r1, r3
 80017b4:	f7ff fa00 	bl	8000bb8 <__aeabi_d2f>
 80017b8:	4603      	mov	r3, r0
 80017ba:	ee07 3a90 	vmov	s15, r3
 80017be:	eef1 7a67 	vneg.f32	s15, s15
}
 80017c2:	eeb0 0a67 	vmov.f32	s0, s15
 80017c6:	3718      	adds	r7, #24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bdb0      	pop	{r4, r5, r7, pc}
 80017cc:	0000      	movs	r0, r0
	...

080017d0 <compute_energy>:

static inline float compute_energy(hall_parser_t* parser, float w2, float w1, systemtime_t* t2, systemtime_t* t1)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	ed2d 8b02 	vpush	{d8}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6178      	str	r0, [r7, #20]
 80017dc:	ed87 0a04 	vstr	s0, [r7, #16]
 80017e0:	edc7 0a03 	vstr	s1, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
	 * dE = dTheta * (I * dw/dt + kA * w^2 + kM * w + kS)
	 * This formula includes a magnetic damping (kM) constant
	 * because the ergometer has two permanent magnets to increase the resistance
	 * and kS accounts for other factors that do not depend on angular velocity
	 */
	if(t2 - t1 > 0)
 80017e8:	68ba      	ldr	r2, [r7, #8]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	dd44      	ble.n	800187c <compute_energy+0xac>
	{
		return
				M_PI_2*(
						parser->params.I *
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f603 032c 	addw	r3, r3, #2092	; 0x82c
 80017f8:	edd3 7a00 	vldr	s15, [r3]
 80017fc:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80018a0 <compute_energy+0xd0>
 8001800:	ee27 7a87 	vmul.f32	s14, s15, s14
						1e6f * (w2 - w1) / systemtime_time_diff_us(t2, t1)
 8001804:	edd7 6a04 	vldr	s13, [r7, #16]
 8001808:	edd7 7a03 	vldr	s15, [r7, #12]
 800180c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001810:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	68b8      	ldr	r0, [r7, #8]
 8001818:	f000 ff48 	bl	80026ac <systemtime_time_diff_us>
 800181c:	ee07 0a90 	vmov	s15, r0
 8001820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001824:	ee88 7a27 	vdiv.f32	s14, s16, s15
						- parser->damping_constants.ka*sqr(w2)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	edd3 6a02 	vldr	s13, [r3, #8]
 800182e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001832:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001836:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800183a:	ee37 7a67 	vsub.f32	s14, s14, s15
		- parser->damping_constants.km*w2
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	edd3 6a03 	vldr	s13, [r3, #12]
 8001844:	edd7 7a04 	vldr	s15, [r7, #16]
 8001848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800184c:	ee37 7a67 	vsub.f32	s14, s14, s15
		- parser->damping_constants.ks
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	edd3 7a04 	vldr	s15, [r3, #16]
 8001856:	ee77 7a67 	vsub.f32	s15, s14, s15
 800185a:	ee17 0a90 	vmov	r0, s15
 800185e:	f7fe fe7b 	bl	8000558 <__aeabi_f2d>
				M_PI_2*(
 8001862:	a30d      	add	r3, pc, #52	; (adr r3, 8001898 <compute_energy+0xc8>)
 8001864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001868:	f7fe fece 	bl	8000608 <__aeabi_dmul>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	f7ff f9a0 	bl	8000bb8 <__aeabi_d2f>
 8001878:	4603      	mov	r3, r0
 800187a:	e001      	b.n	8001880 <compute_energy+0xb0>
				);
	} else
	{
		return 0;
 800187c:	f04f 0300 	mov.w	r3, #0
	}
}
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eeb0 0a67 	vmov.f32	s0, s15
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	ecbd 8b02 	vpop	{d8}
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	f3af 8000 	nop.w
 8001898:	54442d18 	.word	0x54442d18
 800189c:	3ff921fb 	.word	0x3ff921fb
 80018a0:	49742400 	.word	0x49742400

080018a4 <get_angular_velocity_filtered>:

static inline float get_angular_velocity_filtered(hall_parser_t* parser)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	// Averaging with last 3 measurements
	// The n-1 and n-2 coefficients are the same to remove the zig-zag noise

	float fir_val = 0.0f;
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]

	fir_val += 0.3f * *fixed_vector_f_get(&parser->angular_velocities, parser->angular_velocities.size - 1);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f103 0214 	add.w	r2, r3, #20
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80018be:	3b01      	subs	r3, #1
 80018c0:	4619      	mov	r1, r3
 80018c2:	4610      	mov	r0, r2
 80018c4:	f7ff fc28 	bl	8001118 <fixed_vector_f_get>
 80018c8:	4603      	mov	r3, r0
 80018ca:	edd3 7a00 	vldr	s15, [r3]
 80018ce:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80019b4 <get_angular_velocity_filtered+0x110>
 80018d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80018da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018de:	edc7 7a03 	vstr	s15, [r7, #12]

	fir_val += 0.3f * ((parser->angular_velocities.size > 1) ? *fixed_vector_f_get(&parser->angular_velocities, parser->angular_velocities.size - 2) : 0.0f);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d90e      	bls.n	800190a <get_angular_velocity_filtered+0x66>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f103 0214 	add.w	r2, r3, #20
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80018f8:	3b02      	subs	r3, #2
 80018fa:	4619      	mov	r1, r3
 80018fc:	4610      	mov	r0, r2
 80018fe:	f7ff fc0b 	bl	8001118 <fixed_vector_f_get>
 8001902:	4603      	mov	r3, r0
 8001904:	edd3 7a00 	vldr	s15, [r3]
 8001908:	e001      	b.n	800190e <get_angular_velocity_filtered+0x6a>
 800190a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80019b8 <get_angular_velocity_filtered+0x114>
 800190e:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80019b4 <get_angular_velocity_filtered+0x110>
 8001912:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001916:	ed97 7a03 	vldr	s14, [r7, #12]
 800191a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800191e:	edc7 7a03 	vstr	s15, [r7, #12]
	fir_val += 0.2f * ((parser->angular_velocities.size > 2) ? *fixed_vector_f_get(&parser->angular_velocities, parser->angular_velocities.size - 3) : 0.0f);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001928:	2b02      	cmp	r3, #2
 800192a:	d90e      	bls.n	800194a <get_angular_velocity_filtered+0xa6>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f103 0214 	add.w	r2, r3, #20
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001938:	3b03      	subs	r3, #3
 800193a:	4619      	mov	r1, r3
 800193c:	4610      	mov	r0, r2
 800193e:	f7ff fbeb 	bl	8001118 <fixed_vector_f_get>
 8001942:	4603      	mov	r3, r0
 8001944:	edd3 7a00 	vldr	s15, [r3]
 8001948:	e001      	b.n	800194e <get_angular_velocity_filtered+0xaa>
 800194a:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80019b8 <get_angular_velocity_filtered+0x114>
 800194e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80019bc <get_angular_velocity_filtered+0x118>
 8001952:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001956:	ed97 7a03 	vldr	s14, [r7, #12]
 800195a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800195e:	edc7 7a03 	vstr	s15, [r7, #12]
	fir_val += 0.2f * ((parser->angular_velocities.size > 3) ? *fixed_vector_f_get(&parser->angular_velocities, parser->angular_velocities.size - 4) : 0.0f);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001968:	2b03      	cmp	r3, #3
 800196a:	d90e      	bls.n	800198a <get_angular_velocity_filtered+0xe6>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f103 0214 	add.w	r2, r3, #20
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001978:	3b04      	subs	r3, #4
 800197a:	4619      	mov	r1, r3
 800197c:	4610      	mov	r0, r2
 800197e:	f7ff fbcb 	bl	8001118 <fixed_vector_f_get>
 8001982:	4603      	mov	r3, r0
 8001984:	edd3 7a00 	vldr	s15, [r3]
 8001988:	e001      	b.n	800198e <get_angular_velocity_filtered+0xea>
 800198a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80019b8 <get_angular_velocity_filtered+0x114>
 800198e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80019bc <get_angular_velocity_filtered+0x118>
 8001992:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001996:	ed97 7a03 	vldr	s14, [r7, #12]
 800199a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800199e:	edc7 7a03 	vstr	s15, [r7, #12]

	return fir_val;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	ee07 3a90 	vmov	s15, r3
}
 80019a8:	eeb0 0a67 	vmov.f32	s0, s15
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	3e99999a 	.word	0x3e99999a
 80019b8:	00000000 	.word	0x00000000
 80019bc:	3e4ccccd 	.word	0x3e4ccccd

080019c0 <is_w_a_minimum>:

static inline BOOL is_w_a_minimum(hall_parser_t* parser)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	float w = *fixed_vector_f_get(&parser->angular_velocities_filtered, parser->angular_velocities_filtered.size - ANGULAR_VELOCITIES_LAG - 1);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f203 621c 	addw	r2, r3, #1564	; 0x61c
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 80019d4:	3b04      	subs	r3, #4
 80019d6:	4619      	mov	r1, r3
 80019d8:	4610      	mov	r0, r2
 80019da:	f7ff fb9d 	bl	8001118 <fixed_vector_f_get>
 80019de:	4603      	mov	r3, r0
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = parser->angular_velocities_filtered.size - ANGULAR_VELOCITIES_LAG*2 - 1; i < parser->angular_velocities_filtered.size; i++)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 80019ea:	3b07      	subs	r3, #7
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	e01d      	b.n	8001a2c <is_w_a_minimum+0x6c>
	{
		if(i == parser->angular_velocities_filtered.size - ANGULAR_VELOCITIES_LAG - 1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 80019f6:	3b04      	subs	r3, #4
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d012      	beq.n	8001a24 <is_w_a_minimum+0x64>
		{
			continue;
		}
		if(w >= *fixed_vector_f_get(&parser->angular_velocities_filtered, i))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8001a04:	68f9      	ldr	r1, [r7, #12]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fb86 	bl	8001118 <fixed_vector_f_get>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	edd3 7a00 	vldr	s15, [r3]
 8001a12:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1e:	db02      	blt.n	8001a26 <is_w_a_minimum+0x66>
		{
			return FALSE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	e00a      	b.n	8001a3a <is_w_a_minimum+0x7a>
			continue;
 8001a24:	bf00      	nop
	for(uint32_t i = parser->angular_velocities_filtered.size - ANGULAR_VELOCITIES_LAG*2 - 1; i < parser->angular_velocities_filtered.size; i++)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d3db      	bcc.n	80019f0 <is_w_a_minimum+0x30>
		}
	}
	return TRUE;
 8001a38:	2301      	movs	r3, #1
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <is_w_a_maximum>:

static inline BOOL is_w_a_maximum(hall_parser_t* parser)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b084      	sub	sp, #16
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
	float w = *fixed_vector_f_get(&parser->angular_velocities_filtered, parser->angular_velocities_filtered.size - ANGULAR_VELOCITIES_LAG - 1);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f203 621c 	addw	r2, r3, #1564	; 0x61c
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8001a56:	3b04      	subs	r3, #4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	f7ff fb5c 	bl	8001118 <fixed_vector_f_get>
 8001a60:	4603      	mov	r3, r0
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = parser->angular_velocities_filtered.size - ANGULAR_VELOCITIES_LAG*2 - 1; i < parser->angular_velocities_filtered.size; i++)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8001a6c:	3b07      	subs	r3, #7
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	e01d      	b.n	8001aae <is_w_a_maximum+0x6c>
	{
		if(i == parser->angular_velocities_filtered.size - ANGULAR_VELOCITIES_LAG - 1)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8001a78:	3b04      	subs	r3, #4
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d012      	beq.n	8001aa6 <is_w_a_maximum+0x64>
		{
			continue;
		}
		if(w <= *fixed_vector_f_get(&parser->angular_velocities_filtered, i))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 8001a86:	68f9      	ldr	r1, [r7, #12]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fb45 	bl	8001118 <fixed_vector_f_get>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa0:	d802      	bhi.n	8001aa8 <is_w_a_maximum+0x66>
		{
			return FALSE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e00a      	b.n	8001abc <is_w_a_maximum+0x7a>
			continue;
 8001aa6:	bf00      	nop
	for(uint32_t i = parser->angular_velocities_filtered.size - ANGULAR_VELOCITIES_LAG*2 - 1; i < parser->angular_velocities_filtered.size; i++)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d3db      	bcc.n	8001a72 <is_w_a_maximum+0x30>
		}
	}
	return TRUE;
 8001aba:	2301      	movs	r3, #1
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <lms_quadratic>:
arm_matrix_instance_f32 ATMAI_AT;
arm_matrix_instance_f32 B;
arm_matrix_instance_f32 X;

lms_result_t* lms_quadratic(float* y_data, float* x_data, uint32_t size)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
	// A is the matrix with the x values
	// B is the matrix (vector) with the y values
	// X is the matrix with the coefficients

	// X = (At * A)^(-1) * At * B
	arm_mat_init_f32(&A, size, 3, A_m);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	b299      	uxth	r1, r3
 8001ad4:	4b87      	ldr	r3, [pc, #540]	; (8001cf4 <lms_quadratic+0x230>)
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	4887      	ldr	r0, [pc, #540]	; (8001cf8 <lms_quadratic+0x234>)
 8001ada:	f009 f885 	bl	800abe8 <arm_mat_init_f32>
	arm_mat_init_f32(&AT, 3, size, AT_m);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	4b86      	ldr	r3, [pc, #536]	; (8001cfc <lms_quadratic+0x238>)
 8001ae4:	2103      	movs	r1, #3
 8001ae6:	4886      	ldr	r0, [pc, #536]	; (8001d00 <lms_quadratic+0x23c>)
 8001ae8:	f009 f87e 	bl	800abe8 <arm_mat_init_f32>
	arm_mat_init_f32(&ATMA, 3, 3, ATMA_m);
 8001aec:	4b85      	ldr	r3, [pc, #532]	; (8001d04 <lms_quadratic+0x240>)
 8001aee:	2203      	movs	r2, #3
 8001af0:	2103      	movs	r1, #3
 8001af2:	4885      	ldr	r0, [pc, #532]	; (8001d08 <lms_quadratic+0x244>)
 8001af4:	f009 f878 	bl	800abe8 <arm_mat_init_f32>
	arm_mat_init_f32(&ATMAI, 3, 3, ATMAI_m);
 8001af8:	4b84      	ldr	r3, [pc, #528]	; (8001d0c <lms_quadratic+0x248>)
 8001afa:	2203      	movs	r2, #3
 8001afc:	2103      	movs	r1, #3
 8001afe:	4884      	ldr	r0, [pc, #528]	; (8001d10 <lms_quadratic+0x24c>)
 8001b00:	f009 f872 	bl	800abe8 <arm_mat_init_f32>
	arm_mat_init_f32(&ATMAI_AT, 3, size, ATMAI_AT_m);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	4b82      	ldr	r3, [pc, #520]	; (8001d14 <lms_quadratic+0x250>)
 8001b0a:	2103      	movs	r1, #3
 8001b0c:	4882      	ldr	r0, [pc, #520]	; (8001d18 <lms_quadratic+0x254>)
 8001b0e:	f009 f86b 	bl	800abe8 <arm_mat_init_f32>
	arm_mat_init_f32(&B, size, 1, y_data);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	b299      	uxth	r1, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	4880      	ldr	r0, [pc, #512]	; (8001d1c <lms_quadratic+0x258>)
 8001b1c:	f009 f864 	bl	800abe8 <arm_mat_init_f32>
	arm_mat_init_f32(&X, 3, 1, X_m);
 8001b20:	4b7f      	ldr	r3, [pc, #508]	; (8001d20 <lms_quadratic+0x25c>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	2103      	movs	r1, #3
 8001b26:	487f      	ldr	r0, [pc, #508]	; (8001d24 <lms_quadratic+0x260>)
 8001b28:	f009 f85e 	bl	800abe8 <arm_mat_init_f32>

	build_A_mat(x_data, size, A_m);
 8001b2c:	4a71      	ldr	r2, [pc, #452]	; (8001cf4 <lms_quadratic+0x230>)
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	68b8      	ldr	r0, [r7, #8]
 8001b32:	f000 f8fb 	bl	8001d2c <build_A_mat>

	LMS_CHECK_STATUS(arm_mat_trans_f32(&A, &AT));
 8001b36:	4972      	ldr	r1, [pc, #456]	; (8001d00 <lms_quadratic+0x23c>)
 8001b38:	486f      	ldr	r0, [pc, #444]	; (8001cf8 <lms_quadratic+0x234>)
 8001b3a:	f008 fddf 	bl	800a6fc <arm_mat_trans_f32>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <lms_quadratic+0x84>
 8001b44:	2300      	movs	r3, #0
 8001b46:	e0d0      	b.n	8001cea <lms_quadratic+0x226>
	LMS_CHECK_STATUS(arm_mat_mult_f32(&AT, &A, &ATMA));
 8001b48:	4a6f      	ldr	r2, [pc, #444]	; (8001d08 <lms_quadratic+0x244>)
 8001b4a:	496b      	ldr	r1, [pc, #428]	; (8001cf8 <lms_quadratic+0x234>)
 8001b4c:	486c      	ldr	r0, [pc, #432]	; (8001d00 <lms_quadratic+0x23c>)
 8001b4e:	f008 fe49 	bl	800a7e4 <arm_mat_mult_f32>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <lms_quadratic+0x98>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	e0c6      	b.n	8001cea <lms_quadratic+0x226>
	LMS_CHECK_STATUS(arm_mat_inverse_f32(&ATMA, &ATMAI));
 8001b5c:	496c      	ldr	r1, [pc, #432]	; (8001d10 <lms_quadratic+0x24c>)
 8001b5e:	486a      	ldr	r0, [pc, #424]	; (8001d08 <lms_quadratic+0x244>)
 8001b60:	f008 fef8 	bl	800a954 <arm_mat_inverse_f32>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <lms_quadratic+0xaa>
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e0bd      	b.n	8001cea <lms_quadratic+0x226>
	LMS_CHECK_STATUS(arm_mat_mult_f32(&ATMAI, &AT, &ATMAI_AT));
 8001b6e:	4a6a      	ldr	r2, [pc, #424]	; (8001d18 <lms_quadratic+0x254>)
 8001b70:	4963      	ldr	r1, [pc, #396]	; (8001d00 <lms_quadratic+0x23c>)
 8001b72:	4867      	ldr	r0, [pc, #412]	; (8001d10 <lms_quadratic+0x24c>)
 8001b74:	f008 fe36 	bl	800a7e4 <arm_mat_mult_f32>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <lms_quadratic+0xbe>
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e0b3      	b.n	8001cea <lms_quadratic+0x226>
	LMS_CHECK_STATUS(arm_mat_mult_f32(&ATMAI_AT, &B, &X));
 8001b82:	4a68      	ldr	r2, [pc, #416]	; (8001d24 <lms_quadratic+0x260>)
 8001b84:	4965      	ldr	r1, [pc, #404]	; (8001d1c <lms_quadratic+0x258>)
 8001b86:	4864      	ldr	r0, [pc, #400]	; (8001d18 <lms_quadratic+0x254>)
 8001b88:	f008 fe2c 	bl	800a7e4 <arm_mat_mult_f32>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <lms_quadratic+0xd2>
 8001b92:	2300      	movs	r3, #0
 8001b94:	e0a9      	b.n	8001cea <lms_quadratic+0x226>

	float y_avg, ss_res, ss_tot;
	arm_mean_f32(y_data, size, &y_avg);
 8001b96:	f107 0310 	add.w	r3, r7, #16
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f008 fd7a 	bl	800a698 <arm_mean_f32>

	for(uint32_t i = 0; i < size; i++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	e080      	b.n	8001cac <lms_quadratic+0x1e8>
	{
		ss_res += sqr(y_data[i] - (X_m[0] + X_m[1]*A_m[i*3+1] + X_m[2]*A_m[i*3+2]));
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	ed93 7a00 	vldr	s14, [r3]
 8001bb6:	4b5a      	ldr	r3, [pc, #360]	; (8001d20 <lms_quadratic+0x25c>)
 8001bb8:	edd3 6a00 	vldr	s13, [r3]
 8001bbc:	4b58      	ldr	r3, [pc, #352]	; (8001d20 <lms_quadratic+0x25c>)
 8001bbe:	ed93 6a01 	vldr	s12, [r3, #4]
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	3301      	adds	r3, #1
 8001bcc:	4a49      	ldr	r2, [pc, #292]	; (8001cf4 <lms_quadratic+0x230>)
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	edd3 7a00 	vldr	s15, [r3]
 8001bd6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bda:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001bde:	4b50      	ldr	r3, [pc, #320]	; (8001d20 <lms_quadratic+0x25c>)
 8001be0:	ed93 6a02 	vldr	s12, [r3, #8]
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	4613      	mov	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4413      	add	r3, r2
 8001bec:	3302      	adds	r3, #2
 8001bee:	4a41      	ldr	r2, [pc, #260]	; (8001cf4 <lms_quadratic+0x230>)
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	edd3 7a00 	vldr	s15, [r3]
 8001bf8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	edd3 6a00 	vldr	s13, [r3]
 8001c10:	4b43      	ldr	r3, [pc, #268]	; (8001d20 <lms_quadratic+0x25c>)
 8001c12:	ed93 6a00 	vldr	s12, [r3]
 8001c16:	4b42      	ldr	r3, [pc, #264]	; (8001d20 <lms_quadratic+0x25c>)
 8001c18:	edd3 5a01 	vldr	s11, [r3, #4]
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	3301      	adds	r3, #1
 8001c26:	4a33      	ldr	r2, [pc, #204]	; (8001cf4 <lms_quadratic+0x230>)
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	edd3 7a00 	vldr	s15, [r3]
 8001c30:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c34:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c38:	4b39      	ldr	r3, [pc, #228]	; (8001d20 <lms_quadratic+0x25c>)
 8001c3a:	edd3 5a02 	vldr	s11, [r3, #8]
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	4613      	mov	r3, r2
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4413      	add	r3, r2
 8001c46:	3302      	adds	r3, #2
 8001c48:	4a2a      	ldr	r2, [pc, #168]	; (8001cf4 <lms_quadratic+0x230>)
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	edd3 7a00 	vldr	s15, [r3]
 8001c52:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c56:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001c5a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c62:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6a:	edc7 7a07 	vstr	s15, [r7, #28]
		ss_tot += sqr(y_data[i] - y_avg);
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	4413      	add	r3, r2
 8001c76:	ed93 7a00 	vldr	s14, [r3]
 8001c7a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	4413      	add	r3, r2
 8001c8a:	edd3 6a00 	vldr	s13, [r3]
 8001c8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c92:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca2:	edc7 7a06 	vstr	s15, [r7, #24]
	for(uint32_t i = 0; i < size; i++)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	f4ff af7a 	bcc.w	8001baa <lms_quadratic+0xe6>
	}

	lms_result.a = X_m[0];
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <lms_quadratic+0x25c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1b      	ldr	r2, [pc, #108]	; (8001d28 <lms_quadratic+0x264>)
 8001cbc:	6013      	str	r3, [r2, #0]
	lms_result.b = X_m[1];
 8001cbe:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <lms_quadratic+0x25c>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	4a19      	ldr	r2, [pc, #100]	; (8001d28 <lms_quadratic+0x264>)
 8001cc4:	6053      	str	r3, [r2, #4]
	lms_result.c = X_m[2];
 8001cc6:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <lms_quadratic+0x25c>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <lms_quadratic+0x264>)
 8001ccc:	6093      	str	r3, [r2, #8]
	lms_result.r2 = 1 - ss_res/ss_tot;
 8001cce:	edd7 6a07 	vldr	s13, [r7, #28]
 8001cd2:	ed97 7a06 	vldr	s14, [r7, #24]
 8001cd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <lms_quadratic+0x264>)
 8001ce4:	edc3 7a03 	vstr	s15, [r3, #12]

	return &lms_result;
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <lms_quadratic+0x264>)
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3720      	adds	r7, #32
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000848 	.word	0x20000848
 8001cf8:	20002664 	.word	0x20002664
 8001cfc:	20000e48 	.word	0x20000e48
 8001d00:	2000266c 	.word	0x2000266c
 8001d04:	20001448 	.word	0x20001448
 8001d08:	20002674 	.word	0x20002674
 8001d0c:	20001a48 	.word	0x20001a48
 8001d10:	2000267c 	.word	0x2000267c
 8001d14:	20002048 	.word	0x20002048
 8001d18:	20002684 	.word	0x20002684
 8001d1c:	2000268c 	.word	0x2000268c
 8001d20:	20002648 	.word	0x20002648
 8001d24:	20002694 	.word	0x20002694
 8001d28:	20002654 	.word	0x20002654

08001d2c <build_A_mat>:

static inline void build_A_mat(float* x_data, uint32_t size, float* matrix)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
	// Since we want a quadratic fit, we build the A matrix from the x values with:
	// the first column having value 1 (constant coefficient)
	// the second column having value x (linear coefficient)
	// the third one having value x^2 (quadratic coefficient)

	for(uint32_t i = 0; i < size; i++)
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	e033      	b.n	8001da6 <build_A_mat+0x7a>
	{
		matrix[i*3] = 1;
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	4613      	mov	r3, r2
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4413      	add	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d52:	601a      	str	r2, [r3, #0]
		matrix[i*3+1] = x_data[i];
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	18d1      	adds	r1, r2, r3
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	3304      	adds	r3, #4
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	680a      	ldr	r2, [r1, #0]
 8001d6e:	601a      	str	r2, [r3, #0]
		matrix[i*3+2] = sqr(x_data[i]);
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	4413      	add	r3, r2
 8001d78:	ed93 7a00 	vldr	s14, [r3]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	68fa      	ldr	r2, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	edd3 7a00 	vldr	s15, [r3]
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	3308      	adds	r3, #8
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d9c:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t i = 0; i < size; i++)
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	3301      	adds	r3, #1
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d3c7      	bcc.n	8001d3e <build_A_mat+0x12>
	}
}
 8001dae:	bf00      	nop
 8001db0:	bf00      	nop
 8001db2:	371c      	adds	r7, #28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dc0:	f000 fcb8 	bl	8002734 <HAL_Init>
  //HAL_Delay(3000);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dc4:	f000 f854 	bl	8001e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dc8:	f000 f964 	bl	8002094 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001dcc:	f000 f938 	bl	8002040 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001dd0:	f000 f8e6 	bl	8001fa0 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001dd4:	f000 f8b6 	bl	8001f44 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001dd8:	f008 f826 	bl	8009e28 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	hall_parser_init();
 8001ddc:	f7ff f9e6 	bl	80011ac <hall_parser_init>
	memset(&hall_parser, 0, sizeof(hall_parser_t));
 8001de0:	f44f 6203 	mov.w	r2, #2096	; 0x830
 8001de4:	2100      	movs	r1, #0
 8001de6:	4819      	ldr	r0, [pc, #100]	; (8001e4c <main+0x90>)
 8001de8:	f008 ff4c 	bl	800ac84 <memset>

	usb_stroke_data.report_id = 1;
 8001dec:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <main+0x94>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	701a      	strb	r2, [r3, #0]
	usb_angular_velocity_data.report_id = 2;
 8001df2:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <main+0x98>)
 8001df4:	2202      	movs	r2, #2
 8001df6:	701a      	strb	r2, [r3, #0]

	// We check if we have the parameters stored inside the EEPROM
	// If that's the case, we use them straight away
	if(storage_read(&storage_data)) {
 8001df8:	4817      	ldr	r0, [pc, #92]	; (8001e58 <main+0x9c>)
 8001dfa:	f7ff f8f9 	bl	8000ff0 <storage_read>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00e      	beq.n	8001e22 <main+0x66>
		hall_parser.damping_constants.ka = storage_data.ka;
 8001e04:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <main+0x9c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a10      	ldr	r2, [pc, #64]	; (8001e4c <main+0x90>)
 8001e0a:	6093      	str	r3, [r2, #8]
		hall_parser.damping_constants.km = storage_data.km;
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <main+0x9c>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	4a0e      	ldr	r2, [pc, #56]	; (8001e4c <main+0x90>)
 8001e12:	60d3      	str	r3, [r2, #12]
		hall_parser.damping_constants.ks = storage_data.ks;
 8001e14:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <main+0x9c>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4a0c      	ldr	r2, [pc, #48]	; (8001e4c <main+0x90>)
 8001e1a:	6113      	str	r3, [r2, #16]
		hall_parser.damping_constants.has_params = TRUE;
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <main+0x90>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	711a      	strb	r2, [r3, #4]
	}

	hall_parser.callback = ergometer_stroke;
 8001e22:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <main+0x90>)
 8001e24:	4a0d      	ldr	r2, [pc, #52]	; (8001e5c <main+0xa0>)
 8001e26:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
	hall_parser.damping_params_callback = params_received;
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <main+0x90>)
 8001e2c:	4a0c      	ldr	r2, [pc, #48]	; (8001e60 <main+0xa4>)
 8001e2e:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
	hall_parser.angular_velocity_callback = angular_velocity_received;
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <main+0x90>)
 8001e34:	4a0b      	ldr	r2, [pc, #44]	; (8001e64 <main+0xa8>)
 8001e36:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
	hall_parser.params.I = MOMENT_OF_INERTIA;
 8001e3a:	4b04      	ldr	r3, [pc, #16]	; (8001e4c <main+0x90>)
 8001e3c:	f603 032c 	addw	r3, r3, #2092	; 0x82c
 8001e40:	4a09      	ldr	r2, [pc, #36]	; (8001e68 <main+0xac>)
 8001e42:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(&htim1);
 8001e44:	4809      	ldr	r0, [pc, #36]	; (8001e6c <main+0xb0>)
 8001e46:	f003 fedf 	bl	8005c08 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <main+0x8e>
 8001e4c:	2000277c 	.word	0x2000277c
 8001e50:	20002fb8 	.word	0x20002fb8
 8001e54:	20002fc8 	.word	0x20002fc8
 8001e58:	20002fac 	.word	0x20002fac
 8001e5c:	08002161 	.word	0x08002161
 8001e60:	080021e5 	.word	0x080021e5
 8001e64:	08002219 	.word	0x08002219
 8001e68:	3baee200 	.word	0x3baee200
 8001e6c:	200026f0 	.word	0x200026f0

08001e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b094      	sub	sp, #80	; 0x50
 8001e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e76:	f107 0320 	add.w	r3, r7, #32
 8001e7a:	2230      	movs	r2, #48	; 0x30
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f008 ff00 	bl	800ac84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e84:	f107 030c 	add.w	r3, r7, #12
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e94:	2300      	movs	r3, #0
 8001e96:	60bb      	str	r3, [r7, #8]
 8001e98:	4b28      	ldr	r3, [pc, #160]	; (8001f3c <SystemClock_Config+0xcc>)
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	4a27      	ldr	r2, [pc, #156]	; (8001f3c <SystemClock_Config+0xcc>)
 8001e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea4:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <SystemClock_Config+0xcc>)
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	4b22      	ldr	r3, [pc, #136]	; (8001f40 <SystemClock_Config+0xd0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ebc:	4a20      	ldr	r2, [pc, #128]	; (8001f40 <SystemClock_Config+0xd0>)
 8001ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <SystemClock_Config+0xd0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ed4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eda:	2302      	movs	r3, #2
 8001edc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ede:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ee4:	2304      	movs	r3, #4
 8001ee6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ee8:	23a8      	movs	r3, #168	; 0xa8
 8001eea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001eec:	2304      	movs	r3, #4
 8001eee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001ef0:	2307      	movs	r3, #7
 8001ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ef4:	f107 0320 	add.w	r3, r7, #32
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f003 f99d 	bl	8005238 <HAL_RCC_OscConfig>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001f04:	f000 f9a6 	bl	8002254 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f08:	230f      	movs	r3, #15
 8001f0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f10:	2300      	movs	r3, #0
 8001f12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f1e:	f107 030c 	add.w	r3, r7, #12
 8001f22:	2102      	movs	r1, #2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f003 fbff 	bl	8005728 <HAL_RCC_ClockConfig>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001f30:	f000 f990 	bl	8002254 <Error_Handler>
  }
}
 8001f34:	bf00      	nop
 8001f36:	3750      	adds	r7, #80	; 0x50
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40007000 	.word	0x40007000

08001f44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <MX_I2C1_Init+0x50>)
 8001f4a:	4a13      	ldr	r2, [pc, #76]	; (8001f98 <MX_I2C1_Init+0x54>)
 8001f4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f4e:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <MX_I2C1_Init+0x50>)
 8001f50:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <MX_I2C1_Init+0x58>)
 8001f52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f54:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <MX_I2C1_Init+0x50>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <MX_I2C1_Init+0x50>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <MX_I2C1_Init+0x50>)
 8001f62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f68:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <MX_I2C1_Init+0x50>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <MX_I2C1_Init+0x50>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f74:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <MX_I2C1_Init+0x50>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <MX_I2C1_Init+0x50>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f80:	4804      	ldr	r0, [pc, #16]	; (8001f94 <MX_I2C1_Init+0x50>)
 8001f82:	f000 ff35 	bl	8002df0 <HAL_I2C_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f8c:	f000 f962 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	2000269c 	.word	0x2000269c
 8001f98:	40005400 	.word	0x40005400
 8001f9c:	00061a80 	.word	0x00061a80

08001fa0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fa6:	f107 0308 	add.w	r3, r7, #8
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	609a      	str	r2, [r3, #8]
 8001fb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fbc:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <MX_TIM1_Init+0x98>)
 8001fbe:	4a1f      	ldr	r2, [pc, #124]	; (800203c <MX_TIM1_Init+0x9c>)
 8001fc0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001fc2:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <MX_TIM1_Init+0x98>)
 8001fc4:	2253      	movs	r2, #83	; 0x53
 8001fc6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <MX_TIM1_Init+0x98>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001fce:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <MX_TIM1_Init+0x98>)
 8001fd0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fd4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd6:	4b18      	ldr	r3, [pc, #96]	; (8002038 <MX_TIM1_Init+0x98>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fdc:	4b16      	ldr	r3, [pc, #88]	; (8002038 <MX_TIM1_Init+0x98>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <MX_TIM1_Init+0x98>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fe8:	4813      	ldr	r0, [pc, #76]	; (8002038 <MX_TIM1_Init+0x98>)
 8001fea:	f003 fdbd 	bl	8005b68 <HAL_TIM_Base_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001ff4:	f000 f92e 	bl	8002254 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ffc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ffe:	f107 0308 	add.w	r3, r7, #8
 8002002:	4619      	mov	r1, r3
 8002004:	480c      	ldr	r0, [pc, #48]	; (8002038 <MX_TIM1_Init+0x98>)
 8002006:	f003 ff69 	bl	8005edc <HAL_TIM_ConfigClockSource>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002010:	f000 f920 	bl	8002254 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002014:	2300      	movs	r3, #0
 8002016:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002018:	2300      	movs	r3, #0
 800201a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800201c:	463b      	mov	r3, r7
 800201e:	4619      	mov	r1, r3
 8002020:	4805      	ldr	r0, [pc, #20]	; (8002038 <MX_TIM1_Init+0x98>)
 8002022:	f004 f96f 	bl	8006304 <HAL_TIMEx_MasterConfigSynchronization>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800202c:	f000 f912 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002030:	bf00      	nop
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	200026f0 	.word	0x200026f0
 800203c:	40010000 	.word	0x40010000

08002040 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002044:	4b11      	ldr	r3, [pc, #68]	; (800208c <MX_USART2_UART_Init+0x4c>)
 8002046:	4a12      	ldr	r2, [pc, #72]	; (8002090 <MX_USART2_UART_Init+0x50>)
 8002048:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <MX_USART2_UART_Init+0x4c>)
 800204c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002050:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002052:	4b0e      	ldr	r3, [pc, #56]	; (800208c <MX_USART2_UART_Init+0x4c>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002058:	4b0c      	ldr	r3, [pc, #48]	; (800208c <MX_USART2_UART_Init+0x4c>)
 800205a:	2200      	movs	r2, #0
 800205c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800205e:	4b0b      	ldr	r3, [pc, #44]	; (800208c <MX_USART2_UART_Init+0x4c>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002064:	4b09      	ldr	r3, [pc, #36]	; (800208c <MX_USART2_UART_Init+0x4c>)
 8002066:	220c      	movs	r2, #12
 8002068:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800206a:	4b08      	ldr	r3, [pc, #32]	; (800208c <MX_USART2_UART_Init+0x4c>)
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <MX_USART2_UART_Init+0x4c>)
 8002072:	2200      	movs	r2, #0
 8002074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002076:	4805      	ldr	r0, [pc, #20]	; (800208c <MX_USART2_UART_Init+0x4c>)
 8002078:	f004 f9c6 	bl	8006408 <HAL_UART_Init>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002082:	f000 f8e7 	bl	8002254 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20002738 	.word	0x20002738
 8002090:	40004400 	.word	0x40004400

08002094 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800209a:	f107 030c 	add.w	r3, r7, #12
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	60da      	str	r2, [r3, #12]
 80020a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	4b2a      	ldr	r3, [pc, #168]	; (8002158 <MX_GPIO_Init+0xc4>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a29      	ldr	r2, [pc, #164]	; (8002158 <MX_GPIO_Init+0xc4>)
 80020b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b27      	ldr	r3, [pc, #156]	; (8002158 <MX_GPIO_Init+0xc4>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c2:	60bb      	str	r3, [r7, #8]
 80020c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
 80020ca:	4b23      	ldr	r3, [pc, #140]	; (8002158 <MX_GPIO_Init+0xc4>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	4a22      	ldr	r2, [pc, #136]	; (8002158 <MX_GPIO_Init+0xc4>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6313      	str	r3, [r2, #48]	; 0x30
 80020d6:	4b20      	ldr	r3, [pc, #128]	; (8002158 <MX_GPIO_Init+0xc4>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	603b      	str	r3, [r7, #0]
 80020e6:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <MX_GPIO_Init+0xc4>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	4a1b      	ldr	r2, [pc, #108]	; (8002158 <MX_GPIO_Init+0xc4>)
 80020ec:	f043 0302 	orr.w	r3, r3, #2
 80020f0:	6313      	str	r3, [r2, #48]	; 0x30
 80020f2:	4b19      	ldr	r3, [pc, #100]	; (8002158 <MX_GPIO_Init+0xc4>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80020fe:	2200      	movs	r2, #0
 8002100:	2120      	movs	r1, #32
 8002102:	4816      	ldr	r0, [pc, #88]	; (800215c <MX_GPIO_Init+0xc8>)
 8002104:	f000 fe42 	bl	8002d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HALL_Pin */
  GPIO_InitStruct.Pin = HALL_Pin;
 8002108:	2301      	movs	r3, #1
 800210a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800210c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002112:	2301      	movs	r3, #1
 8002114:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HALL_GPIO_Port, &GPIO_InitStruct);
 8002116:	f107 030c 	add.w	r3, r7, #12
 800211a:	4619      	mov	r1, r3
 800211c:	480f      	ldr	r0, [pc, #60]	; (800215c <MX_GPIO_Init+0xc8>)
 800211e:	f000 fcb1 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002122:	2320      	movs	r3, #32
 8002124:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002126:	2301      	movs	r3, #1
 8002128:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212e:	2300      	movs	r3, #0
 8002130:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002132:	f107 030c 	add.w	r3, r7, #12
 8002136:	4619      	mov	r1, r3
 8002138:	4808      	ldr	r0, [pc, #32]	; (800215c <MX_GPIO_Init+0xc8>)
 800213a:	f000 fca3 	bl	8002a84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 2);
 800213e:	2202      	movs	r2, #2
 8002140:	2100      	movs	r1, #0
 8002142:	2006      	movs	r0, #6
 8002144:	f000 fc67 	bl	8002a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002148:	2006      	movs	r0, #6
 800214a:	f000 fc80 	bl	8002a4e <HAL_NVIC_EnableIRQ>

}
 800214e:	bf00      	nop
 8002150:	3720      	adds	r7, #32
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800
 800215c:	40020000 	.word	0x40020000

08002160 <ergometer_stroke>:

/* USER CODE BEGIN 4 */
void ergometer_stroke(ergometer_stroke_params_t* stroke_params)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
	usb_stroke_data.mean_power = stroke_params->mean_power;
	usb_stroke_data.distance = stroke_params->distance;

	USBD_HID_SendReport(&hUsbDeviceFS, &usb_stroke_data, 16);*/

	out_data.energy_j = stroke_params->energy_j;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a18      	ldr	r2, [pc, #96]	; (80021d0 <ergometer_stroke+0x70>)
 800216e:	6053      	str	r3, [r2, #4]
	out_data.mean_power = stroke_params->mean_power;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4a16      	ldr	r2, [pc, #88]	; (80021d0 <ergometer_stroke+0x70>)
 8002176:	6093      	str	r3, [r2, #8]
	out_data.distance = stroke_params->distance;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <ergometer_stroke+0x70>)
 800217e:	60d3      	str	r3, [r2, #12]
	out_data.checksum = 0;
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <ergometer_stroke+0x70>)
 8002182:	2200      	movs	r2, #0
 8002184:	821a      	strh	r2, [r3, #16]

	for(uint8_t* it = (uint8_t*)&out_data; it < (uint8_t*)&out_data + sizeof(out_data_t); it++)
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <ergometer_stroke+0x70>)
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	e013      	b.n	80021b4 <ergometer_stroke+0x54>
	{
		if(it != (uint8_t*)&out_data.checksum && it != (uint8_t*)&out_data.checksum + 1)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4a11      	ldr	r2, [pc, #68]	; (80021d4 <ergometer_stroke+0x74>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d00c      	beq.n	80021ae <ergometer_stroke+0x4e>
 8002194:	4a10      	ldr	r2, [pc, #64]	; (80021d8 <ergometer_stroke+0x78>)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4293      	cmp	r3, r2
 800219a:	d008      	beq.n	80021ae <ergometer_stroke+0x4e>
		{
			out_data.checksum += *it;
 800219c:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <ergometer_stroke+0x70>)
 800219e:	8a1a      	ldrh	r2, [r3, #16]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <ergometer_stroke+0x70>)
 80021ac:	821a      	strh	r2, [r3, #16]
	for(uint8_t* it = (uint8_t*)&out_data; it < (uint8_t*)&out_data + sizeof(out_data_t); it++)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	3301      	adds	r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	4a09      	ldr	r2, [pc, #36]	; (80021dc <ergometer_stroke+0x7c>)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d3e7      	bcc.n	800218c <ergometer_stroke+0x2c>
		}
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)&out_data, sizeof(out_data_t), 100);
 80021bc:	2364      	movs	r3, #100	; 0x64
 80021be:	2218      	movs	r2, #24
 80021c0:	4903      	ldr	r1, [pc, #12]	; (80021d0 <ergometer_stroke+0x70>)
 80021c2:	4807      	ldr	r0, [pc, #28]	; (80021e0 <ergometer_stroke+0x80>)
 80021c4:	f004 f96d 	bl	80064a2 <HAL_UART_Transmit>
#endif
}
 80021c8:	bf00      	nop
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000010 	.word	0x20000010
 80021d4:	20000020 	.word	0x20000020
 80021d8:	20000021 	.word	0x20000021
 80021dc:	20000028 	.word	0x20000028
 80021e0:	20002738 	.word	0x20002738

080021e4 <params_received>:

void params_received(damping_constants_t* damping_constants)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
	// Every time we compute new valid parameters we save them into the EEPROM
	storage_data.ka = damping_constants->ka;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4a08      	ldr	r2, [pc, #32]	; (8002214 <params_received+0x30>)
 80021f2:	6013      	str	r3, [r2, #0]
	storage_data.km = damping_constants->km;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	4a06      	ldr	r2, [pc, #24]	; (8002214 <params_received+0x30>)
 80021fa:	6053      	str	r3, [r2, #4]
	storage_data.ks = damping_constants->ks;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a04      	ldr	r2, [pc, #16]	; (8002214 <params_received+0x30>)
 8002202:	6093      	str	r3, [r2, #8]
	storage_write(&storage_data);
 8002204:	4803      	ldr	r0, [pc, #12]	; (8002214 <params_received+0x30>)
 8002206:	f7fe fea9 	bl	8000f5c <storage_write>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20002fac 	.word	0x20002fac

08002218 <angular_velocity_received>:

void angular_velocity_received(float angular_velocity)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	ed87 0a01 	vstr	s0, [r7, #4]
	//usb_angular_velocity_data.angular_velocity = angular_velocity;

	//USBD_HID_SendReport(&hUsbDeviceFS, &usb_angular_velocity_data, 16);
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == HALL_Pin)
 800223a:	88fb      	ldrh	r3, [r7, #6]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d102      	bne.n	8002246 <HAL_GPIO_EXTI_Callback+0x16>
	{
		//if(hallIntermittentFlag) {
			hall_parser_push_trigger(&hall_parser);
 8002240:	4803      	ldr	r0, [pc, #12]	; (8002250 <HAL_GPIO_EXTI_Callback+0x20>)
 8002242:	f7fe ffc7 	bl	80011d4 <hall_parser_push_trigger>
		//}

		//hallIntermittentFlag = !hallIntermittentFlag;
	}
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	2000277c 	.word	0x2000277c

08002254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002258:	b672      	cpsid	i
}
 800225a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800225c:	e7fe      	b.n	800225c <Error_Handler+0x8>
	...

08002260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <HAL_MspInit+0x4c>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	4a0f      	ldr	r2, [pc, #60]	; (80022ac <HAL_MspInit+0x4c>)
 8002270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002274:	6453      	str	r3, [r2, #68]	; 0x44
 8002276:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <HAL_MspInit+0x4c>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	603b      	str	r3, [r7, #0]
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <HAL_MspInit+0x4c>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	4a08      	ldr	r2, [pc, #32]	; (80022ac <HAL_MspInit+0x4c>)
 800228c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002290:	6413      	str	r3, [r2, #64]	; 0x40
 8002292:	4b06      	ldr	r3, [pc, #24]	; (80022ac <HAL_MspInit+0x4c>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800229e:	2007      	movs	r0, #7
 80022a0:	f000 fbae 	bl	8002a00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40023800 	.word	0x40023800

080022b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	; 0x28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a19      	ldr	r2, [pc, #100]	; (8002334 <HAL_I2C_MspInit+0x84>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d12b      	bne.n	800232a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	4b18      	ldr	r3, [pc, #96]	; (8002338 <HAL_I2C_MspInit+0x88>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	4a17      	ldr	r2, [pc, #92]	; (8002338 <HAL_I2C_MspInit+0x88>)
 80022dc:	f043 0302 	orr.w	r3, r3, #2
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <HAL_I2C_MspInit+0x88>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022ee:	23c0      	movs	r3, #192	; 0xc0
 80022f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022f2:	2312      	movs	r3, #18
 80022f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fa:	2303      	movs	r3, #3
 80022fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022fe:	2304      	movs	r3, #4
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002302:	f107 0314 	add.w	r3, r7, #20
 8002306:	4619      	mov	r1, r3
 8002308:	480c      	ldr	r0, [pc, #48]	; (800233c <HAL_I2C_MspInit+0x8c>)
 800230a:	f000 fbbb 	bl	8002a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	4b09      	ldr	r3, [pc, #36]	; (8002338 <HAL_I2C_MspInit+0x88>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	4a08      	ldr	r2, [pc, #32]	; (8002338 <HAL_I2C_MspInit+0x88>)
 8002318:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800231c:	6413      	str	r3, [r2, #64]	; 0x40
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_I2C_MspInit+0x88>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800232a:	bf00      	nop
 800232c:	3728      	adds	r7, #40	; 0x28
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40005400 	.word	0x40005400
 8002338:	40023800 	.word	0x40023800
 800233c:	40020400 	.word	0x40020400

08002340 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a0e      	ldr	r2, [pc, #56]	; (8002388 <HAL_TIM_Base_MspInit+0x48>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d115      	bne.n	800237e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	4b0d      	ldr	r3, [pc, #52]	; (800238c <HAL_TIM_Base_MspInit+0x4c>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	4a0c      	ldr	r2, [pc, #48]	; (800238c <HAL_TIM_Base_MspInit+0x4c>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6453      	str	r3, [r2, #68]	; 0x44
 8002362:	4b0a      	ldr	r3, [pc, #40]	; (800238c <HAL_TIM_Base_MspInit+0x4c>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 1);
 800236e:	2201      	movs	r2, #1
 8002370:	2100      	movs	r1, #0
 8002372:	2019      	movs	r0, #25
 8002374:	f000 fb4f 	bl	8002a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002378:	2019      	movs	r0, #25
 800237a:	f000 fb68 	bl	8002a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40010000 	.word	0x40010000
 800238c:	40023800 	.word	0x40023800

08002390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08a      	sub	sp, #40	; 0x28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 0314 	add.w	r3, r7, #20
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a19      	ldr	r2, [pc, #100]	; (8002414 <HAL_UART_MspInit+0x84>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d12b      	bne.n	800240a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	4b18      	ldr	r3, [pc, #96]	; (8002418 <HAL_UART_MspInit+0x88>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	4a17      	ldr	r2, [pc, #92]	; (8002418 <HAL_UART_MspInit+0x88>)
 80023bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c0:	6413      	str	r3, [r2, #64]	; 0x40
 80023c2:	4b15      	ldr	r3, [pc, #84]	; (8002418 <HAL_UART_MspInit+0x88>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60fb      	str	r3, [r7, #12]
 80023d2:	4b11      	ldr	r3, [pc, #68]	; (8002418 <HAL_UART_MspInit+0x88>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a10      	ldr	r2, [pc, #64]	; (8002418 <HAL_UART_MspInit+0x88>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <HAL_UART_MspInit+0x88>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023ea:	230c      	movs	r3, #12
 80023ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ee:	2302      	movs	r3, #2
 80023f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f6:	2300      	movs	r3, #0
 80023f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023fa:	2307      	movs	r3, #7
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fe:	f107 0314 	add.w	r3, r7, #20
 8002402:	4619      	mov	r1, r3
 8002404:	4805      	ldr	r0, [pc, #20]	; (800241c <HAL_UART_MspInit+0x8c>)
 8002406:	f000 fb3d 	bl	8002a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800240a:	bf00      	nop
 800240c:	3728      	adds	r7, #40	; 0x28
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40004400 	.word	0x40004400
 8002418:	40023800 	.word	0x40023800
 800241c:	40020000 	.word	0x40020000

08002420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002424:	e7fe      	b.n	8002424 <NMI_Handler+0x4>

08002426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800242a:	e7fe      	b.n	800242a <HardFault_Handler+0x4>

0800242c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002430:	e7fe      	b.n	8002430 <MemManage_Handler+0x4>

08002432 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002436:	e7fe      	b.n	8002436 <BusFault_Handler+0x4>

08002438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800243c:	e7fe      	b.n	800243c <UsageFault_Handler+0x4>

0800243e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800246c:	f000 f9b4 	bl	80027d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002470:	bf00      	nop
 8002472:	bd80      	pop	{r7, pc}

08002474 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_Pin);
 8002478:	2001      	movs	r0, #1
 800247a:	f000 fca1 	bl	8002dc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	systemtime_increase_ms();
 8002488:	f000 f8ea 	bl	8002660 <systemtime_increase_ms>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800248c:	4802      	ldr	r0, [pc, #8]	; (8002498 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800248e:	f003 fc1d 	bl	8005ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	200026f0 	.word	0x200026f0

0800249c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80024a0:	4802      	ldr	r0, [pc, #8]	; (80024ac <OTG_FS_IRQHandler+0x10>)
 80024a2:	f001 fdb4 	bl	800400e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	200034c4 	.word	0x200034c4

080024b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
	return 1;
 80024b4:	2301      	movs	r3, #1
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <_kill>:

int _kill(int pid, int sig)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024ca:	f008 fba3 	bl	800ac14 <__errno>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2216      	movs	r2, #22
 80024d2:	601a      	str	r2, [r3, #0]
	return -1;
 80024d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <_exit>:

void _exit (int status)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024e8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ffe7 	bl	80024c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024f2:	e7fe      	b.n	80024f2 <_exit+0x12>

080024f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	e00a      	b.n	800251c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002506:	f3af 8000 	nop.w
 800250a:	4601      	mov	r1, r0
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	60ba      	str	r2, [r7, #8]
 8002512:	b2ca      	uxtb	r2, r1
 8002514:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	3301      	adds	r3, #1
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	429a      	cmp	r2, r3
 8002522:	dbf0      	blt.n	8002506 <_read+0x12>
	}

return len;
 8002524:	687b      	ldr	r3, [r7, #4]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b086      	sub	sp, #24
 8002532:	af00      	add	r7, sp, #0
 8002534:	60f8      	str	r0, [r7, #12]
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	e009      	b.n	8002554 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	60ba      	str	r2, [r7, #8]
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	3301      	adds	r3, #1
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	429a      	cmp	r2, r3
 800255a:	dbf1      	blt.n	8002540 <_write+0x12>
	}
	return len;
 800255c:	687b      	ldr	r3, [r7, #4]
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <_close>:

int _close(int file)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
	return -1;
 800256e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800258e:	605a      	str	r2, [r3, #4]
	return 0;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <_isatty>:

int _isatty(int file)
{
 800259e:	b480      	push	{r7}
 80025a0:	b083      	sub	sp, #12
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
	return 1;
 80025a6:	2301      	movs	r3, #1
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
	return 0;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3714      	adds	r7, #20
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025d8:	4a14      	ldr	r2, [pc, #80]	; (800262c <_sbrk+0x5c>)
 80025da:	4b15      	ldr	r3, [pc, #84]	; (8002630 <_sbrk+0x60>)
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025e4:	4b13      	ldr	r3, [pc, #76]	; (8002634 <_sbrk+0x64>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d102      	bne.n	80025f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <_sbrk+0x64>)
 80025ee:	4a12      	ldr	r2, [pc, #72]	; (8002638 <_sbrk+0x68>)
 80025f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <_sbrk+0x64>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d207      	bcs.n	8002610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002600:	f008 fb08 	bl	800ac14 <__errno>
 8002604:	4603      	mov	r3, r0
 8002606:	220c      	movs	r2, #12
 8002608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800260a:	f04f 33ff 	mov.w	r3, #4294967295
 800260e:	e009      	b.n	8002624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002610:	4b08      	ldr	r3, [pc, #32]	; (8002634 <_sbrk+0x64>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002616:	4b07      	ldr	r3, [pc, #28]	; (8002634 <_sbrk+0x64>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	4a05      	ldr	r2, [pc, #20]	; (8002634 <_sbrk+0x64>)
 8002620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002622:	68fb      	ldr	r3, [r7, #12]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20018000 	.word	0x20018000
 8002630:	00000400 	.word	0x00000400
 8002634:	20002fd8 	.word	0x20002fd8
 8002638:	200039f8 	.word	0x200039f8

0800263c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <SystemInit+0x20>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002646:	4a05      	ldr	r2, [pc, #20]	; (800265c <SystemInit+0x20>)
 8002648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800264c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <systemtime_increase_ms>:

uint32_t systemtime_ms = 0;
extern TIM_HandleTypeDef htim1;

void systemtime_increase_ms()
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
	systemtime_ms++;
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <systemtime_increase_ms+0x18>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	3301      	adds	r3, #1
 800266a:	4a03      	ldr	r2, [pc, #12]	; (8002678 <systemtime_increase_ms+0x18>)
 800266c:	6013      	str	r3, [r2, #0]
}
 800266e:	bf00      	nop
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	20002fdc 	.word	0x20002fdc

0800267c <systemtime_get_time>:

void systemtime_get_time(systemtime_t* st)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
	st->ms = systemtime_ms;
 8002684:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <systemtime_get_time+0x28>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	601a      	str	r2, [r3, #0]
	st->us = __HAL_TIM_GET_COUNTER(&htim1);
 800268c:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <systemtime_get_time+0x2c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	605a      	str	r2, [r3, #4]
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	20002fdc 	.word	0x20002fdc
 80026a8:	200026f0 	.word	0x200026f0

080026ac <systemtime_time_diff_us>:
{
	return (st1->ms - st2->ms) + ((float)st1->us - st2->us)/1000.0f;
}

uint32_t systemtime_time_diff_us(systemtime_t* st1, systemtime_t* st2)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
	return (st1->ms - st2->ms)*1000 + (st1->us - st2->us);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026c4:	fb03 f202 	mul.w	r2, r3, r2
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	1acb      	subs	r3, r1, r3
 80026d2:	4413      	add	r3, r2
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002718 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026e4:	480d      	ldr	r0, [pc, #52]	; (800271c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026e6:	490e      	ldr	r1, [pc, #56]	; (8002720 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026e8:	4a0e      	ldr	r2, [pc, #56]	; (8002724 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026ec:	e002      	b.n	80026f4 <LoopCopyDataInit>

080026ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026f2:	3304      	adds	r3, #4

080026f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026f8:	d3f9      	bcc.n	80026ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026fa:	4a0b      	ldr	r2, [pc, #44]	; (8002728 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026fc:	4c0b      	ldr	r4, [pc, #44]	; (800272c <LoopFillZerobss+0x26>)
  movs r3, #0
 80026fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002700:	e001      	b.n	8002706 <LoopFillZerobss>

08002702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002704:	3204      	adds	r2, #4

08002706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002708:	d3fb      	bcc.n	8002702 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800270a:	f7ff ff97 	bl	800263c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800270e:	f008 fa87 	bl	800ac20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002712:	f7ff fb53 	bl	8001dbc <main>
  bx  lr    
 8002716:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002718:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800271c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002720:	200002f0 	.word	0x200002f0
  ldr r2, =_sidata
 8002724:	0800dc84 	.word	0x0800dc84
  ldr r2, =_sbss
 8002728:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 800272c:	200039f4 	.word	0x200039f4

08002730 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002730:	e7fe      	b.n	8002730 <ADC_IRQHandler>
	...

08002734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002738:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <HAL_Init+0x40>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0d      	ldr	r2, [pc, #52]	; (8002774 <HAL_Init+0x40>)
 800273e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002742:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_Init+0x40>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <HAL_Init+0x40>)
 800274a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800274e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002750:	4b08      	ldr	r3, [pc, #32]	; (8002774 <HAL_Init+0x40>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a07      	ldr	r2, [pc, #28]	; (8002774 <HAL_Init+0x40>)
 8002756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800275c:	2003      	movs	r0, #3
 800275e:	f000 f94f 	bl	8002a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002762:	2000      	movs	r0, #0
 8002764:	f000 f808 	bl	8002778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002768:	f7ff fd7a 	bl	8002260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40023c00 	.word	0x40023c00

08002778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002780:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_InitTick+0x54>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <HAL_InitTick+0x58>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	4619      	mov	r1, r3
 800278a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800278e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002792:	fbb2 f3f3 	udiv	r3, r2, r3
 8002796:	4618      	mov	r0, r3
 8002798:	f000 f967 	bl	8002a6a <HAL_SYSTICK_Config>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e00e      	b.n	80027c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b0f      	cmp	r3, #15
 80027aa:	d80a      	bhi.n	80027c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027ac:	2200      	movs	r2, #0
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	f04f 30ff 	mov.w	r0, #4294967295
 80027b4:	f000 f92f 	bl	8002a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027b8:	4a06      	ldr	r2, [pc, #24]	; (80027d4 <HAL_InitTick+0x5c>)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	e000      	b.n	80027c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000028 	.word	0x20000028
 80027d0:	20000030 	.word	0x20000030
 80027d4:	2000002c 	.word	0x2000002c

080027d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_IncTick+0x20>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_IncTick+0x24>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4413      	add	r3, r2
 80027e8:	4a04      	ldr	r2, [pc, #16]	; (80027fc <HAL_IncTick+0x24>)
 80027ea:	6013      	str	r3, [r2, #0]
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000030 	.word	0x20000030
 80027fc:	20002fe0 	.word	0x20002fe0

08002800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return uwTick;
 8002804:	4b03      	ldr	r3, [pc, #12]	; (8002814 <HAL_GetTick+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	20002fe0 	.word	0x20002fe0

08002818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002820:	f7ff ffee 	bl	8002800 <HAL_GetTick>
 8002824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002830:	d005      	beq.n	800283e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002832:	4b0a      	ldr	r3, [pc, #40]	; (800285c <HAL_Delay+0x44>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4413      	add	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800283e:	bf00      	nop
 8002840:	f7ff ffde 	bl	8002800 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	429a      	cmp	r2, r3
 800284e:	d8f7      	bhi.n	8002840 <HAL_Delay+0x28>
  {
  }
}
 8002850:	bf00      	nop
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000030 	.word	0x20000030

08002860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800287c:	4013      	ands	r3, r2
 800287e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800288c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002892:	4a04      	ldr	r2, [pc, #16]	; (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	60d3      	str	r3, [r2, #12]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <__NVIC_GetPriorityGrouping+0x18>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	0a1b      	lsrs	r3, r3, #8
 80028b2:	f003 0307 	and.w	r3, r3, #7
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	db0b      	blt.n	80028ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	f003 021f 	and.w	r2, r3, #31
 80028dc:	4907      	ldr	r1, [pc, #28]	; (80028fc <__NVIC_EnableIRQ+0x38>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	2001      	movs	r0, #1
 80028e6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000e100 	.word	0xe000e100

08002900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	6039      	str	r1, [r7, #0]
 800290a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800290c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002910:	2b00      	cmp	r3, #0
 8002912:	db0a      	blt.n	800292a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	b2da      	uxtb	r2, r3
 8002918:	490c      	ldr	r1, [pc, #48]	; (800294c <__NVIC_SetPriority+0x4c>)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	0112      	lsls	r2, r2, #4
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	440b      	add	r3, r1
 8002924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002928:	e00a      	b.n	8002940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	4908      	ldr	r1, [pc, #32]	; (8002950 <__NVIC_SetPriority+0x50>)
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	3b04      	subs	r3, #4
 8002938:	0112      	lsls	r2, r2, #4
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	440b      	add	r3, r1
 800293e:	761a      	strb	r2, [r3, #24]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	e000e100 	.word	0xe000e100
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002954:	b480      	push	{r7}
 8002956:	b089      	sub	sp, #36	; 0x24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f1c3 0307 	rsb	r3, r3, #7
 800296e:	2b04      	cmp	r3, #4
 8002970:	bf28      	it	cs
 8002972:	2304      	movcs	r3, #4
 8002974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	3304      	adds	r3, #4
 800297a:	2b06      	cmp	r3, #6
 800297c:	d902      	bls.n	8002984 <NVIC_EncodePriority+0x30>
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3b03      	subs	r3, #3
 8002982:	e000      	b.n	8002986 <NVIC_EncodePriority+0x32>
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002988:	f04f 32ff 	mov.w	r2, #4294967295
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43da      	mvns	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	401a      	ands	r2, r3
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800299c:	f04f 31ff 	mov.w	r1, #4294967295
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	fa01 f303 	lsl.w	r3, r1, r3
 80029a6:	43d9      	mvns	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ac:	4313      	orrs	r3, r2
         );
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3724      	adds	r7, #36	; 0x24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3b01      	subs	r3, #1
 80029c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029cc:	d301      	bcc.n	80029d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ce:	2301      	movs	r3, #1
 80029d0:	e00f      	b.n	80029f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029d2:	4a0a      	ldr	r2, [pc, #40]	; (80029fc <SysTick_Config+0x40>)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3b01      	subs	r3, #1
 80029d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029da:	210f      	movs	r1, #15
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295
 80029e0:	f7ff ff8e 	bl	8002900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <SysTick_Config+0x40>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ea:	4b04      	ldr	r3, [pc, #16]	; (80029fc <SysTick_Config+0x40>)
 80029ec:	2207      	movs	r2, #7
 80029ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	e000e010 	.word	0xe000e010

08002a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ff29 	bl	8002860 <__NVIC_SetPriorityGrouping>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b086      	sub	sp, #24
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
 8002a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a28:	f7ff ff3e 	bl	80028a8 <__NVIC_GetPriorityGrouping>
 8002a2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	6978      	ldr	r0, [r7, #20]
 8002a34:	f7ff ff8e 	bl	8002954 <NVIC_EncodePriority>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff ff5d 	bl	8002900 <__NVIC_SetPriority>
}
 8002a46:	bf00      	nop
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff ff31 	bl	80028c4 <__NVIC_EnableIRQ>
}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b082      	sub	sp, #8
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f7ff ffa2 	bl	80029bc <SysTick_Config>
 8002a78:	4603      	mov	r3, r0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
	...

08002a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b089      	sub	sp, #36	; 0x24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	e159      	b.n	8002d54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	f040 8148 	bne.w	8002d4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d005      	beq.n	8002ad6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d130      	bne.n	8002b38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	f003 0201 	and.w	r2, r3, #1
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d017      	beq.n	8002b74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	2203      	movs	r2, #3
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d123      	bne.n	8002bc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	08da      	lsrs	r2, r3, #3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3208      	adds	r2, #8
 8002b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	220f      	movs	r2, #15
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	08da      	lsrs	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3208      	adds	r2, #8
 8002bc2:	69b9      	ldr	r1, [r7, #24]
 8002bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0203 	and.w	r2, r3, #3
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 80a2 	beq.w	8002d4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	4b57      	ldr	r3, [pc, #348]	; (8002d6c <HAL_GPIO_Init+0x2e8>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	4a56      	ldr	r2, [pc, #344]	; (8002d6c <HAL_GPIO_Init+0x2e8>)
 8002c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c18:	6453      	str	r3, [r2, #68]	; 0x44
 8002c1a:	4b54      	ldr	r3, [pc, #336]	; (8002d6c <HAL_GPIO_Init+0x2e8>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c26:	4a52      	ldr	r2, [pc, #328]	; (8002d70 <HAL_GPIO_Init+0x2ec>)
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	220f      	movs	r2, #15
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a49      	ldr	r2, [pc, #292]	; (8002d74 <HAL_GPIO_Init+0x2f0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d019      	beq.n	8002c86 <HAL_GPIO_Init+0x202>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a48      	ldr	r2, [pc, #288]	; (8002d78 <HAL_GPIO_Init+0x2f4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d013      	beq.n	8002c82 <HAL_GPIO_Init+0x1fe>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a47      	ldr	r2, [pc, #284]	; (8002d7c <HAL_GPIO_Init+0x2f8>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00d      	beq.n	8002c7e <HAL_GPIO_Init+0x1fa>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a46      	ldr	r2, [pc, #280]	; (8002d80 <HAL_GPIO_Init+0x2fc>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d007      	beq.n	8002c7a <HAL_GPIO_Init+0x1f6>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a45      	ldr	r2, [pc, #276]	; (8002d84 <HAL_GPIO_Init+0x300>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d101      	bne.n	8002c76 <HAL_GPIO_Init+0x1f2>
 8002c72:	2304      	movs	r3, #4
 8002c74:	e008      	b.n	8002c88 <HAL_GPIO_Init+0x204>
 8002c76:	2307      	movs	r3, #7
 8002c78:	e006      	b.n	8002c88 <HAL_GPIO_Init+0x204>
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e004      	b.n	8002c88 <HAL_GPIO_Init+0x204>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e002      	b.n	8002c88 <HAL_GPIO_Init+0x204>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <HAL_GPIO_Init+0x204>
 8002c86:	2300      	movs	r3, #0
 8002c88:	69fa      	ldr	r2, [r7, #28]
 8002c8a:	f002 0203 	and.w	r2, r2, #3
 8002c8e:	0092      	lsls	r2, r2, #2
 8002c90:	4093      	lsls	r3, r2
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c98:	4935      	ldr	r1, [pc, #212]	; (8002d70 <HAL_GPIO_Init+0x2ec>)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	089b      	lsrs	r3, r3, #2
 8002c9e:	3302      	adds	r3, #2
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ca6:	4b38      	ldr	r3, [pc, #224]	; (8002d88 <HAL_GPIO_Init+0x304>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cca:	4a2f      	ldr	r2, [pc, #188]	; (8002d88 <HAL_GPIO_Init+0x304>)
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cd0:	4b2d      	ldr	r3, [pc, #180]	; (8002d88 <HAL_GPIO_Init+0x304>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cf4:	4a24      	ldr	r2, [pc, #144]	; (8002d88 <HAL_GPIO_Init+0x304>)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cfa:	4b23      	ldr	r3, [pc, #140]	; (8002d88 <HAL_GPIO_Init+0x304>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4013      	ands	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d1e:	4a1a      	ldr	r2, [pc, #104]	; (8002d88 <HAL_GPIO_Init+0x304>)
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d24:	4b18      	ldr	r3, [pc, #96]	; (8002d88 <HAL_GPIO_Init+0x304>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d48:	4a0f      	ldr	r2, [pc, #60]	; (8002d88 <HAL_GPIO_Init+0x304>)
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3301      	adds	r3, #1
 8002d52:	61fb      	str	r3, [r7, #28]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	2b0f      	cmp	r3, #15
 8002d58:	f67f aea2 	bls.w	8002aa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	bf00      	nop
 8002d60:	3724      	adds	r7, #36	; 0x24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40013800 	.word	0x40013800
 8002d74:	40020000 	.word	0x40020000
 8002d78:	40020400 	.word	0x40020400
 8002d7c:	40020800 	.word	0x40020800
 8002d80:	40020c00 	.word	0x40020c00
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40013c00 	.word	0x40013c00

08002d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	807b      	strh	r3, [r7, #2]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d9c:	787b      	ldrb	r3, [r7, #1]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002da2:	887a      	ldrh	r2, [r7, #2]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002da8:	e003      	b.n	8002db2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002daa:	887b      	ldrh	r3, [r7, #2]
 8002dac:	041a      	lsls	r2, r3, #16
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	619a      	str	r2, [r3, #24]
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d006      	beq.n	8002de4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dd6:	4a05      	ldr	r2, [pc, #20]	; (8002dec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dd8:	88fb      	ldrh	r3, [r7, #6]
 8002dda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fa26 	bl	8002230 <HAL_GPIO_EXTI_Callback>
  }
}
 8002de4:	bf00      	nop
 8002de6:	3708      	adds	r7, #8
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40013c00 	.word	0x40013c00

08002df0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e12b      	b.n	800305a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d106      	bne.n	8002e1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7ff fa4a 	bl	80022b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2224      	movs	r2, #36	; 0x24
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0201 	bic.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e54:	f002 fe60 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 8002e58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	4a81      	ldr	r2, [pc, #516]	; (8003064 <HAL_I2C_Init+0x274>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d807      	bhi.n	8002e74 <HAL_I2C_Init+0x84>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4a80      	ldr	r2, [pc, #512]	; (8003068 <HAL_I2C_Init+0x278>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	bf94      	ite	ls
 8002e6c:	2301      	movls	r3, #1
 8002e6e:	2300      	movhi	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	e006      	b.n	8002e82 <HAL_I2C_Init+0x92>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4a7d      	ldr	r2, [pc, #500]	; (800306c <HAL_I2C_Init+0x27c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	bf94      	ite	ls
 8002e7c:	2301      	movls	r3, #1
 8002e7e:	2300      	movhi	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e0e7      	b.n	800305a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4a78      	ldr	r2, [pc, #480]	; (8003070 <HAL_I2C_Init+0x280>)
 8002e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e92:	0c9b      	lsrs	r3, r3, #18
 8002e94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68ba      	ldr	r2, [r7, #8]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4a6a      	ldr	r2, [pc, #424]	; (8003064 <HAL_I2C_Init+0x274>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d802      	bhi.n	8002ec4 <HAL_I2C_Init+0xd4>
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	e009      	b.n	8002ed8 <HAL_I2C_Init+0xe8>
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002eca:	fb02 f303 	mul.w	r3, r2, r3
 8002ece:	4a69      	ldr	r2, [pc, #420]	; (8003074 <HAL_I2C_Init+0x284>)
 8002ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed4:	099b      	lsrs	r3, r3, #6
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	430b      	orrs	r3, r1
 8002ede:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002eea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	495c      	ldr	r1, [pc, #368]	; (8003064 <HAL_I2C_Init+0x274>)
 8002ef4:	428b      	cmp	r3, r1
 8002ef6:	d819      	bhi.n	8002f2c <HAL_I2C_Init+0x13c>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1e59      	subs	r1, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f06:	1c59      	adds	r1, r3, #1
 8002f08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f0c:	400b      	ands	r3, r1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <HAL_I2C_Init+0x138>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1e59      	subs	r1, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f20:	3301      	adds	r3, #1
 8002f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f26:	e051      	b.n	8002fcc <HAL_I2C_Init+0x1dc>
 8002f28:	2304      	movs	r3, #4
 8002f2a:	e04f      	b.n	8002fcc <HAL_I2C_Init+0x1dc>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d111      	bne.n	8002f58 <HAL_I2C_Init+0x168>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	1e58      	subs	r0, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	440b      	add	r3, r1
 8002f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f46:	3301      	adds	r3, #1
 8002f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bf0c      	ite	eq
 8002f50:	2301      	moveq	r3, #1
 8002f52:	2300      	movne	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	e012      	b.n	8002f7e <HAL_I2C_Init+0x18e>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	1e58      	subs	r0, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6859      	ldr	r1, [r3, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	0099      	lsls	r1, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f6e:	3301      	adds	r3, #1
 8002f70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf0c      	ite	eq
 8002f78:	2301      	moveq	r3, #1
 8002f7a:	2300      	movne	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_I2C_Init+0x196>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e022      	b.n	8002fcc <HAL_I2C_Init+0x1dc>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10e      	bne.n	8002fac <HAL_I2C_Init+0x1bc>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1e58      	subs	r0, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6859      	ldr	r1, [r3, #4]
 8002f96:	460b      	mov	r3, r1
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	440b      	add	r3, r1
 8002f9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002faa:	e00f      	b.n	8002fcc <HAL_I2C_Init+0x1dc>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	1e58      	subs	r0, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6859      	ldr	r1, [r3, #4]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	0099      	lsls	r1, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	6809      	ldr	r1, [r1, #0]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69da      	ldr	r2, [r3, #28]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ffa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6911      	ldr	r1, [r2, #16]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	68d2      	ldr	r2, [r2, #12]
 8003006:	4311      	orrs	r1, r2
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	430b      	orrs	r3, r1
 800300e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	000186a0 	.word	0x000186a0
 8003068:	001e847f 	.word	0x001e847f
 800306c:	003d08ff 	.word	0x003d08ff
 8003070:	431bde83 	.word	0x431bde83
 8003074:	10624dd3 	.word	0x10624dd3

08003078 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af02      	add	r7, sp, #8
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	4608      	mov	r0, r1
 8003082:	4611      	mov	r1, r2
 8003084:	461a      	mov	r2, r3
 8003086:	4603      	mov	r3, r0
 8003088:	817b      	strh	r3, [r7, #10]
 800308a:	460b      	mov	r3, r1
 800308c:	813b      	strh	r3, [r7, #8]
 800308e:	4613      	mov	r3, r2
 8003090:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003092:	f7ff fbb5 	bl	8002800 <HAL_GetTick>
 8003096:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b20      	cmp	r3, #32
 80030a2:	f040 80d9 	bne.w	8003258 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	2319      	movs	r3, #25
 80030ac:	2201      	movs	r2, #1
 80030ae:	496d      	ldr	r1, [pc, #436]	; (8003264 <HAL_I2C_Mem_Write+0x1ec>)
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 fc7f 	bl	80039b4 <I2C_WaitOnFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80030bc:	2302      	movs	r3, #2
 80030be:	e0cc      	b.n	800325a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_I2C_Mem_Write+0x56>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e0c5      	b.n	800325a <HAL_I2C_Mem_Write+0x1e2>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d007      	beq.n	80030f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003102:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2221      	movs	r2, #33	; 0x21
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2240      	movs	r2, #64	; 0x40
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a3a      	ldr	r2, [r7, #32]
 800311e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003124:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4a4d      	ldr	r2, [pc, #308]	; (8003268 <HAL_I2C_Mem_Write+0x1f0>)
 8003134:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003136:	88f8      	ldrh	r0, [r7, #6]
 8003138:	893a      	ldrh	r2, [r7, #8]
 800313a:	8979      	ldrh	r1, [r7, #10]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	9301      	str	r3, [sp, #4]
 8003140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003142:	9300      	str	r3, [sp, #0]
 8003144:	4603      	mov	r3, r0
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 fab6 	bl	80036b8 <I2C_RequestMemoryWrite>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d052      	beq.n	80031f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e081      	b.n	800325a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 fd00 	bl	8003b60 <I2C_WaitOnTXEFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00d      	beq.n	8003182 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	2b04      	cmp	r3, #4
 800316c:	d107      	bne.n	800317e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800317c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e06b      	b.n	800325a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	781a      	ldrb	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319c:	3b01      	subs	r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d11b      	bne.n	80031f8 <HAL_I2C_Mem_Write+0x180>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d017      	beq.n	80031f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	781a      	ldrb	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1aa      	bne.n	8003156 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 fcec 	bl	8003be2 <I2C_WaitOnBTFFlagUntilTimeout>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00d      	beq.n	800322c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	2b04      	cmp	r3, #4
 8003216:	d107      	bne.n	8003228 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003226:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e016      	b.n	800325a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800323a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	e000      	b.n	800325a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003258:	2302      	movs	r3, #2
  }
}
 800325a:	4618      	mov	r0, r3
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	00100002 	.word	0x00100002
 8003268:	ffff0000 	.word	0xffff0000

0800326c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08c      	sub	sp, #48	; 0x30
 8003270:	af02      	add	r7, sp, #8
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	4608      	mov	r0, r1
 8003276:	4611      	mov	r1, r2
 8003278:	461a      	mov	r2, r3
 800327a:	4603      	mov	r3, r0
 800327c:	817b      	strh	r3, [r7, #10]
 800327e:	460b      	mov	r3, r1
 8003280:	813b      	strh	r3, [r7, #8]
 8003282:	4613      	mov	r3, r2
 8003284:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003286:	f7ff fabb 	bl	8002800 <HAL_GetTick>
 800328a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b20      	cmp	r3, #32
 8003296:	f040 8208 	bne.w	80036aa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	2319      	movs	r3, #25
 80032a0:	2201      	movs	r2, #1
 80032a2:	497b      	ldr	r1, [pc, #492]	; (8003490 <HAL_I2C_Mem_Read+0x224>)
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 fb85 	bl	80039b4 <I2C_WaitOnFlagUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80032b0:	2302      	movs	r3, #2
 80032b2:	e1fb      	b.n	80036ac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d101      	bne.n	80032c2 <HAL_I2C_Mem_Read+0x56>
 80032be:	2302      	movs	r3, #2
 80032c0:	e1f4      	b.n	80036ac <HAL_I2C_Mem_Read+0x440>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d007      	beq.n	80032e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0201 	orr.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2222      	movs	r2, #34	; 0x22
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2240      	movs	r2, #64	; 0x40
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003312:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003318:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4a5b      	ldr	r2, [pc, #364]	; (8003494 <HAL_I2C_Mem_Read+0x228>)
 8003328:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800332a:	88f8      	ldrh	r0, [r7, #6]
 800332c:	893a      	ldrh	r2, [r7, #8]
 800332e:	8979      	ldrh	r1, [r7, #10]
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	9301      	str	r3, [sp, #4]
 8003334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	4603      	mov	r3, r0
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 fa52 	bl	80037e4 <I2C_RequestMemoryRead>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e1b0      	b.n	80036ac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334e:	2b00      	cmp	r3, #0
 8003350:	d113      	bne.n	800337a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003352:	2300      	movs	r3, #0
 8003354:	623b      	str	r3, [r7, #32]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	623b      	str	r3, [r7, #32]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	623b      	str	r3, [r7, #32]
 8003366:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	e184      	b.n	8003684 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337e:	2b01      	cmp	r3, #1
 8003380:	d11b      	bne.n	80033ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003390:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	61fb      	str	r3, [r7, #28]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	61fb      	str	r3, [r7, #28]
 80033a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	e164      	b.n	8003684 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d11b      	bne.n	80033fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e2:	2300      	movs	r3, #0
 80033e4:	61bb      	str	r3, [r7, #24]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	61bb      	str	r3, [r7, #24]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	61bb      	str	r3, [r7, #24]
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	e144      	b.n	8003684 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003410:	e138      	b.n	8003684 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003416:	2b03      	cmp	r3, #3
 8003418:	f200 80f1 	bhi.w	80035fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003420:	2b01      	cmp	r3, #1
 8003422:	d123      	bne.n	800346c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003426:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 fc1b 	bl	8003c64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e139      	b.n	80036ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	691a      	ldr	r2, [r3, #16]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003454:	3b01      	subs	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003460:	b29b      	uxth	r3, r3
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	855a      	strh	r2, [r3, #42]	; 0x2a
 800346a:	e10b      	b.n	8003684 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003470:	2b02      	cmp	r3, #2
 8003472:	d14e      	bne.n	8003512 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	9300      	str	r3, [sp, #0]
 8003478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347a:	2200      	movs	r2, #0
 800347c:	4906      	ldr	r1, [pc, #24]	; (8003498 <HAL_I2C_Mem_Read+0x22c>)
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 fa98 	bl	80039b4 <I2C_WaitOnFlagUntilTimeout>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d008      	beq.n	800349c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e10e      	b.n	80036ac <HAL_I2C_Mem_Read+0x440>
 800348e:	bf00      	nop
 8003490:	00100002 	.word	0x00100002
 8003494:	ffff0000 	.word	0xffff0000
 8003498:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003506:	b29b      	uxth	r3, r3
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003510:	e0b8      	b.n	8003684 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003518:	2200      	movs	r2, #0
 800351a:	4966      	ldr	r1, [pc, #408]	; (80036b4 <HAL_I2C_Mem_Read+0x448>)
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 fa49 	bl	80039b4 <I2C_WaitOnFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0bf      	b.n	80036ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800353a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003546:	b2d2      	uxtb	r2, r2
 8003548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003574:	2200      	movs	r2, #0
 8003576:	494f      	ldr	r1, [pc, #316]	; (80036b4 <HAL_I2C_Mem_Read+0x448>)
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 fa1b 	bl	80039b4 <I2C_WaitOnFlagUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e091      	b.n	80036ac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003596:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b4:	3b01      	subs	r3, #1
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035fc:	e042      	b.n	8003684 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003600:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 fb2e 	bl	8003c64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e04c      	b.n	80036ac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363a:	b29b      	uxth	r3, r3
 800363c:	3b01      	subs	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	2b04      	cmp	r3, #4
 8003650:	d118      	bne.n	8003684 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	1c5a      	adds	r2, r3, #1
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003688:	2b00      	cmp	r3, #0
 800368a:	f47f aec2 	bne.w	8003412 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2220      	movs	r2, #32
 8003692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e000      	b.n	80036ac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80036aa:	2302      	movs	r3, #2
  }
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3728      	adds	r7, #40	; 0x28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	00010004 	.word	0x00010004

080036b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af02      	add	r7, sp, #8
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	4608      	mov	r0, r1
 80036c2:	4611      	mov	r1, r2
 80036c4:	461a      	mov	r2, r3
 80036c6:	4603      	mov	r3, r0
 80036c8:	817b      	strh	r3, [r7, #10]
 80036ca:	460b      	mov	r3, r1
 80036cc:	813b      	strh	r3, [r7, #8]
 80036ce:	4613      	mov	r3, r2
 80036d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 f960 	bl	80039b4 <I2C_WaitOnFlagUntilTimeout>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00d      	beq.n	8003716 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003708:	d103      	bne.n	8003712 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003710:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e05f      	b.n	80037d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003716:	897b      	ldrh	r3, [r7, #10]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	461a      	mov	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003724:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	6a3a      	ldr	r2, [r7, #32]
 800372a:	492d      	ldr	r1, [pc, #180]	; (80037e0 <I2C_RequestMemoryWrite+0x128>)
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 f998 	bl	8003a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e04c      	b.n	80037d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800373c:	2300      	movs	r3, #0
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	617b      	str	r3, [r7, #20]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003754:	6a39      	ldr	r1, [r7, #32]
 8003756:	68f8      	ldr	r0, [r7, #12]
 8003758:	f000 fa02 	bl	8003b60 <I2C_WaitOnTXEFlagUntilTimeout>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00d      	beq.n	800377e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	2b04      	cmp	r3, #4
 8003768:	d107      	bne.n	800377a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003778:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e02b      	b.n	80037d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800377e:	88fb      	ldrh	r3, [r7, #6]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d105      	bne.n	8003790 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003784:	893b      	ldrh	r3, [r7, #8]
 8003786:	b2da      	uxtb	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	611a      	str	r2, [r3, #16]
 800378e:	e021      	b.n	80037d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003790:	893b      	ldrh	r3, [r7, #8]
 8003792:	0a1b      	lsrs	r3, r3, #8
 8003794:	b29b      	uxth	r3, r3
 8003796:	b2da      	uxtb	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800379e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a0:	6a39      	ldr	r1, [r7, #32]
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 f9dc 	bl	8003b60 <I2C_WaitOnTXEFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00d      	beq.n	80037ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d107      	bne.n	80037c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e005      	b.n	80037d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037ca:	893b      	ldrh	r3, [r7, #8]
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	00010002 	.word	0x00010002

080037e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af02      	add	r7, sp, #8
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	4608      	mov	r0, r1
 80037ee:	4611      	mov	r1, r2
 80037f0:	461a      	mov	r2, r3
 80037f2:	4603      	mov	r3, r0
 80037f4:	817b      	strh	r3, [r7, #10]
 80037f6:	460b      	mov	r3, r1
 80037f8:	813b      	strh	r3, [r7, #8]
 80037fa:	4613      	mov	r3, r2
 80037fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800380c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800381c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	2200      	movs	r2, #0
 8003826:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 f8c2 	bl	80039b4 <I2C_WaitOnFlagUntilTimeout>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00d      	beq.n	8003852 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003844:	d103      	bne.n	800384e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800384c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e0aa      	b.n	80039a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003852:	897b      	ldrh	r3, [r7, #10]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	461a      	mov	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003860:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	6a3a      	ldr	r2, [r7, #32]
 8003866:	4952      	ldr	r1, [pc, #328]	; (80039b0 <I2C_RequestMemoryRead+0x1cc>)
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f8fa 	bl	8003a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e097      	b.n	80039a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800388e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003890:	6a39      	ldr	r1, [r7, #32]
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 f964 	bl	8003b60 <I2C_WaitOnTXEFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00d      	beq.n	80038ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d107      	bne.n	80038b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e076      	b.n	80039a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038ba:	88fb      	ldrh	r3, [r7, #6]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d105      	bne.n	80038cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038c0:	893b      	ldrh	r3, [r7, #8]
 80038c2:	b2da      	uxtb	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	611a      	str	r2, [r3, #16]
 80038ca:	e021      	b.n	8003910 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038cc:	893b      	ldrh	r3, [r7, #8]
 80038ce:	0a1b      	lsrs	r3, r3, #8
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038dc:	6a39      	ldr	r1, [r7, #32]
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f93e 	bl	8003b60 <I2C_WaitOnTXEFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00d      	beq.n	8003906 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d107      	bne.n	8003902 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003900:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e050      	b.n	80039a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003906:	893b      	ldrh	r3, [r7, #8]
 8003908:	b2da      	uxtb	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003912:	6a39      	ldr	r1, [r7, #32]
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 f923 	bl	8003b60 <I2C_WaitOnTXEFlagUntilTimeout>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d00d      	beq.n	800393c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	2b04      	cmp	r3, #4
 8003926:	d107      	bne.n	8003938 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003936:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e035      	b.n	80039a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800394a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	2200      	movs	r2, #0
 8003954:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 f82b 	bl	80039b4 <I2C_WaitOnFlagUntilTimeout>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00d      	beq.n	8003980 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003972:	d103      	bne.n	800397c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800397a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e013      	b.n	80039a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003980:	897b      	ldrh	r3, [r7, #10]
 8003982:	b2db      	uxtb	r3, r3
 8003984:	f043 0301 	orr.w	r3, r3, #1
 8003988:	b2da      	uxtb	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003992:	6a3a      	ldr	r2, [r7, #32]
 8003994:	4906      	ldr	r1, [pc, #24]	; (80039b0 <I2C_RequestMemoryRead+0x1cc>)
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 f863 	bl	8003a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80039a6:	2300      	movs	r3, #0
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	00010002 	.word	0x00010002

080039b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	4613      	mov	r3, r2
 80039c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039c4:	e025      	b.n	8003a12 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039cc:	d021      	beq.n	8003a12 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ce:	f7fe ff17 	bl	8002800 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d302      	bcc.n	80039e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d116      	bne.n	8003a12 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2220      	movs	r2, #32
 80039ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	f043 0220 	orr.w	r2, r3, #32
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e023      	b.n	8003a5a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	0c1b      	lsrs	r3, r3, #16
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d10d      	bne.n	8003a38 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	43da      	mvns	r2, r3
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4013      	ands	r3, r2
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	bf0c      	ite	eq
 8003a2e:	2301      	moveq	r3, #1
 8003a30:	2300      	movne	r3, #0
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	461a      	mov	r2, r3
 8003a36:	e00c      	b.n	8003a52 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	43da      	mvns	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	4013      	ands	r3, r2
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	bf0c      	ite	eq
 8003a4a:	2301      	moveq	r3, #1
 8003a4c:	2300      	movne	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	461a      	mov	r2, r3
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d0b6      	beq.n	80039c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	60f8      	str	r0, [r7, #12]
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	607a      	str	r2, [r7, #4]
 8003a6e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a70:	e051      	b.n	8003b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a80:	d123      	bne.n	8003aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a90:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a9a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	f043 0204 	orr.w	r2, r3, #4
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e046      	b.n	8003b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad0:	d021      	beq.n	8003b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad2:	f7fe fe95 	bl	8002800 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d302      	bcc.n	8003ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d116      	bne.n	8003b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2220      	movs	r2, #32
 8003af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	f043 0220 	orr.w	r2, r3, #32
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e020      	b.n	8003b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	0c1b      	lsrs	r3, r3, #16
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d10c      	bne.n	8003b3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	43da      	mvns	r2, r3
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	bf14      	ite	ne
 8003b32:	2301      	movne	r3, #1
 8003b34:	2300      	moveq	r3, #0
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	e00b      	b.n	8003b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	43da      	mvns	r2, r3
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	4013      	ands	r3, r2
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	bf14      	ite	ne
 8003b4c:	2301      	movne	r3, #1
 8003b4e:	2300      	moveq	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d18d      	bne.n	8003a72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b6c:	e02d      	b.n	8003bca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 f8ce 	bl	8003d10 <I2C_IsAcknowledgeFailed>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e02d      	b.n	8003bda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b84:	d021      	beq.n	8003bca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b86:	f7fe fe3b 	bl	8002800 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d302      	bcc.n	8003b9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d116      	bne.n	8003bca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb6:	f043 0220 	orr.w	r2, r3, #32
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e007      	b.n	8003bda <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd4:	2b80      	cmp	r3, #128	; 0x80
 8003bd6:	d1ca      	bne.n	8003b6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bee:	e02d      	b.n	8003c4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 f88d 	bl	8003d10 <I2C_IsAcknowledgeFailed>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e02d      	b.n	8003c5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c06:	d021      	beq.n	8003c4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c08:	f7fe fdfa 	bl	8002800 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d302      	bcc.n	8003c1e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d116      	bne.n	8003c4c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	f043 0220 	orr.w	r2, r3, #32
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e007      	b.n	8003c5c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f003 0304 	and.w	r3, r3, #4
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d1ca      	bne.n	8003bf0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c70:	e042      	b.n	8003cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b10      	cmp	r3, #16
 8003c7e:	d119      	bne.n	8003cb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f06f 0210 	mvn.w	r2, #16
 8003c88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e029      	b.n	8003d08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb4:	f7fe fda4 	bl	8002800 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d302      	bcc.n	8003cca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d116      	bne.n	8003cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	f043 0220 	orr.w	r2, r3, #32
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e007      	b.n	8003d08 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d02:	2b40      	cmp	r3, #64	; 0x40
 8003d04:	d1b5      	bne.n	8003c72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d26:	d11b      	bne.n	8003d60 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d30:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4c:	f043 0204 	orr.w	r2, r3, #4
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e000      	b.n	8003d62 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d70:	b08f      	sub	sp, #60	; 0x3c
 8003d72:	af0a      	add	r7, sp, #40	; 0x28
 8003d74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e10f      	b.n	8003fa0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d106      	bne.n	8003da0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f006 f97a 	bl	800a094 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2203      	movs	r2, #3
 8003da4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d102      	bne.n	8003dba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f002 fff9 	bl	8006db6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	603b      	str	r3, [r7, #0]
 8003dca:	687e      	ldr	r6, [r7, #4]
 8003dcc:	466d      	mov	r5, sp
 8003dce:	f106 0410 	add.w	r4, r6, #16
 8003dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dde:	e885 0003 	stmia.w	r5, {r0, r1}
 8003de2:	1d33      	adds	r3, r6, #4
 8003de4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003de6:	6838      	ldr	r0, [r7, #0]
 8003de8:	f002 fed0 	bl	8006b8c <USB_CoreInit>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d005      	beq.n	8003dfe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2202      	movs	r2, #2
 8003df6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e0d0      	b.n	8003fa0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2100      	movs	r1, #0
 8003e04:	4618      	mov	r0, r3
 8003e06:	f002 ffe7 	bl	8006dd8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	73fb      	strb	r3, [r7, #15]
 8003e0e:	e04a      	b.n	8003ea6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e10:	7bfa      	ldrb	r2, [r7, #15]
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	4613      	mov	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	333d      	adds	r3, #61	; 0x3d
 8003e20:	2201      	movs	r2, #1
 8003e22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e24:	7bfa      	ldrb	r2, [r7, #15]
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	333c      	adds	r3, #60	; 0x3c
 8003e34:	7bfa      	ldrb	r2, [r7, #15]
 8003e36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e38:	7bfa      	ldrb	r2, [r7, #15]
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	b298      	uxth	r0, r3
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	3344      	adds	r3, #68	; 0x44
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e50:	7bfa      	ldrb	r2, [r7, #15]
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	4613      	mov	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4413      	add	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	3340      	adds	r3, #64	; 0x40
 8003e60:	2200      	movs	r2, #0
 8003e62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e64:	7bfa      	ldrb	r2, [r7, #15]
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	3348      	adds	r3, #72	; 0x48
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e78:	7bfa      	ldrb	r2, [r7, #15]
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	334c      	adds	r3, #76	; 0x4c
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e8c:	7bfa      	ldrb	r2, [r7, #15]
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	4613      	mov	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	3354      	adds	r3, #84	; 0x54
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	73fb      	strb	r3, [r7, #15]
 8003ea6:	7bfa      	ldrb	r2, [r7, #15]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d3af      	bcc.n	8003e10 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	73fb      	strb	r3, [r7, #15]
 8003eb4:	e044      	b.n	8003f40 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003eb6:	7bfa      	ldrb	r2, [r7, #15]
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003ec8:	2200      	movs	r2, #0
 8003eca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ecc:	7bfa      	ldrb	r2, [r7, #15]
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003ede:	7bfa      	ldrb	r2, [r7, #15]
 8003ee0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ee2:	7bfa      	ldrb	r2, [r7, #15]
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ef8:	7bfa      	ldrb	r2, [r7, #15]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f0e:	7bfa      	ldrb	r2, [r7, #15]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	4413      	add	r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f24:	7bfa      	ldrb	r2, [r7, #15]
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	73fb      	strb	r3, [r7, #15]
 8003f40:	7bfa      	ldrb	r2, [r7, #15]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d3b5      	bcc.n	8003eb6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	603b      	str	r3, [r7, #0]
 8003f50:	687e      	ldr	r6, [r7, #4]
 8003f52:	466d      	mov	r5, sp
 8003f54:	f106 0410 	add.w	r4, r6, #16
 8003f58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f64:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f68:	1d33      	adds	r3, r6, #4
 8003f6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f6c:	6838      	ldr	r0, [r7, #0]
 8003f6e:	f002 ff7f 	bl	8006e70 <USB_DevInit>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e00d      	b.n	8003fa0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f004 f8ce 	bl	800813a <USB_DevDisconnect>

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fa8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_PCD_Start+0x1c>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e020      	b.n	8004006 <HAL_PCD_Start+0x5e>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d109      	bne.n	8003fe8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d005      	beq.n	8003fe8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f002 fed1 	bl	8006d94 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f004 f87e 	bl	80080f8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800400e:	b590      	push	{r4, r7, lr}
 8004010:	b08d      	sub	sp, #52	; 0x34
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f004 f93c 	bl	80082a2 <USB_GetMode>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	f040 848a 	bne.w	8004946 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f004 f8a0 	bl	800817c <USB_ReadInterrupts>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 8480 	beq.w	8004944 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	0a1b      	lsrs	r3, r3, #8
 800404e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f004 f88d 	bl	800817c <USB_ReadInterrupts>
 8004062:	4603      	mov	r3, r0
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b02      	cmp	r3, #2
 800406a:	d107      	bne.n	800407c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	695a      	ldr	r2, [r3, #20]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f002 0202 	and.w	r2, r2, #2
 800407a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f004 f87b 	bl	800817c <USB_ReadInterrupts>
 8004086:	4603      	mov	r3, r0
 8004088:	f003 0310 	and.w	r3, r3, #16
 800408c:	2b10      	cmp	r3, #16
 800408e:	d161      	bne.n	8004154 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0210 	bic.w	r2, r2, #16
 800409e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	f003 020f 	and.w	r2, r3, #15
 80040ac:	4613      	mov	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	4413      	add	r3, r2
 80040bc:	3304      	adds	r3, #4
 80040be:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	0c5b      	lsrs	r3, r3, #17
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d124      	bne.n	8004116 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d035      	beq.n	8004144 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	091b      	lsrs	r3, r3, #4
 80040e0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80040e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	461a      	mov	r2, r3
 80040ea:	6a38      	ldr	r0, [r7, #32]
 80040ec:	f003 feb2 	bl	8007e54 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	091b      	lsrs	r3, r3, #4
 80040f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040fc:	441a      	add	r2, r3
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	6a1a      	ldr	r2, [r3, #32]
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	091b      	lsrs	r3, r3, #4
 800410a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800410e:	441a      	add	r2, r3
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	621a      	str	r2, [r3, #32]
 8004114:	e016      	b.n	8004144 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	0c5b      	lsrs	r3, r3, #17
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	2b06      	cmp	r3, #6
 8004120:	d110      	bne.n	8004144 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004128:	2208      	movs	r2, #8
 800412a:	4619      	mov	r1, r3
 800412c:	6a38      	ldr	r0, [r7, #32]
 800412e:	f003 fe91 	bl	8007e54 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	6a1a      	ldr	r2, [r3, #32]
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	091b      	lsrs	r3, r3, #4
 800413a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800413e:	441a      	add	r2, r3
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699a      	ldr	r2, [r3, #24]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0210 	orr.w	r2, r2, #16
 8004152:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f004 f80f 	bl	800817c <USB_ReadInterrupts>
 800415e:	4603      	mov	r3, r0
 8004160:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004164:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004168:	f040 80a7 	bne.w	80042ba <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800416c:	2300      	movs	r3, #0
 800416e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4618      	mov	r0, r3
 8004176:	f004 f814 	bl	80081a2 <USB_ReadDevAllOutEpInterrupt>
 800417a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800417c:	e099      	b.n	80042b2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800417e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 808e 	beq.w	80042a6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	4611      	mov	r1, r2
 8004194:	4618      	mov	r0, r3
 8004196:	f004 f838 	bl	800820a <USB_ReadDevOutEPInterrupt>
 800419a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00c      	beq.n	80041c0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b2:	461a      	mov	r2, r3
 80041b4:	2301      	movs	r3, #1
 80041b6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80041b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 feaa 	bl	8004f14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00c      	beq.n	80041e4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d6:	461a      	mov	r2, r3
 80041d8:	2308      	movs	r3, #8
 80041da:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80041dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 ff80 	bl	80050e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f003 0310 	and.w	r3, r3, #16
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d008      	beq.n	8004200 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fa:	461a      	mov	r2, r3
 80041fc:	2310      	movs	r3, #16
 80041fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d030      	beq.n	800426c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004212:	2b80      	cmp	r3, #128	; 0x80
 8004214:	d109      	bne.n	800422a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	69fa      	ldr	r2, [r7, #28]
 8004220:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004224:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004228:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800422a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800422c:	4613      	mov	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	4413      	add	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	4413      	add	r3, r2
 800423c:	3304      	adds	r3, #4
 800423e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	78db      	ldrb	r3, [r3, #3]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d108      	bne.n	800425a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2200      	movs	r2, #0
 800424c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	b2db      	uxtb	r3, r3
 8004252:	4619      	mov	r1, r3
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f006 f823 	bl	800a2a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004266:	461a      	mov	r2, r3
 8004268:	2302      	movs	r3, #2
 800426a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f003 0320 	and.w	r3, r3, #32
 8004272:	2b00      	cmp	r3, #0
 8004274:	d008      	beq.n	8004288 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	4413      	add	r3, r2
 800427e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004282:	461a      	mov	r2, r3
 8004284:	2320      	movs	r3, #32
 8004286:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429e:	461a      	mov	r2, r3
 80042a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042a4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80042a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a8:	3301      	adds	r3, #1
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ae:	085b      	lsrs	r3, r3, #1
 80042b0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80042b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f47f af62 	bne.w	800417e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f003 ff5c 	bl	800817c <USB_ReadInterrupts>
 80042c4:	4603      	mov	r3, r0
 80042c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042ce:	f040 80db 	bne.w	8004488 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f003 ff7d 	bl	80081d6 <USB_ReadDevAllInEpInterrupt>
 80042dc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80042e2:	e0cd      	b.n	8004480 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80042e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 80c2 	beq.w	8004474 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	4611      	mov	r1, r2
 80042fa:	4618      	mov	r0, r3
 80042fc:	f003 ffa3 	bl	8008246 <USB_ReadDevInEPInterrupt>
 8004300:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d057      	beq.n	80043bc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	2201      	movs	r2, #1
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004320:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	43db      	mvns	r3, r3
 8004326:	69f9      	ldr	r1, [r7, #28]
 8004328:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800432c:	4013      	ands	r3, r2
 800432e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433c:	461a      	mov	r2, r3
 800433e:	2301      	movs	r3, #1
 8004340:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d132      	bne.n	80043b0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800434e:	4613      	mov	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	334c      	adds	r3, #76	; 0x4c
 800435a:	6819      	ldr	r1, [r3, #0]
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004360:	4613      	mov	r3, r2
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4403      	add	r3, r0
 800436a:	3348      	adds	r3, #72	; 0x48
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4419      	add	r1, r3
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004374:	4613      	mov	r3, r2
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	4413      	add	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4403      	add	r3, r0
 800437e:	334c      	adds	r3, #76	; 0x4c
 8004380:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	2b00      	cmp	r3, #0
 8004386:	d113      	bne.n	80043b0 <HAL_PCD_IRQHandler+0x3a2>
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800438c:	4613      	mov	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	4413      	add	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	3354      	adds	r3, #84	; 0x54
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d108      	bne.n	80043b0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043a8:	461a      	mov	r2, r3
 80043aa:	2101      	movs	r1, #1
 80043ac:	f003 ffaa 	bl	8008304 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	4619      	mov	r1, r3
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f005 feed 	bl	800a196 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d008      	beq.n	80043d8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d2:	461a      	mov	r2, r3
 80043d4:	2308      	movs	r3, #8
 80043d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	f003 0310 	and.w	r3, r3, #16
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d008      	beq.n	80043f4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ee:	461a      	mov	r2, r3
 80043f0:	2310      	movs	r3, #16
 80043f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d008      	beq.n	8004410 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800440a:	461a      	mov	r2, r3
 800440c:	2340      	movs	r3, #64	; 0x40
 800440e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d023      	beq.n	8004462 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800441a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800441c:	6a38      	ldr	r0, [r7, #32]
 800441e:	f002 fe8b 	bl	8007138 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004424:	4613      	mov	r3, r2
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	4413      	add	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	3338      	adds	r3, #56	; 0x38
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	4413      	add	r3, r2
 8004432:	3304      	adds	r3, #4
 8004434:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	78db      	ldrb	r3, [r3, #3]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d108      	bne.n	8004450 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2200      	movs	r2, #0
 8004442:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	b2db      	uxtb	r3, r3
 8004448:	4619      	mov	r1, r3
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f005 ff3a 	bl	800a2c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	4413      	add	r3, r2
 8004458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445c:	461a      	mov	r2, r3
 800445e:	2302      	movs	r3, #2
 8004460:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800446c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fcc3 	bl	8004dfa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	3301      	adds	r3, #1
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800447a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447c:	085b      	lsrs	r3, r3, #1
 800447e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004482:	2b00      	cmp	r3, #0
 8004484:	f47f af2e 	bne.w	80042e4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f003 fe75 	bl	800817c <USB_ReadInterrupts>
 8004492:	4603      	mov	r3, r0
 8004494:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004498:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800449c:	d122      	bne.n	80044e4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d108      	bne.n	80044ce <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80044c4:	2100      	movs	r1, #0
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 feaa 	bl	8005220 <HAL_PCDEx_LPM_Callback>
 80044cc:	e002      	b.n	80044d4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f005 fed8 	bl	800a284 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	695a      	ldr	r2, [r3, #20]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80044e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f003 fe47 	bl	800817c <USB_ReadInterrupts>
 80044ee:	4603      	mov	r3, r0
 80044f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044f8:	d112      	bne.n	8004520 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b01      	cmp	r3, #1
 8004508:	d102      	bne.n	8004510 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f005 fe94 	bl	800a238 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695a      	ldr	r2, [r3, #20]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800451e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4618      	mov	r0, r3
 8004526:	f003 fe29 	bl	800817c <USB_ReadInterrupts>
 800452a:	4603      	mov	r3, r0
 800452c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004534:	f040 80b7 	bne.w	80046a6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	69fa      	ldr	r2, [r7, #28]
 8004542:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004546:	f023 0301 	bic.w	r3, r3, #1
 800454a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2110      	movs	r1, #16
 8004552:	4618      	mov	r0, r3
 8004554:	f002 fdf0 	bl	8007138 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004558:	2300      	movs	r3, #0
 800455a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800455c:	e046      	b.n	80045ec <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800455e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	4413      	add	r3, r2
 8004566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456a:	461a      	mov	r2, r3
 800456c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004570:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004582:	0151      	lsls	r1, r2, #5
 8004584:	69fa      	ldr	r2, [r7, #28]
 8004586:	440a      	add	r2, r1
 8004588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800458c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004590:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	4413      	add	r3, r2
 800459a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459e:	461a      	mov	r2, r3
 80045a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045a4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80045a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045b6:	0151      	lsls	r1, r2, #5
 80045b8:	69fa      	ldr	r2, [r7, #28]
 80045ba:	440a      	add	r2, r1
 80045bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045d6:	0151      	lsls	r1, r2, #5
 80045d8:	69fa      	ldr	r2, [r7, #28]
 80045da:	440a      	add	r2, r1
 80045dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045e4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e8:	3301      	adds	r3, #1
 80045ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d3b3      	bcc.n	800455e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	69fa      	ldr	r2, [r7, #28]
 8004600:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004604:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004608:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	2b00      	cmp	r3, #0
 8004610:	d016      	beq.n	8004640 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800461c:	69fa      	ldr	r2, [r7, #28]
 800461e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004622:	f043 030b 	orr.w	r3, r3, #11
 8004626:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	69fa      	ldr	r2, [r7, #28]
 8004634:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004638:	f043 030b 	orr.w	r3, r3, #11
 800463c:	6453      	str	r3, [r2, #68]	; 0x44
 800463e:	e015      	b.n	800466c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	69fa      	ldr	r2, [r7, #28]
 800464a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800464e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004652:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004656:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	69fa      	ldr	r2, [r7, #28]
 8004662:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004666:	f043 030b 	orr.w	r3, r3, #11
 800466a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	69fa      	ldr	r2, [r7, #28]
 8004676:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800467a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800467e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6818      	ldr	r0, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004690:	461a      	mov	r2, r3
 8004692:	f003 fe37 	bl	8008304 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695a      	ldr	r2, [r3, #20]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80046a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f003 fd66 	bl	800817c <USB_ReadInterrupts>
 80046b0:	4603      	mov	r3, r0
 80046b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ba:	d124      	bne.n	8004706 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f003 fdfc 	bl	80082be <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f002 fdb1 	bl	8007232 <USB_GetDevSpeed>
 80046d0:	4603      	mov	r3, r0
 80046d2:	461a      	mov	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681c      	ldr	r4, [r3, #0]
 80046dc:	f001 fa10 	bl	8005b00 <HAL_RCC_GetHCLKFreq>
 80046e0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	461a      	mov	r2, r3
 80046ea:	4620      	mov	r0, r4
 80046ec:	f002 fab0 	bl	8006c50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f005 fd78 	bl	800a1e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695a      	ldr	r2, [r3, #20]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004704:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f003 fd36 	bl	800817c <USB_ReadInterrupts>
 8004710:	4603      	mov	r3, r0
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b08      	cmp	r3, #8
 8004718:	d10a      	bne.n	8004730 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f005 fd55 	bl	800a1ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695a      	ldr	r2, [r3, #20]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f002 0208 	and.w	r2, r2, #8
 800472e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f003 fd21 	bl	800817c <USB_ReadInterrupts>
 800473a:	4603      	mov	r3, r0
 800473c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004740:	2b80      	cmp	r3, #128	; 0x80
 8004742:	d122      	bne.n	800478a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004750:	2301      	movs	r3, #1
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
 8004754:	e014      	b.n	8004780 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800475a:	4613      	mov	r3, r2
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	4413      	add	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	440b      	add	r3, r1
 8004764:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d105      	bne.n	800477a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	b2db      	uxtb	r3, r3
 8004772:	4619      	mov	r1, r3
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 fb0f 	bl	8004d98 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	3301      	adds	r3, #1
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004786:	429a      	cmp	r2, r3
 8004788:	d3e5      	bcc.n	8004756 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4618      	mov	r0, r3
 8004790:	f003 fcf4 	bl	800817c <USB_ReadInterrupts>
 8004794:	4603      	mov	r3, r0
 8004796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800479a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800479e:	d13b      	bne.n	8004818 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047a0:	2301      	movs	r3, #1
 80047a2:	627b      	str	r3, [r7, #36]	; 0x24
 80047a4:	e02b      	b.n	80047fe <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ba:	4613      	mov	r3, r2
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	4413      	add	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	440b      	add	r3, r1
 80047c4:	3340      	adds	r3, #64	; 0x40
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d115      	bne.n	80047f8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80047cc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	da12      	bge.n	80047f8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d6:	4613      	mov	r3, r2
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	333f      	adds	r3, #63	; 0x3f
 80047e2:	2201      	movs	r2, #1
 80047e4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	4619      	mov	r1, r3
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fad0 	bl	8004d98 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	3301      	adds	r3, #1
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004804:	429a      	cmp	r2, r3
 8004806:	d3ce      	bcc.n	80047a6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695a      	ldr	r2, [r3, #20]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004816:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f003 fcad 	bl	800817c <USB_ReadInterrupts>
 8004822:	4603      	mov	r3, r0
 8004824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004828:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800482c:	d155      	bne.n	80048da <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800482e:	2301      	movs	r3, #1
 8004830:	627b      	str	r3, [r7, #36]	; 0x24
 8004832:	e045      	b.n	80048c0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004848:	4613      	mov	r3, r2
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	4413      	add	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d12e      	bne.n	80048ba <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800485c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800485e:	2b00      	cmp	r3, #0
 8004860:	da2b      	bge.n	80048ba <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800486e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004872:	429a      	cmp	r2, r3
 8004874:	d121      	bne.n	80048ba <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800487a:	4613      	mov	r3, r2
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	4413      	add	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	440b      	add	r3, r1
 8004884:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004888:	2201      	movs	r2, #1
 800488a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	69fa      	ldr	r2, [r7, #28]
 80048ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048b6:	6053      	str	r3, [r2, #4]
            break;
 80048b8:	e007      	b.n	80048ca <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	3301      	adds	r3, #1
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d3b4      	bcc.n	8004834 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695a      	ldr	r2, [r3, #20]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80048d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f003 fc4c 	bl	800817c <USB_ReadInterrupts>
 80048e4:	4603      	mov	r3, r0
 80048e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ee:	d10a      	bne.n	8004906 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f005 fcf9 	bl	800a2e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	695a      	ldr	r2, [r3, #20]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004904:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f003 fc36 	bl	800817c <USB_ReadInterrupts>
 8004910:	4603      	mov	r3, r0
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b04      	cmp	r3, #4
 8004918:	d115      	bne.n	8004946 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f005 fce9 	bl	800a304 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6859      	ldr	r1, [r3, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	430a      	orrs	r2, r1
 8004940:	605a      	str	r2, [r3, #4]
 8004942:	e000      	b.n	8004946 <HAL_PCD_IRQHandler+0x938>
      return;
 8004944:	bf00      	nop
    }
  }
}
 8004946:	3734      	adds	r7, #52	; 0x34
 8004948:	46bd      	mov	sp, r7
 800494a:	bd90      	pop	{r4, r7, pc}

0800494c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800495e:	2b01      	cmp	r3, #1
 8004960:	d101      	bne.n	8004966 <HAL_PCD_SetAddress+0x1a>
 8004962:	2302      	movs	r3, #2
 8004964:	e013      	b.n	800498e <HAL_PCD_SetAddress+0x42>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	78fa      	ldrb	r2, [r7, #3]
 8004972:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	78fa      	ldrb	r2, [r7, #3]
 800497c:	4611      	mov	r1, r2
 800497e:	4618      	mov	r0, r3
 8004980:	f003 fb94 	bl	80080ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b084      	sub	sp, #16
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	4608      	mov	r0, r1
 80049a0:	4611      	mov	r1, r2
 80049a2:	461a      	mov	r2, r3
 80049a4:	4603      	mov	r3, r0
 80049a6:	70fb      	strb	r3, [r7, #3]
 80049a8:	460b      	mov	r3, r1
 80049aa:	803b      	strh	r3, [r7, #0]
 80049ac:	4613      	mov	r3, r2
 80049ae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	da0f      	bge.n	80049dc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049bc:	78fb      	ldrb	r3, [r7, #3]
 80049be:	f003 020f 	and.w	r2, r3, #15
 80049c2:	4613      	mov	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	4413      	add	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	3338      	adds	r3, #56	; 0x38
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	4413      	add	r3, r2
 80049d0:	3304      	adds	r3, #4
 80049d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2201      	movs	r2, #1
 80049d8:	705a      	strb	r2, [r3, #1]
 80049da:	e00f      	b.n	80049fc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	f003 020f 	and.w	r2, r3, #15
 80049e2:	4613      	mov	r3, r2
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	4413      	add	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	4413      	add	r3, r2
 80049f2:	3304      	adds	r3, #4
 80049f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80049fc:	78fb      	ldrb	r3, [r7, #3]
 80049fe:	f003 030f 	and.w	r3, r3, #15
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004a08:	883a      	ldrh	r2, [r7, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	78ba      	ldrb	r2, [r7, #2]
 8004a12:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	785b      	ldrb	r3, [r3, #1]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d004      	beq.n	8004a26 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a26:	78bb      	ldrb	r3, [r7, #2]
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d102      	bne.n	8004a32 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_PCD_EP_Open+0xaa>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e00e      	b.n	8004a5e <HAL_PCD_EP_Open+0xc8>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68f9      	ldr	r1, [r7, #12]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f002 fc14 	bl	800727c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004a5c:	7afb      	ldrb	r3, [r7, #11]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b084      	sub	sp, #16
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
 8004a6e:	460b      	mov	r3, r1
 8004a70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	da0f      	bge.n	8004a9a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a7a:	78fb      	ldrb	r3, [r7, #3]
 8004a7c:	f003 020f 	and.w	r2, r3, #15
 8004a80:	4613      	mov	r3, r2
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	4413      	add	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	3338      	adds	r3, #56	; 0x38
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	3304      	adds	r3, #4
 8004a90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	705a      	strb	r2, [r3, #1]
 8004a98:	e00f      	b.n	8004aba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	f003 020f 	and.w	r2, r3, #15
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	4413      	add	r3, r2
 8004ab0:	3304      	adds	r3, #4
 8004ab2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004aba:	78fb      	ldrb	r3, [r7, #3]
 8004abc:	f003 030f 	and.w	r3, r3, #15
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_PCD_EP_Close+0x6e>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e00e      	b.n	8004af2 <HAL_PCD_EP_Close+0x8c>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68f9      	ldr	r1, [r7, #12]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f002 fc52 	bl	800738c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b086      	sub	sp, #24
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	60f8      	str	r0, [r7, #12]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	603b      	str	r3, [r7, #0]
 8004b06:	460b      	mov	r3, r1
 8004b08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b0a:	7afb      	ldrb	r3, [r7, #11]
 8004b0c:	f003 020f 	and.w	r2, r3, #15
 8004b10:	4613      	mov	r3, r2
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	4413      	add	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	4413      	add	r3, r2
 8004b20:	3304      	adds	r3, #4
 8004b22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	2200      	movs	r2, #0
 8004b34:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b3c:	7afb      	ldrb	r3, [r7, #11]
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d102      	bne.n	8004b56 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b56:	7afb      	ldrb	r3, [r7, #11]
 8004b58:	f003 030f 	and.w	r3, r3, #15
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d109      	bne.n	8004b74 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6818      	ldr	r0, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	6979      	ldr	r1, [r7, #20]
 8004b6e:	f002 ff31 	bl	80079d4 <USB_EP0StartXfer>
 8004b72:	e008      	b.n	8004b86 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6818      	ldr	r0, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	461a      	mov	r2, r3
 8004b80:	6979      	ldr	r1, [r7, #20]
 8004b82:	f002 fcdf 	bl	8007544 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	607a      	str	r2, [r7, #4]
 8004b9a:	603b      	str	r3, [r7, #0]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ba0:	7afb      	ldrb	r3, [r7, #11]
 8004ba2:	f003 020f 	and.w	r2, r3, #15
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	4413      	add	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	3338      	adds	r3, #56	; 0x38
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	683a      	ldr	r2, [r7, #0]
 8004bc2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bd0:	7afb      	ldrb	r3, [r7, #11]
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d102      	bne.n	8004bea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004bea:	7afb      	ldrb	r3, [r7, #11]
 8004bec:	f003 030f 	and.w	r3, r3, #15
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d109      	bne.n	8004c08 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6818      	ldr	r0, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	461a      	mov	r2, r3
 8004c00:	6979      	ldr	r1, [r7, #20]
 8004c02:	f002 fee7 	bl	80079d4 <USB_EP0StartXfer>
 8004c06:	e008      	b.n	8004c1a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6818      	ldr	r0, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	461a      	mov	r2, r3
 8004c14:	6979      	ldr	r1, [r7, #20]
 8004c16:	f002 fc95 	bl	8007544 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004c30:	78fb      	ldrb	r3, [r7, #3]
 8004c32:	f003 020f 	and.w	r2, r3, #15
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d901      	bls.n	8004c42 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e050      	b.n	8004ce4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	da0f      	bge.n	8004c6a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c4a:	78fb      	ldrb	r3, [r7, #3]
 8004c4c:	f003 020f 	and.w	r2, r3, #15
 8004c50:	4613      	mov	r3, r2
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	4413      	add	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	3338      	adds	r3, #56	; 0x38
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	3304      	adds	r3, #4
 8004c60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	705a      	strb	r2, [r3, #1]
 8004c68:	e00d      	b.n	8004c86 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c6a:	78fa      	ldrb	r2, [r7, #3]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	4413      	add	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c8c:	78fb      	ldrb	r3, [r7, #3]
 8004c8e:	f003 030f 	and.w	r3, r3, #15
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_PCD_EP_SetStall+0x82>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e01e      	b.n	8004ce4 <HAL_PCD_EP_SetStall+0xc0>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68f9      	ldr	r1, [r7, #12]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f003 f925 	bl	8007f04 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cba:	78fb      	ldrb	r3, [r7, #3]
 8004cbc:	f003 030f 	and.w	r3, r3, #15
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10a      	bne.n	8004cda <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6818      	ldr	r0, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	b2d9      	uxtb	r1, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f003 fb15 	bl	8008304 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004cf8:	78fb      	ldrb	r3, [r7, #3]
 8004cfa:	f003 020f 	and.w	r2, r3, #15
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d901      	bls.n	8004d0a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e042      	b.n	8004d90 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	da0f      	bge.n	8004d32 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d12:	78fb      	ldrb	r3, [r7, #3]
 8004d14:	f003 020f 	and.w	r2, r3, #15
 8004d18:	4613      	mov	r3, r2
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	3338      	adds	r3, #56	; 0x38
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	4413      	add	r3, r2
 8004d26:	3304      	adds	r3, #4
 8004d28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	705a      	strb	r2, [r3, #1]
 8004d30:	e00f      	b.n	8004d52 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d32:	78fb      	ldrb	r3, [r7, #3]
 8004d34:	f003 020f 	and.w	r2, r3, #15
 8004d38:	4613      	mov	r3, r2
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	4413      	add	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	4413      	add	r3, r2
 8004d48:	3304      	adds	r3, #4
 8004d4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d58:	78fb      	ldrb	r3, [r7, #3]
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d101      	bne.n	8004d72 <HAL_PCD_EP_ClrStall+0x86>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	e00e      	b.n	8004d90 <HAL_PCD_EP_ClrStall+0xa4>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68f9      	ldr	r1, [r7, #12]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f003 f92d 	bl	8007fe0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	460b      	mov	r3, r1
 8004da2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004da4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	da0c      	bge.n	8004dc6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dac:	78fb      	ldrb	r3, [r7, #3]
 8004dae:	f003 020f 	and.w	r2, r3, #15
 8004db2:	4613      	mov	r3, r2
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	4413      	add	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	3338      	adds	r3, #56	; 0x38
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	3304      	adds	r3, #4
 8004dc2:	60fb      	str	r3, [r7, #12]
 8004dc4:	e00c      	b.n	8004de0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dc6:	78fb      	ldrb	r3, [r7, #3]
 8004dc8:	f003 020f 	and.w	r2, r3, #15
 8004dcc:	4613      	mov	r3, r2
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	4413      	add	r3, r2
 8004ddc:	3304      	adds	r3, #4
 8004dde:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68f9      	ldr	r1, [r7, #12]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f002 ff4c 	bl	8007c84 <USB_EPStopXfer>
 8004dec:	4603      	mov	r3, r0
 8004dee:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004df0:	7afb      	ldrb	r3, [r7, #11]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b08a      	sub	sp, #40	; 0x28
 8004dfe:	af02      	add	r7, sp, #8
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	4613      	mov	r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	4413      	add	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	3338      	adds	r3, #56	; 0x38
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	3304      	adds	r3, #4
 8004e20:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6a1a      	ldr	r2, [r3, #32]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d901      	bls.n	8004e32 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e06c      	b.n	8004f0c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	69fa      	ldr	r2, [r7, #28]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d902      	bls.n	8004e4e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	3303      	adds	r3, #3
 8004e52:	089b      	lsrs	r3, r3, #2
 8004e54:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e56:	e02b      	b.n	8004eb0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	699a      	ldr	r2, [r3, #24]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	69fa      	ldr	r2, [r7, #28]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d902      	bls.n	8004e74 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	3303      	adds	r3, #3
 8004e78:	089b      	lsrs	r3, r3, #2
 8004e7a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6919      	ldr	r1, [r3, #16]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	4603      	mov	r3, r0
 8004e92:	6978      	ldr	r0, [r7, #20]
 8004e94:	f002 ffa0 	bl	8007dd8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	691a      	ldr	r2, [r3, #16]
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	441a      	add	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a1a      	ldr	r2, [r3, #32]
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	441a      	add	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d809      	bhi.n	8004eda <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6a1a      	ldr	r2, [r3, #32]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d203      	bcs.n	8004eda <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1be      	bne.n	8004e58 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	699a      	ldr	r2, [r3, #24]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d811      	bhi.n	8004f0a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	f003 030f 	and.w	r3, r3, #15
 8004eec:	2201      	movs	r2, #1
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004efa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	43db      	mvns	r3, r3
 8004f00:	6939      	ldr	r1, [r7, #16]
 8004f02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f06:	4013      	ands	r3, r2
 8004f08:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3720      	adds	r7, #32
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	333c      	adds	r3, #60	; 0x3c
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d17b      	bne.n	8005042 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f003 0308 	and.w	r3, r3, #8
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d015      	beq.n	8004f80 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	4a61      	ldr	r2, [pc, #388]	; (80050dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	f240 80b9 	bls.w	80050d0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 80b3 	beq.w	80050d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f76:	461a      	mov	r2, r3
 8004f78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f7c:	6093      	str	r3, [r2, #8]
 8004f7e:	e0a7      	b.n	80050d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d009      	beq.n	8004f9e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f96:	461a      	mov	r2, r3
 8004f98:	2320      	movs	r3, #32
 8004f9a:	6093      	str	r3, [r2, #8]
 8004f9c:	e098      	b.n	80050d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f040 8093 	bne.w	80050d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	4a4b      	ldr	r2, [pc, #300]	; (80050dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d90f      	bls.n	8004fd2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc8:	461a      	mov	r2, r3
 8004fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fce:	6093      	str	r3, [r2, #8]
 8004fd0:	e07e      	b.n	80050d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	4413      	add	r3, r2
 8004fda:	009b      	lsls	r3, r3, #2
 8004fdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	69da      	ldr	r2, [r3, #28]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	0159      	lsls	r1, r3, #5
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	440b      	add	r3, r1
 8004ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ffe:	1ad2      	subs	r2, r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d114      	bne.n	8005034 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d109      	bne.n	8005026 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800501c:	461a      	mov	r2, r3
 800501e:	2101      	movs	r1, #1
 8005020:	f003 f970 	bl	8008304 <USB_EP0_OutStart>
 8005024:	e006      	b.n	8005034 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	691a      	ldr	r2, [r3, #16]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	441a      	add	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	b2db      	uxtb	r3, r3
 8005038:	4619      	mov	r1, r3
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f005 f890 	bl	800a160 <HAL_PCD_DataOutStageCallback>
 8005040:	e046      	b.n	80050d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	4a26      	ldr	r2, [pc, #152]	; (80050e0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d124      	bne.n	8005094 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00a      	beq.n	800506a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	015a      	lsls	r2, r3, #5
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	4413      	add	r3, r2
 800505c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005060:	461a      	mov	r2, r3
 8005062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005066:	6093      	str	r3, [r2, #8]
 8005068:	e032      	b.n	80050d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b00      	cmp	r3, #0
 8005072:	d008      	beq.n	8005086 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005080:	461a      	mov	r2, r3
 8005082:	2320      	movs	r3, #32
 8005084:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	b2db      	uxtb	r3, r3
 800508a:	4619      	mov	r1, r3
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f005 f867 	bl	800a160 <HAL_PCD_DataOutStageCallback>
 8005092:	e01d      	b.n	80050d0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d114      	bne.n	80050c4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	4613      	mov	r3, r2
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	4413      	add	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	440b      	add	r3, r1
 80050a8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d108      	bne.n	80050c4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6818      	ldr	r0, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80050bc:	461a      	mov	r2, r3
 80050be:	2100      	movs	r1, #0
 80050c0:	f003 f920 	bl	8008304 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	4619      	mov	r1, r3
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f005 f848 	bl	800a160 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3720      	adds	r7, #32
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	4f54300a 	.word	0x4f54300a
 80050e0:	4f54310a 	.word	0x4f54310a

080050e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	333c      	adds	r3, #60	; 0x3c
 80050fc:	3304      	adds	r3, #4
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	4413      	add	r3, r2
 800510a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	4a15      	ldr	r2, [pc, #84]	; (800516c <PCD_EP_OutSetupPacket_int+0x88>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d90e      	bls.n	8005138 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005120:	2b00      	cmp	r3, #0
 8005122:	d009      	beq.n	8005138 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	4413      	add	r3, r2
 800512c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005130:	461a      	mov	r2, r3
 8005132:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005136:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f004 ffff 	bl	800a13c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4a0a      	ldr	r2, [pc, #40]	; (800516c <PCD_EP_OutSetupPacket_int+0x88>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d90c      	bls.n	8005160 <PCD_EP_OutSetupPacket_int+0x7c>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d108      	bne.n	8005160 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6818      	ldr	r0, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005158:	461a      	mov	r2, r3
 800515a:	2101      	movs	r1, #1
 800515c:	f003 f8d2 	bl	8008304 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3718      	adds	r7, #24
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	4f54300a 	.word	0x4f54300a

08005170 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	70fb      	strb	r3, [r7, #3]
 800517c:	4613      	mov	r3, r2
 800517e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d107      	bne.n	800519e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800518e:	883b      	ldrh	r3, [r7, #0]
 8005190:	0419      	lsls	r1, r3, #16
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68ba      	ldr	r2, [r7, #8]
 8005198:	430a      	orrs	r2, r1
 800519a:	629a      	str	r2, [r3, #40]	; 0x28
 800519c:	e028      	b.n	80051f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a4:	0c1b      	lsrs	r3, r3, #16
 80051a6:	68ba      	ldr	r2, [r7, #8]
 80051a8:	4413      	add	r3, r2
 80051aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80051ac:	2300      	movs	r3, #0
 80051ae:	73fb      	strb	r3, [r7, #15]
 80051b0:	e00d      	b.n	80051ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	7bfb      	ldrb	r3, [r7, #15]
 80051b8:	3340      	adds	r3, #64	; 0x40
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	0c1b      	lsrs	r3, r3, #16
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	4413      	add	r3, r2
 80051c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
 80051ca:	3301      	adds	r3, #1
 80051cc:	73fb      	strb	r3, [r7, #15]
 80051ce:	7bfa      	ldrb	r2, [r7, #15]
 80051d0:	78fb      	ldrb	r3, [r7, #3]
 80051d2:	3b01      	subs	r3, #1
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d3ec      	bcc.n	80051b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80051d8:	883b      	ldrh	r3, [r7, #0]
 80051da:	0418      	lsls	r0, r3, #16
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6819      	ldr	r1, [r3, #0]
 80051e0:	78fb      	ldrb	r3, [r7, #3]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	4302      	orrs	r2, r0
 80051e8:	3340      	adds	r3, #64	; 0x40
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	440b      	add	r3, r1
 80051ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	460b      	mov	r3, r1
 8005208:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	887a      	ldrh	r2, [r7, #2]
 8005210:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	460b      	mov	r3, r1
 800522a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e267      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d075      	beq.n	8005342 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005256:	4b88      	ldr	r3, [pc, #544]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 030c 	and.w	r3, r3, #12
 800525e:	2b04      	cmp	r3, #4
 8005260:	d00c      	beq.n	800527c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005262:	4b85      	ldr	r3, [pc, #532]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800526a:	2b08      	cmp	r3, #8
 800526c:	d112      	bne.n	8005294 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800526e:	4b82      	ldr	r3, [pc, #520]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800527a:	d10b      	bne.n	8005294 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800527c:	4b7e      	ldr	r3, [pc, #504]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d05b      	beq.n	8005340 <HAL_RCC_OscConfig+0x108>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d157      	bne.n	8005340 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e242      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800529c:	d106      	bne.n	80052ac <HAL_RCC_OscConfig+0x74>
 800529e:	4b76      	ldr	r3, [pc, #472]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a75      	ldr	r2, [pc, #468]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 80052a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	e01d      	b.n	80052e8 <HAL_RCC_OscConfig+0xb0>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052b4:	d10c      	bne.n	80052d0 <HAL_RCC_OscConfig+0x98>
 80052b6:	4b70      	ldr	r3, [pc, #448]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a6f      	ldr	r2, [pc, #444]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 80052bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	4b6d      	ldr	r3, [pc, #436]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a6c      	ldr	r2, [pc, #432]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 80052c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	e00b      	b.n	80052e8 <HAL_RCC_OscConfig+0xb0>
 80052d0:	4b69      	ldr	r3, [pc, #420]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a68      	ldr	r2, [pc, #416]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 80052d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052da:	6013      	str	r3, [r2, #0]
 80052dc:	4b66      	ldr	r3, [pc, #408]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a65      	ldr	r2, [pc, #404]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 80052e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d013      	beq.n	8005318 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f0:	f7fd fa86 	bl	8002800 <HAL_GetTick>
 80052f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052f6:	e008      	b.n	800530a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052f8:	f7fd fa82 	bl	8002800 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b64      	cmp	r3, #100	; 0x64
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e207      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800530a:	4b5b      	ldr	r3, [pc, #364]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d0f0      	beq.n	80052f8 <HAL_RCC_OscConfig+0xc0>
 8005316:	e014      	b.n	8005342 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005318:	f7fd fa72 	bl	8002800 <HAL_GetTick>
 800531c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005320:	f7fd fa6e 	bl	8002800 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b64      	cmp	r3, #100	; 0x64
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e1f3      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005332:	4b51      	ldr	r3, [pc, #324]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f0      	bne.n	8005320 <HAL_RCC_OscConfig+0xe8>
 800533e:	e000      	b.n	8005342 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d063      	beq.n	8005416 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800534e:	4b4a      	ldr	r3, [pc, #296]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 030c 	and.w	r3, r3, #12
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00b      	beq.n	8005372 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800535a:	4b47      	ldr	r3, [pc, #284]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005362:	2b08      	cmp	r3, #8
 8005364:	d11c      	bne.n	80053a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005366:	4b44      	ldr	r3, [pc, #272]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d116      	bne.n	80053a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005372:	4b41      	ldr	r3, [pc, #260]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <HAL_RCC_OscConfig+0x152>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d001      	beq.n	800538a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e1c7      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800538a:	4b3b      	ldr	r3, [pc, #236]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	4937      	ldr	r1, [pc, #220]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 800539a:	4313      	orrs	r3, r2
 800539c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800539e:	e03a      	b.n	8005416 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d020      	beq.n	80053ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053a8:	4b34      	ldr	r3, [pc, #208]	; (800547c <HAL_RCC_OscConfig+0x244>)
 80053aa:	2201      	movs	r2, #1
 80053ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ae:	f7fd fa27 	bl	8002800 <HAL_GetTick>
 80053b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053b4:	e008      	b.n	80053c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053b6:	f7fd fa23 	bl	8002800 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e1a8      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053c8:	4b2b      	ldr	r3, [pc, #172]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0f0      	beq.n	80053b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053d4:	4b28      	ldr	r3, [pc, #160]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	4925      	ldr	r1, [pc, #148]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	600b      	str	r3, [r1, #0]
 80053e8:	e015      	b.n	8005416 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ea:	4b24      	ldr	r3, [pc, #144]	; (800547c <HAL_RCC_OscConfig+0x244>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f0:	f7fd fa06 	bl	8002800 <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053f6:	e008      	b.n	800540a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053f8:	f7fd fa02 	bl	8002800 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b02      	cmp	r3, #2
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e187      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800540a:	4b1b      	ldr	r3, [pc, #108]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1f0      	bne.n	80053f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0308 	and.w	r3, r3, #8
 800541e:	2b00      	cmp	r3, #0
 8005420:	d036      	beq.n	8005490 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d016      	beq.n	8005458 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800542a:	4b15      	ldr	r3, [pc, #84]	; (8005480 <HAL_RCC_OscConfig+0x248>)
 800542c:	2201      	movs	r2, #1
 800542e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005430:	f7fd f9e6 	bl	8002800 <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005436:	e008      	b.n	800544a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005438:	f7fd f9e2 	bl	8002800 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e167      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800544a:	4b0b      	ldr	r3, [pc, #44]	; (8005478 <HAL_RCC_OscConfig+0x240>)
 800544c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d0f0      	beq.n	8005438 <HAL_RCC_OscConfig+0x200>
 8005456:	e01b      	b.n	8005490 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005458:	4b09      	ldr	r3, [pc, #36]	; (8005480 <HAL_RCC_OscConfig+0x248>)
 800545a:	2200      	movs	r2, #0
 800545c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800545e:	f7fd f9cf 	bl	8002800 <HAL_GetTick>
 8005462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005464:	e00e      	b.n	8005484 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005466:	f7fd f9cb 	bl	8002800 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d907      	bls.n	8005484 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e150      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
 8005478:	40023800 	.word	0x40023800
 800547c:	42470000 	.word	0x42470000
 8005480:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005484:	4b88      	ldr	r3, [pc, #544]	; (80056a8 <HAL_RCC_OscConfig+0x470>)
 8005486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1ea      	bne.n	8005466 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 8097 	beq.w	80055cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800549e:	2300      	movs	r3, #0
 80054a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054a2:	4b81      	ldr	r3, [pc, #516]	; (80056a8 <HAL_RCC_OscConfig+0x470>)
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10f      	bne.n	80054ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ae:	2300      	movs	r3, #0
 80054b0:	60bb      	str	r3, [r7, #8]
 80054b2:	4b7d      	ldr	r3, [pc, #500]	; (80056a8 <HAL_RCC_OscConfig+0x470>)
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	4a7c      	ldr	r2, [pc, #496]	; (80056a8 <HAL_RCC_OscConfig+0x470>)
 80054b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054bc:	6413      	str	r3, [r2, #64]	; 0x40
 80054be:	4b7a      	ldr	r3, [pc, #488]	; (80056a8 <HAL_RCC_OscConfig+0x470>)
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054c6:	60bb      	str	r3, [r7, #8]
 80054c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054ca:	2301      	movs	r3, #1
 80054cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ce:	4b77      	ldr	r3, [pc, #476]	; (80056ac <HAL_RCC_OscConfig+0x474>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d118      	bne.n	800550c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054da:	4b74      	ldr	r3, [pc, #464]	; (80056ac <HAL_RCC_OscConfig+0x474>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a73      	ldr	r2, [pc, #460]	; (80056ac <HAL_RCC_OscConfig+0x474>)
 80054e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054e6:	f7fd f98b 	bl	8002800 <HAL_GetTick>
 80054ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ec:	e008      	b.n	8005500 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ee:	f7fd f987 	bl	8002800 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e10c      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005500:	4b6a      	ldr	r3, [pc, #424]	; (80056ac <HAL_RCC_OscConfig+0x474>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0f0      	beq.n	80054ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d106      	bne.n	8005522 <HAL_RCC_OscConfig+0x2ea>
 8005514:	4b64      	ldr	r3, [pc, #400]	; (80056a8 <HAL_RCC_OscConfig+0x470>)
 8005516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005518:	4a63      	ldr	r2, [pc, #396]	; (80056a8 <HAL_RCC_OscConfig+0x470>)
 800551a:	f043 0301 	orr.w	r3, r3, #1
 800551e:	6713      	str	r3, [r2, #112]	; 0x70
 8005520:	e01c      	b.n	800555c <HAL_RCC_OscConfig+0x324>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	2b05      	cmp	r3, #5
 8005528:	d10c      	bne.n	8005544 <HAL_RCC_OscConfig+0x30c>
 800552a:	4b5f      	ldr	r3, [pc, #380]	; (80056a8 <HAL_RCC_OscConfig+0x470>)
 800552c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800552e:	4a5e      	ldr	r2, [pc, #376]	; (80056a8 <HAL_RCC_OscConfig+0x470>)
 8005530:	f043 0304 	orr.w	r3, r3, #4
 8005534:	6713      	str	r3, [r2, #112]	; 0x70
 8005536:	4b5c      	ldr	r3, [pc, #368]	; (80056a8 <HAL_RCC_OscConfig+0x470>)
 8005538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553a:	4a5b      	ldr	r2, [pc, #364]	; (80056a8 <HAL_RCC_OscConfig+0x470>)
 800553c:	f043 0301 	orr.w	r3, r3, #1
 8005540:	6713      	str	r3, [r2, #112]	; 0x70
 8005542:	e00b      	b.n	800555c <HAL_RCC_OscConfig+0x324>
 8005544:	4b58      	ldr	r3, [pc, #352]	; (80056a8 <HAL_RCC_OscConfig+0x470>)
 8005546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005548:	4a57      	ldr	r2, [pc, #348]	; (80056a8 <HAL_RCC_OscConfig+0x470>)
 800554a:	f023 0301 	bic.w	r3, r3, #1
 800554e:	6713      	str	r3, [r2, #112]	; 0x70
 8005550:	4b55      	ldr	r3, [pc, #340]	; (80056a8 <HAL_RCC_OscConfig+0x470>)
 8005552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005554:	4a54      	ldr	r2, [pc, #336]	; (80056a8 <HAL_RCC_OscConfig+0x470>)
 8005556:	f023 0304 	bic.w	r3, r3, #4
 800555a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d015      	beq.n	8005590 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005564:	f7fd f94c 	bl	8002800 <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800556a:	e00a      	b.n	8005582 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800556c:	f7fd f948 	bl	8002800 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	f241 3288 	movw	r2, #5000	; 0x1388
 800557a:	4293      	cmp	r3, r2
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e0cb      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005582:	4b49      	ldr	r3, [pc, #292]	; (80056a8 <HAL_RCC_OscConfig+0x470>)
 8005584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0ee      	beq.n	800556c <HAL_RCC_OscConfig+0x334>
 800558e:	e014      	b.n	80055ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005590:	f7fd f936 	bl	8002800 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005596:	e00a      	b.n	80055ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005598:	f7fd f932 	bl	8002800 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e0b5      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ae:	4b3e      	ldr	r3, [pc, #248]	; (80056a8 <HAL_RCC_OscConfig+0x470>)
 80055b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1ee      	bne.n	8005598 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055ba:	7dfb      	ldrb	r3, [r7, #23]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d105      	bne.n	80055cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055c0:	4b39      	ldr	r3, [pc, #228]	; (80056a8 <HAL_RCC_OscConfig+0x470>)
 80055c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c4:	4a38      	ldr	r2, [pc, #224]	; (80056a8 <HAL_RCC_OscConfig+0x470>)
 80055c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 80a1 	beq.w	8005718 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055d6:	4b34      	ldr	r3, [pc, #208]	; (80056a8 <HAL_RCC_OscConfig+0x470>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 030c 	and.w	r3, r3, #12
 80055de:	2b08      	cmp	r3, #8
 80055e0:	d05c      	beq.n	800569c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d141      	bne.n	800566e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ea:	4b31      	ldr	r3, [pc, #196]	; (80056b0 <HAL_RCC_OscConfig+0x478>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f0:	f7fd f906 	bl	8002800 <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055f8:	f7fd f902 	bl	8002800 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e087      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800560a:	4b27      	ldr	r3, [pc, #156]	; (80056a8 <HAL_RCC_OscConfig+0x470>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1f0      	bne.n	80055f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	69da      	ldr	r2, [r3, #28]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	019b      	lsls	r3, r3, #6
 8005626:	431a      	orrs	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562c:	085b      	lsrs	r3, r3, #1
 800562e:	3b01      	subs	r3, #1
 8005630:	041b      	lsls	r3, r3, #16
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005638:	061b      	lsls	r3, r3, #24
 800563a:	491b      	ldr	r1, [pc, #108]	; (80056a8 <HAL_RCC_OscConfig+0x470>)
 800563c:	4313      	orrs	r3, r2
 800563e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005640:	4b1b      	ldr	r3, [pc, #108]	; (80056b0 <HAL_RCC_OscConfig+0x478>)
 8005642:	2201      	movs	r2, #1
 8005644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005646:	f7fd f8db 	bl	8002800 <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800564e:	f7fd f8d7 	bl	8002800 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e05c      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005660:	4b11      	ldr	r3, [pc, #68]	; (80056a8 <HAL_RCC_OscConfig+0x470>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0f0      	beq.n	800564e <HAL_RCC_OscConfig+0x416>
 800566c:	e054      	b.n	8005718 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800566e:	4b10      	ldr	r3, [pc, #64]	; (80056b0 <HAL_RCC_OscConfig+0x478>)
 8005670:	2200      	movs	r2, #0
 8005672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005674:	f7fd f8c4 	bl	8002800 <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800567c:	f7fd f8c0 	bl	8002800 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e045      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800568e:	4b06      	ldr	r3, [pc, #24]	; (80056a8 <HAL_RCC_OscConfig+0x470>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1f0      	bne.n	800567c <HAL_RCC_OscConfig+0x444>
 800569a:	e03d      	b.n	8005718 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d107      	bne.n	80056b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e038      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
 80056a8:	40023800 	.word	0x40023800
 80056ac:	40007000 	.word	0x40007000
 80056b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056b4:	4b1b      	ldr	r3, [pc, #108]	; (8005724 <HAL_RCC_OscConfig+0x4ec>)
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d028      	beq.n	8005714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d121      	bne.n	8005714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056da:	429a      	cmp	r2, r3
 80056dc:	d11a      	bne.n	8005714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056e4:	4013      	ands	r3, r2
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d111      	bne.n	8005714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fa:	085b      	lsrs	r3, r3, #1
 80056fc:	3b01      	subs	r3, #1
 80056fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005700:	429a      	cmp	r2, r3
 8005702:	d107      	bne.n	8005714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005710:	429a      	cmp	r2, r3
 8005712:	d001      	beq.n	8005718 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e000      	b.n	800571a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	40023800 	.word	0x40023800

08005728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e0cc      	b.n	80058d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800573c:	4b68      	ldr	r3, [pc, #416]	; (80058e0 <HAL_RCC_ClockConfig+0x1b8>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	429a      	cmp	r2, r3
 8005748:	d90c      	bls.n	8005764 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800574a:	4b65      	ldr	r3, [pc, #404]	; (80058e0 <HAL_RCC_ClockConfig+0x1b8>)
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	b2d2      	uxtb	r2, r2
 8005750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005752:	4b63      	ldr	r3, [pc, #396]	; (80058e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	429a      	cmp	r2, r3
 800575e:	d001      	beq.n	8005764 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e0b8      	b.n	80058d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d020      	beq.n	80057b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0304 	and.w	r3, r3, #4
 8005778:	2b00      	cmp	r3, #0
 800577a:	d005      	beq.n	8005788 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800577c:	4b59      	ldr	r3, [pc, #356]	; (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	4a58      	ldr	r2, [pc, #352]	; (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005782:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005786:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	2b00      	cmp	r3, #0
 8005792:	d005      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005794:	4b53      	ldr	r3, [pc, #332]	; (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	4a52      	ldr	r2, [pc, #328]	; (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 800579a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800579e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057a0:	4b50      	ldr	r3, [pc, #320]	; (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	494d      	ldr	r1, [pc, #308]	; (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d044      	beq.n	8005848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d107      	bne.n	80057d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057c6:	4b47      	ldr	r3, [pc, #284]	; (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d119      	bne.n	8005806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e07f      	b.n	80058d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d003      	beq.n	80057e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d107      	bne.n	80057f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057e6:	4b3f      	ldr	r3, [pc, #252]	; (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d109      	bne.n	8005806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e06f      	b.n	80058d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057f6:	4b3b      	ldr	r3, [pc, #236]	; (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e067      	b.n	80058d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005806:	4b37      	ldr	r3, [pc, #220]	; (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f023 0203 	bic.w	r2, r3, #3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	4934      	ldr	r1, [pc, #208]	; (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005814:	4313      	orrs	r3, r2
 8005816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005818:	f7fc fff2 	bl	8002800 <HAL_GetTick>
 800581c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800581e:	e00a      	b.n	8005836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005820:	f7fc ffee 	bl	8002800 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	f241 3288 	movw	r2, #5000	; 0x1388
 800582e:	4293      	cmp	r3, r2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e04f      	b.n	80058d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005836:	4b2b      	ldr	r3, [pc, #172]	; (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f003 020c 	and.w	r2, r3, #12
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	429a      	cmp	r2, r3
 8005846:	d1eb      	bne.n	8005820 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005848:	4b25      	ldr	r3, [pc, #148]	; (80058e0 <HAL_RCC_ClockConfig+0x1b8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0307 	and.w	r3, r3, #7
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	429a      	cmp	r2, r3
 8005854:	d20c      	bcs.n	8005870 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005856:	4b22      	ldr	r3, [pc, #136]	; (80058e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	b2d2      	uxtb	r2, r2
 800585c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800585e:	4b20      	ldr	r3, [pc, #128]	; (80058e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	429a      	cmp	r2, r3
 800586a:	d001      	beq.n	8005870 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e032      	b.n	80058d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0304 	and.w	r3, r3, #4
 8005878:	2b00      	cmp	r3, #0
 800587a:	d008      	beq.n	800588e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800587c:	4b19      	ldr	r3, [pc, #100]	; (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	4916      	ldr	r1, [pc, #88]	; (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	4313      	orrs	r3, r2
 800588c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b00      	cmp	r3, #0
 8005898:	d009      	beq.n	80058ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800589a:	4b12      	ldr	r3, [pc, #72]	; (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	490e      	ldr	r1, [pc, #56]	; (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058ae:	f000 f821 	bl	80058f4 <HAL_RCC_GetSysClockFreq>
 80058b2:	4602      	mov	r2, r0
 80058b4:	4b0b      	ldr	r3, [pc, #44]	; (80058e4 <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	091b      	lsrs	r3, r3, #4
 80058ba:	f003 030f 	and.w	r3, r3, #15
 80058be:	490a      	ldr	r1, [pc, #40]	; (80058e8 <HAL_RCC_ClockConfig+0x1c0>)
 80058c0:	5ccb      	ldrb	r3, [r1, r3]
 80058c2:	fa22 f303 	lsr.w	r3, r2, r3
 80058c6:	4a09      	ldr	r2, [pc, #36]	; (80058ec <HAL_RCC_ClockConfig+0x1c4>)
 80058c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80058ca:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <HAL_RCC_ClockConfig+0x1c8>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fc ff52 	bl	8002778 <HAL_InitTick>

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	40023c00 	.word	0x40023c00
 80058e4:	40023800 	.word	0x40023800
 80058e8:	0800d884 	.word	0x0800d884
 80058ec:	20000028 	.word	0x20000028
 80058f0:	2000002c 	.word	0x2000002c

080058f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058f8:	b094      	sub	sp, #80	; 0x50
 80058fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	647b      	str	r3, [r7, #68]	; 0x44
 8005900:	2300      	movs	r3, #0
 8005902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005904:	2300      	movs	r3, #0
 8005906:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005908:	2300      	movs	r3, #0
 800590a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800590c:	4b79      	ldr	r3, [pc, #484]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x200>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f003 030c 	and.w	r3, r3, #12
 8005914:	2b08      	cmp	r3, #8
 8005916:	d00d      	beq.n	8005934 <HAL_RCC_GetSysClockFreq+0x40>
 8005918:	2b08      	cmp	r3, #8
 800591a:	f200 80e1 	bhi.w	8005ae0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <HAL_RCC_GetSysClockFreq+0x34>
 8005922:	2b04      	cmp	r3, #4
 8005924:	d003      	beq.n	800592e <HAL_RCC_GetSysClockFreq+0x3a>
 8005926:	e0db      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005928:	4b73      	ldr	r3, [pc, #460]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x204>)
 800592a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800592c:	e0db      	b.n	8005ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800592e:	4b73      	ldr	r3, [pc, #460]	; (8005afc <HAL_RCC_GetSysClockFreq+0x208>)
 8005930:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005932:	e0d8      	b.n	8005ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005934:	4b6f      	ldr	r3, [pc, #444]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800593c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800593e:	4b6d      	ldr	r3, [pc, #436]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d063      	beq.n	8005a12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800594a:	4b6a      	ldr	r3, [pc, #424]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x200>)
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	099b      	lsrs	r3, r3, #6
 8005950:	2200      	movs	r2, #0
 8005952:	63bb      	str	r3, [r7, #56]	; 0x38
 8005954:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595c:	633b      	str	r3, [r7, #48]	; 0x30
 800595e:	2300      	movs	r3, #0
 8005960:	637b      	str	r3, [r7, #52]	; 0x34
 8005962:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005966:	4622      	mov	r2, r4
 8005968:	462b      	mov	r3, r5
 800596a:	f04f 0000 	mov.w	r0, #0
 800596e:	f04f 0100 	mov.w	r1, #0
 8005972:	0159      	lsls	r1, r3, #5
 8005974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005978:	0150      	lsls	r0, r2, #5
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	4621      	mov	r1, r4
 8005980:	1a51      	subs	r1, r2, r1
 8005982:	6139      	str	r1, [r7, #16]
 8005984:	4629      	mov	r1, r5
 8005986:	eb63 0301 	sbc.w	r3, r3, r1
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	f04f 0200 	mov.w	r2, #0
 8005990:	f04f 0300 	mov.w	r3, #0
 8005994:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005998:	4659      	mov	r1, fp
 800599a:	018b      	lsls	r3, r1, #6
 800599c:	4651      	mov	r1, sl
 800599e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059a2:	4651      	mov	r1, sl
 80059a4:	018a      	lsls	r2, r1, #6
 80059a6:	4651      	mov	r1, sl
 80059a8:	ebb2 0801 	subs.w	r8, r2, r1
 80059ac:	4659      	mov	r1, fp
 80059ae:	eb63 0901 	sbc.w	r9, r3, r1
 80059b2:	f04f 0200 	mov.w	r2, #0
 80059b6:	f04f 0300 	mov.w	r3, #0
 80059ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059c6:	4690      	mov	r8, r2
 80059c8:	4699      	mov	r9, r3
 80059ca:	4623      	mov	r3, r4
 80059cc:	eb18 0303 	adds.w	r3, r8, r3
 80059d0:	60bb      	str	r3, [r7, #8]
 80059d2:	462b      	mov	r3, r5
 80059d4:	eb49 0303 	adc.w	r3, r9, r3
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	f04f 0200 	mov.w	r2, #0
 80059de:	f04f 0300 	mov.w	r3, #0
 80059e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059e6:	4629      	mov	r1, r5
 80059e8:	024b      	lsls	r3, r1, #9
 80059ea:	4621      	mov	r1, r4
 80059ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059f0:	4621      	mov	r1, r4
 80059f2:	024a      	lsls	r2, r1, #9
 80059f4:	4610      	mov	r0, r2
 80059f6:	4619      	mov	r1, r3
 80059f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059fa:	2200      	movs	r2, #0
 80059fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80059fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a04:	f7fb f928 	bl	8000c58 <__aeabi_uldivmod>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a10:	e058      	b.n	8005ac4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a12:	4b38      	ldr	r3, [pc, #224]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	099b      	lsrs	r3, r3, #6
 8005a18:	2200      	movs	r2, #0
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a22:	623b      	str	r3, [r7, #32]
 8005a24:	2300      	movs	r3, #0
 8005a26:	627b      	str	r3, [r7, #36]	; 0x24
 8005a28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a2c:	4642      	mov	r2, r8
 8005a2e:	464b      	mov	r3, r9
 8005a30:	f04f 0000 	mov.w	r0, #0
 8005a34:	f04f 0100 	mov.w	r1, #0
 8005a38:	0159      	lsls	r1, r3, #5
 8005a3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a3e:	0150      	lsls	r0, r2, #5
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4641      	mov	r1, r8
 8005a46:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a64:	ebb2 040a 	subs.w	r4, r2, sl
 8005a68:	eb63 050b 	sbc.w	r5, r3, fp
 8005a6c:	f04f 0200 	mov.w	r2, #0
 8005a70:	f04f 0300 	mov.w	r3, #0
 8005a74:	00eb      	lsls	r3, r5, #3
 8005a76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a7a:	00e2      	lsls	r2, r4, #3
 8005a7c:	4614      	mov	r4, r2
 8005a7e:	461d      	mov	r5, r3
 8005a80:	4643      	mov	r3, r8
 8005a82:	18e3      	adds	r3, r4, r3
 8005a84:	603b      	str	r3, [r7, #0]
 8005a86:	464b      	mov	r3, r9
 8005a88:	eb45 0303 	adc.w	r3, r5, r3
 8005a8c:	607b      	str	r3, [r7, #4]
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	f04f 0300 	mov.w	r3, #0
 8005a96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a9a:	4629      	mov	r1, r5
 8005a9c:	028b      	lsls	r3, r1, #10
 8005a9e:	4621      	mov	r1, r4
 8005aa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005aa4:	4621      	mov	r1, r4
 8005aa6:	028a      	lsls	r2, r1, #10
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	4619      	mov	r1, r3
 8005aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aae:	2200      	movs	r2, #0
 8005ab0:	61bb      	str	r3, [r7, #24]
 8005ab2:	61fa      	str	r2, [r7, #28]
 8005ab4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ab8:	f7fb f8ce 	bl	8000c58 <__aeabi_uldivmod>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ac4:	4b0b      	ldr	r3, [pc, #44]	; (8005af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	0c1b      	lsrs	r3, r3, #16
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	3301      	adds	r3, #1
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005ad4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005adc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ade:	e002      	b.n	8005ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ae0:	4b05      	ldr	r3, [pc, #20]	; (8005af8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ae2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3750      	adds	r7, #80	; 0x50
 8005aec:	46bd      	mov	sp, r7
 8005aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005af2:	bf00      	nop
 8005af4:	40023800 	.word	0x40023800
 8005af8:	00f42400 	.word	0x00f42400
 8005afc:	007a1200 	.word	0x007a1200

08005b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b04:	4b03      	ldr	r3, [pc, #12]	; (8005b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b06:	681b      	ldr	r3, [r3, #0]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	20000028 	.word	0x20000028

08005b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b1c:	f7ff fff0 	bl	8005b00 <HAL_RCC_GetHCLKFreq>
 8005b20:	4602      	mov	r2, r0
 8005b22:	4b05      	ldr	r3, [pc, #20]	; (8005b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	0a9b      	lsrs	r3, r3, #10
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	4903      	ldr	r1, [pc, #12]	; (8005b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b2e:	5ccb      	ldrb	r3, [r1, r3]
 8005b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	0800d894 	.word	0x0800d894

08005b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b44:	f7ff ffdc 	bl	8005b00 <HAL_RCC_GetHCLKFreq>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	4b05      	ldr	r3, [pc, #20]	; (8005b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	0b5b      	lsrs	r3, r3, #13
 8005b50:	f003 0307 	and.w	r3, r3, #7
 8005b54:	4903      	ldr	r1, [pc, #12]	; (8005b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b56:	5ccb      	ldrb	r3, [r1, r3]
 8005b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	40023800 	.word	0x40023800
 8005b64:	0800d894 	.word	0x0800d894

08005b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e041      	b.n	8005bfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d106      	bne.n	8005b94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fc fbd6 	bl	8002340 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2202      	movs	r2, #2
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	4610      	mov	r0, r2
 8005ba8:	f000 fa92 	bl	80060d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3708      	adds	r7, #8
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d001      	beq.n	8005c20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e044      	b.n	8005caa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0201 	orr.w	r2, r2, #1
 8005c36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a1e      	ldr	r2, [pc, #120]	; (8005cb8 <HAL_TIM_Base_Start_IT+0xb0>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d018      	beq.n	8005c74 <HAL_TIM_Base_Start_IT+0x6c>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c4a:	d013      	beq.n	8005c74 <HAL_TIM_Base_Start_IT+0x6c>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a1a      	ldr	r2, [pc, #104]	; (8005cbc <HAL_TIM_Base_Start_IT+0xb4>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d00e      	beq.n	8005c74 <HAL_TIM_Base_Start_IT+0x6c>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a19      	ldr	r2, [pc, #100]	; (8005cc0 <HAL_TIM_Base_Start_IT+0xb8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d009      	beq.n	8005c74 <HAL_TIM_Base_Start_IT+0x6c>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a17      	ldr	r2, [pc, #92]	; (8005cc4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d004      	beq.n	8005c74 <HAL_TIM_Base_Start_IT+0x6c>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a16      	ldr	r2, [pc, #88]	; (8005cc8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d111      	bne.n	8005c98 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f003 0307 	and.w	r3, r3, #7
 8005c7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2b06      	cmp	r3, #6
 8005c84:	d010      	beq.n	8005ca8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f042 0201 	orr.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c96:	e007      	b.n	8005ca8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0201 	orr.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3714      	adds	r7, #20
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	40010000 	.word	0x40010000
 8005cbc:	40000400 	.word	0x40000400
 8005cc0:	40000800 	.word	0x40000800
 8005cc4:	40000c00 	.word	0x40000c00
 8005cc8:	40014000 	.word	0x40014000

08005ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d122      	bne.n	8005d28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f003 0302 	and.w	r3, r3, #2
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d11b      	bne.n	8005d28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f06f 0202 	mvn.w	r2, #2
 8005cf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	f003 0303 	and.w	r3, r3, #3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f9bf 	bl	8006092 <HAL_TIM_IC_CaptureCallback>
 8005d14:	e005      	b.n	8005d22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f9b1 	bl	800607e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f9c2 	bl	80060a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f003 0304 	and.w	r3, r3, #4
 8005d32:	2b04      	cmp	r3, #4
 8005d34:	d122      	bne.n	8005d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b04      	cmp	r3, #4
 8005d42:	d11b      	bne.n	8005d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f06f 0204 	mvn.w	r2, #4
 8005d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2202      	movs	r2, #2
 8005d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f995 	bl	8006092 <HAL_TIM_IC_CaptureCallback>
 8005d68:	e005      	b.n	8005d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f987 	bl	800607e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f998 	bl	80060a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	f003 0308 	and.w	r3, r3, #8
 8005d86:	2b08      	cmp	r3, #8
 8005d88:	d122      	bne.n	8005dd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f003 0308 	and.w	r3, r3, #8
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d11b      	bne.n	8005dd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f06f 0208 	mvn.w	r2, #8
 8005da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2204      	movs	r2, #4
 8005da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	f003 0303 	and.w	r3, r3, #3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f96b 	bl	8006092 <HAL_TIM_IC_CaptureCallback>
 8005dbc:	e005      	b.n	8005dca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f95d 	bl	800607e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f96e 	bl	80060a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f003 0310 	and.w	r3, r3, #16
 8005dda:	2b10      	cmp	r3, #16
 8005ddc:	d122      	bne.n	8005e24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f003 0310 	and.w	r3, r3, #16
 8005de8:	2b10      	cmp	r3, #16
 8005dea:	d11b      	bne.n	8005e24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f06f 0210 	mvn.w	r2, #16
 8005df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2208      	movs	r2, #8
 8005dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f941 	bl	8006092 <HAL_TIM_IC_CaptureCallback>
 8005e10:	e005      	b.n	8005e1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f933 	bl	800607e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f944 	bl	80060a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d10e      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d107      	bne.n	8005e50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f06f 0201 	mvn.w	r2, #1
 8005e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 f90d 	bl	800606a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e5a:	2b80      	cmp	r3, #128	; 0x80
 8005e5c:	d10e      	bne.n	8005e7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e68:	2b80      	cmp	r3, #128	; 0x80
 8005e6a:	d107      	bne.n	8005e7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fabc 	bl	80063f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e86:	2b40      	cmp	r3, #64	; 0x40
 8005e88:	d10e      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e94:	2b40      	cmp	r3, #64	; 0x40
 8005e96:	d107      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f909 	bl	80060ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f003 0320 	and.w	r3, r3, #32
 8005eb2:	2b20      	cmp	r3, #32
 8005eb4:	d10e      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f003 0320 	and.w	r3, r3, #32
 8005ec0:	2b20      	cmp	r3, #32
 8005ec2:	d107      	bne.n	8005ed4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f06f 0220 	mvn.w	r2, #32
 8005ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fa86 	bl	80063e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ed4:	bf00      	nop
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d101      	bne.n	8005ef8 <HAL_TIM_ConfigClockSource+0x1c>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e0b4      	b.n	8006062 <HAL_TIM_ConfigClockSource+0x186>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2202      	movs	r2, #2
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f30:	d03e      	beq.n	8005fb0 <HAL_TIM_ConfigClockSource+0xd4>
 8005f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f36:	f200 8087 	bhi.w	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f3e:	f000 8086 	beq.w	800604e <HAL_TIM_ConfigClockSource+0x172>
 8005f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f46:	d87f      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f48:	2b70      	cmp	r3, #112	; 0x70
 8005f4a:	d01a      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0xa6>
 8005f4c:	2b70      	cmp	r3, #112	; 0x70
 8005f4e:	d87b      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f50:	2b60      	cmp	r3, #96	; 0x60
 8005f52:	d050      	beq.n	8005ff6 <HAL_TIM_ConfigClockSource+0x11a>
 8005f54:	2b60      	cmp	r3, #96	; 0x60
 8005f56:	d877      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f58:	2b50      	cmp	r3, #80	; 0x50
 8005f5a:	d03c      	beq.n	8005fd6 <HAL_TIM_ConfigClockSource+0xfa>
 8005f5c:	2b50      	cmp	r3, #80	; 0x50
 8005f5e:	d873      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f60:	2b40      	cmp	r3, #64	; 0x40
 8005f62:	d058      	beq.n	8006016 <HAL_TIM_ConfigClockSource+0x13a>
 8005f64:	2b40      	cmp	r3, #64	; 0x40
 8005f66:	d86f      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f68:	2b30      	cmp	r3, #48	; 0x30
 8005f6a:	d064      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x15a>
 8005f6c:	2b30      	cmp	r3, #48	; 0x30
 8005f6e:	d86b      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d060      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x15a>
 8005f74:	2b20      	cmp	r3, #32
 8005f76:	d867      	bhi.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d05c      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x15a>
 8005f7c:	2b10      	cmp	r3, #16
 8005f7e:	d05a      	beq.n	8006036 <HAL_TIM_ConfigClockSource+0x15a>
 8005f80:	e062      	b.n	8006048 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	6899      	ldr	r1, [r3, #8]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f000 f997 	bl	80062c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005fa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	609a      	str	r2, [r3, #8]
      break;
 8005fae:	e04f      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6818      	ldr	r0, [r3, #0]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	6899      	ldr	r1, [r3, #8]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f000 f980 	bl	80062c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fd2:	609a      	str	r2, [r3, #8]
      break;
 8005fd4:	e03c      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6818      	ldr	r0, [r3, #0]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	6859      	ldr	r1, [r3, #4]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f000 f8f4 	bl	80061d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2150      	movs	r1, #80	; 0x50
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 f94d 	bl	800628e <TIM_ITRx_SetConfig>
      break;
 8005ff4:	e02c      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6818      	ldr	r0, [r3, #0]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	6859      	ldr	r1, [r3, #4]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	461a      	mov	r2, r3
 8006004:	f000 f913 	bl	800622e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2160      	movs	r1, #96	; 0x60
 800600e:	4618      	mov	r0, r3
 8006010:	f000 f93d 	bl	800628e <TIM_ITRx_SetConfig>
      break;
 8006014:	e01c      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6818      	ldr	r0, [r3, #0]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	6859      	ldr	r1, [r3, #4]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	461a      	mov	r2, r3
 8006024:	f000 f8d4 	bl	80061d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2140      	movs	r1, #64	; 0x40
 800602e:	4618      	mov	r0, r3
 8006030:	f000 f92d 	bl	800628e <TIM_ITRx_SetConfig>
      break;
 8006034:	e00c      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4619      	mov	r1, r3
 8006040:	4610      	mov	r0, r2
 8006042:	f000 f924 	bl	800628e <TIM_ITRx_SetConfig>
      break;
 8006046:	e003      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	73fb      	strb	r3, [r7, #15]
      break;
 800604c:	e000      	b.n	8006050 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800604e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006060:	7bfb      	ldrb	r3, [r7, #15]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800606a:	b480      	push	{r7}
 800606c:	b083      	sub	sp, #12
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006072:	bf00      	nop
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006086:	bf00      	nop
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b083      	sub	sp, #12
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060ae:	bf00      	nop
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
	...

080060d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a34      	ldr	r2, [pc, #208]	; (80061b4 <TIM_Base_SetConfig+0xe4>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d00f      	beq.n	8006108 <TIM_Base_SetConfig+0x38>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ee:	d00b      	beq.n	8006108 <TIM_Base_SetConfig+0x38>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a31      	ldr	r2, [pc, #196]	; (80061b8 <TIM_Base_SetConfig+0xe8>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d007      	beq.n	8006108 <TIM_Base_SetConfig+0x38>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a30      	ldr	r2, [pc, #192]	; (80061bc <TIM_Base_SetConfig+0xec>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d003      	beq.n	8006108 <TIM_Base_SetConfig+0x38>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a2f      	ldr	r2, [pc, #188]	; (80061c0 <TIM_Base_SetConfig+0xf0>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d108      	bne.n	800611a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a25      	ldr	r2, [pc, #148]	; (80061b4 <TIM_Base_SetConfig+0xe4>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d01b      	beq.n	800615a <TIM_Base_SetConfig+0x8a>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006128:	d017      	beq.n	800615a <TIM_Base_SetConfig+0x8a>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a22      	ldr	r2, [pc, #136]	; (80061b8 <TIM_Base_SetConfig+0xe8>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d013      	beq.n	800615a <TIM_Base_SetConfig+0x8a>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a21      	ldr	r2, [pc, #132]	; (80061bc <TIM_Base_SetConfig+0xec>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00f      	beq.n	800615a <TIM_Base_SetConfig+0x8a>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a20      	ldr	r2, [pc, #128]	; (80061c0 <TIM_Base_SetConfig+0xf0>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d00b      	beq.n	800615a <TIM_Base_SetConfig+0x8a>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a1f      	ldr	r2, [pc, #124]	; (80061c4 <TIM_Base_SetConfig+0xf4>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d007      	beq.n	800615a <TIM_Base_SetConfig+0x8a>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a1e      	ldr	r2, [pc, #120]	; (80061c8 <TIM_Base_SetConfig+0xf8>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d003      	beq.n	800615a <TIM_Base_SetConfig+0x8a>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a1d      	ldr	r2, [pc, #116]	; (80061cc <TIM_Base_SetConfig+0xfc>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d108      	bne.n	800616c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	4313      	orrs	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	689a      	ldr	r2, [r3, #8]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a08      	ldr	r2, [pc, #32]	; (80061b4 <TIM_Base_SetConfig+0xe4>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d103      	bne.n	80061a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	615a      	str	r2, [r3, #20]
}
 80061a6:	bf00      	nop
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	40010000 	.word	0x40010000
 80061b8:	40000400 	.word	0x40000400
 80061bc:	40000800 	.word	0x40000800
 80061c0:	40000c00 	.word	0x40000c00
 80061c4:	40014000 	.word	0x40014000
 80061c8:	40014400 	.word	0x40014400
 80061cc:	40014800 	.word	0x40014800

080061d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b087      	sub	sp, #28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	f023 0201 	bic.w	r2, r3, #1
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	011b      	lsls	r3, r3, #4
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	4313      	orrs	r3, r2
 8006204:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f023 030a 	bic.w	r3, r3, #10
 800620c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	4313      	orrs	r3, r2
 8006214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	621a      	str	r2, [r3, #32]
}
 8006222:	bf00      	nop
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800622e:	b480      	push	{r7}
 8006230:	b087      	sub	sp, #28
 8006232:	af00      	add	r7, sp, #0
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	60b9      	str	r1, [r7, #8]
 8006238:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	f023 0210 	bic.w	r2, r3, #16
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006258:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	031b      	lsls	r3, r3, #12
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800626a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	011b      	lsls	r3, r3, #4
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	4313      	orrs	r3, r2
 8006274:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	621a      	str	r2, [r3, #32]
}
 8006282:	bf00      	nop
 8006284:	371c      	adds	r7, #28
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800628e:	b480      	push	{r7}
 8006290:	b085      	sub	sp, #20
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
 8006296:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	f043 0307 	orr.w	r3, r3, #7
 80062b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	609a      	str	r2, [r3, #8]
}
 80062b8:	bf00      	nop
 80062ba:	3714      	adds	r7, #20
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
 80062d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	021a      	lsls	r2, r3, #8
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	609a      	str	r2, [r3, #8]
}
 80062f8:	bf00      	nop
 80062fa:	371c      	adds	r7, #28
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006314:	2b01      	cmp	r3, #1
 8006316:	d101      	bne.n	800631c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006318:	2302      	movs	r3, #2
 800631a:	e050      	b.n	80063be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2202      	movs	r2, #2
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006342:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	4313      	orrs	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a1c      	ldr	r2, [pc, #112]	; (80063cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d018      	beq.n	8006392 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006368:	d013      	beq.n	8006392 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a18      	ldr	r2, [pc, #96]	; (80063d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d00e      	beq.n	8006392 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a16      	ldr	r2, [pc, #88]	; (80063d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d009      	beq.n	8006392 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a15      	ldr	r2, [pc, #84]	; (80063d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d004      	beq.n	8006392 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a13      	ldr	r2, [pc, #76]	; (80063dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d10c      	bne.n	80063ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006398:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	40010000 	.word	0x40010000
 80063d0:	40000400 	.word	0x40000400
 80063d4:	40000800 	.word	0x40000800
 80063d8:	40000c00 	.word	0x40000c00
 80063dc:	40014000 	.word	0x40014000

080063e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e03f      	b.n	800649a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d106      	bne.n	8006434 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f7fb ffae 	bl	8002390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2224      	movs	r2, #36	; 0x24
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68da      	ldr	r2, [r3, #12]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800644a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f929 	bl	80066a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	691a      	ldr	r2, [r3, #16]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006460:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	695a      	ldr	r2, [r3, #20]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006470:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006480:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2220      	movs	r2, #32
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2220      	movs	r2, #32
 8006494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b08a      	sub	sp, #40	; 0x28
 80064a6:	af02      	add	r7, sp, #8
 80064a8:	60f8      	str	r0, [r7, #12]
 80064aa:	60b9      	str	r1, [r7, #8]
 80064ac:	603b      	str	r3, [r7, #0]
 80064ae:	4613      	mov	r3, r2
 80064b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b20      	cmp	r3, #32
 80064c0:	d17c      	bne.n	80065bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <HAL_UART_Transmit+0x2c>
 80064c8:	88fb      	ldrh	r3, [r7, #6]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d101      	bne.n	80064d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e075      	b.n	80065be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d101      	bne.n	80064e0 <HAL_UART_Transmit+0x3e>
 80064dc:	2302      	movs	r3, #2
 80064de:	e06e      	b.n	80065be <HAL_UART_Transmit+0x11c>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2221      	movs	r2, #33	; 0x21
 80064f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064f6:	f7fc f983 	bl	8002800 <HAL_GetTick>
 80064fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	88fa      	ldrh	r2, [r7, #6]
 8006500:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	88fa      	ldrh	r2, [r7, #6]
 8006506:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006510:	d108      	bne.n	8006524 <HAL_UART_Transmit+0x82>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d104      	bne.n	8006524 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800651a:	2300      	movs	r3, #0
 800651c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	61bb      	str	r3, [r7, #24]
 8006522:	e003      	b.n	800652c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006528:	2300      	movs	r3, #0
 800652a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006534:	e02a      	b.n	800658c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2200      	movs	r2, #0
 800653e:	2180      	movs	r1, #128	; 0x80
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 f840 	bl	80065c6 <UART_WaitOnFlagUntilTimeout>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d001      	beq.n	8006550 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e036      	b.n	80065be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10b      	bne.n	800656e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	461a      	mov	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006564:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	3302      	adds	r3, #2
 800656a:	61bb      	str	r3, [r7, #24]
 800656c:	e007      	b.n	800657e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	781a      	ldrb	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	3301      	adds	r3, #1
 800657c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006582:	b29b      	uxth	r3, r3
 8006584:	3b01      	subs	r3, #1
 8006586:	b29a      	uxth	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006590:	b29b      	uxth	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1cf      	bne.n	8006536 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2200      	movs	r2, #0
 800659e:	2140      	movs	r1, #64	; 0x40
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 f810 	bl	80065c6 <UART_WaitOnFlagUntilTimeout>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e006      	b.n	80065be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2220      	movs	r2, #32
 80065b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80065b8:	2300      	movs	r3, #0
 80065ba:	e000      	b.n	80065be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80065bc:	2302      	movs	r3, #2
  }
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3720      	adds	r7, #32
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b090      	sub	sp, #64	; 0x40
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	60b9      	str	r1, [r7, #8]
 80065d0:	603b      	str	r3, [r7, #0]
 80065d2:	4613      	mov	r3, r2
 80065d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065d6:	e050      	b.n	800667a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065de:	d04c      	beq.n	800667a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80065e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d007      	beq.n	80065f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80065e6:	f7fc f90b 	bl	8002800 <HAL_GetTick>
 80065ea:	4602      	mov	r2, r0
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d241      	bcs.n	800667a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	330c      	adds	r3, #12
 80065fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	e853 3f00 	ldrex	r3, [r3]
 8006604:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800660c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	330c      	adds	r3, #12
 8006614:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006616:	637a      	str	r2, [r7, #52]	; 0x34
 8006618:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800661c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800661e:	e841 2300 	strex	r3, r2, [r1]
 8006622:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1e5      	bne.n	80065f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3314      	adds	r3, #20
 8006630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	e853 3f00 	ldrex	r3, [r3]
 8006638:	613b      	str	r3, [r7, #16]
   return(result);
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	f023 0301 	bic.w	r3, r3, #1
 8006640:	63bb      	str	r3, [r7, #56]	; 0x38
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3314      	adds	r3, #20
 8006648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800664a:	623a      	str	r2, [r7, #32]
 800664c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664e:	69f9      	ldr	r1, [r7, #28]
 8006650:	6a3a      	ldr	r2, [r7, #32]
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	61bb      	str	r3, [r7, #24]
   return(result);
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e5      	bne.n	800662a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2220      	movs	r2, #32
 8006662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2220      	movs	r2, #32
 800666a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e00f      	b.n	800669a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	4013      	ands	r3, r2
 8006684:	68ba      	ldr	r2, [r7, #8]
 8006686:	429a      	cmp	r2, r3
 8006688:	bf0c      	ite	eq
 800668a:	2301      	moveq	r3, #1
 800668c:	2300      	movne	r3, #0
 800668e:	b2db      	uxtb	r3, r3
 8006690:	461a      	mov	r2, r3
 8006692:	79fb      	ldrb	r3, [r7, #7]
 8006694:	429a      	cmp	r2, r3
 8006696:	d09f      	beq.n	80065d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3740      	adds	r7, #64	; 0x40
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
	...

080066a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066a8:	b0c0      	sub	sp, #256	; 0x100
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c0:	68d9      	ldr	r1, [r3, #12]
 80066c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	ea40 0301 	orr.w	r3, r0, r1
 80066cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	431a      	orrs	r2, r3
 80066dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	431a      	orrs	r2, r3
 80066e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066fc:	f021 010c 	bic.w	r1, r1, #12
 8006700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800670a:	430b      	orrs	r3, r1
 800670c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800670e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800671a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671e:	6999      	ldr	r1, [r3, #24]
 8006720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	ea40 0301 	orr.w	r3, r0, r1
 800672a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800672c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	4b8f      	ldr	r3, [pc, #572]	; (8006970 <UART_SetConfig+0x2cc>)
 8006734:	429a      	cmp	r2, r3
 8006736:	d005      	beq.n	8006744 <UART_SetConfig+0xa0>
 8006738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	4b8d      	ldr	r3, [pc, #564]	; (8006974 <UART_SetConfig+0x2d0>)
 8006740:	429a      	cmp	r2, r3
 8006742:	d104      	bne.n	800674e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006744:	f7ff f9fc 	bl	8005b40 <HAL_RCC_GetPCLK2Freq>
 8006748:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800674c:	e003      	b.n	8006756 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800674e:	f7ff f9e3 	bl	8005b18 <HAL_RCC_GetPCLK1Freq>
 8006752:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800675a:	69db      	ldr	r3, [r3, #28]
 800675c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006760:	f040 810c 	bne.w	800697c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006768:	2200      	movs	r2, #0
 800676a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800676e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006772:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006776:	4622      	mov	r2, r4
 8006778:	462b      	mov	r3, r5
 800677a:	1891      	adds	r1, r2, r2
 800677c:	65b9      	str	r1, [r7, #88]	; 0x58
 800677e:	415b      	adcs	r3, r3
 8006780:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006782:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006786:	4621      	mov	r1, r4
 8006788:	eb12 0801 	adds.w	r8, r2, r1
 800678c:	4629      	mov	r1, r5
 800678e:	eb43 0901 	adc.w	r9, r3, r1
 8006792:	f04f 0200 	mov.w	r2, #0
 8006796:	f04f 0300 	mov.w	r3, #0
 800679a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800679e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067a6:	4690      	mov	r8, r2
 80067a8:	4699      	mov	r9, r3
 80067aa:	4623      	mov	r3, r4
 80067ac:	eb18 0303 	adds.w	r3, r8, r3
 80067b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80067b4:	462b      	mov	r3, r5
 80067b6:	eb49 0303 	adc.w	r3, r9, r3
 80067ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80067be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80067ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80067ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80067d2:	460b      	mov	r3, r1
 80067d4:	18db      	adds	r3, r3, r3
 80067d6:	653b      	str	r3, [r7, #80]	; 0x50
 80067d8:	4613      	mov	r3, r2
 80067da:	eb42 0303 	adc.w	r3, r2, r3
 80067de:	657b      	str	r3, [r7, #84]	; 0x54
 80067e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80067e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80067e8:	f7fa fa36 	bl	8000c58 <__aeabi_uldivmod>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	4b61      	ldr	r3, [pc, #388]	; (8006978 <UART_SetConfig+0x2d4>)
 80067f2:	fba3 2302 	umull	r2, r3, r3, r2
 80067f6:	095b      	lsrs	r3, r3, #5
 80067f8:	011c      	lsls	r4, r3, #4
 80067fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067fe:	2200      	movs	r2, #0
 8006800:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006804:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006808:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800680c:	4642      	mov	r2, r8
 800680e:	464b      	mov	r3, r9
 8006810:	1891      	adds	r1, r2, r2
 8006812:	64b9      	str	r1, [r7, #72]	; 0x48
 8006814:	415b      	adcs	r3, r3
 8006816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006818:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800681c:	4641      	mov	r1, r8
 800681e:	eb12 0a01 	adds.w	sl, r2, r1
 8006822:	4649      	mov	r1, r9
 8006824:	eb43 0b01 	adc.w	fp, r3, r1
 8006828:	f04f 0200 	mov.w	r2, #0
 800682c:	f04f 0300 	mov.w	r3, #0
 8006830:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006834:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006838:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800683c:	4692      	mov	sl, r2
 800683e:	469b      	mov	fp, r3
 8006840:	4643      	mov	r3, r8
 8006842:	eb1a 0303 	adds.w	r3, sl, r3
 8006846:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800684a:	464b      	mov	r3, r9
 800684c:	eb4b 0303 	adc.w	r3, fp, r3
 8006850:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006860:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006864:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006868:	460b      	mov	r3, r1
 800686a:	18db      	adds	r3, r3, r3
 800686c:	643b      	str	r3, [r7, #64]	; 0x40
 800686e:	4613      	mov	r3, r2
 8006870:	eb42 0303 	adc.w	r3, r2, r3
 8006874:	647b      	str	r3, [r7, #68]	; 0x44
 8006876:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800687a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800687e:	f7fa f9eb 	bl	8000c58 <__aeabi_uldivmod>
 8006882:	4602      	mov	r2, r0
 8006884:	460b      	mov	r3, r1
 8006886:	4611      	mov	r1, r2
 8006888:	4b3b      	ldr	r3, [pc, #236]	; (8006978 <UART_SetConfig+0x2d4>)
 800688a:	fba3 2301 	umull	r2, r3, r3, r1
 800688e:	095b      	lsrs	r3, r3, #5
 8006890:	2264      	movs	r2, #100	; 0x64
 8006892:	fb02 f303 	mul.w	r3, r2, r3
 8006896:	1acb      	subs	r3, r1, r3
 8006898:	00db      	lsls	r3, r3, #3
 800689a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800689e:	4b36      	ldr	r3, [pc, #216]	; (8006978 <UART_SetConfig+0x2d4>)
 80068a0:	fba3 2302 	umull	r2, r3, r3, r2
 80068a4:	095b      	lsrs	r3, r3, #5
 80068a6:	005b      	lsls	r3, r3, #1
 80068a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80068ac:	441c      	add	r4, r3
 80068ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80068bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80068c0:	4642      	mov	r2, r8
 80068c2:	464b      	mov	r3, r9
 80068c4:	1891      	adds	r1, r2, r2
 80068c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80068c8:	415b      	adcs	r3, r3
 80068ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80068d0:	4641      	mov	r1, r8
 80068d2:	1851      	adds	r1, r2, r1
 80068d4:	6339      	str	r1, [r7, #48]	; 0x30
 80068d6:	4649      	mov	r1, r9
 80068d8:	414b      	adcs	r3, r1
 80068da:	637b      	str	r3, [r7, #52]	; 0x34
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80068e8:	4659      	mov	r1, fp
 80068ea:	00cb      	lsls	r3, r1, #3
 80068ec:	4651      	mov	r1, sl
 80068ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068f2:	4651      	mov	r1, sl
 80068f4:	00ca      	lsls	r2, r1, #3
 80068f6:	4610      	mov	r0, r2
 80068f8:	4619      	mov	r1, r3
 80068fa:	4603      	mov	r3, r0
 80068fc:	4642      	mov	r2, r8
 80068fe:	189b      	adds	r3, r3, r2
 8006900:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006904:	464b      	mov	r3, r9
 8006906:	460a      	mov	r2, r1
 8006908:	eb42 0303 	adc.w	r3, r2, r3
 800690c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800691c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006920:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006924:	460b      	mov	r3, r1
 8006926:	18db      	adds	r3, r3, r3
 8006928:	62bb      	str	r3, [r7, #40]	; 0x28
 800692a:	4613      	mov	r3, r2
 800692c:	eb42 0303 	adc.w	r3, r2, r3
 8006930:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006932:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006936:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800693a:	f7fa f98d 	bl	8000c58 <__aeabi_uldivmod>
 800693e:	4602      	mov	r2, r0
 8006940:	460b      	mov	r3, r1
 8006942:	4b0d      	ldr	r3, [pc, #52]	; (8006978 <UART_SetConfig+0x2d4>)
 8006944:	fba3 1302 	umull	r1, r3, r3, r2
 8006948:	095b      	lsrs	r3, r3, #5
 800694a:	2164      	movs	r1, #100	; 0x64
 800694c:	fb01 f303 	mul.w	r3, r1, r3
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	3332      	adds	r3, #50	; 0x32
 8006956:	4a08      	ldr	r2, [pc, #32]	; (8006978 <UART_SetConfig+0x2d4>)
 8006958:	fba2 2303 	umull	r2, r3, r2, r3
 800695c:	095b      	lsrs	r3, r3, #5
 800695e:	f003 0207 	and.w	r2, r3, #7
 8006962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4422      	add	r2, r4
 800696a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800696c:	e105      	b.n	8006b7a <UART_SetConfig+0x4d6>
 800696e:	bf00      	nop
 8006970:	40011000 	.word	0x40011000
 8006974:	40011400 	.word	0x40011400
 8006978:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800697c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006980:	2200      	movs	r2, #0
 8006982:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006986:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800698a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800698e:	4642      	mov	r2, r8
 8006990:	464b      	mov	r3, r9
 8006992:	1891      	adds	r1, r2, r2
 8006994:	6239      	str	r1, [r7, #32]
 8006996:	415b      	adcs	r3, r3
 8006998:	627b      	str	r3, [r7, #36]	; 0x24
 800699a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800699e:	4641      	mov	r1, r8
 80069a0:	1854      	adds	r4, r2, r1
 80069a2:	4649      	mov	r1, r9
 80069a4:	eb43 0501 	adc.w	r5, r3, r1
 80069a8:	f04f 0200 	mov.w	r2, #0
 80069ac:	f04f 0300 	mov.w	r3, #0
 80069b0:	00eb      	lsls	r3, r5, #3
 80069b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069b6:	00e2      	lsls	r2, r4, #3
 80069b8:	4614      	mov	r4, r2
 80069ba:	461d      	mov	r5, r3
 80069bc:	4643      	mov	r3, r8
 80069be:	18e3      	adds	r3, r4, r3
 80069c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80069c4:	464b      	mov	r3, r9
 80069c6:	eb45 0303 	adc.w	r3, r5, r3
 80069ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80069ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80069da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069de:	f04f 0200 	mov.w	r2, #0
 80069e2:	f04f 0300 	mov.w	r3, #0
 80069e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80069ea:	4629      	mov	r1, r5
 80069ec:	008b      	lsls	r3, r1, #2
 80069ee:	4621      	mov	r1, r4
 80069f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069f4:	4621      	mov	r1, r4
 80069f6:	008a      	lsls	r2, r1, #2
 80069f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80069fc:	f7fa f92c 	bl	8000c58 <__aeabi_uldivmod>
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	4b60      	ldr	r3, [pc, #384]	; (8006b88 <UART_SetConfig+0x4e4>)
 8006a06:	fba3 2302 	umull	r2, r3, r3, r2
 8006a0a:	095b      	lsrs	r3, r3, #5
 8006a0c:	011c      	lsls	r4, r3, #4
 8006a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006a18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006a1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006a20:	4642      	mov	r2, r8
 8006a22:	464b      	mov	r3, r9
 8006a24:	1891      	adds	r1, r2, r2
 8006a26:	61b9      	str	r1, [r7, #24]
 8006a28:	415b      	adcs	r3, r3
 8006a2a:	61fb      	str	r3, [r7, #28]
 8006a2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a30:	4641      	mov	r1, r8
 8006a32:	1851      	adds	r1, r2, r1
 8006a34:	6139      	str	r1, [r7, #16]
 8006a36:	4649      	mov	r1, r9
 8006a38:	414b      	adcs	r3, r1
 8006a3a:	617b      	str	r3, [r7, #20]
 8006a3c:	f04f 0200 	mov.w	r2, #0
 8006a40:	f04f 0300 	mov.w	r3, #0
 8006a44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a48:	4659      	mov	r1, fp
 8006a4a:	00cb      	lsls	r3, r1, #3
 8006a4c:	4651      	mov	r1, sl
 8006a4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a52:	4651      	mov	r1, sl
 8006a54:	00ca      	lsls	r2, r1, #3
 8006a56:	4610      	mov	r0, r2
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	4642      	mov	r2, r8
 8006a5e:	189b      	adds	r3, r3, r2
 8006a60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a64:	464b      	mov	r3, r9
 8006a66:	460a      	mov	r2, r1
 8006a68:	eb42 0303 	adc.w	r3, r2, r3
 8006a6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a7c:	f04f 0200 	mov.w	r2, #0
 8006a80:	f04f 0300 	mov.w	r3, #0
 8006a84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a88:	4649      	mov	r1, r9
 8006a8a:	008b      	lsls	r3, r1, #2
 8006a8c:	4641      	mov	r1, r8
 8006a8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a92:	4641      	mov	r1, r8
 8006a94:	008a      	lsls	r2, r1, #2
 8006a96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a9a:	f7fa f8dd 	bl	8000c58 <__aeabi_uldivmod>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	4b39      	ldr	r3, [pc, #228]	; (8006b88 <UART_SetConfig+0x4e4>)
 8006aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8006aa8:	095b      	lsrs	r3, r3, #5
 8006aaa:	2164      	movs	r1, #100	; 0x64
 8006aac:	fb01 f303 	mul.w	r3, r1, r3
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	011b      	lsls	r3, r3, #4
 8006ab4:	3332      	adds	r3, #50	; 0x32
 8006ab6:	4a34      	ldr	r2, [pc, #208]	; (8006b88 <UART_SetConfig+0x4e4>)
 8006ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8006abc:	095b      	lsrs	r3, r3, #5
 8006abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ac2:	441c      	add	r4, r3
 8006ac4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ac8:	2200      	movs	r2, #0
 8006aca:	673b      	str	r3, [r7, #112]	; 0x70
 8006acc:	677a      	str	r2, [r7, #116]	; 0x74
 8006ace:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006ad2:	4642      	mov	r2, r8
 8006ad4:	464b      	mov	r3, r9
 8006ad6:	1891      	adds	r1, r2, r2
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	415b      	adcs	r3, r3
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ae2:	4641      	mov	r1, r8
 8006ae4:	1851      	adds	r1, r2, r1
 8006ae6:	6039      	str	r1, [r7, #0]
 8006ae8:	4649      	mov	r1, r9
 8006aea:	414b      	adcs	r3, r1
 8006aec:	607b      	str	r3, [r7, #4]
 8006aee:	f04f 0200 	mov.w	r2, #0
 8006af2:	f04f 0300 	mov.w	r3, #0
 8006af6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006afa:	4659      	mov	r1, fp
 8006afc:	00cb      	lsls	r3, r1, #3
 8006afe:	4651      	mov	r1, sl
 8006b00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b04:	4651      	mov	r1, sl
 8006b06:	00ca      	lsls	r2, r1, #3
 8006b08:	4610      	mov	r0, r2
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	4642      	mov	r2, r8
 8006b10:	189b      	adds	r3, r3, r2
 8006b12:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b14:	464b      	mov	r3, r9
 8006b16:	460a      	mov	r2, r1
 8006b18:	eb42 0303 	adc.w	r3, r2, r3
 8006b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	663b      	str	r3, [r7, #96]	; 0x60
 8006b28:	667a      	str	r2, [r7, #100]	; 0x64
 8006b2a:	f04f 0200 	mov.w	r2, #0
 8006b2e:	f04f 0300 	mov.w	r3, #0
 8006b32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006b36:	4649      	mov	r1, r9
 8006b38:	008b      	lsls	r3, r1, #2
 8006b3a:	4641      	mov	r1, r8
 8006b3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b40:	4641      	mov	r1, r8
 8006b42:	008a      	lsls	r2, r1, #2
 8006b44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b48:	f7fa f886 	bl	8000c58 <__aeabi_uldivmod>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	460b      	mov	r3, r1
 8006b50:	4b0d      	ldr	r3, [pc, #52]	; (8006b88 <UART_SetConfig+0x4e4>)
 8006b52:	fba3 1302 	umull	r1, r3, r3, r2
 8006b56:	095b      	lsrs	r3, r3, #5
 8006b58:	2164      	movs	r1, #100	; 0x64
 8006b5a:	fb01 f303 	mul.w	r3, r1, r3
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	011b      	lsls	r3, r3, #4
 8006b62:	3332      	adds	r3, #50	; 0x32
 8006b64:	4a08      	ldr	r2, [pc, #32]	; (8006b88 <UART_SetConfig+0x4e4>)
 8006b66:	fba2 2303 	umull	r2, r3, r2, r3
 8006b6a:	095b      	lsrs	r3, r3, #5
 8006b6c:	f003 020f 	and.w	r2, r3, #15
 8006b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4422      	add	r2, r4
 8006b78:	609a      	str	r2, [r3, #8]
}
 8006b7a:	bf00      	nop
 8006b7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b80:	46bd      	mov	sp, r7
 8006b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b86:	bf00      	nop
 8006b88:	51eb851f 	.word	0x51eb851f

08006b8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b084      	sub	sp, #16
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	f107 001c 	add.w	r0, r7, #28
 8006b9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d122      	bne.n	8006bea <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006bb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d105      	bne.n	8006bde <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f001 fbee 	bl	80083c0 <USB_CoreReset>
 8006be4:	4603      	mov	r3, r0
 8006be6:	73fb      	strb	r3, [r7, #15]
 8006be8:	e01a      	b.n	8006c20 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f001 fbe2 	bl	80083c0 <USB_CoreReset>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d106      	bne.n	8006c14 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	639a      	str	r2, [r3, #56]	; 0x38
 8006c12:	e005      	b.n	8006c20 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d10b      	bne.n	8006c3e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	f043 0206 	orr.w	r2, r3, #6
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f043 0220 	orr.w	r2, r3, #32
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c4a:	b004      	add	sp, #16
 8006c4c:	4770      	bx	lr
	...

08006c50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b087      	sub	sp, #28
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006c5e:	79fb      	ldrb	r3, [r7, #7]
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d165      	bne.n	8006d30 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	4a41      	ldr	r2, [pc, #260]	; (8006d6c <USB_SetTurnaroundTime+0x11c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d906      	bls.n	8006c7a <USB_SetTurnaroundTime+0x2a>
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	4a40      	ldr	r2, [pc, #256]	; (8006d70 <USB_SetTurnaroundTime+0x120>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d202      	bcs.n	8006c7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006c74:	230f      	movs	r3, #15
 8006c76:	617b      	str	r3, [r7, #20]
 8006c78:	e062      	b.n	8006d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	4a3c      	ldr	r2, [pc, #240]	; (8006d70 <USB_SetTurnaroundTime+0x120>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d306      	bcc.n	8006c90 <USB_SetTurnaroundTime+0x40>
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	4a3b      	ldr	r2, [pc, #236]	; (8006d74 <USB_SetTurnaroundTime+0x124>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d202      	bcs.n	8006c90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006c8a:	230e      	movs	r3, #14
 8006c8c:	617b      	str	r3, [r7, #20]
 8006c8e:	e057      	b.n	8006d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	4a38      	ldr	r2, [pc, #224]	; (8006d74 <USB_SetTurnaroundTime+0x124>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d306      	bcc.n	8006ca6 <USB_SetTurnaroundTime+0x56>
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	4a37      	ldr	r2, [pc, #220]	; (8006d78 <USB_SetTurnaroundTime+0x128>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d202      	bcs.n	8006ca6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006ca0:	230d      	movs	r3, #13
 8006ca2:	617b      	str	r3, [r7, #20]
 8006ca4:	e04c      	b.n	8006d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	4a33      	ldr	r2, [pc, #204]	; (8006d78 <USB_SetTurnaroundTime+0x128>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d306      	bcc.n	8006cbc <USB_SetTurnaroundTime+0x6c>
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	4a32      	ldr	r2, [pc, #200]	; (8006d7c <USB_SetTurnaroundTime+0x12c>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d802      	bhi.n	8006cbc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006cb6:	230c      	movs	r3, #12
 8006cb8:	617b      	str	r3, [r7, #20]
 8006cba:	e041      	b.n	8006d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	4a2f      	ldr	r2, [pc, #188]	; (8006d7c <USB_SetTurnaroundTime+0x12c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d906      	bls.n	8006cd2 <USB_SetTurnaroundTime+0x82>
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	4a2e      	ldr	r2, [pc, #184]	; (8006d80 <USB_SetTurnaroundTime+0x130>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d802      	bhi.n	8006cd2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006ccc:	230b      	movs	r3, #11
 8006cce:	617b      	str	r3, [r7, #20]
 8006cd0:	e036      	b.n	8006d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	4a2a      	ldr	r2, [pc, #168]	; (8006d80 <USB_SetTurnaroundTime+0x130>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d906      	bls.n	8006ce8 <USB_SetTurnaroundTime+0x98>
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	4a29      	ldr	r2, [pc, #164]	; (8006d84 <USB_SetTurnaroundTime+0x134>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d802      	bhi.n	8006ce8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006ce2:	230a      	movs	r3, #10
 8006ce4:	617b      	str	r3, [r7, #20]
 8006ce6:	e02b      	b.n	8006d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	4a26      	ldr	r2, [pc, #152]	; (8006d84 <USB_SetTurnaroundTime+0x134>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d906      	bls.n	8006cfe <USB_SetTurnaroundTime+0xae>
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	4a25      	ldr	r2, [pc, #148]	; (8006d88 <USB_SetTurnaroundTime+0x138>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d202      	bcs.n	8006cfe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006cf8:	2309      	movs	r3, #9
 8006cfa:	617b      	str	r3, [r7, #20]
 8006cfc:	e020      	b.n	8006d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	4a21      	ldr	r2, [pc, #132]	; (8006d88 <USB_SetTurnaroundTime+0x138>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d306      	bcc.n	8006d14 <USB_SetTurnaroundTime+0xc4>
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	4a20      	ldr	r2, [pc, #128]	; (8006d8c <USB_SetTurnaroundTime+0x13c>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d802      	bhi.n	8006d14 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006d0e:	2308      	movs	r3, #8
 8006d10:	617b      	str	r3, [r7, #20]
 8006d12:	e015      	b.n	8006d40 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	4a1d      	ldr	r2, [pc, #116]	; (8006d8c <USB_SetTurnaroundTime+0x13c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d906      	bls.n	8006d2a <USB_SetTurnaroundTime+0xda>
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	4a1c      	ldr	r2, [pc, #112]	; (8006d90 <USB_SetTurnaroundTime+0x140>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d202      	bcs.n	8006d2a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006d24:	2307      	movs	r3, #7
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	e00a      	b.n	8006d40 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006d2a:	2306      	movs	r3, #6
 8006d2c:	617b      	str	r3, [r7, #20]
 8006d2e:	e007      	b.n	8006d40 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006d30:	79fb      	ldrb	r3, [r7, #7]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d102      	bne.n	8006d3c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006d36:	2309      	movs	r3, #9
 8006d38:	617b      	str	r3, [r7, #20]
 8006d3a:	e001      	b.n	8006d40 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006d3c:	2309      	movs	r3, #9
 8006d3e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	68da      	ldr	r2, [r3, #12]
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	029b      	lsls	r3, r3, #10
 8006d54:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	371c      	adds	r7, #28
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	00d8acbf 	.word	0x00d8acbf
 8006d70:	00e4e1c0 	.word	0x00e4e1c0
 8006d74:	00f42400 	.word	0x00f42400
 8006d78:	01067380 	.word	0x01067380
 8006d7c:	011a499f 	.word	0x011a499f
 8006d80:	01312cff 	.word	0x01312cff
 8006d84:	014ca43f 	.word	0x014ca43f
 8006d88:	016e3600 	.word	0x016e3600
 8006d8c:	01a6ab1f 	.word	0x01a6ab1f
 8006d90:	01e84800 	.word	0x01e84800

08006d94 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f043 0201 	orr.w	r2, r3, #1
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b083      	sub	sp, #12
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f023 0201 	bic.w	r2, r3, #1
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	460b      	mov	r3, r1
 8006de2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006de4:	2300      	movs	r3, #0
 8006de6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006df4:	78fb      	ldrb	r3, [r7, #3]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d115      	bne.n	8006e26 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e06:	2001      	movs	r0, #1
 8006e08:	f7fb fd06 	bl	8002818 <HAL_Delay>
      ms++;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f001 fa45 	bl	80082a2 <USB_GetMode>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d01e      	beq.n	8006e5c <USB_SetCurrentMode+0x84>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2b31      	cmp	r3, #49	; 0x31
 8006e22:	d9f0      	bls.n	8006e06 <USB_SetCurrentMode+0x2e>
 8006e24:	e01a      	b.n	8006e5c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e26:	78fb      	ldrb	r3, [r7, #3]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d115      	bne.n	8006e58 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e38:	2001      	movs	r0, #1
 8006e3a:	f7fb fced 	bl	8002818 <HAL_Delay>
      ms++;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	3301      	adds	r3, #1
 8006e42:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 fa2c 	bl	80082a2 <USB_GetMode>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d005      	beq.n	8006e5c <USB_SetCurrentMode+0x84>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2b31      	cmp	r3, #49	; 0x31
 8006e54:	d9f0      	bls.n	8006e38 <USB_SetCurrentMode+0x60>
 8006e56:	e001      	b.n	8006e5c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e005      	b.n	8006e68 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2b32      	cmp	r3, #50	; 0x32
 8006e60:	d101      	bne.n	8006e66 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e000      	b.n	8006e68 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e70:	b084      	sub	sp, #16
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b086      	sub	sp, #24
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006e7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e82:	2300      	movs	r3, #0
 8006e84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	613b      	str	r3, [r7, #16]
 8006e8e:	e009      	b.n	8006ea4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	3340      	adds	r3, #64	; 0x40
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	613b      	str	r3, [r7, #16]
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	2b0e      	cmp	r3, #14
 8006ea8:	d9f2      	bls.n	8006e90 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d11c      	bne.n	8006eea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ebe:	f043 0302 	orr.w	r3, r3, #2
 8006ec2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	639a      	str	r2, [r3, #56]	; 0x38
 8006ee8:	e00b      	b.n	8006f02 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f08:	461a      	mov	r2, r3
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f14:	4619      	mov	r1, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	680b      	ldr	r3, [r1, #0]
 8006f20:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d10c      	bne.n	8006f42 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d104      	bne.n	8006f38 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f2e:	2100      	movs	r1, #0
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f965 	bl	8007200 <USB_SetDevSpeed>
 8006f36:	e008      	b.n	8006f4a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f38:	2101      	movs	r1, #1
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f960 	bl	8007200 <USB_SetDevSpeed>
 8006f40:	e003      	b.n	8006f4a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f42:	2103      	movs	r1, #3
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 f95b 	bl	8007200 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f4a:	2110      	movs	r1, #16
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f8f3 	bl	8007138 <USB_FlushTxFifo>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d001      	beq.n	8006f5c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f91f 	bl	80071a0 <USB_FlushRxFifo>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f72:	461a      	mov	r2, r3
 8006f74:	2300      	movs	r3, #0
 8006f76:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f7e:	461a      	mov	r2, r3
 8006f80:	2300      	movs	r3, #0
 8006f82:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f90:	2300      	movs	r3, #0
 8006f92:	613b      	str	r3, [r7, #16]
 8006f94:	e043      	b.n	800701e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fac:	d118      	bne.n	8006fe0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10a      	bne.n	8006fca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006fc6:	6013      	str	r3, [r2, #0]
 8006fc8:	e013      	b.n	8006ff2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	015a      	lsls	r2, r3, #5
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	e008      	b.n	8006ff2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fec:	461a      	mov	r2, r3
 8006fee:	2300      	movs	r3, #0
 8006ff0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffe:	461a      	mov	r2, r3
 8007000:	2300      	movs	r3, #0
 8007002:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007010:	461a      	mov	r2, r3
 8007012:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007016:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	3301      	adds	r3, #1
 800701c:	613b      	str	r3, [r7, #16]
 800701e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	429a      	cmp	r2, r3
 8007024:	d3b7      	bcc.n	8006f96 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007026:	2300      	movs	r3, #0
 8007028:	613b      	str	r3, [r7, #16]
 800702a:	e043      	b.n	80070b4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4413      	add	r3, r2
 8007034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800703e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007042:	d118      	bne.n	8007076 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10a      	bne.n	8007060 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	4413      	add	r3, r2
 8007052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007056:	461a      	mov	r2, r3
 8007058:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	e013      	b.n	8007088 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	4413      	add	r3, r2
 8007068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706c:	461a      	mov	r2, r3
 800706e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007072:	6013      	str	r3, [r2, #0]
 8007074:	e008      	b.n	8007088 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	4413      	add	r3, r2
 800707e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007082:	461a      	mov	r2, r3
 8007084:	2300      	movs	r3, #0
 8007086:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4413      	add	r3, r2
 8007090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007094:	461a      	mov	r2, r3
 8007096:	2300      	movs	r3, #0
 8007098:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a6:	461a      	mov	r2, r3
 80070a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	3301      	adds	r3, #1
 80070b2:	613b      	str	r3, [r7, #16]
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d3b7      	bcc.n	800702c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	68fa      	ldr	r2, [r7, #12]
 80070c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80070dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80070de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d105      	bne.n	80070f0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	699b      	ldr	r3, [r3, #24]
 80070e8:	f043 0210 	orr.w	r2, r3, #16
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	699a      	ldr	r2, [r3, #24]
 80070f4:	4b0f      	ldr	r3, [pc, #60]	; (8007134 <USB_DevInit+0x2c4>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80070fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d005      	beq.n	800710e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	f043 0208 	orr.w	r2, r3, #8
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800710e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007110:	2b01      	cmp	r3, #1
 8007112:	d107      	bne.n	8007124 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800711c:	f043 0304 	orr.w	r3, r3, #4
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007124:	7dfb      	ldrb	r3, [r7, #23]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007130:	b004      	add	sp, #16
 8007132:	4770      	bx	lr
 8007134:	803c3800 	.word	0x803c3800

08007138 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007142:	2300      	movs	r3, #0
 8007144:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	3301      	adds	r3, #1
 800714a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	4a13      	ldr	r2, [pc, #76]	; (800719c <USB_FlushTxFifo+0x64>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d901      	bls.n	8007158 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e01b      	b.n	8007190 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	2b00      	cmp	r3, #0
 800715e:	daf2      	bge.n	8007146 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007160:	2300      	movs	r3, #0
 8007162:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	019b      	lsls	r3, r3, #6
 8007168:	f043 0220 	orr.w	r2, r3, #32
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	3301      	adds	r3, #1
 8007174:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	4a08      	ldr	r2, [pc, #32]	; (800719c <USB_FlushTxFifo+0x64>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d901      	bls.n	8007182 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e006      	b.n	8007190 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	f003 0320 	and.w	r3, r3, #32
 800718a:	2b20      	cmp	r3, #32
 800718c:	d0f0      	beq.n	8007170 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	00030d40 	.word	0x00030d40

080071a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	3301      	adds	r3, #1
 80071b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	4a11      	ldr	r2, [pc, #68]	; (80071fc <USB_FlushRxFifo+0x5c>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d901      	bls.n	80071be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e018      	b.n	80071f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	daf2      	bge.n	80071ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80071c6:	2300      	movs	r3, #0
 80071c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2210      	movs	r2, #16
 80071ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	3301      	adds	r3, #1
 80071d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	4a08      	ldr	r2, [pc, #32]	; (80071fc <USB_FlushRxFifo+0x5c>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d901      	bls.n	80071e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e006      	b.n	80071f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	f003 0310 	and.w	r3, r3, #16
 80071ea:	2b10      	cmp	r3, #16
 80071ec:	d0f0      	beq.n	80071d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	00030d40 	.word	0x00030d40

08007200 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	460b      	mov	r3, r1
 800720a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	78fb      	ldrb	r3, [r7, #3]
 800721a:	68f9      	ldr	r1, [r7, #12]
 800721c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007220:	4313      	orrs	r3, r2
 8007222:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007232:	b480      	push	{r7}
 8007234:	b087      	sub	sp, #28
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f003 0306 	and.w	r3, r3, #6
 800724a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d102      	bne.n	8007258 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007252:	2300      	movs	r3, #0
 8007254:	75fb      	strb	r3, [r7, #23]
 8007256:	e00a      	b.n	800726e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2b02      	cmp	r3, #2
 800725c:	d002      	beq.n	8007264 <USB_GetDevSpeed+0x32>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2b06      	cmp	r3, #6
 8007262:	d102      	bne.n	800726a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007264:	2302      	movs	r3, #2
 8007266:	75fb      	strb	r3, [r7, #23]
 8007268:	e001      	b.n	800726e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800726a:	230f      	movs	r3, #15
 800726c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800726e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007270:	4618      	mov	r0, r3
 8007272:	371c      	adds	r7, #28
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	785b      	ldrb	r3, [r3, #1]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d13a      	bne.n	800730e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800729e:	69da      	ldr	r2, [r3, #28]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	f003 030f 	and.w	r3, r3, #15
 80072a8:	2101      	movs	r1, #1
 80072aa:	fa01 f303 	lsl.w	r3, r1, r3
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	68f9      	ldr	r1, [r7, #12]
 80072b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072b6:	4313      	orrs	r3, r2
 80072b8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d155      	bne.n	800737c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	791b      	ldrb	r3, [r3, #4]
 80072ea:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072ec:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	059b      	lsls	r3, r3, #22
 80072f2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072f4:	4313      	orrs	r3, r2
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	0151      	lsls	r1, r2, #5
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	440a      	add	r2, r1
 80072fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800730a:	6013      	str	r3, [r2, #0]
 800730c:	e036      	b.n	800737c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007314:	69da      	ldr	r2, [r3, #28]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	f003 030f 	and.w	r3, r3, #15
 800731e:	2101      	movs	r1, #1
 8007320:	fa01 f303 	lsl.w	r3, r1, r3
 8007324:	041b      	lsls	r3, r3, #16
 8007326:	68f9      	ldr	r1, [r7, #12]
 8007328:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800732c:	4313      	orrs	r3, r2
 800732e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d11a      	bne.n	800737c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	4413      	add	r3, r2
 800734e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	791b      	ldrb	r3, [r3, #4]
 8007360:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007362:	430b      	orrs	r3, r1
 8007364:	4313      	orrs	r3, r2
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	0151      	lsls	r1, r2, #5
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	440a      	add	r2, r1
 800736e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800737a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
	...

0800738c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	785b      	ldrb	r3, [r3, #1]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d161      	bne.n	800746c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	015a      	lsls	r2, r3, #5
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073be:	d11f      	bne.n	8007400 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	0151      	lsls	r1, r2, #5
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	440a      	add	r2, r1
 80073d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80073de:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	0151      	lsls	r1, r2, #5
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	440a      	add	r2, r1
 80073f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007406:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	f003 030f 	and.w	r3, r3, #15
 8007410:	2101      	movs	r1, #1
 8007412:	fa01 f303 	lsl.w	r3, r1, r3
 8007416:	b29b      	uxth	r3, r3
 8007418:	43db      	mvns	r3, r3
 800741a:	68f9      	ldr	r1, [r7, #12]
 800741c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007420:	4013      	ands	r3, r2
 8007422:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800742a:	69da      	ldr	r2, [r3, #28]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	f003 030f 	and.w	r3, r3, #15
 8007434:	2101      	movs	r1, #1
 8007436:	fa01 f303 	lsl.w	r3, r1, r3
 800743a:	b29b      	uxth	r3, r3
 800743c:	43db      	mvns	r3, r3
 800743e:	68f9      	ldr	r1, [r7, #12]
 8007440:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007444:	4013      	ands	r3, r2
 8007446:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	015a      	lsls	r2, r3, #5
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	4413      	add	r3, r2
 8007450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	0159      	lsls	r1, r3, #5
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	440b      	add	r3, r1
 800745e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007462:	4619      	mov	r1, r3
 8007464:	4b35      	ldr	r3, [pc, #212]	; (800753c <USB_DeactivateEndpoint+0x1b0>)
 8007466:	4013      	ands	r3, r2
 8007468:	600b      	str	r3, [r1, #0]
 800746a:	e060      	b.n	800752e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	015a      	lsls	r2, r3, #5
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	4413      	add	r3, r2
 8007474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800747e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007482:	d11f      	bne.n	80074c4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68ba      	ldr	r2, [r7, #8]
 8007494:	0151      	lsls	r1, r2, #5
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	440a      	add	r2, r1
 800749a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800749e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80074a2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	0151      	lsls	r1, r2, #5
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	440a      	add	r2, r1
 80074ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	f003 030f 	and.w	r3, r3, #15
 80074d4:	2101      	movs	r1, #1
 80074d6:	fa01 f303 	lsl.w	r3, r1, r3
 80074da:	041b      	lsls	r3, r3, #16
 80074dc:	43db      	mvns	r3, r3
 80074de:	68f9      	ldr	r1, [r7, #12]
 80074e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074e4:	4013      	ands	r3, r2
 80074e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ee:	69da      	ldr	r2, [r3, #28]
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	f003 030f 	and.w	r3, r3, #15
 80074f8:	2101      	movs	r1, #1
 80074fa:	fa01 f303 	lsl.w	r3, r1, r3
 80074fe:	041b      	lsls	r3, r3, #16
 8007500:	43db      	mvns	r3, r3
 8007502:	68f9      	ldr	r1, [r7, #12]
 8007504:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007508:	4013      	ands	r3, r2
 800750a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	015a      	lsls	r2, r3, #5
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	4413      	add	r3, r2
 8007514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	0159      	lsls	r1, r3, #5
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	440b      	add	r3, r1
 8007522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007526:	4619      	mov	r1, r3
 8007528:	4b05      	ldr	r3, [pc, #20]	; (8007540 <USB_DeactivateEndpoint+0x1b4>)
 800752a:	4013      	ands	r3, r2
 800752c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	ec337800 	.word	0xec337800
 8007540:	eff37800 	.word	0xeff37800

08007544 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b08a      	sub	sp, #40	; 0x28
 8007548:	af02      	add	r7, sp, #8
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	4613      	mov	r3, r2
 8007550:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	785b      	ldrb	r3, [r3, #1]
 8007560:	2b01      	cmp	r3, #1
 8007562:	f040 815c 	bne.w	800781e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d132      	bne.n	80075d4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	015a      	lsls	r2, r3, #5
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	4413      	add	r3, r2
 8007576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	69ba      	ldr	r2, [r7, #24]
 800757e:	0151      	lsls	r1, r2, #5
 8007580:	69fa      	ldr	r2, [r7, #28]
 8007582:	440a      	add	r2, r1
 8007584:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007588:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800758c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007590:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	015a      	lsls	r2, r3, #5
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	4413      	add	r3, r2
 800759a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800759e:	691b      	ldr	r3, [r3, #16]
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	0151      	lsls	r1, r2, #5
 80075a4:	69fa      	ldr	r2, [r7, #28]
 80075a6:	440a      	add	r2, r1
 80075a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	69ba      	ldr	r2, [r7, #24]
 80075c2:	0151      	lsls	r1, r2, #5
 80075c4:	69fa      	ldr	r2, [r7, #28]
 80075c6:	440a      	add	r2, r1
 80075c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075cc:	0cdb      	lsrs	r3, r3, #19
 80075ce:	04db      	lsls	r3, r3, #19
 80075d0:	6113      	str	r3, [r2, #16]
 80075d2:	e074      	b.n	80076be <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	69ba      	ldr	r2, [r7, #24]
 80075e4:	0151      	lsls	r1, r2, #5
 80075e6:	69fa      	ldr	r2, [r7, #28]
 80075e8:	440a      	add	r2, r1
 80075ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ee:	0cdb      	lsrs	r3, r3, #19
 80075f0:	04db      	lsls	r3, r3, #19
 80075f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	015a      	lsls	r2, r3, #5
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	69ba      	ldr	r2, [r7, #24]
 8007604:	0151      	lsls	r1, r2, #5
 8007606:	69fa      	ldr	r2, [r7, #28]
 8007608:	440a      	add	r2, r1
 800760a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800760e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007612:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007616:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007624:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	6999      	ldr	r1, [r3, #24]
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	440b      	add	r3, r1
 8007630:	1e59      	subs	r1, r3, #1
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	fbb1 f3f3 	udiv	r3, r1, r3
 800763a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800763c:	4b9d      	ldr	r3, [pc, #628]	; (80078b4 <USB_EPStartXfer+0x370>)
 800763e:	400b      	ands	r3, r1
 8007640:	69b9      	ldr	r1, [r7, #24]
 8007642:	0148      	lsls	r0, r1, #5
 8007644:	69f9      	ldr	r1, [r7, #28]
 8007646:	4401      	add	r1, r0
 8007648:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800764c:	4313      	orrs	r3, r2
 800764e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800765c:	691a      	ldr	r2, [r3, #16]
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007666:	69b9      	ldr	r1, [r7, #24]
 8007668:	0148      	lsls	r0, r1, #5
 800766a:	69f9      	ldr	r1, [r7, #28]
 800766c:	4401      	add	r1, r0
 800766e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007672:	4313      	orrs	r3, r2
 8007674:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	791b      	ldrb	r3, [r3, #4]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d11f      	bne.n	80076be <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	015a      	lsls	r2, r3, #5
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	4413      	add	r3, r2
 8007686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	0151      	lsls	r1, r2, #5
 8007690:	69fa      	ldr	r2, [r7, #28]
 8007692:	440a      	add	r2, r1
 8007694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007698:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800769c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	015a      	lsls	r2, r3, #5
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	69ba      	ldr	r2, [r7, #24]
 80076ae:	0151      	lsls	r1, r2, #5
 80076b0:	69fa      	ldr	r2, [r7, #28]
 80076b2:	440a      	add	r2, r1
 80076b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076bc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80076be:	79fb      	ldrb	r3, [r7, #7]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d14b      	bne.n	800775c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d009      	beq.n	80076e0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d8:	461a      	mov	r2, r3
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	791b      	ldrb	r3, [r3, #4]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d128      	bne.n	800773a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d110      	bne.n	800771a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	015a      	lsls	r2, r3, #5
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	4413      	add	r3, r2
 8007700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	69ba      	ldr	r2, [r7, #24]
 8007708:	0151      	lsls	r1, r2, #5
 800770a:	69fa      	ldr	r2, [r7, #28]
 800770c:	440a      	add	r2, r1
 800770e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007712:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007716:	6013      	str	r3, [r2, #0]
 8007718:	e00f      	b.n	800773a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	015a      	lsls	r2, r3, #5
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	4413      	add	r3, r2
 8007722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	0151      	lsls	r1, r2, #5
 800772c:	69fa      	ldr	r2, [r7, #28]
 800772e:	440a      	add	r2, r1
 8007730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007738:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	4413      	add	r3, r2
 8007742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	0151      	lsls	r1, r2, #5
 800774c:	69fa      	ldr	r2, [r7, #28]
 800774e:	440a      	add	r2, r1
 8007750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007754:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007758:	6013      	str	r3, [r2, #0]
 800775a:	e133      	b.n	80079c4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	015a      	lsls	r2, r3, #5
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	4413      	add	r3, r2
 8007764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	0151      	lsls	r1, r2, #5
 800776e:	69fa      	ldr	r2, [r7, #28]
 8007770:	440a      	add	r2, r1
 8007772:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007776:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800777a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	791b      	ldrb	r3, [r3, #4]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d015      	beq.n	80077b0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 811b 	beq.w	80079c4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007794:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	f003 030f 	and.w	r3, r3, #15
 800779e:	2101      	movs	r1, #1
 80077a0:	fa01 f303 	lsl.w	r3, r1, r3
 80077a4:	69f9      	ldr	r1, [r7, #28]
 80077a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077aa:	4313      	orrs	r3, r2
 80077ac:	634b      	str	r3, [r1, #52]	; 0x34
 80077ae:	e109      	b.n	80079c4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d110      	bne.n	80077e2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	0151      	lsls	r1, r2, #5
 80077d2:	69fa      	ldr	r2, [r7, #28]
 80077d4:	440a      	add	r2, r1
 80077d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	e00f      	b.n	8007802 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	015a      	lsls	r2, r3, #5
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	4413      	add	r3, r2
 80077ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	69ba      	ldr	r2, [r7, #24]
 80077f2:	0151      	lsls	r1, r2, #5
 80077f4:	69fa      	ldr	r2, [r7, #28]
 80077f6:	440a      	add	r2, r1
 80077f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007800:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	6919      	ldr	r1, [r3, #16]
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	781a      	ldrb	r2, [r3, #0]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	699b      	ldr	r3, [r3, #24]
 800780e:	b298      	uxth	r0, r3
 8007810:	79fb      	ldrb	r3, [r7, #7]
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	4603      	mov	r3, r0
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f000 fade 	bl	8007dd8 <USB_WritePacket>
 800781c:	e0d2      	b.n	80079c4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	015a      	lsls	r2, r3, #5
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	4413      	add	r3, r2
 8007826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	69ba      	ldr	r2, [r7, #24]
 800782e:	0151      	lsls	r1, r2, #5
 8007830:	69fa      	ldr	r2, [r7, #28]
 8007832:	440a      	add	r2, r1
 8007834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007838:	0cdb      	lsrs	r3, r3, #19
 800783a:	04db      	lsls	r3, r3, #19
 800783c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	015a      	lsls	r2, r3, #5
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	4413      	add	r3, r2
 8007846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	69ba      	ldr	r2, [r7, #24]
 800784e:	0151      	lsls	r1, r2, #5
 8007850:	69fa      	ldr	r2, [r7, #28]
 8007852:	440a      	add	r2, r1
 8007854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007858:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800785c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007860:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	699b      	ldr	r3, [r3, #24]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d126      	bne.n	80078b8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	015a      	lsls	r2, r3, #5
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	4413      	add	r3, r2
 8007872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007876:	691a      	ldr	r2, [r3, #16]
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007880:	69b9      	ldr	r1, [r7, #24]
 8007882:	0148      	lsls	r0, r1, #5
 8007884:	69f9      	ldr	r1, [r7, #28]
 8007886:	4401      	add	r1, r0
 8007888:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800788c:	4313      	orrs	r3, r2
 800788e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	4413      	add	r3, r2
 8007898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	69ba      	ldr	r2, [r7, #24]
 80078a0:	0151      	lsls	r1, r2, #5
 80078a2:	69fa      	ldr	r2, [r7, #28]
 80078a4:	440a      	add	r2, r1
 80078a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078ae:	6113      	str	r3, [r2, #16]
 80078b0:	e03a      	b.n	8007928 <USB_EPStartXfer+0x3e4>
 80078b2:	bf00      	nop
 80078b4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	699a      	ldr	r2, [r3, #24]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	4413      	add	r3, r2
 80078c2:	1e5a      	subs	r2, r3, #1
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078cc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	8afa      	ldrh	r2, [r7, #22]
 80078d4:	fb03 f202 	mul.w	r2, r3, r2
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e8:	691a      	ldr	r2, [r3, #16]
 80078ea:	8afb      	ldrh	r3, [r7, #22]
 80078ec:	04d9      	lsls	r1, r3, #19
 80078ee:	4b38      	ldr	r3, [pc, #224]	; (80079d0 <USB_EPStartXfer+0x48c>)
 80078f0:	400b      	ands	r3, r1
 80078f2:	69b9      	ldr	r1, [r7, #24]
 80078f4:	0148      	lsls	r0, r1, #5
 80078f6:	69f9      	ldr	r1, [r7, #28]
 80078f8:	4401      	add	r1, r0
 80078fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80078fe:	4313      	orrs	r3, r2
 8007900:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	015a      	lsls	r2, r3, #5
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	4413      	add	r3, r2
 800790a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800790e:	691a      	ldr	r2, [r3, #16]
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	69db      	ldr	r3, [r3, #28]
 8007914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007918:	69b9      	ldr	r1, [r7, #24]
 800791a:	0148      	lsls	r0, r1, #5
 800791c:	69f9      	ldr	r1, [r7, #28]
 800791e:	4401      	add	r1, r0
 8007920:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007924:	4313      	orrs	r3, r2
 8007926:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007928:	79fb      	ldrb	r3, [r7, #7]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d10d      	bne.n	800794a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d009      	beq.n	800794a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	6919      	ldr	r1, [r3, #16]
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007946:	460a      	mov	r2, r1
 8007948:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	791b      	ldrb	r3, [r3, #4]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d128      	bne.n	80079a4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800795e:	2b00      	cmp	r3, #0
 8007960:	d110      	bne.n	8007984 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	015a      	lsls	r2, r3, #5
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	4413      	add	r3, r2
 800796a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	0151      	lsls	r1, r2, #5
 8007974:	69fa      	ldr	r2, [r7, #28]
 8007976:	440a      	add	r2, r1
 8007978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800797c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007980:	6013      	str	r3, [r2, #0]
 8007982:	e00f      	b.n	80079a4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	015a      	lsls	r2, r3, #5
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	4413      	add	r3, r2
 800798c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	69ba      	ldr	r2, [r7, #24]
 8007994:	0151      	lsls	r1, r2, #5
 8007996:	69fa      	ldr	r2, [r7, #28]
 8007998:	440a      	add	r2, r1
 800799a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800799e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	015a      	lsls	r2, r3, #5
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	4413      	add	r3, r2
 80079ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	69ba      	ldr	r2, [r7, #24]
 80079b4:	0151      	lsls	r1, r2, #5
 80079b6:	69fa      	ldr	r2, [r7, #28]
 80079b8:	440a      	add	r2, r1
 80079ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3720      	adds	r7, #32
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	1ff80000 	.word	0x1ff80000

080079d4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b087      	sub	sp, #28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	4613      	mov	r3, r2
 80079e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	785b      	ldrb	r3, [r3, #1]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	f040 80ce 	bne.w	8007b92 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d132      	bne.n	8007a64 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	0151      	lsls	r1, r2, #5
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	440a      	add	r2, r1
 8007a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	015a      	lsls	r2, r3, #5
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	0151      	lsls	r1, r2, #5
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	440a      	add	r2, r1
 8007a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	015a      	lsls	r2, r3, #5
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	4413      	add	r3, r2
 8007a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	0151      	lsls	r1, r2, #5
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	440a      	add	r2, r1
 8007a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a5c:	0cdb      	lsrs	r3, r3, #19
 8007a5e:	04db      	lsls	r3, r3, #19
 8007a60:	6113      	str	r3, [r2, #16]
 8007a62:	e04e      	b.n	8007b02 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	0151      	lsls	r1, r2, #5
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	440a      	add	r2, r1
 8007a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a7e:	0cdb      	lsrs	r3, r3, #19
 8007a80:	04db      	lsls	r3, r3, #19
 8007a82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	015a      	lsls	r2, r3, #5
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	0151      	lsls	r1, r2, #5
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	440a      	add	r2, r1
 8007a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007aa2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007aa6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	699a      	ldr	r2, [r3, #24]
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d903      	bls.n	8007abc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	68da      	ldr	r2, [r3, #12]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	015a      	lsls	r2, r3, #5
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	0151      	lsls	r1, r2, #5
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	440a      	add	r2, r1
 8007ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ad6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ada:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae8:	691a      	ldr	r2, [r3, #16]
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007af2:	6939      	ldr	r1, [r7, #16]
 8007af4:	0148      	lsls	r0, r1, #5
 8007af6:	6979      	ldr	r1, [r7, #20]
 8007af8:	4401      	add	r1, r0
 8007afa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007afe:	4313      	orrs	r3, r2
 8007b00:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007b02:	79fb      	ldrb	r3, [r7, #7]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d11e      	bne.n	8007b46 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	695b      	ldr	r3, [r3, #20]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d009      	beq.n	8007b24 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	015a      	lsls	r2, r3, #5
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	4413      	add	r3, r2
 8007b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	015a      	lsls	r2, r3, #5
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	0151      	lsls	r1, r2, #5
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	440a      	add	r2, r1
 8007b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b42:	6013      	str	r3, [r2, #0]
 8007b44:	e097      	b.n	8007c76 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	015a      	lsls	r2, r3, #5
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	0151      	lsls	r1, r2, #5
 8007b58:	697a      	ldr	r2, [r7, #20]
 8007b5a:	440a      	add	r2, r1
 8007b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b64:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 8083 	beq.w	8007c76 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	f003 030f 	and.w	r3, r3, #15
 8007b80:	2101      	movs	r1, #1
 8007b82:	fa01 f303 	lsl.w	r3, r1, r3
 8007b86:	6979      	ldr	r1, [r7, #20]
 8007b88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	634b      	str	r3, [r1, #52]	; 0x34
 8007b90:	e071      	b.n	8007c76 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	015a      	lsls	r2, r3, #5
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	4413      	add	r3, r2
 8007b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	0151      	lsls	r1, r2, #5
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	440a      	add	r2, r1
 8007ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bac:	0cdb      	lsrs	r3, r3, #19
 8007bae:	04db      	lsls	r3, r3, #19
 8007bb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	015a      	lsls	r2, r3, #5
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	4413      	add	r3, r2
 8007bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	0151      	lsls	r1, r2, #5
 8007bc4:	697a      	ldr	r2, [r7, #20]
 8007bc6:	440a      	add	r2, r1
 8007bc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007bd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007bd4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d003      	beq.n	8007be6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	68da      	ldr	r2, [r3, #12]
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	68da      	ldr	r2, [r3, #12]
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	015a      	lsls	r2, r3, #5
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	0151      	lsls	r1, r2, #5
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	440a      	add	r2, r1
 8007c04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	015a      	lsls	r2, r3, #5
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c1a:	691a      	ldr	r2, [r3, #16]
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	69db      	ldr	r3, [r3, #28]
 8007c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c24:	6939      	ldr	r1, [r7, #16]
 8007c26:	0148      	lsls	r0, r1, #5
 8007c28:	6979      	ldr	r1, [r7, #20]
 8007c2a:	4401      	add	r1, r0
 8007c2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c30:	4313      	orrs	r3, r2
 8007c32:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007c34:	79fb      	ldrb	r3, [r7, #7]
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d10d      	bne.n	8007c56 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d009      	beq.n	8007c56 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	6919      	ldr	r1, [r3, #16]
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c52:	460a      	mov	r2, r1
 8007c54:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	015a      	lsls	r2, r3, #5
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	693a      	ldr	r2, [r7, #16]
 8007c66:	0151      	lsls	r1, r2, #5
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	440a      	add	r2, r1
 8007c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	371c      	adds	r7, #28
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	785b      	ldrb	r3, [r3, #1]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d14a      	bne.n	8007d38 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	015a      	lsls	r2, r3, #5
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	4413      	add	r3, r2
 8007cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007cb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cba:	f040 8086 	bne.w	8007dca <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	015a      	lsls	r2, r3, #5
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	683a      	ldr	r2, [r7, #0]
 8007cd0:	7812      	ldrb	r2, [r2, #0]
 8007cd2:	0151      	lsls	r1, r2, #5
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	440a      	add	r2, r1
 8007cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cdc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ce0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	015a      	lsls	r2, r3, #5
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	4413      	add	r3, r2
 8007cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	683a      	ldr	r2, [r7, #0]
 8007cf4:	7812      	ldrb	r2, [r2, #0]
 8007cf6:	0151      	lsls	r1, r2, #5
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	440a      	add	r2, r1
 8007cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d04:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d902      	bls.n	8007d1c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	75fb      	strb	r3, [r7, #23]
          break;
 8007d1a:	e056      	b.n	8007dca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d34:	d0e7      	beq.n	8007d06 <USB_EPStopXfer+0x82>
 8007d36:	e048      	b.n	8007dca <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	015a      	lsls	r2, r3, #5
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	4413      	add	r3, r2
 8007d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d50:	d13b      	bne.n	8007dca <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	683a      	ldr	r2, [r7, #0]
 8007d64:	7812      	ldrb	r2, [r2, #0]
 8007d66:	0151      	lsls	r1, r2, #5
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	440a      	add	r2, r1
 8007d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d74:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	015a      	lsls	r2, r3, #5
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	7812      	ldrb	r2, [r2, #0]
 8007d8a:	0151      	lsls	r1, r2, #5
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	440a      	add	r2, r1
 8007d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d98:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f242 7210 	movw	r2, #10000	; 0x2710
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d902      	bls.n	8007db0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	75fb      	strb	r3, [r7, #23]
          break;
 8007dae:	e00c      	b.n	8007dca <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	015a      	lsls	r2, r3, #5
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	4413      	add	r3, r2
 8007dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dc8:	d0e7      	beq.n	8007d9a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	371c      	adds	r7, #28
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b089      	sub	sp, #36	; 0x24
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	4611      	mov	r1, r2
 8007de4:	461a      	mov	r2, r3
 8007de6:	460b      	mov	r3, r1
 8007de8:	71fb      	strb	r3, [r7, #7]
 8007dea:	4613      	mov	r3, r2
 8007dec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007df6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d123      	bne.n	8007e46 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007dfe:	88bb      	ldrh	r3, [r7, #4]
 8007e00:	3303      	adds	r3, #3
 8007e02:	089b      	lsrs	r3, r3, #2
 8007e04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007e06:	2300      	movs	r3, #0
 8007e08:	61bb      	str	r3, [r7, #24]
 8007e0a:	e018      	b.n	8007e3e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e0c:	79fb      	ldrb	r3, [r7, #7]
 8007e0e:	031a      	lsls	r2, r3, #12
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	4413      	add	r3, r2
 8007e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e18:	461a      	mov	r2, r3
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	3301      	adds	r3, #1
 8007e24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	3301      	adds	r3, #1
 8007e36:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	61bb      	str	r3, [r7, #24]
 8007e3e:	69ba      	ldr	r2, [r7, #24]
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d3e2      	bcc.n	8007e0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3724      	adds	r7, #36	; 0x24
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b08b      	sub	sp, #44	; 0x2c
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	60b9      	str	r1, [r7, #8]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007e6a:	88fb      	ldrh	r3, [r7, #6]
 8007e6c:	089b      	lsrs	r3, r3, #2
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007e72:	88fb      	ldrh	r3, [r7, #6]
 8007e74:	f003 0303 	and.w	r3, r3, #3
 8007e78:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	623b      	str	r3, [r7, #32]
 8007e7e:	e014      	b.n	8007eaa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8e:	3301      	adds	r3, #1
 8007e90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e94:	3301      	adds	r3, #1
 8007e96:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	623b      	str	r3, [r7, #32]
 8007eaa:	6a3a      	ldr	r2, [r7, #32]
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d3e6      	bcc.n	8007e80 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007eb2:	8bfb      	ldrh	r3, [r7, #30]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d01e      	beq.n	8007ef6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	f107 0310 	add.w	r3, r7, #16
 8007ec8:	6812      	ldr	r2, [r2, #0]
 8007eca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007ecc:	693a      	ldr	r2, [r7, #16]
 8007ece:	6a3b      	ldr	r3, [r7, #32]
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	00db      	lsls	r3, r3, #3
 8007ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	701a      	strb	r2, [r3, #0]
      i++;
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	623b      	str	r3, [r7, #32]
      pDest++;
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007eea:	8bfb      	ldrh	r3, [r7, #30]
 8007eec:	3b01      	subs	r3, #1
 8007eee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007ef0:	8bfb      	ldrh	r3, [r7, #30]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1ea      	bne.n	8007ecc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	372c      	adds	r7, #44	; 0x2c
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	785b      	ldrb	r3, [r3, #1]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d12c      	bne.n	8007f7a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	015a      	lsls	r2, r3, #5
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	4413      	add	r3, r2
 8007f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	db12      	blt.n	8007f58 <USB_EPSetStall+0x54>
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00f      	beq.n	8007f58 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	015a      	lsls	r2, r3, #5
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	4413      	add	r3, r2
 8007f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	0151      	lsls	r1, r2, #5
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	440a      	add	r2, r1
 8007f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f52:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f56:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	015a      	lsls	r2, r3, #5
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	4413      	add	r3, r2
 8007f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68ba      	ldr	r2, [r7, #8]
 8007f68:	0151      	lsls	r1, r2, #5
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	440a      	add	r2, r1
 8007f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f76:	6013      	str	r3, [r2, #0]
 8007f78:	e02b      	b.n	8007fd2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	015a      	lsls	r2, r3, #5
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	4413      	add	r3, r2
 8007f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	db12      	blt.n	8007fb2 <USB_EPSetStall+0xae>
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00f      	beq.n	8007fb2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	015a      	lsls	r2, r3, #5
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	0151      	lsls	r1, r2, #5
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	440a      	add	r2, r1
 8007fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007fb0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	015a      	lsls	r2, r3, #5
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	4413      	add	r3, r2
 8007fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	0151      	lsls	r1, r2, #5
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	440a      	add	r2, r1
 8007fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007fd0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3714      	adds	r7, #20
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	785b      	ldrb	r3, [r3, #1]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d128      	bne.n	800804e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	015a      	lsls	r2, r3, #5
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	4413      	add	r3, r2
 8008004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	0151      	lsls	r1, r2, #5
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	440a      	add	r2, r1
 8008012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008016:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800801a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	791b      	ldrb	r3, [r3, #4]
 8008020:	2b03      	cmp	r3, #3
 8008022:	d003      	beq.n	800802c <USB_EPClearStall+0x4c>
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	791b      	ldrb	r3, [r3, #4]
 8008028:	2b02      	cmp	r3, #2
 800802a:	d138      	bne.n	800809e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	015a      	lsls	r2, r3, #5
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	4413      	add	r3, r2
 8008034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	0151      	lsls	r1, r2, #5
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	440a      	add	r2, r1
 8008042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800804a:	6013      	str	r3, [r2, #0]
 800804c:	e027      	b.n	800809e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	015a      	lsls	r2, r3, #5
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	4413      	add	r3, r2
 8008056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	0151      	lsls	r1, r2, #5
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	440a      	add	r2, r1
 8008064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008068:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800806c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	791b      	ldrb	r3, [r3, #4]
 8008072:	2b03      	cmp	r3, #3
 8008074:	d003      	beq.n	800807e <USB_EPClearStall+0x9e>
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	791b      	ldrb	r3, [r3, #4]
 800807a:	2b02      	cmp	r3, #2
 800807c:	d10f      	bne.n	800809e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	015a      	lsls	r2, r3, #5
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	4413      	add	r3, r2
 8008086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	0151      	lsls	r1, r2, #5
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	440a      	add	r2, r1
 8008094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800809c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	460b      	mov	r3, r1
 80080b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80080ce:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	78fb      	ldrb	r3, [r7, #3]
 80080da:	011b      	lsls	r3, r3, #4
 80080dc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80080e0:	68f9      	ldr	r1, [r7, #12]
 80080e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080e6:	4313      	orrs	r3, r2
 80080e8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008112:	f023 0303 	bic.w	r3, r3, #3
 8008116:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008126:	f023 0302 	bic.w	r3, r3, #2
 800812a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	3714      	adds	r7, #20
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800813a:	b480      	push	{r7}
 800813c:	b085      	sub	sp, #20
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008154:	f023 0303 	bic.w	r3, r3, #3
 8008158:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008168:	f043 0302 	orr.w	r3, r3, #2
 800816c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3714      	adds	r7, #20
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	695b      	ldr	r3, [r3, #20]
 8008188:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	4013      	ands	r3, r2
 8008192:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008194:	68fb      	ldr	r3, [r7, #12]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3714      	adds	r7, #20
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr

080081a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80081a2:	b480      	push	{r7}
 80081a4:	b085      	sub	sp, #20
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081be:	69db      	ldr	r3, [r3, #28]
 80081c0:	68ba      	ldr	r2, [r7, #8]
 80081c2:	4013      	ands	r3, r2
 80081c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	0c1b      	lsrs	r3, r3, #16
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3714      	adds	r7, #20
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b085      	sub	sp, #20
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081f2:	69db      	ldr	r3, [r3, #28]
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	4013      	ands	r3, r2
 80081f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	b29b      	uxth	r3, r3
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800820a:	b480      	push	{r7}
 800820c:	b085      	sub	sp, #20
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	460b      	mov	r3, r1
 8008214:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800821a:	78fb      	ldrb	r3, [r7, #3]
 800821c:	015a      	lsls	r2, r3, #5
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	4413      	add	r3, r2
 8008222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	4013      	ands	r3, r2
 8008236:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008238:	68bb      	ldr	r3, [r7, #8]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr

08008246 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008246:	b480      	push	{r7}
 8008248:	b087      	sub	sp, #28
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	460b      	mov	r3, r1
 8008250:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008268:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	f003 030f 	and.w	r3, r3, #15
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	fa22 f303 	lsr.w	r3, r2, r3
 8008276:	01db      	lsls	r3, r3, #7
 8008278:	b2db      	uxtb	r3, r3
 800827a:	693a      	ldr	r2, [r7, #16]
 800827c:	4313      	orrs	r3, r2
 800827e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008280:	78fb      	ldrb	r3, [r7, #3]
 8008282:	015a      	lsls	r2, r3, #5
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	4413      	add	r3, r2
 8008288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	693a      	ldr	r2, [r7, #16]
 8008290:	4013      	ands	r3, r2
 8008292:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008294:	68bb      	ldr	r3, [r7, #8]
}
 8008296:	4618      	mov	r0, r3
 8008298:	371c      	adds	r7, #28
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b083      	sub	sp, #12
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	f003 0301 	and.w	r3, r3, #1
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80082be:	b480      	push	{r7}
 80082c0:	b085      	sub	sp, #20
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082d8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80082dc:	f023 0307 	bic.w	r3, r3, #7
 80082e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3714      	adds	r7, #20
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008304:	b480      	push	{r7}
 8008306:	b087      	sub	sp, #28
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	460b      	mov	r3, r1
 800830e:	607a      	str	r2, [r7, #4]
 8008310:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	333c      	adds	r3, #60	; 0x3c
 800831a:	3304      	adds	r3, #4
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	4a26      	ldr	r2, [pc, #152]	; (80083bc <USB_EP0_OutStart+0xb8>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d90a      	bls.n	800833e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008334:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008338:	d101      	bne.n	800833e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800833a:	2300      	movs	r3, #0
 800833c:	e037      	b.n	80083ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008344:	461a      	mov	r2, r3
 8008346:	2300      	movs	r3, #0
 8008348:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	697a      	ldr	r2, [r7, #20]
 8008354:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008358:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800835c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800836c:	f043 0318 	orr.w	r3, r3, #24
 8008370:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	697a      	ldr	r2, [r7, #20]
 800837c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008380:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008384:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008386:	7afb      	ldrb	r3, [r7, #11]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d10f      	bne.n	80083ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008392:	461a      	mov	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083a6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80083aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	371c      	adds	r7, #28
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	4f54300a 	.word	0x4f54300a

080083c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083c8:	2300      	movs	r3, #0
 80083ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	3301      	adds	r3, #1
 80083d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	4a13      	ldr	r2, [pc, #76]	; (8008424 <USB_CoreReset+0x64>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d901      	bls.n	80083de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e01b      	b.n	8008416 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	daf2      	bge.n	80083cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80083e6:	2300      	movs	r3, #0
 80083e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	f043 0201 	orr.w	r2, r3, #1
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	3301      	adds	r3, #1
 80083fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	4a09      	ldr	r2, [pc, #36]	; (8008424 <USB_CoreReset+0x64>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d901      	bls.n	8008408 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e006      	b.n	8008416 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	2b01      	cmp	r3, #1
 8008412:	d0f0      	beq.n	80083f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3714      	adds	r7, #20
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	00030d40 	.word	0x00030d40

08008428 <USBD_HID_Init>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	460b      	mov	r3, r1
 8008432:	70fb      	strb	r3, [r7, #3]
	UNUSED(cfgidx);

	USBD_HID_HandleTypeDef *hhid;

	hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008434:	2010      	movs	r0, #16
 8008436:	f002 f8eb 	bl	800a610 <USBD_static_malloc>
 800843a:	60f8      	str	r0, [r7, #12]

	if (hhid == NULL)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d109      	bne.n	8008456 <USBD_HID_Init+0x2e>
	{
		pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	32b0      	adds	r2, #176	; 0xb0
 800844c:	2100      	movs	r1, #0
 800844e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return (uint8_t)USBD_EMEM;
 8008452:	2302      	movs	r3, #2
 8008454:	e048      	b.n	80084e8 <USBD_HID_Init+0xc0>
	}

	pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	32b0      	adds	r2, #176	; 0xb0
 8008460:	68f9      	ldr	r1, [r7, #12]
 8008462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	32b0      	adds	r2, #176	; 0xb0
 8008470:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
	/* Get the Endpoints addresses allocated for this class instance */
	HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

	if (pdev->dev_speed == USBD_SPEED_HIGH)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	7c1b      	ldrb	r3, [r3, #16]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10d      	bne.n	800849e <USBD_HID_Init+0x76>
	{
		pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8008482:	4b1b      	ldr	r3, [pc, #108]	; (80084f0 <USBD_HID_Init+0xc8>)
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	f003 020f 	and.w	r2, r3, #15
 800848a:	6879      	ldr	r1, [r7, #4]
 800848c:	4613      	mov	r3, r2
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	4413      	add	r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	440b      	add	r3, r1
 8008496:	3326      	adds	r3, #38	; 0x26
 8008498:	2207      	movs	r2, #7
 800849a:	801a      	strh	r2, [r3, #0]
 800849c:	e00c      	b.n	80084b8 <USBD_HID_Init+0x90>
	}
	else   /* LOW and FULL-speed endpoints */
	{
		pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800849e:	4b14      	ldr	r3, [pc, #80]	; (80084f0 <USBD_HID_Init+0xc8>)
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	f003 020f 	and.w	r2, r3, #15
 80084a6:	6879      	ldr	r1, [r7, #4]
 80084a8:	4613      	mov	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4413      	add	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	440b      	add	r3, r1
 80084b2:	3326      	adds	r3, #38	; 0x26
 80084b4:	220a      	movs	r2, #10
 80084b6:	801a      	strh	r2, [r3, #0]
	}

	/* Open EP IN */
	(void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80084b8:	4b0d      	ldr	r3, [pc, #52]	; (80084f0 <USBD_HID_Init+0xc8>)
 80084ba:	7819      	ldrb	r1, [r3, #0]
 80084bc:	2310      	movs	r3, #16
 80084be:	2203      	movs	r2, #3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f001 ff94 	bl	800a3ee <USBD_LL_OpenEP>
	pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80084c6:	4b0a      	ldr	r3, [pc, #40]	; (80084f0 <USBD_HID_Init+0xc8>)
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	f003 020f 	and.w	r2, r3, #15
 80084ce:	6879      	ldr	r1, [r7, #4]
 80084d0:	4613      	mov	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	440b      	add	r3, r1
 80084da:	3324      	adds	r3, #36	; 0x24
 80084dc:	2201      	movs	r2, #1
 80084de:	801a      	strh	r2, [r3, #0]

	hhid->state = HID_IDLE;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2200      	movs	r2, #0
 80084e4:	731a      	strb	r2, [r3, #12]

	return (uint8_t)USBD_OK;
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	200000cd 	.word	0x200000cd

080084f4 <USBD_HID_DeInit>:
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	70fb      	strb	r3, [r7, #3]
	/* Get the Endpoints addresses allocated for this class instance */
	HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

	/* Close HID EPs */
	(void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8008500:	4b1f      	ldr	r3, [pc, #124]	; (8008580 <USBD_HID_DeInit+0x8c>)
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	4619      	mov	r1, r3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f001 ff97 	bl	800a43a <USBD_LL_CloseEP>
	pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800850c:	4b1c      	ldr	r3, [pc, #112]	; (8008580 <USBD_HID_DeInit+0x8c>)
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	f003 020f 	and.w	r2, r3, #15
 8008514:	6879      	ldr	r1, [r7, #4]
 8008516:	4613      	mov	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	4413      	add	r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	440b      	add	r3, r1
 8008520:	3324      	adds	r3, #36	; 0x24
 8008522:	2200      	movs	r2, #0
 8008524:	801a      	strh	r2, [r3, #0]
	pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8008526:	4b16      	ldr	r3, [pc, #88]	; (8008580 <USBD_HID_DeInit+0x8c>)
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	f003 020f 	and.w	r2, r3, #15
 800852e:	6879      	ldr	r1, [r7, #4]
 8008530:	4613      	mov	r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	4413      	add	r3, r2
 8008536:	009b      	lsls	r3, r3, #2
 8008538:	440b      	add	r3, r1
 800853a:	3326      	adds	r3, #38	; 0x26
 800853c:	2200      	movs	r2, #0
 800853e:	801a      	strh	r2, [r3, #0]

	/* Free allocated memory */
	if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	32b0      	adds	r2, #176	; 0xb0
 800854a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d011      	beq.n	8008576 <USBD_HID_DeInit+0x82>
	{
		(void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	32b0      	adds	r2, #176	; 0xb0
 800855c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008560:	4618      	mov	r0, r3
 8008562:	f002 f863 	bl	800a62c <USBD_static_free>
		pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	32b0      	adds	r2, #176	; 0xb0
 8008570:	2100      	movs	r1, #0
 8008572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

	return (uint8_t)USBD_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	200000cd 	.word	0x200000cd

08008584 <USBD_HID_Setup>:
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b086      	sub	sp, #24
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
	USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	32b0      	adds	r2, #176	; 0xb0
 8008598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800859c:	60fb      	str	r3, [r7, #12]
	USBD_StatusTypeDef ret = USBD_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	75fb      	strb	r3, [r7, #23]
	uint16_t len;
	uint8_t *pbuf;
	uint16_t status_info = 0U;
 80085a2:	2300      	movs	r3, #0
 80085a4:	817b      	strh	r3, [r7, #10]

	if (hhid == NULL)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d101      	bne.n	80085b0 <USBD_HID_Setup+0x2c>
	{
		return (uint8_t)USBD_FAIL;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e0e8      	b.n	8008782 <USBD_HID_Setup+0x1fe>
	}

	switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d046      	beq.n	800864a <USBD_HID_Setup+0xc6>
 80085bc:	2b20      	cmp	r3, #32
 80085be:	f040 80d8 	bne.w	8008772 <USBD_HID_Setup+0x1ee>
	{
	case USB_REQ_TYPE_CLASS :
		switch (req->bRequest)
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	785b      	ldrb	r3, [r3, #1]
 80085c6:	3b02      	subs	r3, #2
 80085c8:	2b09      	cmp	r3, #9
 80085ca:	d836      	bhi.n	800863a <USBD_HID_Setup+0xb6>
 80085cc:	a201      	add	r2, pc, #4	; (adr r2, 80085d4 <USBD_HID_Setup+0x50>)
 80085ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d2:	bf00      	nop
 80085d4:	0800862b 	.word	0x0800862b
 80085d8:	0800860b 	.word	0x0800860b
 80085dc:	0800863b 	.word	0x0800863b
 80085e0:	0800863b 	.word	0x0800863b
 80085e4:	0800863b 	.word	0x0800863b
 80085e8:	0800863b 	.word	0x0800863b
 80085ec:	0800863b 	.word	0x0800863b
 80085f0:	0800863b 	.word	0x0800863b
 80085f4:	08008619 	.word	0x08008619
 80085f8:	080085fd 	.word	0x080085fd
		{
		case HID_REQ_SET_PROTOCOL:
			hhid->Protocol = (uint8_t)(req->wValue);
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	885b      	ldrh	r3, [r3, #2]
 8008600:	b2db      	uxtb	r3, r3
 8008602:	461a      	mov	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	601a      	str	r2, [r3, #0]
			break;
 8008608:	e01e      	b.n	8008648 <USBD_HID_Setup+0xc4>

		case HID_REQ_GET_PROTOCOL:
			(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2201      	movs	r2, #1
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f001 fba5 	bl	8009d60 <USBD_CtlSendData>
			break;
 8008616:	e017      	b.n	8008648 <USBD_HID_Setup+0xc4>

		case HID_REQ_SET_IDLE:
			hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	885b      	ldrh	r3, [r3, #2]
 800861c:	0a1b      	lsrs	r3, r3, #8
 800861e:	b29b      	uxth	r3, r3
 8008620:	b2db      	uxtb	r3, r3
 8008622:	461a      	mov	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	605a      	str	r2, [r3, #4]
			break;
 8008628:	e00e      	b.n	8008648 <USBD_HID_Setup+0xc4>

		case HID_REQ_GET_IDLE:
			(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	3304      	adds	r3, #4
 800862e:	2201      	movs	r2, #1
 8008630:	4619      	mov	r1, r3
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f001 fb94 	bl	8009d60 <USBD_CtlSendData>
			break;
 8008638:	e006      	b.n	8008648 <USBD_HID_Setup+0xc4>

		default:
			USBD_CtlError(pdev, req);
 800863a:	6839      	ldr	r1, [r7, #0]
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f001 fb1e 	bl	8009c7e <USBD_CtlError>
			ret = USBD_FAIL;
 8008642:	2303      	movs	r3, #3
 8008644:	75fb      	strb	r3, [r7, #23]
			break;
 8008646:	bf00      	nop
		}
		break;
 8008648:	e09a      	b.n	8008780 <USBD_HID_Setup+0x1fc>
		case USB_REQ_TYPE_STANDARD:
			switch (req->bRequest)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	785b      	ldrb	r3, [r3, #1]
 800864e:	2b0b      	cmp	r3, #11
 8008650:	f200 8086 	bhi.w	8008760 <USBD_HID_Setup+0x1dc>
 8008654:	a201      	add	r2, pc, #4	; (adr r2, 800865c <USBD_HID_Setup+0xd8>)
 8008656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865a:	bf00      	nop
 800865c:	0800868d 	.word	0x0800868d
 8008660:	0800876f 	.word	0x0800876f
 8008664:	08008761 	.word	0x08008761
 8008668:	08008761 	.word	0x08008761
 800866c:	08008761 	.word	0x08008761
 8008670:	08008761 	.word	0x08008761
 8008674:	080086b7 	.word	0x080086b7
 8008678:	08008761 	.word	0x08008761
 800867c:	08008761 	.word	0x08008761
 8008680:	08008761 	.word	0x08008761
 8008684:	0800870f 	.word	0x0800870f
 8008688:	08008739 	.word	0x08008739
			{
			case USB_REQ_GET_STATUS:
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008692:	b2db      	uxtb	r3, r3
 8008694:	2b03      	cmp	r3, #3
 8008696:	d107      	bne.n	80086a8 <USBD_HID_Setup+0x124>
				{
					(void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008698:	f107 030a 	add.w	r3, r7, #10
 800869c:	2202      	movs	r2, #2
 800869e:	4619      	mov	r1, r3
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f001 fb5d 	bl	8009d60 <USBD_CtlSendData>
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 80086a6:	e063      	b.n	8008770 <USBD_HID_Setup+0x1ec>
					USBD_CtlError(pdev, req);
 80086a8:	6839      	ldr	r1, [r7, #0]
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f001 fae7 	bl	8009c7e <USBD_CtlError>
					ret = USBD_FAIL;
 80086b0:	2303      	movs	r3, #3
 80086b2:	75fb      	strb	r3, [r7, #23]
				break;
 80086b4:	e05c      	b.n	8008770 <USBD_HID_Setup+0x1ec>

			case USB_REQ_GET_DESCRIPTOR:
				if ((req->wValue >> 8) == HID_REPORT_DESC)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	885b      	ldrh	r3, [r3, #2]
 80086ba:	0a1b      	lsrs	r3, r3, #8
 80086bc:	b29b      	uxth	r3, r3
 80086be:	2b22      	cmp	r3, #34	; 0x22
 80086c0:	d108      	bne.n	80086d4 <USBD_HID_Setup+0x150>
				{
					len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	88db      	ldrh	r3, [r3, #6]
 80086c6:	2b25      	cmp	r3, #37	; 0x25
 80086c8:	bf28      	it	cs
 80086ca:	2325      	movcs	r3, #37	; 0x25
 80086cc:	82bb      	strh	r3, [r7, #20]
					pbuf = HID_MOUSE_ReportDesc;
 80086ce:	4b2f      	ldr	r3, [pc, #188]	; (800878c <USBD_HID_Setup+0x208>)
 80086d0:	613b      	str	r3, [r7, #16]
 80086d2:	e015      	b.n	8008700 <USBD_HID_Setup+0x17c>
				}
				else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	885b      	ldrh	r3, [r3, #2]
 80086d8:	0a1b      	lsrs	r3, r3, #8
 80086da:	b29b      	uxth	r3, r3
 80086dc:	2b21      	cmp	r3, #33	; 0x21
 80086de:	d108      	bne.n	80086f2 <USBD_HID_Setup+0x16e>
				{
					pbuf = USBD_HID_Desc;
 80086e0:	4b2b      	ldr	r3, [pc, #172]	; (8008790 <USBD_HID_Setup+0x20c>)
 80086e2:	613b      	str	r3, [r7, #16]
					len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	88db      	ldrh	r3, [r3, #6]
 80086e8:	2b09      	cmp	r3, #9
 80086ea:	bf28      	it	cs
 80086ec:	2309      	movcs	r3, #9
 80086ee:	82bb      	strh	r3, [r7, #20]
 80086f0:	e006      	b.n	8008700 <USBD_HID_Setup+0x17c>
				}
				else
				{
					USBD_CtlError(pdev, req);
 80086f2:	6839      	ldr	r1, [r7, #0]
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f001 fac2 	bl	8009c7e <USBD_CtlError>
					ret = USBD_FAIL;
 80086fa:	2303      	movs	r3, #3
 80086fc:	75fb      	strb	r3, [r7, #23]
					break;
 80086fe:	e037      	b.n	8008770 <USBD_HID_Setup+0x1ec>
				}
				(void)USBD_CtlSendData(pdev, pbuf, len);
 8008700:	8abb      	ldrh	r3, [r7, #20]
 8008702:	461a      	mov	r2, r3
 8008704:	6939      	ldr	r1, [r7, #16]
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f001 fb2a 	bl	8009d60 <USBD_CtlSendData>
				break;
 800870c:	e030      	b.n	8008770 <USBD_HID_Setup+0x1ec>

			case USB_REQ_GET_INTERFACE :
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b03      	cmp	r3, #3
 8008718:	d107      	bne.n	800872a <USBD_HID_Setup+0x1a6>
				{
					(void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	3308      	adds	r3, #8
 800871e:	2201      	movs	r2, #1
 8008720:	4619      	mov	r1, r3
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f001 fb1c 	bl	8009d60 <USBD_CtlSendData>
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 8008728:	e022      	b.n	8008770 <USBD_HID_Setup+0x1ec>
					USBD_CtlError(pdev, req);
 800872a:	6839      	ldr	r1, [r7, #0]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f001 faa6 	bl	8009c7e <USBD_CtlError>
					ret = USBD_FAIL;
 8008732:	2303      	movs	r3, #3
 8008734:	75fb      	strb	r3, [r7, #23]
				break;
 8008736:	e01b      	b.n	8008770 <USBD_HID_Setup+0x1ec>

			case USB_REQ_SET_INTERFACE:
				if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800873e:	b2db      	uxtb	r3, r3
 8008740:	2b03      	cmp	r3, #3
 8008742:	d106      	bne.n	8008752 <USBD_HID_Setup+0x1ce>
				{
					hhid->AltSetting = (uint8_t)(req->wValue);
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	885b      	ldrh	r3, [r3, #2]
 8008748:	b2db      	uxtb	r3, r3
 800874a:	461a      	mov	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	609a      	str	r2, [r3, #8]
				else
				{
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
				break;
 8008750:	e00e      	b.n	8008770 <USBD_HID_Setup+0x1ec>
					USBD_CtlError(pdev, req);
 8008752:	6839      	ldr	r1, [r7, #0]
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f001 fa92 	bl	8009c7e <USBD_CtlError>
					ret = USBD_FAIL;
 800875a:	2303      	movs	r3, #3
 800875c:	75fb      	strb	r3, [r7, #23]
				break;
 800875e:	e007      	b.n	8008770 <USBD_HID_Setup+0x1ec>

			case USB_REQ_CLEAR_FEATURE:
				break;

			default:
				USBD_CtlError(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f001 fa8b 	bl	8009c7e <USBD_CtlError>
				ret = USBD_FAIL;
 8008768:	2303      	movs	r3, #3
 800876a:	75fb      	strb	r3, [r7, #23]
				break;
 800876c:	e000      	b.n	8008770 <USBD_HID_Setup+0x1ec>
				break;
 800876e:	bf00      	nop
			}
			break;
 8008770:	e006      	b.n	8008780 <USBD_HID_Setup+0x1fc>

			default:
				USBD_CtlError(pdev, req);
 8008772:	6839      	ldr	r1, [r7, #0]
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f001 fa82 	bl	8009c7e <USBD_CtlError>
				ret = USBD_FAIL;
 800877a:	2303      	movs	r3, #3
 800877c:	75fb      	strb	r3, [r7, #23]
				break;
 800877e:	bf00      	nop
	}

	return (uint8_t)ret;
 8008780:	7dfb      	ldrb	r3, [r7, #23]
}
 8008782:	4618      	mov	r0, r3
 8008784:	3718      	adds	r7, #24
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	200000a8 	.word	0x200000a8
 8008790:	20000090 	.word	0x20000090

08008794 <USBD_HID_GetFSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b084      	sub	sp, #16
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
	USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800879c:	2181      	movs	r1, #129	; 0x81
 800879e:	4809      	ldr	r0, [pc, #36]	; (80087c4 <USBD_HID_GetFSCfgDesc+0x30>)
 80087a0:	f000 fc35 	bl	800900e <USBD_GetEpDesc>
 80087a4:	60f8      	str	r0, [r7, #12]

	if (pEpDesc != NULL)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d002      	beq.n	80087b2 <USBD_HID_GetFSCfgDesc+0x1e>
	{
		pEpDesc->bInterval = HID_FS_BINTERVAL;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	220a      	movs	r2, #10
 80087b0:	719a      	strb	r2, [r3, #6]
	}

	*length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2222      	movs	r2, #34	; 0x22
 80087b6:	801a      	strh	r2, [r3, #0]
	return USBD_HID_CfgDesc;
 80087b8:	4b02      	ldr	r3, [pc, #8]	; (80087c4 <USBD_HID_GetFSCfgDesc+0x30>)
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	2000006c 	.word	0x2000006c

080087c8 <USBD_HID_GetHSCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
	USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80087d0:	2181      	movs	r1, #129	; 0x81
 80087d2:	4809      	ldr	r0, [pc, #36]	; (80087f8 <USBD_HID_GetHSCfgDesc+0x30>)
 80087d4:	f000 fc1b 	bl	800900e <USBD_GetEpDesc>
 80087d8:	60f8      	str	r0, [r7, #12]

	if (pEpDesc != NULL)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d002      	beq.n	80087e6 <USBD_HID_GetHSCfgDesc+0x1e>
	{
		pEpDesc->bInterval = HID_HS_BINTERVAL;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2207      	movs	r2, #7
 80087e4:	719a      	strb	r2, [r3, #6]
	}

	*length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2222      	movs	r2, #34	; 0x22
 80087ea:	801a      	strh	r2, [r3, #0]
	return USBD_HID_CfgDesc;
 80087ec:	4b02      	ldr	r3, [pc, #8]	; (80087f8 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	2000006c 	.word	0x2000006c

080087fc <USBD_HID_GetOtherSpeedCfgDesc>:
 * @param  speed : current device speed
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
	USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008804:	2181      	movs	r1, #129	; 0x81
 8008806:	4809      	ldr	r0, [pc, #36]	; (800882c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8008808:	f000 fc01 	bl	800900e <USBD_GetEpDesc>
 800880c:	60f8      	str	r0, [r7, #12]

	if (pEpDesc != NULL)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d002      	beq.n	800881a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
	{
		pEpDesc->bInterval = HID_FS_BINTERVAL;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	220a      	movs	r2, #10
 8008818:	719a      	strb	r2, [r3, #6]
	}

	*length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2222      	movs	r2, #34	; 0x22
 800881e:	801a      	strh	r2, [r3, #0]
	return USBD_HID_CfgDesc;
 8008820:	4b02      	ldr	r3, [pc, #8]	; (800882c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8008822:	4618      	mov	r0, r3
 8008824:	3710      	adds	r7, #16
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	2000006c 	.word	0x2000006c

08008830 <USBD_HID_DataIn>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	460b      	mov	r3, r1
 800883a:	70fb      	strb	r3, [r7, #3]
	UNUSED(epnum);
	/* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
	((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	32b0      	adds	r2, #176	; 0xb0
 8008846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800884a:	2200      	movs	r2, #0
 800884c:	731a      	strb	r2, [r3, #12]

	return (uint8_t)USBD_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <USBD_HID_GetDeviceQualifierDesc>:
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
	*length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	220a      	movs	r2, #10
 8008868:	801a      	strh	r2, [r3, #0]

	return USBD_HID_DeviceQualifierDesc;
 800886a:	4b03      	ldr	r3, [pc, #12]	; (8008878 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800886c:	4618      	mov	r0, r3
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr
 8008878:	2000009c 	.word	0x2000009c

0800887c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	4613      	mov	r3, r2
 8008888:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d101      	bne.n	8008894 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008890:	2303      	movs	r3, #3
 8008892:	e01f      	b.n	80088d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2200      	movs	r2, #0
 80088a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d003      	beq.n	80088ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	79fa      	ldrb	r2, [r7, #7]
 80088c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f001 fd29 	bl	800a320 <USBD_LL_Init>
 80088ce:	4603      	mov	r3, r0
 80088d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80088d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3718      	adds	r7, #24
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088e6:	2300      	movs	r3, #0
 80088e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d101      	bne.n	80088f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80088f0:	2303      	movs	r3, #3
 80088f2:	e025      	b.n	8008940 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	683a      	ldr	r2, [r7, #0]
 80088f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	32ae      	adds	r2, #174	; 0xae
 8008906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00f      	beq.n	8008930 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	32ae      	adds	r2, #174	; 0xae
 800891a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800891e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008920:	f107 020e 	add.w	r2, r7, #14
 8008924:	4610      	mov	r0, r2
 8008926:	4798      	blx	r3
 8008928:	4602      	mov	r2, r0
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008936:	1c5a      	adds	r2, r3, #1
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f001 fd31 	bl	800a3b8 <USBD_LL_Start>
 8008956:	4603      	mov	r3, r0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}

08008960 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008968:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800896a:	4618      	mov	r0, r3
 800896c:	370c      	adds	r7, #12
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr

08008976 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008976:	b580      	push	{r7, lr}
 8008978:	b084      	sub	sp, #16
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
 800897e:	460b      	mov	r3, r1
 8008980:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008982:	2300      	movs	r3, #0
 8008984:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800898c:	2b00      	cmp	r3, #0
 800898e:	d009      	beq.n	80089a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	78fa      	ldrb	r2, [r7, #3]
 800899a:	4611      	mov	r1, r2
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	4798      	blx	r3
 80089a0:	4603      	mov	r3, r0
 80089a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b084      	sub	sp, #16
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
 80089b6:	460b      	mov	r3, r1
 80089b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	78fa      	ldrb	r2, [r7, #3]
 80089c8:	4611      	mov	r1, r2
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	4798      	blx	r3
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80089d4:	2303      	movs	r3, #3
 80089d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80089f2:	6839      	ldr	r1, [r7, #0]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f001 f908 	bl	8009c0a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008a08:	461a      	mov	r2, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a16:	f003 031f 	and.w	r3, r3, #31
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d01a      	beq.n	8008a54 <USBD_LL_SetupStage+0x72>
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d822      	bhi.n	8008a68 <USBD_LL_SetupStage+0x86>
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d002      	beq.n	8008a2c <USBD_LL_SetupStage+0x4a>
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d00a      	beq.n	8008a40 <USBD_LL_SetupStage+0x5e>
 8008a2a:	e01d      	b.n	8008a68 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a32:	4619      	mov	r1, r3
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fb5f 	bl	80090f8 <USBD_StdDevReq>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a3e:	e020      	b.n	8008a82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a46:	4619      	mov	r1, r3
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 fbc7 	bl	80091dc <USBD_StdItfReq>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	73fb      	strb	r3, [r7, #15]
      break;
 8008a52:	e016      	b.n	8008a82 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fc29 	bl	80092b4 <USBD_StdEPReq>
 8008a62:	4603      	mov	r3, r0
 8008a64:	73fb      	strb	r3, [r7, #15]
      break;
 8008a66:	e00c      	b.n	8008a82 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	4619      	mov	r1, r3
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f001 fcfe 	bl	800a478 <USBD_LL_StallEP>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a80:	bf00      	nop
  }

  return ret;
 8008a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b086      	sub	sp, #24
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	460b      	mov	r3, r1
 8008a96:	607a      	str	r2, [r7, #4]
 8008a98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008a9e:	7afb      	ldrb	r3, [r7, #11]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d16e      	bne.n	8008b82 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008aaa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ab2:	2b03      	cmp	r3, #3
 8008ab4:	f040 8098 	bne.w	8008be8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	689a      	ldr	r2, [r3, #8]
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d913      	bls.n	8008aec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	689a      	ldr	r2, [r3, #8]
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	1ad2      	subs	r2, r2, r3
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	68da      	ldr	r2, [r3, #12]
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	4293      	cmp	r3, r2
 8008adc:	bf28      	it	cs
 8008ade:	4613      	movcs	r3, r2
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	6879      	ldr	r1, [r7, #4]
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f001 f967 	bl	8009db8 <USBD_CtlContinueRx>
 8008aea:	e07d      	b.n	8008be8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008af2:	f003 031f 	and.w	r3, r3, #31
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d014      	beq.n	8008b24 <USBD_LL_DataOutStage+0x98>
 8008afa:	2b02      	cmp	r3, #2
 8008afc:	d81d      	bhi.n	8008b3a <USBD_LL_DataOutStage+0xae>
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d002      	beq.n	8008b08 <USBD_LL_DataOutStage+0x7c>
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d003      	beq.n	8008b0e <USBD_LL_DataOutStage+0x82>
 8008b06:	e018      	b.n	8008b3a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	75bb      	strb	r3, [r7, #22]
            break;
 8008b0c:	e018      	b.n	8008b40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	4619      	mov	r1, r3
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f000 fa5e 	bl	8008fda <USBD_CoreFindIF>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	75bb      	strb	r3, [r7, #22]
            break;
 8008b22:	e00d      	b.n	8008b40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	4619      	mov	r1, r3
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f000 fa60 	bl	8008ff4 <USBD_CoreFindEP>
 8008b34:	4603      	mov	r3, r0
 8008b36:	75bb      	strb	r3, [r7, #22]
            break;
 8008b38:	e002      	b.n	8008b40 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	75bb      	strb	r3, [r7, #22]
            break;
 8008b3e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008b40:	7dbb      	ldrb	r3, [r7, #22]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d119      	bne.n	8008b7a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	2b03      	cmp	r3, #3
 8008b50:	d113      	bne.n	8008b7a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008b52:	7dba      	ldrb	r2, [r7, #22]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	32ae      	adds	r2, #174	; 0xae
 8008b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00b      	beq.n	8008b7a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008b62:	7dba      	ldrb	r2, [r7, #22]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008b6a:	7dba      	ldrb	r2, [r7, #22]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	32ae      	adds	r2, #174	; 0xae
 8008b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008b7a:	68f8      	ldr	r0, [r7, #12]
 8008b7c:	f001 f92d 	bl	8009dda <USBD_CtlSendStatus>
 8008b80:	e032      	b.n	8008be8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008b82:	7afb      	ldrb	r3, [r7, #11]
 8008b84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f000 fa31 	bl	8008ff4 <USBD_CoreFindEP>
 8008b92:	4603      	mov	r3, r0
 8008b94:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b96:	7dbb      	ldrb	r3, [r7, #22]
 8008b98:	2bff      	cmp	r3, #255	; 0xff
 8008b9a:	d025      	beq.n	8008be8 <USBD_LL_DataOutStage+0x15c>
 8008b9c:	7dbb      	ldrb	r3, [r7, #22]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d122      	bne.n	8008be8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	2b03      	cmp	r3, #3
 8008bac:	d117      	bne.n	8008bde <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008bae:	7dba      	ldrb	r2, [r7, #22]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	32ae      	adds	r2, #174	; 0xae
 8008bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00f      	beq.n	8008bde <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008bbe:	7dba      	ldrb	r2, [r7, #22]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008bc6:	7dba      	ldrb	r2, [r7, #22]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	32ae      	adds	r2, #174	; 0xae
 8008bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	7afa      	ldrb	r2, [r7, #11]
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	4798      	blx	r3
 8008bda:	4603      	mov	r3, r0
 8008bdc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008bde:	7dfb      	ldrb	r3, [r7, #23]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d001      	beq.n	8008be8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008be4:	7dfb      	ldrb	r3, [r7, #23]
 8008be6:	e000      	b.n	8008bea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008be8:	2300      	movs	r3, #0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3718      	adds	r7, #24
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b086      	sub	sp, #24
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	60f8      	str	r0, [r7, #12]
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	607a      	str	r2, [r7, #4]
 8008bfe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008c00:	7afb      	ldrb	r3, [r7, #11]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d16f      	bne.n	8008ce6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	3314      	adds	r3, #20
 8008c0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d15a      	bne.n	8008ccc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	689a      	ldr	r2, [r3, #8]
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d914      	bls.n	8008c4c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	689a      	ldr	r2, [r3, #8]
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	1ad2      	subs	r2, r2, r3
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	461a      	mov	r2, r3
 8008c36:	6879      	ldr	r1, [r7, #4]
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	f001 f8ac 	bl	8009d96 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c3e:	2300      	movs	r3, #0
 8008c40:	2200      	movs	r2, #0
 8008c42:	2100      	movs	r1, #0
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f001 fcc1 	bl	800a5cc <USBD_LL_PrepareReceive>
 8008c4a:	e03f      	b.n	8008ccc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	68da      	ldr	r2, [r3, #12]
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d11c      	bne.n	8008c92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	685a      	ldr	r2, [r3, #4]
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d316      	bcc.n	8008c92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d20f      	bcs.n	8008c92 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c72:	2200      	movs	r2, #0
 8008c74:	2100      	movs	r1, #0
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f001 f88d 	bl	8009d96 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c84:	2300      	movs	r3, #0
 8008c86:	2200      	movs	r2, #0
 8008c88:	2100      	movs	r1, #0
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f001 fc9e 	bl	800a5cc <USBD_LL_PrepareReceive>
 8008c90:	e01c      	b.n	8008ccc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	d10f      	bne.n	8008cbe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d009      	beq.n	8008cbe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	68f8      	ldr	r0, [r7, #12]
 8008cbc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cbe:	2180      	movs	r1, #128	; 0x80
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f001 fbd9 	bl	800a478 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f001 f89a 	bl	8009e00 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d03a      	beq.n	8008d4c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f7ff fe42 	bl	8008960 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008ce4:	e032      	b.n	8008d4c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008ce6:	7afb      	ldrb	r3, [r7, #11]
 8008ce8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	4619      	mov	r1, r3
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f000 f97f 	bl	8008ff4 <USBD_CoreFindEP>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cfa:	7dfb      	ldrb	r3, [r7, #23]
 8008cfc:	2bff      	cmp	r3, #255	; 0xff
 8008cfe:	d025      	beq.n	8008d4c <USBD_LL_DataInStage+0x15a>
 8008d00:	7dfb      	ldrb	r3, [r7, #23]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d122      	bne.n	8008d4c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	d11c      	bne.n	8008d4c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008d12:	7dfa      	ldrb	r2, [r7, #23]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	32ae      	adds	r2, #174	; 0xae
 8008d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d1c:	695b      	ldr	r3, [r3, #20]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d014      	beq.n	8008d4c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008d22:	7dfa      	ldrb	r2, [r7, #23]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008d2a:	7dfa      	ldrb	r2, [r7, #23]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	32ae      	adds	r2, #174	; 0xae
 8008d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d34:	695b      	ldr	r3, [r3, #20]
 8008d36:	7afa      	ldrb	r2, [r7, #11]
 8008d38:	4611      	mov	r1, r2
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	4798      	blx	r3
 8008d3e:	4603      	mov	r3, r0
 8008d40:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008d42:	7dbb      	ldrb	r3, [r7, #22]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d001      	beq.n	8008d4c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008d48:	7dbb      	ldrb	r3, [r7, #22]
 8008d4a:	e000      	b.n	8008d4e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3718      	adds	r7, #24
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b084      	sub	sp, #16
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d014      	beq.n	8008dbc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00e      	beq.n	8008dbc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	6852      	ldr	r2, [r2, #4]
 8008daa:	b2d2      	uxtb	r2, r2
 8008dac:	4611      	mov	r1, r2
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	4798      	blx	r3
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d001      	beq.n	8008dbc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008db8:	2303      	movs	r3, #3
 8008dba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dbc:	2340      	movs	r3, #64	; 0x40
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	2100      	movs	r1, #0
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f001 fb13 	bl	800a3ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2240      	movs	r2, #64	; 0x40
 8008dd4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dd8:	2340      	movs	r3, #64	; 0x40
 8008dda:	2200      	movs	r2, #0
 8008ddc:	2180      	movs	r1, #128	; 0x80
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f001 fb05 	bl	800a3ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2240      	movs	r2, #64	; 0x40
 8008dee:	621a      	str	r2, [r3, #32]

  return ret;
 8008df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008dfa:	b480      	push	{r7}
 8008dfc:	b083      	sub	sp, #12
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	460b      	mov	r3, r1
 8008e04:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	78fa      	ldrb	r2, [r7, #3]
 8008e0a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	370c      	adds	r7, #12
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr

08008e1a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008e1a:	b480      	push	{r7}
 8008e1c:	b083      	sub	sp, #12
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e28:	b2da      	uxtb	r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2204      	movs	r2, #4
 8008e34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	370c      	adds	r7, #12
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr

08008e46 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e46:	b480      	push	{r7}
 8008e48:	b083      	sub	sp, #12
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b04      	cmp	r3, #4
 8008e58:	d106      	bne.n	8008e68 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008e60:	b2da      	uxtb	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	370c      	adds	r7, #12
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b082      	sub	sp, #8
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	d110      	bne.n	8008eac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d00b      	beq.n	8008eac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e9a:	69db      	ldr	r3, [r3, #28]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d005      	beq.n	8008eac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ea6:	69db      	ldr	r3, [r3, #28]
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b082      	sub	sp, #8
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
 8008ebe:	460b      	mov	r3, r1
 8008ec0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	32ae      	adds	r2, #174	; 0xae
 8008ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d101      	bne.n	8008ed8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	e01c      	b.n	8008f12 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	2b03      	cmp	r3, #3
 8008ee2:	d115      	bne.n	8008f10 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	32ae      	adds	r2, #174	; 0xae
 8008eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef2:	6a1b      	ldr	r3, [r3, #32]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00b      	beq.n	8008f10 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	32ae      	adds	r2, #174	; 0xae
 8008f02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f06:	6a1b      	ldr	r3, [r3, #32]
 8008f08:	78fa      	ldrb	r2, [r7, #3]
 8008f0a:	4611      	mov	r1, r2
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3708      	adds	r7, #8
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b082      	sub	sp, #8
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
 8008f22:	460b      	mov	r3, r1
 8008f24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	32ae      	adds	r2, #174	; 0xae
 8008f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d101      	bne.n	8008f3c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f38:	2303      	movs	r3, #3
 8008f3a:	e01c      	b.n	8008f76 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	2b03      	cmp	r3, #3
 8008f46:	d115      	bne.n	8008f74 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	32ae      	adds	r2, #174	; 0xae
 8008f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00b      	beq.n	8008f74 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	32ae      	adds	r2, #174	; 0xae
 8008f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6c:	78fa      	ldrb	r2, [r7, #3]
 8008f6e:	4611      	mov	r1, r2
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b083      	sub	sp, #12
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	370c      	adds	r7, #12
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00e      	beq.n	8008fd0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	6852      	ldr	r2, [r2, #4]
 8008fbe:	b2d2      	uxtb	r2, r2
 8008fc0:	4611      	mov	r1, r2
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	4798      	blx	r3
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d001      	beq.n	8008fd0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b083      	sub	sp, #12
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008fe6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	370c      	adds	r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009000:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009002:	4618      	mov	r0, r3
 8009004:	370c      	adds	r7, #12
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr

0800900e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b086      	sub	sp, #24
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	460b      	mov	r3, r1
 8009018:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009022:	2300      	movs	r3, #0
 8009024:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	885b      	ldrh	r3, [r3, #2]
 800902a:	b29a      	uxth	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	b29b      	uxth	r3, r3
 8009032:	429a      	cmp	r2, r3
 8009034:	d920      	bls.n	8009078 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	b29b      	uxth	r3, r3
 800903c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800903e:	e013      	b.n	8009068 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009040:	f107 030a 	add.w	r3, r7, #10
 8009044:	4619      	mov	r1, r3
 8009046:	6978      	ldr	r0, [r7, #20]
 8009048:	f000 f81b 	bl	8009082 <USBD_GetNextDesc>
 800904c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	785b      	ldrb	r3, [r3, #1]
 8009052:	2b05      	cmp	r3, #5
 8009054:	d108      	bne.n	8009068 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	789b      	ldrb	r3, [r3, #2]
 800905e:	78fa      	ldrb	r2, [r7, #3]
 8009060:	429a      	cmp	r2, r3
 8009062:	d008      	beq.n	8009076 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009064:	2300      	movs	r3, #0
 8009066:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	885b      	ldrh	r3, [r3, #2]
 800906c:	b29a      	uxth	r2, r3
 800906e:	897b      	ldrh	r3, [r7, #10]
 8009070:	429a      	cmp	r2, r3
 8009072:	d8e5      	bhi.n	8009040 <USBD_GetEpDesc+0x32>
 8009074:	e000      	b.n	8009078 <USBD_GetEpDesc+0x6a>
          break;
 8009076:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009078:	693b      	ldr	r3, [r7, #16]
}
 800907a:	4618      	mov	r0, r3
 800907c:	3718      	adds	r7, #24
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009082:	b480      	push	{r7}
 8009084:	b085      	sub	sp, #20
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
 800908a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	881a      	ldrh	r2, [r3, #0]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	b29b      	uxth	r3, r3
 800909a:	4413      	add	r3, r2
 800909c:	b29a      	uxth	r2, r3
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	461a      	mov	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4413      	add	r3, r2
 80090ac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80090ae:	68fb      	ldr	r3, [r7, #12]
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80090bc:	b480      	push	{r7}
 80090be:	b087      	sub	sp, #28
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	3301      	adds	r3, #1
 80090d2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80090da:	8a3b      	ldrh	r3, [r7, #16]
 80090dc:	021b      	lsls	r3, r3, #8
 80090de:	b21a      	sxth	r2, r3
 80090e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	b21b      	sxth	r3, r3
 80090e8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80090ea:	89fb      	ldrh	r3, [r7, #14]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	371c      	adds	r7, #28
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800910e:	2b40      	cmp	r3, #64	; 0x40
 8009110:	d005      	beq.n	800911e <USBD_StdDevReq+0x26>
 8009112:	2b40      	cmp	r3, #64	; 0x40
 8009114:	d857      	bhi.n	80091c6 <USBD_StdDevReq+0xce>
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00f      	beq.n	800913a <USBD_StdDevReq+0x42>
 800911a:	2b20      	cmp	r3, #32
 800911c:	d153      	bne.n	80091c6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	32ae      	adds	r2, #174	; 0xae
 8009128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	6839      	ldr	r1, [r7, #0]
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	4798      	blx	r3
 8009134:	4603      	mov	r3, r0
 8009136:	73fb      	strb	r3, [r7, #15]
      break;
 8009138:	e04a      	b.n	80091d0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	785b      	ldrb	r3, [r3, #1]
 800913e:	2b09      	cmp	r3, #9
 8009140:	d83b      	bhi.n	80091ba <USBD_StdDevReq+0xc2>
 8009142:	a201      	add	r2, pc, #4	; (adr r2, 8009148 <USBD_StdDevReq+0x50>)
 8009144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009148:	0800919d 	.word	0x0800919d
 800914c:	080091b1 	.word	0x080091b1
 8009150:	080091bb 	.word	0x080091bb
 8009154:	080091a7 	.word	0x080091a7
 8009158:	080091bb 	.word	0x080091bb
 800915c:	0800917b 	.word	0x0800917b
 8009160:	08009171 	.word	0x08009171
 8009164:	080091bb 	.word	0x080091bb
 8009168:	08009193 	.word	0x08009193
 800916c:	08009185 	.word	0x08009185
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 fa3c 	bl	80095f0 <USBD_GetDescriptor>
          break;
 8009178:	e024      	b.n	80091c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800917a:	6839      	ldr	r1, [r7, #0]
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fba1 	bl	80098c4 <USBD_SetAddress>
          break;
 8009182:	e01f      	b.n	80091c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fbe0 	bl	800994c <USBD_SetConfig>
 800918c:	4603      	mov	r3, r0
 800918e:	73fb      	strb	r3, [r7, #15]
          break;
 8009190:	e018      	b.n	80091c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009192:	6839      	ldr	r1, [r7, #0]
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 fc83 	bl	8009aa0 <USBD_GetConfig>
          break;
 800919a:	e013      	b.n	80091c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800919c:	6839      	ldr	r1, [r7, #0]
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 fcb4 	bl	8009b0c <USBD_GetStatus>
          break;
 80091a4:	e00e      	b.n	80091c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80091a6:	6839      	ldr	r1, [r7, #0]
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 fce3 	bl	8009b74 <USBD_SetFeature>
          break;
 80091ae:	e009      	b.n	80091c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80091b0:	6839      	ldr	r1, [r7, #0]
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fd07 	bl	8009bc6 <USBD_ClrFeature>
          break;
 80091b8:	e004      	b.n	80091c4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80091ba:	6839      	ldr	r1, [r7, #0]
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fd5e 	bl	8009c7e <USBD_CtlError>
          break;
 80091c2:	bf00      	nop
      }
      break;
 80091c4:	e004      	b.n	80091d0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80091c6:	6839      	ldr	r1, [r7, #0]
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 fd58 	bl	8009c7e <USBD_CtlError>
      break;
 80091ce:	bf00      	nop
  }

  return ret;
 80091d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop

080091dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091e6:	2300      	movs	r3, #0
 80091e8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091f2:	2b40      	cmp	r3, #64	; 0x40
 80091f4:	d005      	beq.n	8009202 <USBD_StdItfReq+0x26>
 80091f6:	2b40      	cmp	r3, #64	; 0x40
 80091f8:	d852      	bhi.n	80092a0 <USBD_StdItfReq+0xc4>
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d001      	beq.n	8009202 <USBD_StdItfReq+0x26>
 80091fe:	2b20      	cmp	r3, #32
 8009200:	d14e      	bne.n	80092a0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009208:	b2db      	uxtb	r3, r3
 800920a:	3b01      	subs	r3, #1
 800920c:	2b02      	cmp	r3, #2
 800920e:	d840      	bhi.n	8009292 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	889b      	ldrh	r3, [r3, #4]
 8009214:	b2db      	uxtb	r3, r3
 8009216:	2b01      	cmp	r3, #1
 8009218:	d836      	bhi.n	8009288 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	889b      	ldrh	r3, [r3, #4]
 800921e:	b2db      	uxtb	r3, r3
 8009220:	4619      	mov	r1, r3
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f7ff fed9 	bl	8008fda <USBD_CoreFindIF>
 8009228:	4603      	mov	r3, r0
 800922a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800922c:	7bbb      	ldrb	r3, [r7, #14]
 800922e:	2bff      	cmp	r3, #255	; 0xff
 8009230:	d01d      	beq.n	800926e <USBD_StdItfReq+0x92>
 8009232:	7bbb      	ldrb	r3, [r7, #14]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d11a      	bne.n	800926e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009238:	7bba      	ldrb	r2, [r7, #14]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	32ae      	adds	r2, #174	; 0xae
 800923e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00f      	beq.n	8009268 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009248:	7bba      	ldrb	r2, [r7, #14]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009250:	7bba      	ldrb	r2, [r7, #14]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	32ae      	adds	r2, #174	; 0xae
 8009256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	4798      	blx	r3
 8009262:	4603      	mov	r3, r0
 8009264:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009266:	e004      	b.n	8009272 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009268:	2303      	movs	r3, #3
 800926a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800926c:	e001      	b.n	8009272 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800926e:	2303      	movs	r3, #3
 8009270:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	88db      	ldrh	r3, [r3, #6]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d110      	bne.n	800929c <USBD_StdItfReq+0xc0>
 800927a:	7bfb      	ldrb	r3, [r7, #15]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d10d      	bne.n	800929c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 fdaa 	bl	8009dda <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009286:	e009      	b.n	800929c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009288:	6839      	ldr	r1, [r7, #0]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 fcf7 	bl	8009c7e <USBD_CtlError>
          break;
 8009290:	e004      	b.n	800929c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 fcf2 	bl	8009c7e <USBD_CtlError>
          break;
 800929a:	e000      	b.n	800929e <USBD_StdItfReq+0xc2>
          break;
 800929c:	bf00      	nop
      }
      break;
 800929e:	e004      	b.n	80092aa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80092a0:	6839      	ldr	r1, [r7, #0]
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 fceb 	bl	8009c7e <USBD_CtlError>
      break;
 80092a8:	bf00      	nop
  }

  return ret;
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	889b      	ldrh	r3, [r3, #4]
 80092c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092d0:	2b40      	cmp	r3, #64	; 0x40
 80092d2:	d007      	beq.n	80092e4 <USBD_StdEPReq+0x30>
 80092d4:	2b40      	cmp	r3, #64	; 0x40
 80092d6:	f200 817f 	bhi.w	80095d8 <USBD_StdEPReq+0x324>
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d02a      	beq.n	8009334 <USBD_StdEPReq+0x80>
 80092de:	2b20      	cmp	r3, #32
 80092e0:	f040 817a 	bne.w	80095d8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80092e4:	7bbb      	ldrb	r3, [r7, #14]
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f7ff fe83 	bl	8008ff4 <USBD_CoreFindEP>
 80092ee:	4603      	mov	r3, r0
 80092f0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092f2:	7b7b      	ldrb	r3, [r7, #13]
 80092f4:	2bff      	cmp	r3, #255	; 0xff
 80092f6:	f000 8174 	beq.w	80095e2 <USBD_StdEPReq+0x32e>
 80092fa:	7b7b      	ldrb	r3, [r7, #13]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f040 8170 	bne.w	80095e2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009302:	7b7a      	ldrb	r2, [r7, #13]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800930a:	7b7a      	ldrb	r2, [r7, #13]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	32ae      	adds	r2, #174	; 0xae
 8009310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	2b00      	cmp	r3, #0
 8009318:	f000 8163 	beq.w	80095e2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800931c:	7b7a      	ldrb	r2, [r7, #13]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	32ae      	adds	r2, #174	; 0xae
 8009322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	6839      	ldr	r1, [r7, #0]
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	4798      	blx	r3
 800932e:	4603      	mov	r3, r0
 8009330:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009332:	e156      	b.n	80095e2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	785b      	ldrb	r3, [r3, #1]
 8009338:	2b03      	cmp	r3, #3
 800933a:	d008      	beq.n	800934e <USBD_StdEPReq+0x9a>
 800933c:	2b03      	cmp	r3, #3
 800933e:	f300 8145 	bgt.w	80095cc <USBD_StdEPReq+0x318>
 8009342:	2b00      	cmp	r3, #0
 8009344:	f000 809b 	beq.w	800947e <USBD_StdEPReq+0x1ca>
 8009348:	2b01      	cmp	r3, #1
 800934a:	d03c      	beq.n	80093c6 <USBD_StdEPReq+0x112>
 800934c:	e13e      	b.n	80095cc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009354:	b2db      	uxtb	r3, r3
 8009356:	2b02      	cmp	r3, #2
 8009358:	d002      	beq.n	8009360 <USBD_StdEPReq+0xac>
 800935a:	2b03      	cmp	r3, #3
 800935c:	d016      	beq.n	800938c <USBD_StdEPReq+0xd8>
 800935e:	e02c      	b.n	80093ba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009360:	7bbb      	ldrb	r3, [r7, #14]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00d      	beq.n	8009382 <USBD_StdEPReq+0xce>
 8009366:	7bbb      	ldrb	r3, [r7, #14]
 8009368:	2b80      	cmp	r3, #128	; 0x80
 800936a:	d00a      	beq.n	8009382 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800936c:	7bbb      	ldrb	r3, [r7, #14]
 800936e:	4619      	mov	r1, r3
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f001 f881 	bl	800a478 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009376:	2180      	movs	r1, #128	; 0x80
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f001 f87d 	bl	800a478 <USBD_LL_StallEP>
 800937e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009380:	e020      	b.n	80093c4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fc7a 	bl	8009c7e <USBD_CtlError>
              break;
 800938a:	e01b      	b.n	80093c4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	885b      	ldrh	r3, [r3, #2]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d10e      	bne.n	80093b2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009394:	7bbb      	ldrb	r3, [r7, #14]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00b      	beq.n	80093b2 <USBD_StdEPReq+0xfe>
 800939a:	7bbb      	ldrb	r3, [r7, #14]
 800939c:	2b80      	cmp	r3, #128	; 0x80
 800939e:	d008      	beq.n	80093b2 <USBD_StdEPReq+0xfe>
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	88db      	ldrh	r3, [r3, #6]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d104      	bne.n	80093b2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80093a8:	7bbb      	ldrb	r3, [r7, #14]
 80093aa:	4619      	mov	r1, r3
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f001 f863 	bl	800a478 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 fd11 	bl	8009dda <USBD_CtlSendStatus>

              break;
 80093b8:	e004      	b.n	80093c4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80093ba:	6839      	ldr	r1, [r7, #0]
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 fc5e 	bl	8009c7e <USBD_CtlError>
              break;
 80093c2:	bf00      	nop
          }
          break;
 80093c4:	e107      	b.n	80095d6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d002      	beq.n	80093d8 <USBD_StdEPReq+0x124>
 80093d2:	2b03      	cmp	r3, #3
 80093d4:	d016      	beq.n	8009404 <USBD_StdEPReq+0x150>
 80093d6:	e04b      	b.n	8009470 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093d8:	7bbb      	ldrb	r3, [r7, #14]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00d      	beq.n	80093fa <USBD_StdEPReq+0x146>
 80093de:	7bbb      	ldrb	r3, [r7, #14]
 80093e0:	2b80      	cmp	r3, #128	; 0x80
 80093e2:	d00a      	beq.n	80093fa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	4619      	mov	r1, r3
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f001 f845 	bl	800a478 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80093ee:	2180      	movs	r1, #128	; 0x80
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f001 f841 	bl	800a478 <USBD_LL_StallEP>
 80093f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093f8:	e040      	b.n	800947c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 fc3e 	bl	8009c7e <USBD_CtlError>
              break;
 8009402:	e03b      	b.n	800947c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	885b      	ldrh	r3, [r3, #2]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d136      	bne.n	800947a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800940c:	7bbb      	ldrb	r3, [r7, #14]
 800940e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009412:	2b00      	cmp	r3, #0
 8009414:	d004      	beq.n	8009420 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009416:	7bbb      	ldrb	r3, [r7, #14]
 8009418:	4619      	mov	r1, r3
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f001 f84b 	bl	800a4b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fcda 	bl	8009dda <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009426:	7bbb      	ldrb	r3, [r7, #14]
 8009428:	4619      	mov	r1, r3
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f7ff fde2 	bl	8008ff4 <USBD_CoreFindEP>
 8009430:	4603      	mov	r3, r0
 8009432:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009434:	7b7b      	ldrb	r3, [r7, #13]
 8009436:	2bff      	cmp	r3, #255	; 0xff
 8009438:	d01f      	beq.n	800947a <USBD_StdEPReq+0x1c6>
 800943a:	7b7b      	ldrb	r3, [r7, #13]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d11c      	bne.n	800947a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009440:	7b7a      	ldrb	r2, [r7, #13]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009448:	7b7a      	ldrb	r2, [r7, #13]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	32ae      	adds	r2, #174	; 0xae
 800944e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d010      	beq.n	800947a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009458:	7b7a      	ldrb	r2, [r7, #13]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	32ae      	adds	r2, #174	; 0xae
 800945e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	6839      	ldr	r1, [r7, #0]
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	4798      	blx	r3
 800946a:	4603      	mov	r3, r0
 800946c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800946e:	e004      	b.n	800947a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fc03 	bl	8009c7e <USBD_CtlError>
              break;
 8009478:	e000      	b.n	800947c <USBD_StdEPReq+0x1c8>
              break;
 800947a:	bf00      	nop
          }
          break;
 800947c:	e0ab      	b.n	80095d6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b02      	cmp	r3, #2
 8009488:	d002      	beq.n	8009490 <USBD_StdEPReq+0x1dc>
 800948a:	2b03      	cmp	r3, #3
 800948c:	d032      	beq.n	80094f4 <USBD_StdEPReq+0x240>
 800948e:	e097      	b.n	80095c0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009490:	7bbb      	ldrb	r3, [r7, #14]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d007      	beq.n	80094a6 <USBD_StdEPReq+0x1f2>
 8009496:	7bbb      	ldrb	r3, [r7, #14]
 8009498:	2b80      	cmp	r3, #128	; 0x80
 800949a:	d004      	beq.n	80094a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800949c:	6839      	ldr	r1, [r7, #0]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fbed 	bl	8009c7e <USBD_CtlError>
                break;
 80094a4:	e091      	b.n	80095ca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	da0b      	bge.n	80094c6 <USBD_StdEPReq+0x212>
 80094ae:	7bbb      	ldrb	r3, [r7, #14]
 80094b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094b4:	4613      	mov	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4413      	add	r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	3310      	adds	r3, #16
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	4413      	add	r3, r2
 80094c2:	3304      	adds	r3, #4
 80094c4:	e00b      	b.n	80094de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094c6:	7bbb      	ldrb	r3, [r7, #14]
 80094c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094cc:	4613      	mov	r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	4413      	add	r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	4413      	add	r3, r2
 80094dc:	3304      	adds	r3, #4
 80094de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	2200      	movs	r2, #0
 80094e4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	2202      	movs	r2, #2
 80094ea:	4619      	mov	r1, r3
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 fc37 	bl	8009d60 <USBD_CtlSendData>
              break;
 80094f2:	e06a      	b.n	80095ca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80094f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	da11      	bge.n	8009520 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80094fc:	7bbb      	ldrb	r3, [r7, #14]
 80094fe:	f003 020f 	and.w	r2, r3, #15
 8009502:	6879      	ldr	r1, [r7, #4]
 8009504:	4613      	mov	r3, r2
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4413      	add	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	440b      	add	r3, r1
 800950e:	3324      	adds	r3, #36	; 0x24
 8009510:	881b      	ldrh	r3, [r3, #0]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d117      	bne.n	8009546 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009516:	6839      	ldr	r1, [r7, #0]
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fbb0 	bl	8009c7e <USBD_CtlError>
                  break;
 800951e:	e054      	b.n	80095ca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009520:	7bbb      	ldrb	r3, [r7, #14]
 8009522:	f003 020f 	and.w	r2, r3, #15
 8009526:	6879      	ldr	r1, [r7, #4]
 8009528:	4613      	mov	r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	4413      	add	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	440b      	add	r3, r1
 8009532:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009536:	881b      	ldrh	r3, [r3, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d104      	bne.n	8009546 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 fb9d 	bl	8009c7e <USBD_CtlError>
                  break;
 8009544:	e041      	b.n	80095ca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009546:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800954a:	2b00      	cmp	r3, #0
 800954c:	da0b      	bge.n	8009566 <USBD_StdEPReq+0x2b2>
 800954e:	7bbb      	ldrb	r3, [r7, #14]
 8009550:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009554:	4613      	mov	r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	4413      	add	r3, r2
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	3310      	adds	r3, #16
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	4413      	add	r3, r2
 8009562:	3304      	adds	r3, #4
 8009564:	e00b      	b.n	800957e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009566:	7bbb      	ldrb	r3, [r7, #14]
 8009568:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800956c:	4613      	mov	r3, r2
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	4413      	add	r3, r2
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	4413      	add	r3, r2
 800957c:	3304      	adds	r3, #4
 800957e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009580:	7bbb      	ldrb	r3, [r7, #14]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d002      	beq.n	800958c <USBD_StdEPReq+0x2d8>
 8009586:	7bbb      	ldrb	r3, [r7, #14]
 8009588:	2b80      	cmp	r3, #128	; 0x80
 800958a:	d103      	bne.n	8009594 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	2200      	movs	r2, #0
 8009590:	601a      	str	r2, [r3, #0]
 8009592:	e00e      	b.n	80095b2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009594:	7bbb      	ldrb	r3, [r7, #14]
 8009596:	4619      	mov	r1, r3
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 ffab 	bl	800a4f4 <USBD_LL_IsStallEP>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d003      	beq.n	80095ac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	2201      	movs	r2, #1
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	e002      	b.n	80095b2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	2200      	movs	r2, #0
 80095b0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	2202      	movs	r2, #2
 80095b6:	4619      	mov	r1, r3
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 fbd1 	bl	8009d60 <USBD_CtlSendData>
              break;
 80095be:	e004      	b.n	80095ca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80095c0:	6839      	ldr	r1, [r7, #0]
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 fb5b 	bl	8009c7e <USBD_CtlError>
              break;
 80095c8:	bf00      	nop
          }
          break;
 80095ca:	e004      	b.n	80095d6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fb55 	bl	8009c7e <USBD_CtlError>
          break;
 80095d4:	bf00      	nop
      }
      break;
 80095d6:	e005      	b.n	80095e4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80095d8:	6839      	ldr	r1, [r7, #0]
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 fb4f 	bl	8009c7e <USBD_CtlError>
      break;
 80095e0:	e000      	b.n	80095e4 <USBD_StdEPReq+0x330>
      break;
 80095e2:	bf00      	nop
  }

  return ret;
 80095e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
	...

080095f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095fa:	2300      	movs	r3, #0
 80095fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80095fe:	2300      	movs	r3, #0
 8009600:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009602:	2300      	movs	r3, #0
 8009604:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	885b      	ldrh	r3, [r3, #2]
 800960a:	0a1b      	lsrs	r3, r3, #8
 800960c:	b29b      	uxth	r3, r3
 800960e:	3b01      	subs	r3, #1
 8009610:	2b06      	cmp	r3, #6
 8009612:	f200 8128 	bhi.w	8009866 <USBD_GetDescriptor+0x276>
 8009616:	a201      	add	r2, pc, #4	; (adr r2, 800961c <USBD_GetDescriptor+0x2c>)
 8009618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800961c:	08009639 	.word	0x08009639
 8009620:	08009651 	.word	0x08009651
 8009624:	08009691 	.word	0x08009691
 8009628:	08009867 	.word	0x08009867
 800962c:	08009867 	.word	0x08009867
 8009630:	08009807 	.word	0x08009807
 8009634:	08009833 	.word	0x08009833
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	7c12      	ldrb	r2, [r2, #16]
 8009644:	f107 0108 	add.w	r1, r7, #8
 8009648:	4610      	mov	r0, r2
 800964a:	4798      	blx	r3
 800964c:	60f8      	str	r0, [r7, #12]
      break;
 800964e:	e112      	b.n	8009876 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	7c1b      	ldrb	r3, [r3, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d10d      	bne.n	8009674 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800965e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009660:	f107 0208 	add.w	r2, r7, #8
 8009664:	4610      	mov	r0, r2
 8009666:	4798      	blx	r3
 8009668:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	3301      	adds	r3, #1
 800966e:	2202      	movs	r2, #2
 8009670:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009672:	e100      	b.n	8009876 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800967a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800967c:	f107 0208 	add.w	r2, r7, #8
 8009680:	4610      	mov	r0, r2
 8009682:	4798      	blx	r3
 8009684:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	3301      	adds	r3, #1
 800968a:	2202      	movs	r2, #2
 800968c:	701a      	strb	r2, [r3, #0]
      break;
 800968e:	e0f2      	b.n	8009876 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	885b      	ldrh	r3, [r3, #2]
 8009694:	b2db      	uxtb	r3, r3
 8009696:	2b05      	cmp	r3, #5
 8009698:	f200 80ac 	bhi.w	80097f4 <USBD_GetDescriptor+0x204>
 800969c:	a201      	add	r2, pc, #4	; (adr r2, 80096a4 <USBD_GetDescriptor+0xb4>)
 800969e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096a2:	bf00      	nop
 80096a4:	080096bd 	.word	0x080096bd
 80096a8:	080096f1 	.word	0x080096f1
 80096ac:	08009725 	.word	0x08009725
 80096b0:	08009759 	.word	0x08009759
 80096b4:	0800978d 	.word	0x0800978d
 80096b8:	080097c1 	.word	0x080097c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00b      	beq.n	80096e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	7c12      	ldrb	r2, [r2, #16]
 80096d4:	f107 0108 	add.w	r1, r7, #8
 80096d8:	4610      	mov	r0, r2
 80096da:	4798      	blx	r3
 80096dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096de:	e091      	b.n	8009804 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096e0:	6839      	ldr	r1, [r7, #0]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 facb 	bl	8009c7e <USBD_CtlError>
            err++;
 80096e8:	7afb      	ldrb	r3, [r7, #11]
 80096ea:	3301      	adds	r3, #1
 80096ec:	72fb      	strb	r3, [r7, #11]
          break;
 80096ee:	e089      	b.n	8009804 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00b      	beq.n	8009714 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	7c12      	ldrb	r2, [r2, #16]
 8009708:	f107 0108 	add.w	r1, r7, #8
 800970c:	4610      	mov	r0, r2
 800970e:	4798      	blx	r3
 8009710:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009712:	e077      	b.n	8009804 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009714:	6839      	ldr	r1, [r7, #0]
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fab1 	bl	8009c7e <USBD_CtlError>
            err++;
 800971c:	7afb      	ldrb	r3, [r7, #11]
 800971e:	3301      	adds	r3, #1
 8009720:	72fb      	strb	r3, [r7, #11]
          break;
 8009722:	e06f      	b.n	8009804 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00b      	beq.n	8009748 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009736:	68db      	ldr	r3, [r3, #12]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	7c12      	ldrb	r2, [r2, #16]
 800973c:	f107 0108 	add.w	r1, r7, #8
 8009740:	4610      	mov	r0, r2
 8009742:	4798      	blx	r3
 8009744:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009746:	e05d      	b.n	8009804 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 fa97 	bl	8009c7e <USBD_CtlError>
            err++;
 8009750:	7afb      	ldrb	r3, [r7, #11]
 8009752:	3301      	adds	r3, #1
 8009754:	72fb      	strb	r3, [r7, #11]
          break;
 8009756:	e055      	b.n	8009804 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00b      	beq.n	800977c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	7c12      	ldrb	r2, [r2, #16]
 8009770:	f107 0108 	add.w	r1, r7, #8
 8009774:	4610      	mov	r0, r2
 8009776:	4798      	blx	r3
 8009778:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800977a:	e043      	b.n	8009804 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800977c:	6839      	ldr	r1, [r7, #0]
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 fa7d 	bl	8009c7e <USBD_CtlError>
            err++;
 8009784:	7afb      	ldrb	r3, [r7, #11]
 8009786:	3301      	adds	r3, #1
 8009788:	72fb      	strb	r3, [r7, #11]
          break;
 800978a:	e03b      	b.n	8009804 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009792:	695b      	ldr	r3, [r3, #20]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00b      	beq.n	80097b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800979e:	695b      	ldr	r3, [r3, #20]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	7c12      	ldrb	r2, [r2, #16]
 80097a4:	f107 0108 	add.w	r1, r7, #8
 80097a8:	4610      	mov	r0, r2
 80097aa:	4798      	blx	r3
 80097ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097ae:	e029      	b.n	8009804 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f000 fa63 	bl	8009c7e <USBD_CtlError>
            err++;
 80097b8:	7afb      	ldrb	r3, [r7, #11]
 80097ba:	3301      	adds	r3, #1
 80097bc:	72fb      	strb	r3, [r7, #11]
          break;
 80097be:	e021      	b.n	8009804 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00b      	beq.n	80097e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097d2:	699b      	ldr	r3, [r3, #24]
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	7c12      	ldrb	r2, [r2, #16]
 80097d8:	f107 0108 	add.w	r1, r7, #8
 80097dc:	4610      	mov	r0, r2
 80097de:	4798      	blx	r3
 80097e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097e2:	e00f      	b.n	8009804 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097e4:	6839      	ldr	r1, [r7, #0]
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fa49 	bl	8009c7e <USBD_CtlError>
            err++;
 80097ec:	7afb      	ldrb	r3, [r7, #11]
 80097ee:	3301      	adds	r3, #1
 80097f0:	72fb      	strb	r3, [r7, #11]
          break;
 80097f2:	e007      	b.n	8009804 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80097f4:	6839      	ldr	r1, [r7, #0]
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 fa41 	bl	8009c7e <USBD_CtlError>
          err++;
 80097fc:	7afb      	ldrb	r3, [r7, #11]
 80097fe:	3301      	adds	r3, #1
 8009800:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009802:	bf00      	nop
      }
      break;
 8009804:	e037      	b.n	8009876 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	7c1b      	ldrb	r3, [r3, #16]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d109      	bne.n	8009822 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009816:	f107 0208 	add.w	r2, r7, #8
 800981a:	4610      	mov	r0, r2
 800981c:	4798      	blx	r3
 800981e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009820:	e029      	b.n	8009876 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009822:	6839      	ldr	r1, [r7, #0]
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 fa2a 	bl	8009c7e <USBD_CtlError>
        err++;
 800982a:	7afb      	ldrb	r3, [r7, #11]
 800982c:	3301      	adds	r3, #1
 800982e:	72fb      	strb	r3, [r7, #11]
      break;
 8009830:	e021      	b.n	8009876 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	7c1b      	ldrb	r3, [r3, #16]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d10d      	bne.n	8009856 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009842:	f107 0208 	add.w	r2, r7, #8
 8009846:	4610      	mov	r0, r2
 8009848:	4798      	blx	r3
 800984a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	3301      	adds	r3, #1
 8009850:	2207      	movs	r2, #7
 8009852:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009854:	e00f      	b.n	8009876 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 fa10 	bl	8009c7e <USBD_CtlError>
        err++;
 800985e:	7afb      	ldrb	r3, [r7, #11]
 8009860:	3301      	adds	r3, #1
 8009862:	72fb      	strb	r3, [r7, #11]
      break;
 8009864:	e007      	b.n	8009876 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009866:	6839      	ldr	r1, [r7, #0]
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 fa08 	bl	8009c7e <USBD_CtlError>
      err++;
 800986e:	7afb      	ldrb	r3, [r7, #11]
 8009870:	3301      	adds	r3, #1
 8009872:	72fb      	strb	r3, [r7, #11]
      break;
 8009874:	bf00      	nop
  }

  if (err != 0U)
 8009876:	7afb      	ldrb	r3, [r7, #11]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d11e      	bne.n	80098ba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	88db      	ldrh	r3, [r3, #6]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d016      	beq.n	80098b2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009884:	893b      	ldrh	r3, [r7, #8]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00e      	beq.n	80098a8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	88da      	ldrh	r2, [r3, #6]
 800988e:	893b      	ldrh	r3, [r7, #8]
 8009890:	4293      	cmp	r3, r2
 8009892:	bf28      	it	cs
 8009894:	4613      	movcs	r3, r2
 8009896:	b29b      	uxth	r3, r3
 8009898:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800989a:	893b      	ldrh	r3, [r7, #8]
 800989c:	461a      	mov	r2, r3
 800989e:	68f9      	ldr	r1, [r7, #12]
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 fa5d 	bl	8009d60 <USBD_CtlSendData>
 80098a6:	e009      	b.n	80098bc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80098a8:	6839      	ldr	r1, [r7, #0]
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 f9e7 	bl	8009c7e <USBD_CtlError>
 80098b0:	e004      	b.n	80098bc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fa91 	bl	8009dda <USBD_CtlSendStatus>
 80098b8:	e000      	b.n	80098bc <USBD_GetDescriptor+0x2cc>
    return;
 80098ba:	bf00      	nop
  }
}
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop

080098c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b084      	sub	sp, #16
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	889b      	ldrh	r3, [r3, #4]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d131      	bne.n	800993a <USBD_SetAddress+0x76>
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	88db      	ldrh	r3, [r3, #6]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d12d      	bne.n	800993a <USBD_SetAddress+0x76>
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	885b      	ldrh	r3, [r3, #2]
 80098e2:	2b7f      	cmp	r3, #127	; 0x7f
 80098e4:	d829      	bhi.n	800993a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	885b      	ldrh	r3, [r3, #2]
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	2b03      	cmp	r3, #3
 80098fc:	d104      	bne.n	8009908 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80098fe:	6839      	ldr	r1, [r7, #0]
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 f9bc 	bl	8009c7e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009906:	e01d      	b.n	8009944 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	7bfa      	ldrb	r2, [r7, #15]
 800990c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009910:	7bfb      	ldrb	r3, [r7, #15]
 8009912:	4619      	mov	r1, r3
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 fe19 	bl	800a54c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 fa5d 	bl	8009dda <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009920:	7bfb      	ldrb	r3, [r7, #15]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d004      	beq.n	8009930 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2202      	movs	r2, #2
 800992a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800992e:	e009      	b.n	8009944 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009938:	e004      	b.n	8009944 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800993a:	6839      	ldr	r1, [r7, #0]
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f99e 	bl	8009c7e <USBD_CtlError>
  }
}
 8009942:	bf00      	nop
 8009944:	bf00      	nop
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009956:	2300      	movs	r3, #0
 8009958:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	885b      	ldrh	r3, [r3, #2]
 800995e:	b2da      	uxtb	r2, r3
 8009960:	4b4e      	ldr	r3, [pc, #312]	; (8009a9c <USBD_SetConfig+0x150>)
 8009962:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009964:	4b4d      	ldr	r3, [pc, #308]	; (8009a9c <USBD_SetConfig+0x150>)
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d905      	bls.n	8009978 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800996c:	6839      	ldr	r1, [r7, #0]
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f000 f985 	bl	8009c7e <USBD_CtlError>
    return USBD_FAIL;
 8009974:	2303      	movs	r3, #3
 8009976:	e08c      	b.n	8009a92 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800997e:	b2db      	uxtb	r3, r3
 8009980:	2b02      	cmp	r3, #2
 8009982:	d002      	beq.n	800998a <USBD_SetConfig+0x3e>
 8009984:	2b03      	cmp	r3, #3
 8009986:	d029      	beq.n	80099dc <USBD_SetConfig+0x90>
 8009988:	e075      	b.n	8009a76 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800998a:	4b44      	ldr	r3, [pc, #272]	; (8009a9c <USBD_SetConfig+0x150>)
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d020      	beq.n	80099d4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009992:	4b42      	ldr	r3, [pc, #264]	; (8009a9c <USBD_SetConfig+0x150>)
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	461a      	mov	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800999c:	4b3f      	ldr	r3, [pc, #252]	; (8009a9c <USBD_SetConfig+0x150>)
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	4619      	mov	r1, r3
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f7fe ffe7 	bl	8008976 <USBD_SetClassConfig>
 80099a8:	4603      	mov	r3, r0
 80099aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d008      	beq.n	80099c4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80099b2:	6839      	ldr	r1, [r7, #0]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 f962 	bl	8009c7e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2202      	movs	r2, #2
 80099be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80099c2:	e065      	b.n	8009a90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 fa08 	bl	8009dda <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2203      	movs	r2, #3
 80099ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80099d2:	e05d      	b.n	8009a90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fa00 	bl	8009dda <USBD_CtlSendStatus>
      break;
 80099da:	e059      	b.n	8009a90 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80099dc:	4b2f      	ldr	r3, [pc, #188]	; (8009a9c <USBD_SetConfig+0x150>)
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d112      	bne.n	8009a0a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2202      	movs	r2, #2
 80099e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80099ec:	4b2b      	ldr	r3, [pc, #172]	; (8009a9c <USBD_SetConfig+0x150>)
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	461a      	mov	r2, r3
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80099f6:	4b29      	ldr	r3, [pc, #164]	; (8009a9c <USBD_SetConfig+0x150>)
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	4619      	mov	r1, r3
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f7fe ffd6 	bl	80089ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f9e9 	bl	8009dda <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a08:	e042      	b.n	8009a90 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009a0a:	4b24      	ldr	r3, [pc, #144]	; (8009a9c <USBD_SetConfig+0x150>)
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	461a      	mov	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d02a      	beq.n	8009a6e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	4619      	mov	r1, r3
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f7fe ffc4 	bl	80089ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009a26:	4b1d      	ldr	r3, [pc, #116]	; (8009a9c <USBD_SetConfig+0x150>)
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a30:	4b1a      	ldr	r3, [pc, #104]	; (8009a9c <USBD_SetConfig+0x150>)
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	4619      	mov	r1, r3
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f7fe ff9d 	bl	8008976 <USBD_SetClassConfig>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00f      	beq.n	8009a66 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009a46:	6839      	ldr	r1, [r7, #0]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 f918 	bl	8009c7e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	4619      	mov	r1, r3
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f7fe ffa9 	bl	80089ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009a64:	e014      	b.n	8009a90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f9b7 	bl	8009dda <USBD_CtlSendStatus>
      break;
 8009a6c:	e010      	b.n	8009a90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f9b3 	bl	8009dda <USBD_CtlSendStatus>
      break;
 8009a74:	e00c      	b.n	8009a90 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009a76:	6839      	ldr	r1, [r7, #0]
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 f900 	bl	8009c7e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a7e:	4b07      	ldr	r3, [pc, #28]	; (8009a9c <USBD_SetConfig+0x150>)
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	4619      	mov	r1, r3
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f7fe ff92 	bl	80089ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	73fb      	strb	r3, [r7, #15]
      break;
 8009a8e:	bf00      	nop
  }

  return ret;
 8009a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	20002fe4 	.word	0x20002fe4

08009aa0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	88db      	ldrh	r3, [r3, #6]
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d004      	beq.n	8009abc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009ab2:	6839      	ldr	r1, [r7, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 f8e2 	bl	8009c7e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009aba:	e023      	b.n	8009b04 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	2b02      	cmp	r3, #2
 8009ac6:	dc02      	bgt.n	8009ace <USBD_GetConfig+0x2e>
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	dc03      	bgt.n	8009ad4 <USBD_GetConfig+0x34>
 8009acc:	e015      	b.n	8009afa <USBD_GetConfig+0x5a>
 8009ace:	2b03      	cmp	r3, #3
 8009ad0:	d00b      	beq.n	8009aea <USBD_GetConfig+0x4a>
 8009ad2:	e012      	b.n	8009afa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	3308      	adds	r3, #8
 8009ade:	2201      	movs	r2, #1
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f93c 	bl	8009d60 <USBD_CtlSendData>
        break;
 8009ae8:	e00c      	b.n	8009b04 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	3304      	adds	r3, #4
 8009aee:	2201      	movs	r2, #1
 8009af0:	4619      	mov	r1, r3
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 f934 	bl	8009d60 <USBD_CtlSendData>
        break;
 8009af8:	e004      	b.n	8009b04 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009afa:	6839      	ldr	r1, [r7, #0]
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 f8be 	bl	8009c7e <USBD_CtlError>
        break;
 8009b02:	bf00      	nop
}
 8009b04:	bf00      	nop
 8009b06:	3708      	adds	r7, #8
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	d81e      	bhi.n	8009b62 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	88db      	ldrh	r3, [r3, #6]
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d004      	beq.n	8009b36 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009b2c:	6839      	ldr	r1, [r7, #0]
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 f8a5 	bl	8009c7e <USBD_CtlError>
        break;
 8009b34:	e01a      	b.n	8009b6c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d005      	beq.n	8009b52 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	68db      	ldr	r3, [r3, #12]
 8009b4a:	f043 0202 	orr.w	r2, r3, #2
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	330c      	adds	r3, #12
 8009b56:	2202      	movs	r2, #2
 8009b58:	4619      	mov	r1, r3
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f900 	bl	8009d60 <USBD_CtlSendData>
      break;
 8009b60:	e004      	b.n	8009b6c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009b62:	6839      	ldr	r1, [r7, #0]
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 f88a 	bl	8009c7e <USBD_CtlError>
      break;
 8009b6a:	bf00      	nop
  }
}
 8009b6c:	bf00      	nop
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	885b      	ldrh	r3, [r3, #2]
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d107      	bne.n	8009b96 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f923 	bl	8009dda <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009b94:	e013      	b.n	8009bbe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	885b      	ldrh	r3, [r3, #2]
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	d10b      	bne.n	8009bb6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	889b      	ldrh	r3, [r3, #4]
 8009ba2:	0a1b      	lsrs	r3, r3, #8
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	b2da      	uxtb	r2, r3
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f913 	bl	8009dda <USBD_CtlSendStatus>
}
 8009bb4:	e003      	b.n	8009bbe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009bb6:	6839      	ldr	r1, [r7, #0]
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 f860 	bl	8009c7e <USBD_CtlError>
}
 8009bbe:	bf00      	nop
 8009bc0:	3708      	adds	r7, #8
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b082      	sub	sp, #8
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	d80b      	bhi.n	8009bf6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	885b      	ldrh	r3, [r3, #2]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d10c      	bne.n	8009c00 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 f8f3 	bl	8009dda <USBD_CtlSendStatus>
      }
      break;
 8009bf4:	e004      	b.n	8009c00 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009bf6:	6839      	ldr	r1, [r7, #0]
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f840 	bl	8009c7e <USBD_CtlError>
      break;
 8009bfe:	e000      	b.n	8009c02 <USBD_ClrFeature+0x3c>
      break;
 8009c00:	bf00      	nop
  }
}
 8009c02:	bf00      	nop
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b084      	sub	sp, #16
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	781a      	ldrb	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	3301      	adds	r3, #1
 8009c24:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	781a      	ldrb	r2, [r3, #0]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	3301      	adds	r3, #1
 8009c32:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009c34:	68f8      	ldr	r0, [r7, #12]
 8009c36:	f7ff fa41 	bl	80090bc <SWAPBYTE>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	3301      	adds	r3, #1
 8009c46:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f7ff fa34 	bl	80090bc <SWAPBYTE>
 8009c54:	4603      	mov	r3, r0
 8009c56:	461a      	mov	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	3301      	adds	r3, #1
 8009c66:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f7ff fa27 	bl	80090bc <SWAPBYTE>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	461a      	mov	r2, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	80da      	strh	r2, [r3, #6]
}
 8009c76:	bf00      	nop
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}

08009c7e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c7e:	b580      	push	{r7, lr}
 8009c80:	b082      	sub	sp, #8
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
 8009c86:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c88:	2180      	movs	r1, #128	; 0x80
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fbf4 	bl	800a478 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009c90:	2100      	movs	r1, #0
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fbf0 	bl	800a478 <USBD_LL_StallEP>
}
 8009c98:	bf00      	nop
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b086      	sub	sp, #24
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	60b9      	str	r1, [r7, #8]
 8009caa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009cac:	2300      	movs	r3, #0
 8009cae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d036      	beq.n	8009d24 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009cba:	6938      	ldr	r0, [r7, #16]
 8009cbc:	f000 f836 	bl	8009d2c <USBD_GetLen>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	005b      	lsls	r3, r3, #1
 8009cc8:	b29a      	uxth	r2, r3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009cce:	7dfb      	ldrb	r3, [r7, #23]
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	7812      	ldrb	r2, [r2, #0]
 8009cd8:	701a      	strb	r2, [r3, #0]
  idx++;
 8009cda:	7dfb      	ldrb	r3, [r7, #23]
 8009cdc:	3301      	adds	r3, #1
 8009cde:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009ce0:	7dfb      	ldrb	r3, [r7, #23]
 8009ce2:	68ba      	ldr	r2, [r7, #8]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	2203      	movs	r2, #3
 8009ce8:	701a      	strb	r2, [r3, #0]
  idx++;
 8009cea:	7dfb      	ldrb	r3, [r7, #23]
 8009cec:	3301      	adds	r3, #1
 8009cee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009cf0:	e013      	b.n	8009d1a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009cf2:	7dfb      	ldrb	r3, [r7, #23]
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	693a      	ldr	r2, [r7, #16]
 8009cfa:	7812      	ldrb	r2, [r2, #0]
 8009cfc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	3301      	adds	r3, #1
 8009d02:	613b      	str	r3, [r7, #16]
    idx++;
 8009d04:	7dfb      	ldrb	r3, [r7, #23]
 8009d06:	3301      	adds	r3, #1
 8009d08:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009d0a:	7dfb      	ldrb	r3, [r7, #23]
 8009d0c:	68ba      	ldr	r2, [r7, #8]
 8009d0e:	4413      	add	r3, r2
 8009d10:	2200      	movs	r2, #0
 8009d12:	701a      	strb	r2, [r3, #0]
    idx++;
 8009d14:	7dfb      	ldrb	r3, [r7, #23]
 8009d16:	3301      	adds	r3, #1
 8009d18:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d1e7      	bne.n	8009cf2 <USBD_GetString+0x52>
 8009d22:	e000      	b.n	8009d26 <USBD_GetString+0x86>
    return;
 8009d24:	bf00      	nop
  }
}
 8009d26:	3718      	adds	r7, #24
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d34:	2300      	movs	r3, #0
 8009d36:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009d3c:	e005      	b.n	8009d4a <USBD_GetLen+0x1e>
  {
    len++;
 8009d3e:	7bfb      	ldrb	r3, [r7, #15]
 8009d40:	3301      	adds	r3, #1
 8009d42:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	3301      	adds	r3, #1
 8009d48:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d1f5      	bne.n	8009d3e <USBD_GetLen+0x12>
  }

  return len;
 8009d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3714      	adds	r7, #20
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2202      	movs	r2, #2
 8009d70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	68ba      	ldr	r2, [r7, #8]
 8009d84:	2100      	movs	r1, #0
 8009d86:	68f8      	ldr	r0, [r7, #12]
 8009d88:	f000 fbff 	bl	800a58a <USBD_LL_Transmit>

  return USBD_OK;
 8009d8c:	2300      	movs	r3, #0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b084      	sub	sp, #16
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	60f8      	str	r0, [r7, #12]
 8009d9e:	60b9      	str	r1, [r7, #8]
 8009da0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	68ba      	ldr	r2, [r7, #8]
 8009da6:	2100      	movs	r1, #0
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	f000 fbee 	bl	800a58a <USBD_LL_Transmit>

  return USBD_OK;
 8009dae:	2300      	movs	r3, #0
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	68ba      	ldr	r2, [r7, #8]
 8009dc8:	2100      	movs	r1, #0
 8009dca:	68f8      	ldr	r0, [r7, #12]
 8009dcc:	f000 fbfe 	bl	800a5cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b082      	sub	sp, #8
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2204      	movs	r2, #4
 8009de6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009dea:	2300      	movs	r3, #0
 8009dec:	2200      	movs	r2, #0
 8009dee:	2100      	movs	r1, #0
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 fbca 	bl	800a58a <USBD_LL_Transmit>

  return USBD_OK;
 8009df6:	2300      	movs	r3, #0
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2205      	movs	r2, #5
 8009e0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e10:	2300      	movs	r3, #0
 8009e12:	2200      	movs	r2, #0
 8009e14:	2100      	movs	r1, #0
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 fbd8 	bl	800a5cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3708      	adds	r7, #8
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
	...

08009e28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	490e      	ldr	r1, [pc, #56]	; (8009e68 <MX_USB_DEVICE_Init+0x40>)
 8009e30:	480e      	ldr	r0, [pc, #56]	; (8009e6c <MX_USB_DEVICE_Init+0x44>)
 8009e32:	f7fe fd23 	bl	800887c <USBD_Init>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d001      	beq.n	8009e40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009e3c:	f7f8 fa0a 	bl	8002254 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8009e40:	490b      	ldr	r1, [pc, #44]	; (8009e70 <MX_USB_DEVICE_Init+0x48>)
 8009e42:	480a      	ldr	r0, [pc, #40]	; (8009e6c <MX_USB_DEVICE_Init+0x44>)
 8009e44:	f7fe fd4a 	bl	80088dc <USBD_RegisterClass>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d001      	beq.n	8009e52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009e4e:	f7f8 fa01 	bl	8002254 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009e52:	4806      	ldr	r0, [pc, #24]	; (8009e6c <MX_USB_DEVICE_Init+0x44>)
 8009e54:	f7fe fd78 	bl	8008948 <USBD_Start>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d001      	beq.n	8009e62 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8009e5e:	f7f8 f9f9 	bl	8002254 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009e62:	bf00      	nop
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	200000d0 	.word	0x200000d0
 8009e6c:	20002fe8 	.word	0x20002fe8
 8009e70:	20000034 	.word	0x20000034

08009e74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	6039      	str	r1, [r7, #0]
 8009e7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	2212      	movs	r2, #18
 8009e84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009e86:	4b03      	ldr	r3, [pc, #12]	; (8009e94 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	370c      	adds	r7, #12
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr
 8009e94:	200000ec 	.word	0x200000ec

08009e98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	6039      	str	r1, [r7, #0]
 8009ea2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	2204      	movs	r2, #4
 8009ea8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009eaa:	4b03      	ldr	r3, [pc, #12]	; (8009eb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	370c      	adds	r7, #12
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr
 8009eb8:	20000100 	.word	0x20000100

08009ebc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b082      	sub	sp, #8
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	6039      	str	r1, [r7, #0]
 8009ec6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ec8:	79fb      	ldrb	r3, [r7, #7]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d105      	bne.n	8009eda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ece:	683a      	ldr	r2, [r7, #0]
 8009ed0:	4907      	ldr	r1, [pc, #28]	; (8009ef0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ed2:	4808      	ldr	r0, [pc, #32]	; (8009ef4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009ed4:	f7ff fee4 	bl	8009ca0 <USBD_GetString>
 8009ed8:	e004      	b.n	8009ee4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009eda:	683a      	ldr	r2, [r7, #0]
 8009edc:	4904      	ldr	r1, [pc, #16]	; (8009ef0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ede:	4805      	ldr	r0, [pc, #20]	; (8009ef4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009ee0:	f7ff fede 	bl	8009ca0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ee4:	4b02      	ldr	r3, [pc, #8]	; (8009ef0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	200032c4 	.word	0x200032c4
 8009ef4:	0800d848 	.word	0x0800d848

08009ef8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	4603      	mov	r3, r0
 8009f00:	6039      	str	r1, [r7, #0]
 8009f02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009f04:	683a      	ldr	r2, [r7, #0]
 8009f06:	4904      	ldr	r1, [pc, #16]	; (8009f18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009f08:	4804      	ldr	r0, [pc, #16]	; (8009f1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009f0a:	f7ff fec9 	bl	8009ca0 <USBD_GetString>
  return USBD_StrDesc;
 8009f0e:	4b02      	ldr	r3, [pc, #8]	; (8009f18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	200032c4 	.word	0x200032c4
 8009f1c:	0800d854 	.word	0x0800d854

08009f20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	4603      	mov	r3, r0
 8009f28:	6039      	str	r1, [r7, #0]
 8009f2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	221a      	movs	r2, #26
 8009f30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009f32:	f000 f843 	bl	8009fbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009f36:	4b02      	ldr	r3, [pc, #8]	; (8009f40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	20000104 	.word	0x20000104

08009f44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	6039      	str	r1, [r7, #0]
 8009f4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009f50:	79fb      	ldrb	r3, [r7, #7]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d105      	bne.n	8009f62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	4907      	ldr	r1, [pc, #28]	; (8009f78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009f5a:	4808      	ldr	r0, [pc, #32]	; (8009f7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009f5c:	f7ff fea0 	bl	8009ca0 <USBD_GetString>
 8009f60:	e004      	b.n	8009f6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009f62:	683a      	ldr	r2, [r7, #0]
 8009f64:	4904      	ldr	r1, [pc, #16]	; (8009f78 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009f66:	4805      	ldr	r0, [pc, #20]	; (8009f7c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009f68:	f7ff fe9a 	bl	8009ca0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f6c:	4b02      	ldr	r3, [pc, #8]	; (8009f78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3708      	adds	r7, #8
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	200032c4 	.word	0x200032c4
 8009f7c:	0800d868 	.word	0x0800d868

08009f80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	4603      	mov	r3, r0
 8009f88:	6039      	str	r1, [r7, #0]
 8009f8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009f8c:	79fb      	ldrb	r3, [r7, #7]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d105      	bne.n	8009f9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f92:	683a      	ldr	r2, [r7, #0]
 8009f94:	4907      	ldr	r1, [pc, #28]	; (8009fb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f96:	4808      	ldr	r0, [pc, #32]	; (8009fb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f98:	f7ff fe82 	bl	8009ca0 <USBD_GetString>
 8009f9c:	e004      	b.n	8009fa8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009f9e:	683a      	ldr	r2, [r7, #0]
 8009fa0:	4904      	ldr	r1, [pc, #16]	; (8009fb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009fa2:	4805      	ldr	r0, [pc, #20]	; (8009fb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009fa4:	f7ff fe7c 	bl	8009ca0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fa8:	4b02      	ldr	r3, [pc, #8]	; (8009fb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3708      	adds	r7, #8
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	200032c4 	.word	0x200032c4
 8009fb8:	0800d874 	.word	0x0800d874

08009fbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009fc2:	4b0f      	ldr	r3, [pc, #60]	; (800a000 <Get_SerialNum+0x44>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009fc8:	4b0e      	ldr	r3, [pc, #56]	; (800a004 <Get_SerialNum+0x48>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009fce:	4b0e      	ldr	r3, [pc, #56]	; (800a008 <Get_SerialNum+0x4c>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	4413      	add	r3, r2
 8009fda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d009      	beq.n	8009ff6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009fe2:	2208      	movs	r2, #8
 8009fe4:	4909      	ldr	r1, [pc, #36]	; (800a00c <Get_SerialNum+0x50>)
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f000 f814 	bl	800a014 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009fec:	2204      	movs	r2, #4
 8009fee:	4908      	ldr	r1, [pc, #32]	; (800a010 <Get_SerialNum+0x54>)
 8009ff0:	68b8      	ldr	r0, [r7, #8]
 8009ff2:	f000 f80f 	bl	800a014 <IntToUnicode>
  }
}
 8009ff6:	bf00      	nop
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	1fff7a10 	.word	0x1fff7a10
 800a004:	1fff7a14 	.word	0x1fff7a14
 800a008:	1fff7a18 	.word	0x1fff7a18
 800a00c:	20000106 	.word	0x20000106
 800a010:	20000116 	.word	0x20000116

0800a014 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a014:	b480      	push	{r7}
 800a016:	b087      	sub	sp, #28
 800a018:	af00      	add	r7, sp, #0
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	4613      	mov	r3, r2
 800a020:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a022:	2300      	movs	r3, #0
 800a024:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a026:	2300      	movs	r3, #0
 800a028:	75fb      	strb	r3, [r7, #23]
 800a02a:	e027      	b.n	800a07c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	0f1b      	lsrs	r3, r3, #28
 800a030:	2b09      	cmp	r3, #9
 800a032:	d80b      	bhi.n	800a04c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	0f1b      	lsrs	r3, r3, #28
 800a038:	b2da      	uxtb	r2, r3
 800a03a:	7dfb      	ldrb	r3, [r7, #23]
 800a03c:	005b      	lsls	r3, r3, #1
 800a03e:	4619      	mov	r1, r3
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	440b      	add	r3, r1
 800a044:	3230      	adds	r2, #48	; 0x30
 800a046:	b2d2      	uxtb	r2, r2
 800a048:	701a      	strb	r2, [r3, #0]
 800a04a:	e00a      	b.n	800a062 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	0f1b      	lsrs	r3, r3, #28
 800a050:	b2da      	uxtb	r2, r3
 800a052:	7dfb      	ldrb	r3, [r7, #23]
 800a054:	005b      	lsls	r3, r3, #1
 800a056:	4619      	mov	r1, r3
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	440b      	add	r3, r1
 800a05c:	3237      	adds	r2, #55	; 0x37
 800a05e:	b2d2      	uxtb	r2, r2
 800a060:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	011b      	lsls	r3, r3, #4
 800a066:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a068:	7dfb      	ldrb	r3, [r7, #23]
 800a06a:	005b      	lsls	r3, r3, #1
 800a06c:	3301      	adds	r3, #1
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	4413      	add	r3, r2
 800a072:	2200      	movs	r2, #0
 800a074:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a076:	7dfb      	ldrb	r3, [r7, #23]
 800a078:	3301      	adds	r3, #1
 800a07a:	75fb      	strb	r3, [r7, #23]
 800a07c:	7dfa      	ldrb	r2, [r7, #23]
 800a07e:	79fb      	ldrb	r3, [r7, #7]
 800a080:	429a      	cmp	r2, r3
 800a082:	d3d3      	bcc.n	800a02c <IntToUnicode+0x18>
  }
}
 800a084:	bf00      	nop
 800a086:	bf00      	nop
 800a088:	371c      	adds	r7, #28
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
	...

0800a094 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b08a      	sub	sp, #40	; 0x28
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a09c:	f107 0314 	add.w	r3, r7, #20
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	601a      	str	r2, [r3, #0]
 800a0a4:	605a      	str	r2, [r3, #4]
 800a0a6:	609a      	str	r2, [r3, #8]
 800a0a8:	60da      	str	r2, [r3, #12]
 800a0aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0b4:	d13a      	bne.n	800a12c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	613b      	str	r3, [r7, #16]
 800a0ba:	4b1e      	ldr	r3, [pc, #120]	; (800a134 <HAL_PCD_MspInit+0xa0>)
 800a0bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0be:	4a1d      	ldr	r2, [pc, #116]	; (800a134 <HAL_PCD_MspInit+0xa0>)
 800a0c0:	f043 0301 	orr.w	r3, r3, #1
 800a0c4:	6313      	str	r3, [r2, #48]	; 0x30
 800a0c6:	4b1b      	ldr	r3, [pc, #108]	; (800a134 <HAL_PCD_MspInit+0xa0>)
 800a0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ca:	f003 0301 	and.w	r3, r3, #1
 800a0ce:	613b      	str	r3, [r7, #16]
 800a0d0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a0d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a0d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0d8:	2302      	movs	r3, #2
 800a0da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0e0:	2303      	movs	r3, #3
 800a0e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a0e4:	230a      	movs	r3, #10
 800a0e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0e8:	f107 0314 	add.w	r3, r7, #20
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	4812      	ldr	r0, [pc, #72]	; (800a138 <HAL_PCD_MspInit+0xa4>)
 800a0f0:	f7f8 fcc8 	bl	8002a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a0f4:	4b0f      	ldr	r3, [pc, #60]	; (800a134 <HAL_PCD_MspInit+0xa0>)
 800a0f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0f8:	4a0e      	ldr	r2, [pc, #56]	; (800a134 <HAL_PCD_MspInit+0xa0>)
 800a0fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0fe:	6353      	str	r3, [r2, #52]	; 0x34
 800a100:	2300      	movs	r3, #0
 800a102:	60fb      	str	r3, [r7, #12]
 800a104:	4b0b      	ldr	r3, [pc, #44]	; (800a134 <HAL_PCD_MspInit+0xa0>)
 800a106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a108:	4a0a      	ldr	r2, [pc, #40]	; (800a134 <HAL_PCD_MspInit+0xa0>)
 800a10a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a10e:	6453      	str	r3, [r2, #68]	; 0x44
 800a110:	4b08      	ldr	r3, [pc, #32]	; (800a134 <HAL_PCD_MspInit+0xa0>)
 800a112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a118:	60fb      	str	r3, [r7, #12]
 800a11a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a11c:	2200      	movs	r2, #0
 800a11e:	2100      	movs	r1, #0
 800a120:	2043      	movs	r0, #67	; 0x43
 800a122:	f7f8 fc78 	bl	8002a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a126:	2043      	movs	r0, #67	; 0x43
 800a128:	f7f8 fc91 	bl	8002a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a12c:	bf00      	nop
 800a12e:	3728      	adds	r7, #40	; 0x28
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	40023800 	.word	0x40023800
 800a138:	40020000 	.word	0x40020000

0800a13c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a150:	4619      	mov	r1, r3
 800a152:	4610      	mov	r0, r2
 800a154:	f7fe fc45 	bl	80089e2 <USBD_LL_SetupStage>
}
 800a158:	bf00      	nop
 800a15a:	3708      	adds	r7, #8
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	460b      	mov	r3, r1
 800a16a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a172:	78fa      	ldrb	r2, [r7, #3]
 800a174:	6879      	ldr	r1, [r7, #4]
 800a176:	4613      	mov	r3, r2
 800a178:	00db      	lsls	r3, r3, #3
 800a17a:	4413      	add	r3, r2
 800a17c:	009b      	lsls	r3, r3, #2
 800a17e:	440b      	add	r3, r1
 800a180:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	78fb      	ldrb	r3, [r7, #3]
 800a188:	4619      	mov	r1, r3
 800a18a:	f7fe fc7f 	bl	8008a8c <USBD_LL_DataOutStage>
}
 800a18e:	bf00      	nop
 800a190:	3708      	adds	r7, #8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}

0800a196 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a196:	b580      	push	{r7, lr}
 800a198:	b082      	sub	sp, #8
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
 800a19e:	460b      	mov	r3, r1
 800a1a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a1a8:	78fa      	ldrb	r2, [r7, #3]
 800a1aa:	6879      	ldr	r1, [r7, #4]
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	4413      	add	r3, r2
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	440b      	add	r3, r1
 800a1b6:	334c      	adds	r3, #76	; 0x4c
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	78fb      	ldrb	r3, [r7, #3]
 800a1bc:	4619      	mov	r1, r3
 800a1be:	f7fe fd18 	bl	8008bf2 <USBD_LL_DataInStage>
}
 800a1c2:	bf00      	nop
 800a1c4:	3708      	adds	r7, #8
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b082      	sub	sp, #8
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7fe fe4c 	bl	8008e76 <USBD_LL_SOF>
}
 800a1de:	bf00      	nop
 800a1e0:	3708      	adds	r7, #8
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}

0800a1e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1e6:	b580      	push	{r7, lr}
 800a1e8:	b084      	sub	sp, #16
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	68db      	ldr	r3, [r3, #12]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d102      	bne.n	800a200 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	73fb      	strb	r3, [r7, #15]
 800a1fe:	e008      	b.n	800a212 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	2b02      	cmp	r3, #2
 800a206:	d102      	bne.n	800a20e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a208:	2301      	movs	r3, #1
 800a20a:	73fb      	strb	r3, [r7, #15]
 800a20c:	e001      	b.n	800a212 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a20e:	f7f8 f821 	bl	8002254 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a218:	7bfa      	ldrb	r2, [r7, #15]
 800a21a:	4611      	mov	r1, r2
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7fe fdec 	bl	8008dfa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a228:	4618      	mov	r0, r3
 800a22a:	f7fe fd94 	bl	8008d56 <USBD_LL_Reset>
}
 800a22e:	bf00      	nop
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
	...

0800a238 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a246:	4618      	mov	r0, r3
 800a248:	f7fe fde7 	bl	8008e1a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	6812      	ldr	r2, [r2, #0]
 800a25a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a25e:	f043 0301 	orr.w	r3, r3, #1
 800a262:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6a1b      	ldr	r3, [r3, #32]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d005      	beq.n	800a278 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a26c:	4b04      	ldr	r3, [pc, #16]	; (800a280 <HAL_PCD_SuspendCallback+0x48>)
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	4a03      	ldr	r2, [pc, #12]	; (800a280 <HAL_PCD_SuspendCallback+0x48>)
 800a272:	f043 0306 	orr.w	r3, r3, #6
 800a276:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a278:	bf00      	nop
 800a27a:	3708      	adds	r7, #8
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	e000ed00 	.word	0xe000ed00

0800a284 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a292:	4618      	mov	r0, r3
 800a294:	f7fe fdd7 	bl	8008e46 <USBD_LL_Resume>
}
 800a298:	bf00      	nop
 800a29a:	3708      	adds	r7, #8
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	460b      	mov	r3, r1
 800a2aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a2b2:	78fa      	ldrb	r2, [r7, #3]
 800a2b4:	4611      	mov	r1, r2
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7fe fe2f 	bl	8008f1a <USBD_LL_IsoOUTIncomplete>
}
 800a2bc:	bf00      	nop
 800a2be:	3708      	adds	r7, #8
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a2d6:	78fa      	ldrb	r2, [r7, #3]
 800a2d8:	4611      	mov	r1, r2
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fe fdeb 	bl	8008eb6 <USBD_LL_IsoINIncomplete>
}
 800a2e0:	bf00      	nop
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7fe fe41 	bl	8008f7e <USBD_LL_DevConnected>
}
 800a2fc:	bf00      	nop
 800a2fe:	3708      	adds	r7, #8
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b082      	sub	sp, #8
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a312:	4618      	mov	r0, r3
 800a314:	f7fe fe3e 	bl	8008f94 <USBD_LL_DevDisconnected>
}
 800a318:	bf00      	nop
 800a31a:	3708      	adds	r7, #8
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d13c      	bne.n	800a3aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a330:	4a20      	ldr	r2, [pc, #128]	; (800a3b4 <USBD_LL_Init+0x94>)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	4a1e      	ldr	r2, [pc, #120]	; (800a3b4 <USBD_LL_Init+0x94>)
 800a33c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a340:	4b1c      	ldr	r3, [pc, #112]	; (800a3b4 <USBD_LL_Init+0x94>)
 800a342:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a346:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a348:	4b1a      	ldr	r3, [pc, #104]	; (800a3b4 <USBD_LL_Init+0x94>)
 800a34a:	2204      	movs	r2, #4
 800a34c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a34e:	4b19      	ldr	r3, [pc, #100]	; (800a3b4 <USBD_LL_Init+0x94>)
 800a350:	2202      	movs	r2, #2
 800a352:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a354:	4b17      	ldr	r3, [pc, #92]	; (800a3b4 <USBD_LL_Init+0x94>)
 800a356:	2200      	movs	r2, #0
 800a358:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a35a:	4b16      	ldr	r3, [pc, #88]	; (800a3b4 <USBD_LL_Init+0x94>)
 800a35c:	2202      	movs	r2, #2
 800a35e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a360:	4b14      	ldr	r3, [pc, #80]	; (800a3b4 <USBD_LL_Init+0x94>)
 800a362:	2200      	movs	r2, #0
 800a364:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a366:	4b13      	ldr	r3, [pc, #76]	; (800a3b4 <USBD_LL_Init+0x94>)
 800a368:	2200      	movs	r2, #0
 800a36a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a36c:	4b11      	ldr	r3, [pc, #68]	; (800a3b4 <USBD_LL_Init+0x94>)
 800a36e:	2200      	movs	r2, #0
 800a370:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a372:	4b10      	ldr	r3, [pc, #64]	; (800a3b4 <USBD_LL_Init+0x94>)
 800a374:	2200      	movs	r2, #0
 800a376:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a378:	4b0e      	ldr	r3, [pc, #56]	; (800a3b4 <USBD_LL_Init+0x94>)
 800a37a:	2200      	movs	r2, #0
 800a37c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a37e:	480d      	ldr	r0, [pc, #52]	; (800a3b4 <USBD_LL_Init+0x94>)
 800a380:	f7f9 fcf5 	bl	8003d6e <HAL_PCD_Init>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d001      	beq.n	800a38e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a38a:	f7f7 ff63 	bl	8002254 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a38e:	2180      	movs	r1, #128	; 0x80
 800a390:	4808      	ldr	r0, [pc, #32]	; (800a3b4 <USBD_LL_Init+0x94>)
 800a392:	f7fa ff34 	bl	80051fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a396:	2240      	movs	r2, #64	; 0x40
 800a398:	2100      	movs	r1, #0
 800a39a:	4806      	ldr	r0, [pc, #24]	; (800a3b4 <USBD_LL_Init+0x94>)
 800a39c:	f7fa fee8 	bl	8005170 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a3a0:	2280      	movs	r2, #128	; 0x80
 800a3a2:	2101      	movs	r1, #1
 800a3a4:	4803      	ldr	r0, [pc, #12]	; (800a3b4 <USBD_LL_Init+0x94>)
 800a3a6:	f7fa fee3 	bl	8005170 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a3aa:	2300      	movs	r3, #0
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3708      	adds	r7, #8
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	200034c4 	.word	0x200034c4

0800a3b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7f9 fdea 	bl	8003fa8 <HAL_PCD_Start>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3d8:	7bfb      	ldrb	r3, [r7, #15]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f000 f930 	bl	800a640 <USBD_Get_USB_Status>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a3ee:	b580      	push	{r7, lr}
 800a3f0:	b084      	sub	sp, #16
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
 800a3f6:	4608      	mov	r0, r1
 800a3f8:	4611      	mov	r1, r2
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	70fb      	strb	r3, [r7, #3]
 800a400:	460b      	mov	r3, r1
 800a402:	70bb      	strb	r3, [r7, #2]
 800a404:	4613      	mov	r3, r2
 800a406:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a408:	2300      	movs	r3, #0
 800a40a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a40c:	2300      	movs	r3, #0
 800a40e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a416:	78bb      	ldrb	r3, [r7, #2]
 800a418:	883a      	ldrh	r2, [r7, #0]
 800a41a:	78f9      	ldrb	r1, [r7, #3]
 800a41c:	f7fa fabb 	bl	8004996 <HAL_PCD_EP_Open>
 800a420:	4603      	mov	r3, r0
 800a422:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a424:	7bfb      	ldrb	r3, [r7, #15]
 800a426:	4618      	mov	r0, r3
 800a428:	f000 f90a 	bl	800a640 <USBD_Get_USB_Status>
 800a42c:	4603      	mov	r3, r0
 800a42e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a430:	7bbb      	ldrb	r3, [r7, #14]
}
 800a432:	4618      	mov	r0, r3
 800a434:	3710      	adds	r7, #16
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a43a:	b580      	push	{r7, lr}
 800a43c:	b084      	sub	sp, #16
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
 800a442:	460b      	mov	r3, r1
 800a444:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a446:	2300      	movs	r3, #0
 800a448:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a44a:	2300      	movs	r3, #0
 800a44c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a454:	78fa      	ldrb	r2, [r7, #3]
 800a456:	4611      	mov	r1, r2
 800a458:	4618      	mov	r0, r3
 800a45a:	f7fa fb04 	bl	8004a66 <HAL_PCD_EP_Close>
 800a45e:	4603      	mov	r3, r0
 800a460:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a462:	7bfb      	ldrb	r3, [r7, #15]
 800a464:	4618      	mov	r0, r3
 800a466:	f000 f8eb 	bl	800a640 <USBD_Get_USB_Status>
 800a46a:	4603      	mov	r3, r0
 800a46c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a46e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3710      	adds	r7, #16
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	460b      	mov	r3, r1
 800a482:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a484:	2300      	movs	r3, #0
 800a486:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a488:	2300      	movs	r3, #0
 800a48a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a492:	78fa      	ldrb	r2, [r7, #3]
 800a494:	4611      	mov	r1, r2
 800a496:	4618      	mov	r0, r3
 800a498:	f7fa fbc4 	bl	8004c24 <HAL_PCD_EP_SetStall>
 800a49c:	4603      	mov	r3, r0
 800a49e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4a0:	7bfb      	ldrb	r3, [r7, #15]
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f000 f8cc 	bl	800a640 <USBD_Get_USB_Status>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b084      	sub	sp, #16
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
 800a4be:	460b      	mov	r3, r1
 800a4c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a4d0:	78fa      	ldrb	r2, [r7, #3]
 800a4d2:	4611      	mov	r1, r2
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7fa fc09 	bl	8004cec <HAL_PCD_EP_ClrStall>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4de:	7bfb      	ldrb	r3, [r7, #15]
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f000 f8ad 	bl	800a640 <USBD_Get_USB_Status>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3710      	adds	r7, #16
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b085      	sub	sp, #20
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a506:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a508:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	da0b      	bge.n	800a528 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a510:	78fb      	ldrb	r3, [r7, #3]
 800a512:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a516:	68f9      	ldr	r1, [r7, #12]
 800a518:	4613      	mov	r3, r2
 800a51a:	00db      	lsls	r3, r3, #3
 800a51c:	4413      	add	r3, r2
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	440b      	add	r3, r1
 800a522:	333e      	adds	r3, #62	; 0x3e
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	e00b      	b.n	800a540 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a528:	78fb      	ldrb	r3, [r7, #3]
 800a52a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a52e:	68f9      	ldr	r1, [r7, #12]
 800a530:	4613      	mov	r3, r2
 800a532:	00db      	lsls	r3, r3, #3
 800a534:	4413      	add	r3, r2
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	440b      	add	r3, r1
 800a53a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a53e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a540:	4618      	mov	r0, r3
 800a542:	3714      	adds	r7, #20
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	460b      	mov	r3, r1
 800a556:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a558:	2300      	movs	r3, #0
 800a55a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a55c:	2300      	movs	r3, #0
 800a55e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a566:	78fa      	ldrb	r2, [r7, #3]
 800a568:	4611      	mov	r1, r2
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fa f9ee 	bl	800494c <HAL_PCD_SetAddress>
 800a570:	4603      	mov	r3, r0
 800a572:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a574:	7bfb      	ldrb	r3, [r7, #15]
 800a576:	4618      	mov	r0, r3
 800a578:	f000 f862 	bl	800a640 <USBD_Get_USB_Status>
 800a57c:	4603      	mov	r3, r0
 800a57e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a580:	7bbb      	ldrb	r3, [r7, #14]
}
 800a582:	4618      	mov	r0, r3
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b086      	sub	sp, #24
 800a58e:	af00      	add	r7, sp, #0
 800a590:	60f8      	str	r0, [r7, #12]
 800a592:	607a      	str	r2, [r7, #4]
 800a594:	603b      	str	r3, [r7, #0]
 800a596:	460b      	mov	r3, r1
 800a598:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a59a:	2300      	movs	r3, #0
 800a59c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a5a8:	7af9      	ldrb	r1, [r7, #11]
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	f7fa faef 	bl	8004b90 <HAL_PCD_EP_Transmit>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5b6:	7dfb      	ldrb	r3, [r7, #23]
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f000 f841 	bl	800a640 <USBD_Get_USB_Status>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a5c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3718      	adds	r7, #24
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b086      	sub	sp, #24
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	607a      	str	r2, [r7, #4]
 800a5d6:	603b      	str	r3, [r7, #0]
 800a5d8:	460b      	mov	r3, r1
 800a5da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a5ea:	7af9      	ldrb	r1, [r7, #11]
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	f7fa fa83 	bl	8004afa <HAL_PCD_EP_Receive>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5f8:	7dfb      	ldrb	r3, [r7, #23]
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f000 f820 	bl	800a640 <USBD_Get_USB_Status>
 800a600:	4603      	mov	r3, r0
 800a602:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a604:	7dbb      	ldrb	r3, [r7, #22]
}
 800a606:	4618      	mov	r0, r3
 800a608:	3718      	adds	r7, #24
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
	...

0800a610 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a618:	4b03      	ldr	r3, [pc, #12]	; (800a628 <USBD_static_malloc+0x18>)
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	370c      	adds	r7, #12
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr
 800a626:	bf00      	nop
 800a628:	200039d0 	.word	0x200039d0

0800a62c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b083      	sub	sp, #12
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]

}
 800a634:	bf00      	nop
 800a636:	370c      	adds	r7, #12
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a640:	b480      	push	{r7}
 800a642:	b085      	sub	sp, #20
 800a644:	af00      	add	r7, sp, #0
 800a646:	4603      	mov	r3, r0
 800a648:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a64a:	2300      	movs	r3, #0
 800a64c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a64e:	79fb      	ldrb	r3, [r7, #7]
 800a650:	2b03      	cmp	r3, #3
 800a652:	d817      	bhi.n	800a684 <USBD_Get_USB_Status+0x44>
 800a654:	a201      	add	r2, pc, #4	; (adr r2, 800a65c <USBD_Get_USB_Status+0x1c>)
 800a656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a65a:	bf00      	nop
 800a65c:	0800a66d 	.word	0x0800a66d
 800a660:	0800a673 	.word	0x0800a673
 800a664:	0800a679 	.word	0x0800a679
 800a668:	0800a67f 	.word	0x0800a67f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a66c:	2300      	movs	r3, #0
 800a66e:	73fb      	strb	r3, [r7, #15]
    break;
 800a670:	e00b      	b.n	800a68a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a672:	2303      	movs	r3, #3
 800a674:	73fb      	strb	r3, [r7, #15]
    break;
 800a676:	e008      	b.n	800a68a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a678:	2301      	movs	r3, #1
 800a67a:	73fb      	strb	r3, [r7, #15]
    break;
 800a67c:	e005      	b.n	800a68a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a67e:	2303      	movs	r3, #3
 800a680:	73fb      	strb	r3, [r7, #15]
    break;
 800a682:	e002      	b.n	800a68a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a684:	2303      	movs	r3, #3
 800a686:	73fb      	strb	r3, [r7, #15]
    break;
 800a688:	bf00      	nop
  }
  return usb_status;
 800a68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3714      	adds	r7, #20
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <arm_mean_f32>:
 800a698:	b430      	push	{r4, r5}
 800a69a:	088d      	lsrs	r5, r1, #2
 800a69c:	eddf 7a16 	vldr	s15, [pc, #88]	; 800a6f8 <arm_mean_f32+0x60>
 800a6a0:	d017      	beq.n	800a6d2 <arm_mean_f32+0x3a>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	462c      	mov	r4, r5
 800a6a6:	edd3 5a00 	vldr	s11, [r3]
 800a6aa:	ed93 6a01 	vldr	s12, [r3, #4]
 800a6ae:	edd3 6a02 	vldr	s13, [r3, #8]
 800a6b2:	ed93 7a03 	vldr	s14, [r3, #12]
 800a6b6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a6ba:	3c01      	subs	r4, #1
 800a6bc:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a6c0:	f103 0310 	add.w	r3, r3, #16
 800a6c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a6cc:	d1eb      	bne.n	800a6a6 <arm_mean_f32+0xe>
 800a6ce:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800a6d2:	f011 0303 	ands.w	r3, r1, #3
 800a6d6:	d005      	beq.n	800a6e4 <arm_mean_f32+0x4c>
 800a6d8:	ecb0 7a01 	vldmia	r0!, {s14}
 800a6dc:	3b01      	subs	r3, #1
 800a6de:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a6e2:	d1f9      	bne.n	800a6d8 <arm_mean_f32+0x40>
 800a6e4:	ee06 1a90 	vmov	s13, r1
 800a6e8:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 800a6ec:	bc30      	pop	{r4, r5}
 800a6ee:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800a6f2:	edc2 7a00 	vstr	s15, [r2]
 800a6f6:	4770      	bx	lr
 800a6f8:	00000000 	.word	0x00000000

0800a6fc <arm_mat_trans_f32>:
 800a6fc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a700:	b086      	sub	sp, #24
 800a702:	8802      	ldrh	r2, [r0, #0]
 800a704:	9201      	str	r2, [sp, #4]
 800a706:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800a70a:	8843      	ldrh	r3, [r0, #2]
 800a70c:	6848      	ldr	r0, [r1, #4]
 800a70e:	884a      	ldrh	r2, [r1, #2]
 800a710:	9002      	str	r0, [sp, #8]
 800a712:	9801      	ldr	r0, [sp, #4]
 800a714:	4282      	cmp	r2, r0
 800a716:	d15f      	bne.n	800a7d8 <arm_mat_trans_f32+0xdc>
 800a718:	f8b1 a000 	ldrh.w	sl, [r1]
 800a71c:	459a      	cmp	sl, r3
 800a71e:	d15b      	bne.n	800a7d8 <arm_mat_trans_f32+0xdc>
 800a720:	ea4f 0b9a 	mov.w	fp, sl, lsr #2
 800a724:	f00a 0a03 	and.w	sl, sl, #3
 800a728:	f10a 32ff 	add.w	r2, sl, #4294967295
 800a72c:	b292      	uxth	r2, r2
 800a72e:	0084      	lsls	r4, r0, #2
 800a730:	00c7      	lsls	r7, r0, #3
 800a732:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a736:	3201      	adds	r2, #1
 800a738:	0092      	lsls	r2, r2, #2
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	193e      	adds	r6, r7, r4
 800a73e:	3301      	adds	r3, #1
 800a740:	1931      	adds	r1, r6, r4
 800a742:	9203      	str	r2, [sp, #12]
 800a744:	9a01      	ldr	r2, [sp, #4]
 800a746:	0118      	lsls	r0, r3, #4
 800a748:	fb03 f101 	mul.w	r1, r3, r1
 800a74c:	9005      	str	r0, [sp, #20]
 800a74e:	9104      	str	r1, [sp, #16]
 800a750:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 800a754:	f04f 0900 	mov.w	r9, #0
 800a758:	9b02      	ldr	r3, [sp, #8]
 800a75a:	eb03 0189 	add.w	r1, r3, r9, lsl #2
 800a75e:	f1bb 0f00 	cmp.w	fp, #0
 800a762:	d01d      	beq.n	800a7a0 <arm_mat_trans_f32+0xa4>
 800a764:	4642      	mov	r2, r8
 800a766:	4658      	mov	r0, fp
 800a768:	460b      	mov	r3, r1
 800a76a:	6815      	ldr	r5, [r2, #0]
 800a76c:	601d      	str	r5, [r3, #0]
 800a76e:	edd2 7a01 	vldr	s15, [r2, #4]
 800a772:	191d      	adds	r5, r3, r4
 800a774:	edc5 7a00 	vstr	s15, [r5]
 800a778:	edd2 7a02 	vldr	s15, [r2, #8]
 800a77c:	19dd      	adds	r5, r3, r7
 800a77e:	edc5 7a00 	vstr	s15, [r5]
 800a782:	edd2 7a03 	vldr	s15, [r2, #12]
 800a786:	3801      	subs	r0, #1
 800a788:	199d      	adds	r5, r3, r6
 800a78a:	b280      	uxth	r0, r0
 800a78c:	3210      	adds	r2, #16
 800a78e:	edc5 7a00 	vstr	s15, [r5]
 800a792:	4463      	add	r3, ip
 800a794:	2800      	cmp	r0, #0
 800a796:	d1e8      	bne.n	800a76a <arm_mat_trans_f32+0x6e>
 800a798:	9805      	ldr	r0, [sp, #20]
 800a79a:	9a04      	ldr	r2, [sp, #16]
 800a79c:	4480      	add	r8, r0
 800a79e:	4411      	add	r1, r2
 800a7a0:	f1ba 0f00 	cmp.w	sl, #0
 800a7a4:	d00b      	beq.n	800a7be <arm_mat_trans_f32+0xc2>
 800a7a6:	4653      	mov	r3, sl
 800a7a8:	4642      	mov	r2, r8
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	f852 0b04 	ldr.w	r0, [r2], #4
 800a7b0:	6008      	str	r0, [r1, #0]
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	4421      	add	r1, r4
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d1f7      	bne.n	800a7aa <arm_mat_trans_f32+0xae>
 800a7ba:	9b03      	ldr	r3, [sp, #12]
 800a7bc:	4498      	add	r8, r3
 800a7be:	f109 0901 	add.w	r9, r9, #1
 800a7c2:	9801      	ldr	r0, [sp, #4]
 800a7c4:	fa1f f989 	uxth.w	r9, r9
 800a7c8:	4581      	cmp	r9, r0
 800a7ca:	d1c5      	bne.n	800a758 <arm_mat_trans_f32+0x5c>
 800a7cc:	2000      	movs	r0, #0
 800a7ce:	b240      	sxtb	r0, r0
 800a7d0:	b006      	add	sp, #24
 800a7d2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a7d6:	4770      	bx	lr
 800a7d8:	20fd      	movs	r0, #253	; 0xfd
 800a7da:	b240      	sxtb	r0, r0
 800a7dc:	b006      	add	sp, #24
 800a7de:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a7e2:	4770      	bx	lr

0800a7e4 <arm_mat_mult_f32>:
 800a7e4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a7e8:	b08a      	sub	sp, #40	; 0x28
 800a7ea:	9102      	str	r1, [sp, #8]
 800a7ec:	9c02      	ldr	r4, [sp, #8]
 800a7ee:	8841      	ldrh	r1, [r0, #2]
 800a7f0:	8823      	ldrh	r3, [r4, #0]
 800a7f2:	6844      	ldr	r4, [r0, #4]
 800a7f4:	9400      	str	r4, [sp, #0]
 800a7f6:	9c02      	ldr	r4, [sp, #8]
 800a7f8:	8800      	ldrh	r0, [r0, #0]
 800a7fa:	9005      	str	r0, [sp, #20]
 800a7fc:	8864      	ldrh	r4, [r4, #2]
 800a7fe:	6850      	ldr	r0, [r2, #4]
 800a800:	9007      	str	r0, [sp, #28]
 800a802:	428b      	cmp	r3, r1
 800a804:	9401      	str	r4, [sp, #4]
 800a806:	f040 809d 	bne.w	800a944 <arm_mat_mult_f32+0x160>
 800a80a:	8811      	ldrh	r1, [r2, #0]
 800a80c:	9805      	ldr	r0, [sp, #20]
 800a80e:	4281      	cmp	r1, r0
 800a810:	f040 8098 	bne.w	800a944 <arm_mat_mult_f32+0x160>
 800a814:	8852      	ldrh	r2, [r2, #2]
 800a816:	42a2      	cmp	r2, r4
 800a818:	f040 8094 	bne.w	800a944 <arm_mat_mult_f32+0x160>
 800a81c:	9901      	ldr	r1, [sp, #4]
 800a81e:	f8dd c008 	ldr.w	ip, [sp, #8]
 800a822:	ea4f 0a93 	mov.w	sl, r3, lsr #2
 800a826:	00a4      	lsls	r4, r4, #2
 800a828:	00cf      	lsls	r7, r1, #3
 800a82a:	f10a 30ff 	add.w	r0, sl, #4294967295
 800a82e:	193e      	adds	r6, r7, r4
 800a830:	b280      	uxth	r0, r0
 800a832:	1932      	adds	r2, r6, r4
 800a834:	fb00 2202 	mla	r2, r0, r2, r2
 800a838:	0105      	lsls	r5, r0, #4
 800a83a:	9801      	ldr	r0, [sp, #4]
 800a83c:	9204      	str	r2, [sp, #16]
 800a83e:	3510      	adds	r5, #16
 800a840:	2200      	movs	r2, #0
 800a842:	f003 0b03 	and.w	fp, r3, #3
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a84c:	9509      	str	r5, [sp, #36]	; 0x24
 800a84e:	ea4f 1c00 	mov.w	ip, r0, lsl #4
 800a852:	9308      	str	r3, [sp, #32]
 800a854:	9206      	str	r2, [sp, #24]
 800a856:	4610      	mov	r0, r2
 800a858:	9b07      	ldr	r3, [sp, #28]
 800a85a:	9a00      	ldr	r2, [sp, #0]
 800a85c:	eb03 0980 	add.w	r9, r3, r0, lsl #2
 800a860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a862:	441a      	add	r2, r3
 800a864:	9203      	str	r2, [sp, #12]
 800a866:	f04f 0800 	mov.w	r8, #0
 800a86a:	eddf 7a39 	vldr	s15, [pc, #228]	; 800a950 <arm_mat_mult_f32+0x16c>
 800a86e:	f1ba 0f00 	cmp.w	sl, #0
 800a872:	d05f      	beq.n	800a934 <arm_mat_mult_f32+0x150>
 800a874:	9b00      	ldr	r3, [sp, #0]
 800a876:	4650      	mov	r0, sl
 800a878:	460a      	mov	r2, r1
 800a87a:	edd2 6a00 	vldr	s13, [r2]
 800a87e:	ed93 5a00 	vldr	s10, [r3]
 800a882:	edd3 5a01 	vldr	s11, [r3, #4]
 800a886:	ed93 7a02 	vldr	s14, [r3, #8]
 800a88a:	ed93 6a03 	vldr	s12, [r3, #12]
 800a88e:	1915      	adds	r5, r2, r4
 800a890:	ee25 5a26 	vmul.f32	s10, s10, s13
 800a894:	edd5 6a00 	vldr	s13, [r5]
 800a898:	18bd      	adds	r5, r7, r2
 800a89a:	ee65 5aa6 	vmul.f32	s11, s11, s13
 800a89e:	ee75 7a27 	vadd.f32	s15, s10, s15
 800a8a2:	edd5 6a00 	vldr	s13, [r5]
 800a8a6:	4615      	mov	r5, r2
 800a8a8:	4435      	add	r5, r6
 800a8aa:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800a8ae:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a8b2:	edd5 6a00 	vldr	s13, [r5]
 800a8b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a8ba:	3801      	subs	r0, #1
 800a8bc:	ee66 7a26 	vmul.f32	s15, s12, s13
 800a8c0:	b280      	uxth	r0, r0
 800a8c2:	4462      	add	r2, ip
 800a8c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a8c8:	3310      	adds	r3, #16
 800a8ca:	2800      	cmp	r0, #0
 800a8cc:	d1d5      	bne.n	800a87a <arm_mat_mult_f32+0x96>
 800a8ce:	9804      	ldr	r0, [sp, #16]
 800a8d0:	9a03      	ldr	r2, [sp, #12]
 800a8d2:	4401      	add	r1, r0
 800a8d4:	f1bb 0f00 	cmp.w	fp, #0
 800a8d8:	d00d      	beq.n	800a8f6 <arm_mat_mult_f32+0x112>
 800a8da:	465b      	mov	r3, fp
 800a8dc:	ed91 7a00 	vldr	s14, [r1]
 800a8e0:	ecf2 6a01 	vldmia	r2!, {s13}
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	ee26 7a87 	vmul.f32	s14, s13, s14
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a8f0:	4421      	add	r1, r4
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1f2      	bne.n	800a8dc <arm_mat_mult_f32+0xf8>
 800a8f6:	9902      	ldr	r1, [sp, #8]
 800a8f8:	ece9 7a01 	vstmia	r9!, {s15}
 800a8fc:	f108 0801 	add.w	r8, r8, #1
 800a900:	9a01      	ldr	r2, [sp, #4]
 800a902:	684b      	ldr	r3, [r1, #4]
 800a904:	fa1f f888 	uxth.w	r8, r8
 800a908:	4590      	cmp	r8, r2
 800a90a:	eb03 0188 	add.w	r1, r3, r8, lsl #2
 800a90e:	d1ac      	bne.n	800a86a <arm_mat_mult_f32+0x86>
 800a910:	9805      	ldr	r0, [sp, #20]
 800a912:	4611      	mov	r1, r2
 800a914:	1e42      	subs	r2, r0, #1
 800a916:	b292      	uxth	r2, r2
 800a918:	9205      	str	r2, [sp, #20]
 800a91a:	9a06      	ldr	r2, [sp, #24]
 800a91c:	9808      	ldr	r0, [sp, #32]
 800a91e:	440a      	add	r2, r1
 800a920:	b292      	uxth	r2, r2
 800a922:	9206      	str	r2, [sp, #24]
 800a924:	9a00      	ldr	r2, [sp, #0]
 800a926:	9905      	ldr	r1, [sp, #20]
 800a928:	4402      	add	r2, r0
 800a92a:	9200      	str	r2, [sp, #0]
 800a92c:	b121      	cbz	r1, 800a938 <arm_mat_mult_f32+0x154>
 800a92e:	4619      	mov	r1, r3
 800a930:	9806      	ldr	r0, [sp, #24]
 800a932:	e791      	b.n	800a858 <arm_mat_mult_f32+0x74>
 800a934:	9a00      	ldr	r2, [sp, #0]
 800a936:	e7cd      	b.n	800a8d4 <arm_mat_mult_f32+0xf0>
 800a938:	4608      	mov	r0, r1
 800a93a:	b240      	sxtb	r0, r0
 800a93c:	b00a      	add	sp, #40	; 0x28
 800a93e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a942:	4770      	bx	lr
 800a944:	20fd      	movs	r0, #253	; 0xfd
 800a946:	b240      	sxtb	r0, r0
 800a948:	b00a      	add	sp, #40	; 0x28
 800a94a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a94e:	4770      	bx	lr
 800a950:	00000000 	.word	0x00000000

0800a954 <arm_mat_inverse_f32>:
 800a954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a958:	b089      	sub	sp, #36	; 0x24
 800a95a:	8803      	ldrh	r3, [r0, #0]
 800a95c:	8844      	ldrh	r4, [r0, #2]
 800a95e:	6842      	ldr	r2, [r0, #4]
 800a960:	9201      	str	r2, [sp, #4]
 800a962:	429c      	cmp	r4, r3
 800a964:	684a      	ldr	r2, [r1, #4]
 800a966:	9202      	str	r2, [sp, #8]
 800a968:	4680      	mov	r8, r0
 800a96a:	d004      	beq.n	800a976 <arm_mat_inverse_f32+0x22>
 800a96c:	20fd      	movs	r0, #253	; 0xfd
 800a96e:	b240      	sxtb	r0, r0
 800a970:	b009      	add	sp, #36	; 0x24
 800a972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a976:	880a      	ldrh	r2, [r1, #0]
 800a978:	884b      	ldrh	r3, [r1, #2]
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d1f6      	bne.n	800a96c <arm_mat_inverse_f32+0x18>
 800a97e:	429c      	cmp	r4, r3
 800a980:	d1f4      	bne.n	800a96c <arm_mat_inverse_f32+0x18>
 800a982:	2c00      	cmp	r4, #0
 800a984:	f000 8105 	beq.w	800ab92 <arm_mat_inverse_f32+0x23e>
 800a988:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
 800a98c:	3d01      	subs	r5, #1
 800a98e:	00ad      	lsls	r5, r5, #2
 800a990:	9e02      	ldr	r6, [sp, #8]
 800a992:	2701      	movs	r7, #1
 800a994:	f04f 0a04 	mov.w	sl, #4
 800a998:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800a99c:	e014      	b.n	800a9c8 <arm_mat_inverse_f32+0x74>
 800a99e:	2100      	movs	r1, #0
 800a9a0:	462a      	mov	r2, r5
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	eb03 0905 	add.w	r9, r3, r5
 800a9a8:	f000 f96c 	bl	800ac84 <memset>
 800a9ac:	1d28      	adds	r0, r5, #4
 800a9ae:	4430      	add	r0, r6
 800a9b0:	4652      	mov	r2, sl
 800a9b2:	2100      	movs	r1, #0
 800a9b4:	464e      	mov	r6, r9
 800a9b6:	b11f      	cbz	r7, 800a9c0 <arm_mat_inverse_f32+0x6c>
 800a9b8:	f000 f964 	bl	800ac84 <memset>
 800a9bc:	eb09 060a 	add.w	r6, r9, sl
 800a9c0:	f10a 0a04 	add.w	sl, sl, #4
 800a9c4:	3d04      	subs	r5, #4
 800a9c6:	3701      	adds	r7, #1
 800a9c8:	42bc      	cmp	r4, r7
 800a9ca:	f8c6 b000 	str.w	fp, [r6]
 800a9ce:	f106 0304 	add.w	r3, r6, #4
 800a9d2:	d1e4      	bne.n	800a99e <arm_mat_inverse_f32+0x4a>
 800a9d4:	2c00      	cmp	r4, #0
 800a9d6:	f000 80dc 	beq.w	800ab92 <arm_mat_inverse_f32+0x23e>
 800a9da:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a9de:	2000      	movs	r0, #0
 800a9e0:	f10c 0304 	add.w	r3, ip, #4
 800a9e4:	1e62      	subs	r2, r4, #1
 800a9e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a9ea:	f8dd a008 	ldr.w	sl, [sp, #8]
 800a9ee:	9306      	str	r3, [sp, #24]
 800a9f0:	f8cd c000 	str.w	ip, [sp]
 800a9f4:	9005      	str	r0, [sp, #20]
 800a9f6:	9203      	str	r2, [sp, #12]
 800a9f8:	4627      	mov	r7, r4
 800a9fa:	f8cd 801c 	str.w	r8, [sp, #28]
 800a9fe:	4284      	cmp	r4, r0
 800aa00:	edd9 7a00 	vldr	s15, [r9]
 800aa04:	f240 80c5 	bls.w	800ab92 <arm_mat_inverse_f32+0x23e>
 800aa08:	eeb0 7a67 	vmov.f32	s14, s15
 800aa0c:	eddf 6a75 	vldr	s13, [pc, #468]	; 800abe4 <arm_mat_inverse_f32+0x290>
 800aa10:	4603      	mov	r3, r0
 800aa12:	464a      	mov	r2, r9
 800aa14:	e001      	b.n	800aa1a <arm_mat_inverse_f32+0xc6>
 800aa16:	ed92 7a00 	vldr	s14, [r2]
 800aa1a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800aa1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa22:	bfd8      	it	le
 800aa24:	eeb1 7a47 	vnegle.f32	s14, s14
 800aa28:	eeb4 7a66 	vcmp.f32	s14, s13
 800aa2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa30:	f103 0301 	add.w	r3, r3, #1
 800aa34:	bfc8      	it	gt
 800aa36:	eef0 6a47 	vmovgt.f32	s13, s14
 800aa3a:	429c      	cmp	r4, r3
 800aa3c:	4462      	add	r2, ip
 800aa3e:	d8ea      	bhi.n	800aa16 <arm_mat_inverse_f32+0xc2>
 800aa40:	eef5 6a40 	vcmp.f32	s13, #0.0
 800aa44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa48:	f000 80a3 	beq.w	800ab92 <arm_mat_inverse_f32+0x23e>
 800aa4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aa50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa54:	bfd4      	ite	le
 800aa56:	eeb1 7a67 	vnegle.f32	s14, s15
 800aa5a:	eeb0 7a67 	vmovgt.f32	s14, s15
 800aa5e:	eef4 6a47 	vcmp.f32	s13, s14
 800aa62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa66:	d010      	beq.n	800aa8a <arm_mat_inverse_f32+0x136>
 800aa68:	9b03      	ldr	r3, [sp, #12]
 800aa6a:	b173      	cbz	r3, 800aa8a <arm_mat_inverse_f32+0x136>
 800aa6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800aa70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa74:	eeb1 7a67 	vneg.f32	s14, s15
 800aa78:	bfc8      	it	gt
 800aa7a:	eeb0 7a67 	vmovgt.f32	s14, s15
 800aa7e:	eef4 6a47 	vcmp.f32	s13, s14
 800aa82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa86:	f000 8086 	beq.w	800ab96 <arm_mat_inverse_f32+0x242>
 800aa8a:	9b05      	ldr	r3, [sp, #20]
 800aa8c:	b933      	cbnz	r3, 800aa9c <arm_mat_inverse_f32+0x148>
 800aa8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800aa92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa96:	d07c      	beq.n	800ab92 <arm_mat_inverse_f32+0x23e>
 800aa98:	2300      	movs	r3, #0
 800aa9a:	9305      	str	r3, [sp, #20]
 800aa9c:	eb0a 020c 	add.w	r2, sl, ip
 800aaa0:	9204      	str	r2, [sp, #16]
 800aaa2:	b14f      	cbz	r7, 800aab8 <arm_mat_inverse_f32+0x164>
 800aaa4:	463a      	mov	r2, r7
 800aaa6:	464b      	mov	r3, r9
 800aaa8:	ed93 7a00 	vldr	s14, [r3]
 800aaac:	ee87 7a27 	vdiv.f32	s14, s14, s15
 800aab0:	3a01      	subs	r2, #1
 800aab2:	eca3 7a01 	vstmia	r3!, {s14}
 800aab6:	d1f7      	bne.n	800aaa8 <arm_mat_inverse_f32+0x154>
 800aab8:	4625      	mov	r5, r4
 800aaba:	4653      	mov	r3, sl
 800aabc:	ed93 7a00 	vldr	s14, [r3]
 800aac0:	ee87 7a27 	vdiv.f32	s14, s14, s15
 800aac4:	3d01      	subs	r5, #1
 800aac6:	eca3 7a01 	vstmia	r3!, {s14}
 800aaca:	d1f7      	bne.n	800aabc <arm_mat_inverse_f32+0x168>
 800aacc:	9e02      	ldr	r6, [sp, #8]
 800aace:	9901      	ldr	r1, [sp, #4]
 800aad0:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800aad4:	4285      	cmp	r5, r0
 800aad6:	f000 8081 	beq.w	800abdc <arm_mat_inverse_f32+0x288>
 800aada:	edd1 7a00 	vldr	s15, [r1]
 800aade:	b187      	cbz	r7, 800ab02 <arm_mat_inverse_f32+0x1ae>
 800aae0:	463a      	mov	r2, r7
 800aae2:	46cb      	mov	fp, r9
 800aae4:	460b      	mov	r3, r1
 800aae6:	ecbb 7a01 	vldmia	fp!, {s14}
 800aaea:	edd3 6a00 	vldr	s13, [r3]
 800aaee:	ee27 7a87 	vmul.f32	s14, s15, s14
 800aaf2:	3a01      	subs	r2, #1
 800aaf4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800aaf8:	eca3 7a01 	vstmia	r3!, {s14}
 800aafc:	d1f3      	bne.n	800aae6 <arm_mat_inverse_f32+0x192>
 800aafe:	9a00      	ldr	r2, [sp, #0]
 800ab00:	4411      	add	r1, r2
 800ab02:	4622      	mov	r2, r4
 800ab04:	46d3      	mov	fp, sl
 800ab06:	4633      	mov	r3, r6
 800ab08:	ecbb 7a01 	vldmia	fp!, {s14}
 800ab0c:	edd3 6a00 	vldr	s13, [r3]
 800ab10:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ab14:	3a01      	subs	r2, #1
 800ab16:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ab1a:	eca3 7a01 	vstmia	r3!, {s14}
 800ab1e:	d1f3      	bne.n	800ab08 <arm_mat_inverse_f32+0x1b4>
 800ab20:	4466      	add	r6, ip
 800ab22:	3501      	adds	r5, #1
 800ab24:	42ac      	cmp	r4, r5
 800ab26:	4441      	add	r1, r8
 800ab28:	d1d4      	bne.n	800aad4 <arm_mat_inverse_f32+0x180>
 800ab2a:	9b01      	ldr	r3, [sp, #4]
 800ab2c:	9a06      	ldr	r2, [sp, #24]
 800ab2e:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ab32:	3304      	adds	r3, #4
 800ab34:	9301      	str	r3, [sp, #4]
 800ab36:	4491      	add	r9, r2
 800ab38:	9b03      	ldr	r3, [sp, #12]
 800ab3a:	9a00      	ldr	r2, [sp, #0]
 800ab3c:	3b01      	subs	r3, #1
 800ab3e:	3a04      	subs	r2, #4
 800ab40:	3f01      	subs	r7, #1
 800ab42:	f100 0001 	add.w	r0, r0, #1
 800ab46:	9303      	str	r3, [sp, #12]
 800ab48:	9200      	str	r2, [sp, #0]
 800ab4a:	f47f af58 	bne.w	800a9fe <arm_mat_inverse_f32+0xaa>
 800ab4e:	9b05      	ldr	r3, [sp, #20]
 800ab50:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d13f      	bne.n	800abd8 <arm_mat_inverse_f32+0x284>
 800ab58:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ab5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab60:	d13a      	bne.n	800abd8 <arm_mat_inverse_f32+0x284>
 800ab62:	fb04 f404 	mul.w	r4, r4, r4
 800ab66:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ab6a:	b194      	cbz	r4, 800ab92 <arm_mat_inverse_f32+0x23e>
 800ab6c:	edd3 7a00 	vldr	s15, [r3]
 800ab70:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ab74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab78:	d12e      	bne.n	800abd8 <arm_mat_inverse_f32+0x284>
 800ab7a:	3304      	adds	r3, #4
 800ab7c:	e006      	b.n	800ab8c <arm_mat_inverse_f32+0x238>
 800ab7e:	ecf3 7a01 	vldmia	r3!, {s15}
 800ab82:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ab86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab8a:	d123      	bne.n	800abd4 <arm_mat_inverse_f32+0x280>
 800ab8c:	3701      	adds	r7, #1
 800ab8e:	42a7      	cmp	r7, r4
 800ab90:	d1f5      	bne.n	800ab7e <arm_mat_inverse_f32+0x22a>
 800ab92:	20fb      	movs	r0, #251	; 0xfb
 800ab94:	e6eb      	b.n	800a96e <arm_mat_inverse_f32+0x1a>
 800ab96:	b157      	cbz	r7, 800abae <arm_mat_inverse_f32+0x25a>
 800ab98:	9901      	ldr	r1, [sp, #4]
 800ab9a:	463a      	mov	r2, r7
 800ab9c:	464b      	mov	r3, r9
 800ab9e:	681d      	ldr	r5, [r3, #0]
 800aba0:	680e      	ldr	r6, [r1, #0]
 800aba2:	f843 6b04 	str.w	r6, [r3], #4
 800aba6:	3a01      	subs	r2, #1
 800aba8:	f841 5b04 	str.w	r5, [r1], #4
 800abac:	d1f7      	bne.n	800ab9e <arm_mat_inverse_f32+0x24a>
 800abae:	eb0a 020c 	add.w	r2, sl, ip
 800abb2:	9204      	str	r2, [sp, #16]
 800abb4:	4611      	mov	r1, r2
 800abb6:	4623      	mov	r3, r4
 800abb8:	4652      	mov	r2, sl
 800abba:	680d      	ldr	r5, [r1, #0]
 800abbc:	6816      	ldr	r6, [r2, #0]
 800abbe:	f841 6b04 	str.w	r6, [r1], #4
 800abc2:	3b01      	subs	r3, #1
 800abc4:	f842 5b04 	str.w	r5, [r2], #4
 800abc8:	d1f7      	bne.n	800abba <arm_mat_inverse_f32+0x266>
 800abca:	2201      	movs	r2, #1
 800abcc:	edd9 7a00 	vldr	s15, [r9]
 800abd0:	9205      	str	r2, [sp, #20]
 800abd2:	e766      	b.n	800aaa2 <arm_mat_inverse_f32+0x14e>
 800abd4:	42bc      	cmp	r4, r7
 800abd6:	d0dc      	beq.n	800ab92 <arm_mat_inverse_f32+0x23e>
 800abd8:	2000      	movs	r0, #0
 800abda:	e6c8      	b.n	800a96e <arm_mat_inverse_f32+0x1a>
 800abdc:	9b00      	ldr	r3, [sp, #0]
 800abde:	4466      	add	r6, ip
 800abe0:	4419      	add	r1, r3
 800abe2:	e79e      	b.n	800ab22 <arm_mat_inverse_f32+0x1ce>
 800abe4:	00000000 	.word	0x00000000

0800abe8 <arm_mat_init_f32>:
 800abe8:	8001      	strh	r1, [r0, #0]
 800abea:	8042      	strh	r2, [r0, #2]
 800abec:	6043      	str	r3, [r0, #4]
 800abee:	4770      	bx	lr

0800abf0 <arm_fir_init_f32>:
 800abf0:	b570      	push	{r4, r5, r6, lr}
 800abf2:	9d04      	ldr	r5, [sp, #16]
 800abf4:	6082      	str	r2, [r0, #8]
 800abf6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800abfa:	3d01      	subs	r5, #1
 800abfc:	4604      	mov	r4, r0
 800abfe:	440d      	add	r5, r1
 800ac00:	8001      	strh	r1, [r0, #0]
 800ac02:	461e      	mov	r6, r3
 800ac04:	00aa      	lsls	r2, r5, #2
 800ac06:	4618      	mov	r0, r3
 800ac08:	2100      	movs	r1, #0
 800ac0a:	f000 f83b 	bl	800ac84 <memset>
 800ac0e:	6066      	str	r6, [r4, #4]
 800ac10:	bd70      	pop	{r4, r5, r6, pc}
 800ac12:	bf00      	nop

0800ac14 <__errno>:
 800ac14:	4b01      	ldr	r3, [pc, #4]	; (800ac1c <__errno+0x8>)
 800ac16:	6818      	ldr	r0, [r3, #0]
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	20000120 	.word	0x20000120

0800ac20 <__libc_init_array>:
 800ac20:	b570      	push	{r4, r5, r6, lr}
 800ac22:	4d0d      	ldr	r5, [pc, #52]	; (800ac58 <__libc_init_array+0x38>)
 800ac24:	4c0d      	ldr	r4, [pc, #52]	; (800ac5c <__libc_init_array+0x3c>)
 800ac26:	1b64      	subs	r4, r4, r5
 800ac28:	10a4      	asrs	r4, r4, #2
 800ac2a:	2600      	movs	r6, #0
 800ac2c:	42a6      	cmp	r6, r4
 800ac2e:	d109      	bne.n	800ac44 <__libc_init_array+0x24>
 800ac30:	4d0b      	ldr	r5, [pc, #44]	; (800ac60 <__libc_init_array+0x40>)
 800ac32:	4c0c      	ldr	r4, [pc, #48]	; (800ac64 <__libc_init_array+0x44>)
 800ac34:	f002 fdfa 	bl	800d82c <_init>
 800ac38:	1b64      	subs	r4, r4, r5
 800ac3a:	10a4      	asrs	r4, r4, #2
 800ac3c:	2600      	movs	r6, #0
 800ac3e:	42a6      	cmp	r6, r4
 800ac40:	d105      	bne.n	800ac4e <__libc_init_array+0x2e>
 800ac42:	bd70      	pop	{r4, r5, r6, pc}
 800ac44:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac48:	4798      	blx	r3
 800ac4a:	3601      	adds	r6, #1
 800ac4c:	e7ee      	b.n	800ac2c <__libc_init_array+0xc>
 800ac4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac52:	4798      	blx	r3
 800ac54:	3601      	adds	r6, #1
 800ac56:	e7f2      	b.n	800ac3e <__libc_init_array+0x1e>
 800ac58:	0800dc7c 	.word	0x0800dc7c
 800ac5c:	0800dc7c 	.word	0x0800dc7c
 800ac60:	0800dc7c 	.word	0x0800dc7c
 800ac64:	0800dc80 	.word	0x0800dc80

0800ac68 <memcpy>:
 800ac68:	440a      	add	r2, r1
 800ac6a:	4291      	cmp	r1, r2
 800ac6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac70:	d100      	bne.n	800ac74 <memcpy+0xc>
 800ac72:	4770      	bx	lr
 800ac74:	b510      	push	{r4, lr}
 800ac76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac7e:	4291      	cmp	r1, r2
 800ac80:	d1f9      	bne.n	800ac76 <memcpy+0xe>
 800ac82:	bd10      	pop	{r4, pc}

0800ac84 <memset>:
 800ac84:	4402      	add	r2, r0
 800ac86:	4603      	mov	r3, r0
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d100      	bne.n	800ac8e <memset+0xa>
 800ac8c:	4770      	bx	lr
 800ac8e:	f803 1b01 	strb.w	r1, [r3], #1
 800ac92:	e7f9      	b.n	800ac88 <memset+0x4>

0800ac94 <__cvt>:
 800ac94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac98:	ec55 4b10 	vmov	r4, r5, d0
 800ac9c:	2d00      	cmp	r5, #0
 800ac9e:	460e      	mov	r6, r1
 800aca0:	4619      	mov	r1, r3
 800aca2:	462b      	mov	r3, r5
 800aca4:	bfbb      	ittet	lt
 800aca6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800acaa:	461d      	movlt	r5, r3
 800acac:	2300      	movge	r3, #0
 800acae:	232d      	movlt	r3, #45	; 0x2d
 800acb0:	700b      	strb	r3, [r1, #0]
 800acb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acb4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800acb8:	4691      	mov	r9, r2
 800acba:	f023 0820 	bic.w	r8, r3, #32
 800acbe:	bfbc      	itt	lt
 800acc0:	4622      	movlt	r2, r4
 800acc2:	4614      	movlt	r4, r2
 800acc4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800acc8:	d005      	beq.n	800acd6 <__cvt+0x42>
 800acca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800acce:	d100      	bne.n	800acd2 <__cvt+0x3e>
 800acd0:	3601      	adds	r6, #1
 800acd2:	2102      	movs	r1, #2
 800acd4:	e000      	b.n	800acd8 <__cvt+0x44>
 800acd6:	2103      	movs	r1, #3
 800acd8:	ab03      	add	r3, sp, #12
 800acda:	9301      	str	r3, [sp, #4]
 800acdc:	ab02      	add	r3, sp, #8
 800acde:	9300      	str	r3, [sp, #0]
 800ace0:	ec45 4b10 	vmov	d0, r4, r5
 800ace4:	4653      	mov	r3, sl
 800ace6:	4632      	mov	r2, r6
 800ace8:	f000 fcca 	bl	800b680 <_dtoa_r>
 800acec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800acf0:	4607      	mov	r7, r0
 800acf2:	d102      	bne.n	800acfa <__cvt+0x66>
 800acf4:	f019 0f01 	tst.w	r9, #1
 800acf8:	d022      	beq.n	800ad40 <__cvt+0xac>
 800acfa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800acfe:	eb07 0906 	add.w	r9, r7, r6
 800ad02:	d110      	bne.n	800ad26 <__cvt+0x92>
 800ad04:	783b      	ldrb	r3, [r7, #0]
 800ad06:	2b30      	cmp	r3, #48	; 0x30
 800ad08:	d10a      	bne.n	800ad20 <__cvt+0x8c>
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	4620      	mov	r0, r4
 800ad10:	4629      	mov	r1, r5
 800ad12:	f7f5 fee1 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad16:	b918      	cbnz	r0, 800ad20 <__cvt+0x8c>
 800ad18:	f1c6 0601 	rsb	r6, r6, #1
 800ad1c:	f8ca 6000 	str.w	r6, [sl]
 800ad20:	f8da 3000 	ldr.w	r3, [sl]
 800ad24:	4499      	add	r9, r3
 800ad26:	2200      	movs	r2, #0
 800ad28:	2300      	movs	r3, #0
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	4629      	mov	r1, r5
 800ad2e:	f7f5 fed3 	bl	8000ad8 <__aeabi_dcmpeq>
 800ad32:	b108      	cbz	r0, 800ad38 <__cvt+0xa4>
 800ad34:	f8cd 900c 	str.w	r9, [sp, #12]
 800ad38:	2230      	movs	r2, #48	; 0x30
 800ad3a:	9b03      	ldr	r3, [sp, #12]
 800ad3c:	454b      	cmp	r3, r9
 800ad3e:	d307      	bcc.n	800ad50 <__cvt+0xbc>
 800ad40:	9b03      	ldr	r3, [sp, #12]
 800ad42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad44:	1bdb      	subs	r3, r3, r7
 800ad46:	4638      	mov	r0, r7
 800ad48:	6013      	str	r3, [r2, #0]
 800ad4a:	b004      	add	sp, #16
 800ad4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad50:	1c59      	adds	r1, r3, #1
 800ad52:	9103      	str	r1, [sp, #12]
 800ad54:	701a      	strb	r2, [r3, #0]
 800ad56:	e7f0      	b.n	800ad3a <__cvt+0xa6>

0800ad58 <__exponent>:
 800ad58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2900      	cmp	r1, #0
 800ad5e:	bfb8      	it	lt
 800ad60:	4249      	neglt	r1, r1
 800ad62:	f803 2b02 	strb.w	r2, [r3], #2
 800ad66:	bfb4      	ite	lt
 800ad68:	222d      	movlt	r2, #45	; 0x2d
 800ad6a:	222b      	movge	r2, #43	; 0x2b
 800ad6c:	2909      	cmp	r1, #9
 800ad6e:	7042      	strb	r2, [r0, #1]
 800ad70:	dd2a      	ble.n	800adc8 <__exponent+0x70>
 800ad72:	f10d 0407 	add.w	r4, sp, #7
 800ad76:	46a4      	mov	ip, r4
 800ad78:	270a      	movs	r7, #10
 800ad7a:	46a6      	mov	lr, r4
 800ad7c:	460a      	mov	r2, r1
 800ad7e:	fb91 f6f7 	sdiv	r6, r1, r7
 800ad82:	fb07 1516 	mls	r5, r7, r6, r1
 800ad86:	3530      	adds	r5, #48	; 0x30
 800ad88:	2a63      	cmp	r2, #99	; 0x63
 800ad8a:	f104 34ff 	add.w	r4, r4, #4294967295
 800ad8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ad92:	4631      	mov	r1, r6
 800ad94:	dcf1      	bgt.n	800ad7a <__exponent+0x22>
 800ad96:	3130      	adds	r1, #48	; 0x30
 800ad98:	f1ae 0502 	sub.w	r5, lr, #2
 800ad9c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ada0:	1c44      	adds	r4, r0, #1
 800ada2:	4629      	mov	r1, r5
 800ada4:	4561      	cmp	r1, ip
 800ada6:	d30a      	bcc.n	800adbe <__exponent+0x66>
 800ada8:	f10d 0209 	add.w	r2, sp, #9
 800adac:	eba2 020e 	sub.w	r2, r2, lr
 800adb0:	4565      	cmp	r5, ip
 800adb2:	bf88      	it	hi
 800adb4:	2200      	movhi	r2, #0
 800adb6:	4413      	add	r3, r2
 800adb8:	1a18      	subs	r0, r3, r0
 800adba:	b003      	add	sp, #12
 800adbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adc2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800adc6:	e7ed      	b.n	800ada4 <__exponent+0x4c>
 800adc8:	2330      	movs	r3, #48	; 0x30
 800adca:	3130      	adds	r1, #48	; 0x30
 800adcc:	7083      	strb	r3, [r0, #2]
 800adce:	70c1      	strb	r1, [r0, #3]
 800add0:	1d03      	adds	r3, r0, #4
 800add2:	e7f1      	b.n	800adb8 <__exponent+0x60>

0800add4 <_printf_float>:
 800add4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add8:	ed2d 8b02 	vpush	{d8}
 800addc:	b08d      	sub	sp, #52	; 0x34
 800adde:	460c      	mov	r4, r1
 800ade0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ade4:	4616      	mov	r6, r2
 800ade6:	461f      	mov	r7, r3
 800ade8:	4605      	mov	r5, r0
 800adea:	f001 fa37 	bl	800c25c <_localeconv_r>
 800adee:	f8d0 a000 	ldr.w	sl, [r0]
 800adf2:	4650      	mov	r0, sl
 800adf4:	f7f5 f9f4 	bl	80001e0 <strlen>
 800adf8:	2300      	movs	r3, #0
 800adfa:	930a      	str	r3, [sp, #40]	; 0x28
 800adfc:	6823      	ldr	r3, [r4, #0]
 800adfe:	9305      	str	r3, [sp, #20]
 800ae00:	f8d8 3000 	ldr.w	r3, [r8]
 800ae04:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ae08:	3307      	adds	r3, #7
 800ae0a:	f023 0307 	bic.w	r3, r3, #7
 800ae0e:	f103 0208 	add.w	r2, r3, #8
 800ae12:	f8c8 2000 	str.w	r2, [r8]
 800ae16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ae1e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ae22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae26:	9307      	str	r3, [sp, #28]
 800ae28:	f8cd 8018 	str.w	r8, [sp, #24]
 800ae2c:	ee08 0a10 	vmov	s16, r0
 800ae30:	4b9f      	ldr	r3, [pc, #636]	; (800b0b0 <_printf_float+0x2dc>)
 800ae32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae36:	f04f 32ff 	mov.w	r2, #4294967295
 800ae3a:	f7f5 fe7f 	bl	8000b3c <__aeabi_dcmpun>
 800ae3e:	bb88      	cbnz	r0, 800aea4 <_printf_float+0xd0>
 800ae40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae44:	4b9a      	ldr	r3, [pc, #616]	; (800b0b0 <_printf_float+0x2dc>)
 800ae46:	f04f 32ff 	mov.w	r2, #4294967295
 800ae4a:	f7f5 fe59 	bl	8000b00 <__aeabi_dcmple>
 800ae4e:	bb48      	cbnz	r0, 800aea4 <_printf_float+0xd0>
 800ae50:	2200      	movs	r2, #0
 800ae52:	2300      	movs	r3, #0
 800ae54:	4640      	mov	r0, r8
 800ae56:	4649      	mov	r1, r9
 800ae58:	f7f5 fe48 	bl	8000aec <__aeabi_dcmplt>
 800ae5c:	b110      	cbz	r0, 800ae64 <_printf_float+0x90>
 800ae5e:	232d      	movs	r3, #45	; 0x2d
 800ae60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae64:	4b93      	ldr	r3, [pc, #588]	; (800b0b4 <_printf_float+0x2e0>)
 800ae66:	4894      	ldr	r0, [pc, #592]	; (800b0b8 <_printf_float+0x2e4>)
 800ae68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ae6c:	bf94      	ite	ls
 800ae6e:	4698      	movls	r8, r3
 800ae70:	4680      	movhi	r8, r0
 800ae72:	2303      	movs	r3, #3
 800ae74:	6123      	str	r3, [r4, #16]
 800ae76:	9b05      	ldr	r3, [sp, #20]
 800ae78:	f023 0204 	bic.w	r2, r3, #4
 800ae7c:	6022      	str	r2, [r4, #0]
 800ae7e:	f04f 0900 	mov.w	r9, #0
 800ae82:	9700      	str	r7, [sp, #0]
 800ae84:	4633      	mov	r3, r6
 800ae86:	aa0b      	add	r2, sp, #44	; 0x2c
 800ae88:	4621      	mov	r1, r4
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	f000 f9d8 	bl	800b240 <_printf_common>
 800ae90:	3001      	adds	r0, #1
 800ae92:	f040 8090 	bne.w	800afb6 <_printf_float+0x1e2>
 800ae96:	f04f 30ff 	mov.w	r0, #4294967295
 800ae9a:	b00d      	add	sp, #52	; 0x34
 800ae9c:	ecbd 8b02 	vpop	{d8}
 800aea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aea4:	4642      	mov	r2, r8
 800aea6:	464b      	mov	r3, r9
 800aea8:	4640      	mov	r0, r8
 800aeaa:	4649      	mov	r1, r9
 800aeac:	f7f5 fe46 	bl	8000b3c <__aeabi_dcmpun>
 800aeb0:	b140      	cbz	r0, 800aec4 <_printf_float+0xf0>
 800aeb2:	464b      	mov	r3, r9
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	bfbc      	itt	lt
 800aeb8:	232d      	movlt	r3, #45	; 0x2d
 800aeba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aebe:	487f      	ldr	r0, [pc, #508]	; (800b0bc <_printf_float+0x2e8>)
 800aec0:	4b7f      	ldr	r3, [pc, #508]	; (800b0c0 <_printf_float+0x2ec>)
 800aec2:	e7d1      	b.n	800ae68 <_printf_float+0x94>
 800aec4:	6863      	ldr	r3, [r4, #4]
 800aec6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aeca:	9206      	str	r2, [sp, #24]
 800aecc:	1c5a      	adds	r2, r3, #1
 800aece:	d13f      	bne.n	800af50 <_printf_float+0x17c>
 800aed0:	2306      	movs	r3, #6
 800aed2:	6063      	str	r3, [r4, #4]
 800aed4:	9b05      	ldr	r3, [sp, #20]
 800aed6:	6861      	ldr	r1, [r4, #4]
 800aed8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aedc:	2300      	movs	r3, #0
 800aede:	9303      	str	r3, [sp, #12]
 800aee0:	ab0a      	add	r3, sp, #40	; 0x28
 800aee2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aee6:	ab09      	add	r3, sp, #36	; 0x24
 800aee8:	ec49 8b10 	vmov	d0, r8, r9
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	6022      	str	r2, [r4, #0]
 800aef0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aef4:	4628      	mov	r0, r5
 800aef6:	f7ff fecd 	bl	800ac94 <__cvt>
 800aefa:	9b06      	ldr	r3, [sp, #24]
 800aefc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aefe:	2b47      	cmp	r3, #71	; 0x47
 800af00:	4680      	mov	r8, r0
 800af02:	d108      	bne.n	800af16 <_printf_float+0x142>
 800af04:	1cc8      	adds	r0, r1, #3
 800af06:	db02      	blt.n	800af0e <_printf_float+0x13a>
 800af08:	6863      	ldr	r3, [r4, #4]
 800af0a:	4299      	cmp	r1, r3
 800af0c:	dd41      	ble.n	800af92 <_printf_float+0x1be>
 800af0e:	f1ab 0b02 	sub.w	fp, fp, #2
 800af12:	fa5f fb8b 	uxtb.w	fp, fp
 800af16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800af1a:	d820      	bhi.n	800af5e <_printf_float+0x18a>
 800af1c:	3901      	subs	r1, #1
 800af1e:	465a      	mov	r2, fp
 800af20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800af24:	9109      	str	r1, [sp, #36]	; 0x24
 800af26:	f7ff ff17 	bl	800ad58 <__exponent>
 800af2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af2c:	1813      	adds	r3, r2, r0
 800af2e:	2a01      	cmp	r2, #1
 800af30:	4681      	mov	r9, r0
 800af32:	6123      	str	r3, [r4, #16]
 800af34:	dc02      	bgt.n	800af3c <_printf_float+0x168>
 800af36:	6822      	ldr	r2, [r4, #0]
 800af38:	07d2      	lsls	r2, r2, #31
 800af3a:	d501      	bpl.n	800af40 <_printf_float+0x16c>
 800af3c:	3301      	adds	r3, #1
 800af3e:	6123      	str	r3, [r4, #16]
 800af40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800af44:	2b00      	cmp	r3, #0
 800af46:	d09c      	beq.n	800ae82 <_printf_float+0xae>
 800af48:	232d      	movs	r3, #45	; 0x2d
 800af4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af4e:	e798      	b.n	800ae82 <_printf_float+0xae>
 800af50:	9a06      	ldr	r2, [sp, #24]
 800af52:	2a47      	cmp	r2, #71	; 0x47
 800af54:	d1be      	bne.n	800aed4 <_printf_float+0x100>
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1bc      	bne.n	800aed4 <_printf_float+0x100>
 800af5a:	2301      	movs	r3, #1
 800af5c:	e7b9      	b.n	800aed2 <_printf_float+0xfe>
 800af5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800af62:	d118      	bne.n	800af96 <_printf_float+0x1c2>
 800af64:	2900      	cmp	r1, #0
 800af66:	6863      	ldr	r3, [r4, #4]
 800af68:	dd0b      	ble.n	800af82 <_printf_float+0x1ae>
 800af6a:	6121      	str	r1, [r4, #16]
 800af6c:	b913      	cbnz	r3, 800af74 <_printf_float+0x1a0>
 800af6e:	6822      	ldr	r2, [r4, #0]
 800af70:	07d0      	lsls	r0, r2, #31
 800af72:	d502      	bpl.n	800af7a <_printf_float+0x1a6>
 800af74:	3301      	adds	r3, #1
 800af76:	440b      	add	r3, r1
 800af78:	6123      	str	r3, [r4, #16]
 800af7a:	65a1      	str	r1, [r4, #88]	; 0x58
 800af7c:	f04f 0900 	mov.w	r9, #0
 800af80:	e7de      	b.n	800af40 <_printf_float+0x16c>
 800af82:	b913      	cbnz	r3, 800af8a <_printf_float+0x1b6>
 800af84:	6822      	ldr	r2, [r4, #0]
 800af86:	07d2      	lsls	r2, r2, #31
 800af88:	d501      	bpl.n	800af8e <_printf_float+0x1ba>
 800af8a:	3302      	adds	r3, #2
 800af8c:	e7f4      	b.n	800af78 <_printf_float+0x1a4>
 800af8e:	2301      	movs	r3, #1
 800af90:	e7f2      	b.n	800af78 <_printf_float+0x1a4>
 800af92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800af96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af98:	4299      	cmp	r1, r3
 800af9a:	db05      	blt.n	800afa8 <_printf_float+0x1d4>
 800af9c:	6823      	ldr	r3, [r4, #0]
 800af9e:	6121      	str	r1, [r4, #16]
 800afa0:	07d8      	lsls	r0, r3, #31
 800afa2:	d5ea      	bpl.n	800af7a <_printf_float+0x1a6>
 800afa4:	1c4b      	adds	r3, r1, #1
 800afa6:	e7e7      	b.n	800af78 <_printf_float+0x1a4>
 800afa8:	2900      	cmp	r1, #0
 800afaa:	bfd4      	ite	le
 800afac:	f1c1 0202 	rsble	r2, r1, #2
 800afb0:	2201      	movgt	r2, #1
 800afb2:	4413      	add	r3, r2
 800afb4:	e7e0      	b.n	800af78 <_printf_float+0x1a4>
 800afb6:	6823      	ldr	r3, [r4, #0]
 800afb8:	055a      	lsls	r2, r3, #21
 800afba:	d407      	bmi.n	800afcc <_printf_float+0x1f8>
 800afbc:	6923      	ldr	r3, [r4, #16]
 800afbe:	4642      	mov	r2, r8
 800afc0:	4631      	mov	r1, r6
 800afc2:	4628      	mov	r0, r5
 800afc4:	47b8      	blx	r7
 800afc6:	3001      	adds	r0, #1
 800afc8:	d12c      	bne.n	800b024 <_printf_float+0x250>
 800afca:	e764      	b.n	800ae96 <_printf_float+0xc2>
 800afcc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800afd0:	f240 80e0 	bls.w	800b194 <_printf_float+0x3c0>
 800afd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800afd8:	2200      	movs	r2, #0
 800afda:	2300      	movs	r3, #0
 800afdc:	f7f5 fd7c 	bl	8000ad8 <__aeabi_dcmpeq>
 800afe0:	2800      	cmp	r0, #0
 800afe2:	d034      	beq.n	800b04e <_printf_float+0x27a>
 800afe4:	4a37      	ldr	r2, [pc, #220]	; (800b0c4 <_printf_float+0x2f0>)
 800afe6:	2301      	movs	r3, #1
 800afe8:	4631      	mov	r1, r6
 800afea:	4628      	mov	r0, r5
 800afec:	47b8      	blx	r7
 800afee:	3001      	adds	r0, #1
 800aff0:	f43f af51 	beq.w	800ae96 <_printf_float+0xc2>
 800aff4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aff8:	429a      	cmp	r2, r3
 800affa:	db02      	blt.n	800b002 <_printf_float+0x22e>
 800affc:	6823      	ldr	r3, [r4, #0]
 800affe:	07d8      	lsls	r0, r3, #31
 800b000:	d510      	bpl.n	800b024 <_printf_float+0x250>
 800b002:	ee18 3a10 	vmov	r3, s16
 800b006:	4652      	mov	r2, sl
 800b008:	4631      	mov	r1, r6
 800b00a:	4628      	mov	r0, r5
 800b00c:	47b8      	blx	r7
 800b00e:	3001      	adds	r0, #1
 800b010:	f43f af41 	beq.w	800ae96 <_printf_float+0xc2>
 800b014:	f04f 0800 	mov.w	r8, #0
 800b018:	f104 091a 	add.w	r9, r4, #26
 800b01c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b01e:	3b01      	subs	r3, #1
 800b020:	4543      	cmp	r3, r8
 800b022:	dc09      	bgt.n	800b038 <_printf_float+0x264>
 800b024:	6823      	ldr	r3, [r4, #0]
 800b026:	079b      	lsls	r3, r3, #30
 800b028:	f100 8105 	bmi.w	800b236 <_printf_float+0x462>
 800b02c:	68e0      	ldr	r0, [r4, #12]
 800b02e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b030:	4298      	cmp	r0, r3
 800b032:	bfb8      	it	lt
 800b034:	4618      	movlt	r0, r3
 800b036:	e730      	b.n	800ae9a <_printf_float+0xc6>
 800b038:	2301      	movs	r3, #1
 800b03a:	464a      	mov	r2, r9
 800b03c:	4631      	mov	r1, r6
 800b03e:	4628      	mov	r0, r5
 800b040:	47b8      	blx	r7
 800b042:	3001      	adds	r0, #1
 800b044:	f43f af27 	beq.w	800ae96 <_printf_float+0xc2>
 800b048:	f108 0801 	add.w	r8, r8, #1
 800b04c:	e7e6      	b.n	800b01c <_printf_float+0x248>
 800b04e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b050:	2b00      	cmp	r3, #0
 800b052:	dc39      	bgt.n	800b0c8 <_printf_float+0x2f4>
 800b054:	4a1b      	ldr	r2, [pc, #108]	; (800b0c4 <_printf_float+0x2f0>)
 800b056:	2301      	movs	r3, #1
 800b058:	4631      	mov	r1, r6
 800b05a:	4628      	mov	r0, r5
 800b05c:	47b8      	blx	r7
 800b05e:	3001      	adds	r0, #1
 800b060:	f43f af19 	beq.w	800ae96 <_printf_float+0xc2>
 800b064:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b068:	4313      	orrs	r3, r2
 800b06a:	d102      	bne.n	800b072 <_printf_float+0x29e>
 800b06c:	6823      	ldr	r3, [r4, #0]
 800b06e:	07d9      	lsls	r1, r3, #31
 800b070:	d5d8      	bpl.n	800b024 <_printf_float+0x250>
 800b072:	ee18 3a10 	vmov	r3, s16
 800b076:	4652      	mov	r2, sl
 800b078:	4631      	mov	r1, r6
 800b07a:	4628      	mov	r0, r5
 800b07c:	47b8      	blx	r7
 800b07e:	3001      	adds	r0, #1
 800b080:	f43f af09 	beq.w	800ae96 <_printf_float+0xc2>
 800b084:	f04f 0900 	mov.w	r9, #0
 800b088:	f104 0a1a 	add.w	sl, r4, #26
 800b08c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b08e:	425b      	negs	r3, r3
 800b090:	454b      	cmp	r3, r9
 800b092:	dc01      	bgt.n	800b098 <_printf_float+0x2c4>
 800b094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b096:	e792      	b.n	800afbe <_printf_float+0x1ea>
 800b098:	2301      	movs	r3, #1
 800b09a:	4652      	mov	r2, sl
 800b09c:	4631      	mov	r1, r6
 800b09e:	4628      	mov	r0, r5
 800b0a0:	47b8      	blx	r7
 800b0a2:	3001      	adds	r0, #1
 800b0a4:	f43f aef7 	beq.w	800ae96 <_printf_float+0xc2>
 800b0a8:	f109 0901 	add.w	r9, r9, #1
 800b0ac:	e7ee      	b.n	800b08c <_printf_float+0x2b8>
 800b0ae:	bf00      	nop
 800b0b0:	7fefffff 	.word	0x7fefffff
 800b0b4:	0800d8a0 	.word	0x0800d8a0
 800b0b8:	0800d8a4 	.word	0x0800d8a4
 800b0bc:	0800d8ac 	.word	0x0800d8ac
 800b0c0:	0800d8a8 	.word	0x0800d8a8
 800b0c4:	0800d8b0 	.word	0x0800d8b0
 800b0c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	bfa8      	it	ge
 800b0d0:	461a      	movge	r2, r3
 800b0d2:	2a00      	cmp	r2, #0
 800b0d4:	4691      	mov	r9, r2
 800b0d6:	dc37      	bgt.n	800b148 <_printf_float+0x374>
 800b0d8:	f04f 0b00 	mov.w	fp, #0
 800b0dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0e0:	f104 021a 	add.w	r2, r4, #26
 800b0e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b0e6:	9305      	str	r3, [sp, #20]
 800b0e8:	eba3 0309 	sub.w	r3, r3, r9
 800b0ec:	455b      	cmp	r3, fp
 800b0ee:	dc33      	bgt.n	800b158 <_printf_float+0x384>
 800b0f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	db3b      	blt.n	800b170 <_printf_float+0x39c>
 800b0f8:	6823      	ldr	r3, [r4, #0]
 800b0fa:	07da      	lsls	r2, r3, #31
 800b0fc:	d438      	bmi.n	800b170 <_printf_float+0x39c>
 800b0fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b100:	9a05      	ldr	r2, [sp, #20]
 800b102:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b104:	1a9a      	subs	r2, r3, r2
 800b106:	eba3 0901 	sub.w	r9, r3, r1
 800b10a:	4591      	cmp	r9, r2
 800b10c:	bfa8      	it	ge
 800b10e:	4691      	movge	r9, r2
 800b110:	f1b9 0f00 	cmp.w	r9, #0
 800b114:	dc35      	bgt.n	800b182 <_printf_float+0x3ae>
 800b116:	f04f 0800 	mov.w	r8, #0
 800b11a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b11e:	f104 0a1a 	add.w	sl, r4, #26
 800b122:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b126:	1a9b      	subs	r3, r3, r2
 800b128:	eba3 0309 	sub.w	r3, r3, r9
 800b12c:	4543      	cmp	r3, r8
 800b12e:	f77f af79 	ble.w	800b024 <_printf_float+0x250>
 800b132:	2301      	movs	r3, #1
 800b134:	4652      	mov	r2, sl
 800b136:	4631      	mov	r1, r6
 800b138:	4628      	mov	r0, r5
 800b13a:	47b8      	blx	r7
 800b13c:	3001      	adds	r0, #1
 800b13e:	f43f aeaa 	beq.w	800ae96 <_printf_float+0xc2>
 800b142:	f108 0801 	add.w	r8, r8, #1
 800b146:	e7ec      	b.n	800b122 <_printf_float+0x34e>
 800b148:	4613      	mov	r3, r2
 800b14a:	4631      	mov	r1, r6
 800b14c:	4642      	mov	r2, r8
 800b14e:	4628      	mov	r0, r5
 800b150:	47b8      	blx	r7
 800b152:	3001      	adds	r0, #1
 800b154:	d1c0      	bne.n	800b0d8 <_printf_float+0x304>
 800b156:	e69e      	b.n	800ae96 <_printf_float+0xc2>
 800b158:	2301      	movs	r3, #1
 800b15a:	4631      	mov	r1, r6
 800b15c:	4628      	mov	r0, r5
 800b15e:	9205      	str	r2, [sp, #20]
 800b160:	47b8      	blx	r7
 800b162:	3001      	adds	r0, #1
 800b164:	f43f ae97 	beq.w	800ae96 <_printf_float+0xc2>
 800b168:	9a05      	ldr	r2, [sp, #20]
 800b16a:	f10b 0b01 	add.w	fp, fp, #1
 800b16e:	e7b9      	b.n	800b0e4 <_printf_float+0x310>
 800b170:	ee18 3a10 	vmov	r3, s16
 800b174:	4652      	mov	r2, sl
 800b176:	4631      	mov	r1, r6
 800b178:	4628      	mov	r0, r5
 800b17a:	47b8      	blx	r7
 800b17c:	3001      	adds	r0, #1
 800b17e:	d1be      	bne.n	800b0fe <_printf_float+0x32a>
 800b180:	e689      	b.n	800ae96 <_printf_float+0xc2>
 800b182:	9a05      	ldr	r2, [sp, #20]
 800b184:	464b      	mov	r3, r9
 800b186:	4442      	add	r2, r8
 800b188:	4631      	mov	r1, r6
 800b18a:	4628      	mov	r0, r5
 800b18c:	47b8      	blx	r7
 800b18e:	3001      	adds	r0, #1
 800b190:	d1c1      	bne.n	800b116 <_printf_float+0x342>
 800b192:	e680      	b.n	800ae96 <_printf_float+0xc2>
 800b194:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b196:	2a01      	cmp	r2, #1
 800b198:	dc01      	bgt.n	800b19e <_printf_float+0x3ca>
 800b19a:	07db      	lsls	r3, r3, #31
 800b19c:	d538      	bpl.n	800b210 <_printf_float+0x43c>
 800b19e:	2301      	movs	r3, #1
 800b1a0:	4642      	mov	r2, r8
 800b1a2:	4631      	mov	r1, r6
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	47b8      	blx	r7
 800b1a8:	3001      	adds	r0, #1
 800b1aa:	f43f ae74 	beq.w	800ae96 <_printf_float+0xc2>
 800b1ae:	ee18 3a10 	vmov	r3, s16
 800b1b2:	4652      	mov	r2, sl
 800b1b4:	4631      	mov	r1, r6
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	47b8      	blx	r7
 800b1ba:	3001      	adds	r0, #1
 800b1bc:	f43f ae6b 	beq.w	800ae96 <_printf_float+0xc2>
 800b1c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	f7f5 fc86 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1cc:	b9d8      	cbnz	r0, 800b206 <_printf_float+0x432>
 800b1ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1d0:	f108 0201 	add.w	r2, r8, #1
 800b1d4:	3b01      	subs	r3, #1
 800b1d6:	4631      	mov	r1, r6
 800b1d8:	4628      	mov	r0, r5
 800b1da:	47b8      	blx	r7
 800b1dc:	3001      	adds	r0, #1
 800b1de:	d10e      	bne.n	800b1fe <_printf_float+0x42a>
 800b1e0:	e659      	b.n	800ae96 <_printf_float+0xc2>
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	4652      	mov	r2, sl
 800b1e6:	4631      	mov	r1, r6
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	47b8      	blx	r7
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	f43f ae52 	beq.w	800ae96 <_printf_float+0xc2>
 800b1f2:	f108 0801 	add.w	r8, r8, #1
 800b1f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1f8:	3b01      	subs	r3, #1
 800b1fa:	4543      	cmp	r3, r8
 800b1fc:	dcf1      	bgt.n	800b1e2 <_printf_float+0x40e>
 800b1fe:	464b      	mov	r3, r9
 800b200:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b204:	e6dc      	b.n	800afc0 <_printf_float+0x1ec>
 800b206:	f04f 0800 	mov.w	r8, #0
 800b20a:	f104 0a1a 	add.w	sl, r4, #26
 800b20e:	e7f2      	b.n	800b1f6 <_printf_float+0x422>
 800b210:	2301      	movs	r3, #1
 800b212:	4642      	mov	r2, r8
 800b214:	e7df      	b.n	800b1d6 <_printf_float+0x402>
 800b216:	2301      	movs	r3, #1
 800b218:	464a      	mov	r2, r9
 800b21a:	4631      	mov	r1, r6
 800b21c:	4628      	mov	r0, r5
 800b21e:	47b8      	blx	r7
 800b220:	3001      	adds	r0, #1
 800b222:	f43f ae38 	beq.w	800ae96 <_printf_float+0xc2>
 800b226:	f108 0801 	add.w	r8, r8, #1
 800b22a:	68e3      	ldr	r3, [r4, #12]
 800b22c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b22e:	1a5b      	subs	r3, r3, r1
 800b230:	4543      	cmp	r3, r8
 800b232:	dcf0      	bgt.n	800b216 <_printf_float+0x442>
 800b234:	e6fa      	b.n	800b02c <_printf_float+0x258>
 800b236:	f04f 0800 	mov.w	r8, #0
 800b23a:	f104 0919 	add.w	r9, r4, #25
 800b23e:	e7f4      	b.n	800b22a <_printf_float+0x456>

0800b240 <_printf_common>:
 800b240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b244:	4616      	mov	r6, r2
 800b246:	4699      	mov	r9, r3
 800b248:	688a      	ldr	r2, [r1, #8]
 800b24a:	690b      	ldr	r3, [r1, #16]
 800b24c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b250:	4293      	cmp	r3, r2
 800b252:	bfb8      	it	lt
 800b254:	4613      	movlt	r3, r2
 800b256:	6033      	str	r3, [r6, #0]
 800b258:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b25c:	4607      	mov	r7, r0
 800b25e:	460c      	mov	r4, r1
 800b260:	b10a      	cbz	r2, 800b266 <_printf_common+0x26>
 800b262:	3301      	adds	r3, #1
 800b264:	6033      	str	r3, [r6, #0]
 800b266:	6823      	ldr	r3, [r4, #0]
 800b268:	0699      	lsls	r1, r3, #26
 800b26a:	bf42      	ittt	mi
 800b26c:	6833      	ldrmi	r3, [r6, #0]
 800b26e:	3302      	addmi	r3, #2
 800b270:	6033      	strmi	r3, [r6, #0]
 800b272:	6825      	ldr	r5, [r4, #0]
 800b274:	f015 0506 	ands.w	r5, r5, #6
 800b278:	d106      	bne.n	800b288 <_printf_common+0x48>
 800b27a:	f104 0a19 	add.w	sl, r4, #25
 800b27e:	68e3      	ldr	r3, [r4, #12]
 800b280:	6832      	ldr	r2, [r6, #0]
 800b282:	1a9b      	subs	r3, r3, r2
 800b284:	42ab      	cmp	r3, r5
 800b286:	dc26      	bgt.n	800b2d6 <_printf_common+0x96>
 800b288:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b28c:	1e13      	subs	r3, r2, #0
 800b28e:	6822      	ldr	r2, [r4, #0]
 800b290:	bf18      	it	ne
 800b292:	2301      	movne	r3, #1
 800b294:	0692      	lsls	r2, r2, #26
 800b296:	d42b      	bmi.n	800b2f0 <_printf_common+0xb0>
 800b298:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b29c:	4649      	mov	r1, r9
 800b29e:	4638      	mov	r0, r7
 800b2a0:	47c0      	blx	r8
 800b2a2:	3001      	adds	r0, #1
 800b2a4:	d01e      	beq.n	800b2e4 <_printf_common+0xa4>
 800b2a6:	6823      	ldr	r3, [r4, #0]
 800b2a8:	68e5      	ldr	r5, [r4, #12]
 800b2aa:	6832      	ldr	r2, [r6, #0]
 800b2ac:	f003 0306 	and.w	r3, r3, #6
 800b2b0:	2b04      	cmp	r3, #4
 800b2b2:	bf08      	it	eq
 800b2b4:	1aad      	subeq	r5, r5, r2
 800b2b6:	68a3      	ldr	r3, [r4, #8]
 800b2b8:	6922      	ldr	r2, [r4, #16]
 800b2ba:	bf0c      	ite	eq
 800b2bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2c0:	2500      	movne	r5, #0
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	bfc4      	itt	gt
 800b2c6:	1a9b      	subgt	r3, r3, r2
 800b2c8:	18ed      	addgt	r5, r5, r3
 800b2ca:	2600      	movs	r6, #0
 800b2cc:	341a      	adds	r4, #26
 800b2ce:	42b5      	cmp	r5, r6
 800b2d0:	d11a      	bne.n	800b308 <_printf_common+0xc8>
 800b2d2:	2000      	movs	r0, #0
 800b2d4:	e008      	b.n	800b2e8 <_printf_common+0xa8>
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	4652      	mov	r2, sl
 800b2da:	4649      	mov	r1, r9
 800b2dc:	4638      	mov	r0, r7
 800b2de:	47c0      	blx	r8
 800b2e0:	3001      	adds	r0, #1
 800b2e2:	d103      	bne.n	800b2ec <_printf_common+0xac>
 800b2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ec:	3501      	adds	r5, #1
 800b2ee:	e7c6      	b.n	800b27e <_printf_common+0x3e>
 800b2f0:	18e1      	adds	r1, r4, r3
 800b2f2:	1c5a      	adds	r2, r3, #1
 800b2f4:	2030      	movs	r0, #48	; 0x30
 800b2f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b2fa:	4422      	add	r2, r4
 800b2fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b300:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b304:	3302      	adds	r3, #2
 800b306:	e7c7      	b.n	800b298 <_printf_common+0x58>
 800b308:	2301      	movs	r3, #1
 800b30a:	4622      	mov	r2, r4
 800b30c:	4649      	mov	r1, r9
 800b30e:	4638      	mov	r0, r7
 800b310:	47c0      	blx	r8
 800b312:	3001      	adds	r0, #1
 800b314:	d0e6      	beq.n	800b2e4 <_printf_common+0xa4>
 800b316:	3601      	adds	r6, #1
 800b318:	e7d9      	b.n	800b2ce <_printf_common+0x8e>
	...

0800b31c <_printf_i>:
 800b31c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b320:	7e0f      	ldrb	r7, [r1, #24]
 800b322:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b324:	2f78      	cmp	r7, #120	; 0x78
 800b326:	4691      	mov	r9, r2
 800b328:	4680      	mov	r8, r0
 800b32a:	460c      	mov	r4, r1
 800b32c:	469a      	mov	sl, r3
 800b32e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b332:	d807      	bhi.n	800b344 <_printf_i+0x28>
 800b334:	2f62      	cmp	r7, #98	; 0x62
 800b336:	d80a      	bhi.n	800b34e <_printf_i+0x32>
 800b338:	2f00      	cmp	r7, #0
 800b33a:	f000 80d8 	beq.w	800b4ee <_printf_i+0x1d2>
 800b33e:	2f58      	cmp	r7, #88	; 0x58
 800b340:	f000 80a3 	beq.w	800b48a <_printf_i+0x16e>
 800b344:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b348:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b34c:	e03a      	b.n	800b3c4 <_printf_i+0xa8>
 800b34e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b352:	2b15      	cmp	r3, #21
 800b354:	d8f6      	bhi.n	800b344 <_printf_i+0x28>
 800b356:	a101      	add	r1, pc, #4	; (adr r1, 800b35c <_printf_i+0x40>)
 800b358:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b35c:	0800b3b5 	.word	0x0800b3b5
 800b360:	0800b3c9 	.word	0x0800b3c9
 800b364:	0800b345 	.word	0x0800b345
 800b368:	0800b345 	.word	0x0800b345
 800b36c:	0800b345 	.word	0x0800b345
 800b370:	0800b345 	.word	0x0800b345
 800b374:	0800b3c9 	.word	0x0800b3c9
 800b378:	0800b345 	.word	0x0800b345
 800b37c:	0800b345 	.word	0x0800b345
 800b380:	0800b345 	.word	0x0800b345
 800b384:	0800b345 	.word	0x0800b345
 800b388:	0800b4d5 	.word	0x0800b4d5
 800b38c:	0800b3f9 	.word	0x0800b3f9
 800b390:	0800b4b7 	.word	0x0800b4b7
 800b394:	0800b345 	.word	0x0800b345
 800b398:	0800b345 	.word	0x0800b345
 800b39c:	0800b4f7 	.word	0x0800b4f7
 800b3a0:	0800b345 	.word	0x0800b345
 800b3a4:	0800b3f9 	.word	0x0800b3f9
 800b3a8:	0800b345 	.word	0x0800b345
 800b3ac:	0800b345 	.word	0x0800b345
 800b3b0:	0800b4bf 	.word	0x0800b4bf
 800b3b4:	682b      	ldr	r3, [r5, #0]
 800b3b6:	1d1a      	adds	r2, r3, #4
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	602a      	str	r2, [r5, #0]
 800b3bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	e0a3      	b.n	800b510 <_printf_i+0x1f4>
 800b3c8:	6820      	ldr	r0, [r4, #0]
 800b3ca:	6829      	ldr	r1, [r5, #0]
 800b3cc:	0606      	lsls	r6, r0, #24
 800b3ce:	f101 0304 	add.w	r3, r1, #4
 800b3d2:	d50a      	bpl.n	800b3ea <_printf_i+0xce>
 800b3d4:	680e      	ldr	r6, [r1, #0]
 800b3d6:	602b      	str	r3, [r5, #0]
 800b3d8:	2e00      	cmp	r6, #0
 800b3da:	da03      	bge.n	800b3e4 <_printf_i+0xc8>
 800b3dc:	232d      	movs	r3, #45	; 0x2d
 800b3de:	4276      	negs	r6, r6
 800b3e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3e4:	485e      	ldr	r0, [pc, #376]	; (800b560 <_printf_i+0x244>)
 800b3e6:	230a      	movs	r3, #10
 800b3e8:	e019      	b.n	800b41e <_printf_i+0x102>
 800b3ea:	680e      	ldr	r6, [r1, #0]
 800b3ec:	602b      	str	r3, [r5, #0]
 800b3ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b3f2:	bf18      	it	ne
 800b3f4:	b236      	sxthne	r6, r6
 800b3f6:	e7ef      	b.n	800b3d8 <_printf_i+0xbc>
 800b3f8:	682b      	ldr	r3, [r5, #0]
 800b3fa:	6820      	ldr	r0, [r4, #0]
 800b3fc:	1d19      	adds	r1, r3, #4
 800b3fe:	6029      	str	r1, [r5, #0]
 800b400:	0601      	lsls	r1, r0, #24
 800b402:	d501      	bpl.n	800b408 <_printf_i+0xec>
 800b404:	681e      	ldr	r6, [r3, #0]
 800b406:	e002      	b.n	800b40e <_printf_i+0xf2>
 800b408:	0646      	lsls	r6, r0, #25
 800b40a:	d5fb      	bpl.n	800b404 <_printf_i+0xe8>
 800b40c:	881e      	ldrh	r6, [r3, #0]
 800b40e:	4854      	ldr	r0, [pc, #336]	; (800b560 <_printf_i+0x244>)
 800b410:	2f6f      	cmp	r7, #111	; 0x6f
 800b412:	bf0c      	ite	eq
 800b414:	2308      	moveq	r3, #8
 800b416:	230a      	movne	r3, #10
 800b418:	2100      	movs	r1, #0
 800b41a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b41e:	6865      	ldr	r5, [r4, #4]
 800b420:	60a5      	str	r5, [r4, #8]
 800b422:	2d00      	cmp	r5, #0
 800b424:	bfa2      	ittt	ge
 800b426:	6821      	ldrge	r1, [r4, #0]
 800b428:	f021 0104 	bicge.w	r1, r1, #4
 800b42c:	6021      	strge	r1, [r4, #0]
 800b42e:	b90e      	cbnz	r6, 800b434 <_printf_i+0x118>
 800b430:	2d00      	cmp	r5, #0
 800b432:	d04d      	beq.n	800b4d0 <_printf_i+0x1b4>
 800b434:	4615      	mov	r5, r2
 800b436:	fbb6 f1f3 	udiv	r1, r6, r3
 800b43a:	fb03 6711 	mls	r7, r3, r1, r6
 800b43e:	5dc7      	ldrb	r7, [r0, r7]
 800b440:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b444:	4637      	mov	r7, r6
 800b446:	42bb      	cmp	r3, r7
 800b448:	460e      	mov	r6, r1
 800b44a:	d9f4      	bls.n	800b436 <_printf_i+0x11a>
 800b44c:	2b08      	cmp	r3, #8
 800b44e:	d10b      	bne.n	800b468 <_printf_i+0x14c>
 800b450:	6823      	ldr	r3, [r4, #0]
 800b452:	07de      	lsls	r6, r3, #31
 800b454:	d508      	bpl.n	800b468 <_printf_i+0x14c>
 800b456:	6923      	ldr	r3, [r4, #16]
 800b458:	6861      	ldr	r1, [r4, #4]
 800b45a:	4299      	cmp	r1, r3
 800b45c:	bfde      	ittt	le
 800b45e:	2330      	movle	r3, #48	; 0x30
 800b460:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b464:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b468:	1b52      	subs	r2, r2, r5
 800b46a:	6122      	str	r2, [r4, #16]
 800b46c:	f8cd a000 	str.w	sl, [sp]
 800b470:	464b      	mov	r3, r9
 800b472:	aa03      	add	r2, sp, #12
 800b474:	4621      	mov	r1, r4
 800b476:	4640      	mov	r0, r8
 800b478:	f7ff fee2 	bl	800b240 <_printf_common>
 800b47c:	3001      	adds	r0, #1
 800b47e:	d14c      	bne.n	800b51a <_printf_i+0x1fe>
 800b480:	f04f 30ff 	mov.w	r0, #4294967295
 800b484:	b004      	add	sp, #16
 800b486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b48a:	4835      	ldr	r0, [pc, #212]	; (800b560 <_printf_i+0x244>)
 800b48c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b490:	6829      	ldr	r1, [r5, #0]
 800b492:	6823      	ldr	r3, [r4, #0]
 800b494:	f851 6b04 	ldr.w	r6, [r1], #4
 800b498:	6029      	str	r1, [r5, #0]
 800b49a:	061d      	lsls	r5, r3, #24
 800b49c:	d514      	bpl.n	800b4c8 <_printf_i+0x1ac>
 800b49e:	07df      	lsls	r7, r3, #31
 800b4a0:	bf44      	itt	mi
 800b4a2:	f043 0320 	orrmi.w	r3, r3, #32
 800b4a6:	6023      	strmi	r3, [r4, #0]
 800b4a8:	b91e      	cbnz	r6, 800b4b2 <_printf_i+0x196>
 800b4aa:	6823      	ldr	r3, [r4, #0]
 800b4ac:	f023 0320 	bic.w	r3, r3, #32
 800b4b0:	6023      	str	r3, [r4, #0]
 800b4b2:	2310      	movs	r3, #16
 800b4b4:	e7b0      	b.n	800b418 <_printf_i+0xfc>
 800b4b6:	6823      	ldr	r3, [r4, #0]
 800b4b8:	f043 0320 	orr.w	r3, r3, #32
 800b4bc:	6023      	str	r3, [r4, #0]
 800b4be:	2378      	movs	r3, #120	; 0x78
 800b4c0:	4828      	ldr	r0, [pc, #160]	; (800b564 <_printf_i+0x248>)
 800b4c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b4c6:	e7e3      	b.n	800b490 <_printf_i+0x174>
 800b4c8:	0659      	lsls	r1, r3, #25
 800b4ca:	bf48      	it	mi
 800b4cc:	b2b6      	uxthmi	r6, r6
 800b4ce:	e7e6      	b.n	800b49e <_printf_i+0x182>
 800b4d0:	4615      	mov	r5, r2
 800b4d2:	e7bb      	b.n	800b44c <_printf_i+0x130>
 800b4d4:	682b      	ldr	r3, [r5, #0]
 800b4d6:	6826      	ldr	r6, [r4, #0]
 800b4d8:	6961      	ldr	r1, [r4, #20]
 800b4da:	1d18      	adds	r0, r3, #4
 800b4dc:	6028      	str	r0, [r5, #0]
 800b4de:	0635      	lsls	r5, r6, #24
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	d501      	bpl.n	800b4e8 <_printf_i+0x1cc>
 800b4e4:	6019      	str	r1, [r3, #0]
 800b4e6:	e002      	b.n	800b4ee <_printf_i+0x1d2>
 800b4e8:	0670      	lsls	r0, r6, #25
 800b4ea:	d5fb      	bpl.n	800b4e4 <_printf_i+0x1c8>
 800b4ec:	8019      	strh	r1, [r3, #0]
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	6123      	str	r3, [r4, #16]
 800b4f2:	4615      	mov	r5, r2
 800b4f4:	e7ba      	b.n	800b46c <_printf_i+0x150>
 800b4f6:	682b      	ldr	r3, [r5, #0]
 800b4f8:	1d1a      	adds	r2, r3, #4
 800b4fa:	602a      	str	r2, [r5, #0]
 800b4fc:	681d      	ldr	r5, [r3, #0]
 800b4fe:	6862      	ldr	r2, [r4, #4]
 800b500:	2100      	movs	r1, #0
 800b502:	4628      	mov	r0, r5
 800b504:	f7f4 fe74 	bl	80001f0 <memchr>
 800b508:	b108      	cbz	r0, 800b50e <_printf_i+0x1f2>
 800b50a:	1b40      	subs	r0, r0, r5
 800b50c:	6060      	str	r0, [r4, #4]
 800b50e:	6863      	ldr	r3, [r4, #4]
 800b510:	6123      	str	r3, [r4, #16]
 800b512:	2300      	movs	r3, #0
 800b514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b518:	e7a8      	b.n	800b46c <_printf_i+0x150>
 800b51a:	6923      	ldr	r3, [r4, #16]
 800b51c:	462a      	mov	r2, r5
 800b51e:	4649      	mov	r1, r9
 800b520:	4640      	mov	r0, r8
 800b522:	47d0      	blx	sl
 800b524:	3001      	adds	r0, #1
 800b526:	d0ab      	beq.n	800b480 <_printf_i+0x164>
 800b528:	6823      	ldr	r3, [r4, #0]
 800b52a:	079b      	lsls	r3, r3, #30
 800b52c:	d413      	bmi.n	800b556 <_printf_i+0x23a>
 800b52e:	68e0      	ldr	r0, [r4, #12]
 800b530:	9b03      	ldr	r3, [sp, #12]
 800b532:	4298      	cmp	r0, r3
 800b534:	bfb8      	it	lt
 800b536:	4618      	movlt	r0, r3
 800b538:	e7a4      	b.n	800b484 <_printf_i+0x168>
 800b53a:	2301      	movs	r3, #1
 800b53c:	4632      	mov	r2, r6
 800b53e:	4649      	mov	r1, r9
 800b540:	4640      	mov	r0, r8
 800b542:	47d0      	blx	sl
 800b544:	3001      	adds	r0, #1
 800b546:	d09b      	beq.n	800b480 <_printf_i+0x164>
 800b548:	3501      	adds	r5, #1
 800b54a:	68e3      	ldr	r3, [r4, #12]
 800b54c:	9903      	ldr	r1, [sp, #12]
 800b54e:	1a5b      	subs	r3, r3, r1
 800b550:	42ab      	cmp	r3, r5
 800b552:	dcf2      	bgt.n	800b53a <_printf_i+0x21e>
 800b554:	e7eb      	b.n	800b52e <_printf_i+0x212>
 800b556:	2500      	movs	r5, #0
 800b558:	f104 0619 	add.w	r6, r4, #25
 800b55c:	e7f5      	b.n	800b54a <_printf_i+0x22e>
 800b55e:	bf00      	nop
 800b560:	0800d8b2 	.word	0x0800d8b2
 800b564:	0800d8c3 	.word	0x0800d8c3

0800b568 <quorem>:
 800b568:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b56c:	6903      	ldr	r3, [r0, #16]
 800b56e:	690c      	ldr	r4, [r1, #16]
 800b570:	42a3      	cmp	r3, r4
 800b572:	4607      	mov	r7, r0
 800b574:	f2c0 8081 	blt.w	800b67a <quorem+0x112>
 800b578:	3c01      	subs	r4, #1
 800b57a:	f101 0814 	add.w	r8, r1, #20
 800b57e:	f100 0514 	add.w	r5, r0, #20
 800b582:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b586:	9301      	str	r3, [sp, #4]
 800b588:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b58c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b590:	3301      	adds	r3, #1
 800b592:	429a      	cmp	r2, r3
 800b594:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b598:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b59c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b5a0:	d331      	bcc.n	800b606 <quorem+0x9e>
 800b5a2:	f04f 0e00 	mov.w	lr, #0
 800b5a6:	4640      	mov	r0, r8
 800b5a8:	46ac      	mov	ip, r5
 800b5aa:	46f2      	mov	sl, lr
 800b5ac:	f850 2b04 	ldr.w	r2, [r0], #4
 800b5b0:	b293      	uxth	r3, r2
 800b5b2:	fb06 e303 	mla	r3, r6, r3, lr
 800b5b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	ebaa 0303 	sub.w	r3, sl, r3
 800b5c0:	f8dc a000 	ldr.w	sl, [ip]
 800b5c4:	0c12      	lsrs	r2, r2, #16
 800b5c6:	fa13 f38a 	uxtah	r3, r3, sl
 800b5ca:	fb06 e202 	mla	r2, r6, r2, lr
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	9b00      	ldr	r3, [sp, #0]
 800b5d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b5d6:	b292      	uxth	r2, r2
 800b5d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b5dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b5e0:	f8bd 3000 	ldrh.w	r3, [sp]
 800b5e4:	4581      	cmp	r9, r0
 800b5e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5ea:	f84c 3b04 	str.w	r3, [ip], #4
 800b5ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b5f2:	d2db      	bcs.n	800b5ac <quorem+0x44>
 800b5f4:	f855 300b 	ldr.w	r3, [r5, fp]
 800b5f8:	b92b      	cbnz	r3, 800b606 <quorem+0x9e>
 800b5fa:	9b01      	ldr	r3, [sp, #4]
 800b5fc:	3b04      	subs	r3, #4
 800b5fe:	429d      	cmp	r5, r3
 800b600:	461a      	mov	r2, r3
 800b602:	d32e      	bcc.n	800b662 <quorem+0xfa>
 800b604:	613c      	str	r4, [r7, #16]
 800b606:	4638      	mov	r0, r7
 800b608:	f001 f8b6 	bl	800c778 <__mcmp>
 800b60c:	2800      	cmp	r0, #0
 800b60e:	db24      	blt.n	800b65a <quorem+0xf2>
 800b610:	3601      	adds	r6, #1
 800b612:	4628      	mov	r0, r5
 800b614:	f04f 0c00 	mov.w	ip, #0
 800b618:	f858 2b04 	ldr.w	r2, [r8], #4
 800b61c:	f8d0 e000 	ldr.w	lr, [r0]
 800b620:	b293      	uxth	r3, r2
 800b622:	ebac 0303 	sub.w	r3, ip, r3
 800b626:	0c12      	lsrs	r2, r2, #16
 800b628:	fa13 f38e 	uxtah	r3, r3, lr
 800b62c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b630:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b634:	b29b      	uxth	r3, r3
 800b636:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b63a:	45c1      	cmp	r9, r8
 800b63c:	f840 3b04 	str.w	r3, [r0], #4
 800b640:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b644:	d2e8      	bcs.n	800b618 <quorem+0xb0>
 800b646:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b64a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b64e:	b922      	cbnz	r2, 800b65a <quorem+0xf2>
 800b650:	3b04      	subs	r3, #4
 800b652:	429d      	cmp	r5, r3
 800b654:	461a      	mov	r2, r3
 800b656:	d30a      	bcc.n	800b66e <quorem+0x106>
 800b658:	613c      	str	r4, [r7, #16]
 800b65a:	4630      	mov	r0, r6
 800b65c:	b003      	add	sp, #12
 800b65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b662:	6812      	ldr	r2, [r2, #0]
 800b664:	3b04      	subs	r3, #4
 800b666:	2a00      	cmp	r2, #0
 800b668:	d1cc      	bne.n	800b604 <quorem+0x9c>
 800b66a:	3c01      	subs	r4, #1
 800b66c:	e7c7      	b.n	800b5fe <quorem+0x96>
 800b66e:	6812      	ldr	r2, [r2, #0]
 800b670:	3b04      	subs	r3, #4
 800b672:	2a00      	cmp	r2, #0
 800b674:	d1f0      	bne.n	800b658 <quorem+0xf0>
 800b676:	3c01      	subs	r4, #1
 800b678:	e7eb      	b.n	800b652 <quorem+0xea>
 800b67a:	2000      	movs	r0, #0
 800b67c:	e7ee      	b.n	800b65c <quorem+0xf4>
	...

0800b680 <_dtoa_r>:
 800b680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b684:	ed2d 8b04 	vpush	{d8-d9}
 800b688:	ec57 6b10 	vmov	r6, r7, d0
 800b68c:	b093      	sub	sp, #76	; 0x4c
 800b68e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b690:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b694:	9106      	str	r1, [sp, #24]
 800b696:	ee10 aa10 	vmov	sl, s0
 800b69a:	4604      	mov	r4, r0
 800b69c:	9209      	str	r2, [sp, #36]	; 0x24
 800b69e:	930c      	str	r3, [sp, #48]	; 0x30
 800b6a0:	46bb      	mov	fp, r7
 800b6a2:	b975      	cbnz	r5, 800b6c2 <_dtoa_r+0x42>
 800b6a4:	2010      	movs	r0, #16
 800b6a6:	f000 fddd 	bl	800c264 <malloc>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	6260      	str	r0, [r4, #36]	; 0x24
 800b6ae:	b920      	cbnz	r0, 800b6ba <_dtoa_r+0x3a>
 800b6b0:	4ba7      	ldr	r3, [pc, #668]	; (800b950 <_dtoa_r+0x2d0>)
 800b6b2:	21ea      	movs	r1, #234	; 0xea
 800b6b4:	48a7      	ldr	r0, [pc, #668]	; (800b954 <_dtoa_r+0x2d4>)
 800b6b6:	f001 fa67 	bl	800cb88 <__assert_func>
 800b6ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b6be:	6005      	str	r5, [r0, #0]
 800b6c0:	60c5      	str	r5, [r0, #12]
 800b6c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6c4:	6819      	ldr	r1, [r3, #0]
 800b6c6:	b151      	cbz	r1, 800b6de <_dtoa_r+0x5e>
 800b6c8:	685a      	ldr	r2, [r3, #4]
 800b6ca:	604a      	str	r2, [r1, #4]
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	4093      	lsls	r3, r2
 800b6d0:	608b      	str	r3, [r1, #8]
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	f000 fe0e 	bl	800c2f4 <_Bfree>
 800b6d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6da:	2200      	movs	r2, #0
 800b6dc:	601a      	str	r2, [r3, #0]
 800b6de:	1e3b      	subs	r3, r7, #0
 800b6e0:	bfaa      	itet	ge
 800b6e2:	2300      	movge	r3, #0
 800b6e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b6e8:	f8c8 3000 	strge.w	r3, [r8]
 800b6ec:	4b9a      	ldr	r3, [pc, #616]	; (800b958 <_dtoa_r+0x2d8>)
 800b6ee:	bfbc      	itt	lt
 800b6f0:	2201      	movlt	r2, #1
 800b6f2:	f8c8 2000 	strlt.w	r2, [r8]
 800b6f6:	ea33 030b 	bics.w	r3, r3, fp
 800b6fa:	d11b      	bne.n	800b734 <_dtoa_r+0xb4>
 800b6fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6fe:	f242 730f 	movw	r3, #9999	; 0x270f
 800b702:	6013      	str	r3, [r2, #0]
 800b704:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b708:	4333      	orrs	r3, r6
 800b70a:	f000 8592 	beq.w	800c232 <_dtoa_r+0xbb2>
 800b70e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b710:	b963      	cbnz	r3, 800b72c <_dtoa_r+0xac>
 800b712:	4b92      	ldr	r3, [pc, #584]	; (800b95c <_dtoa_r+0x2dc>)
 800b714:	e022      	b.n	800b75c <_dtoa_r+0xdc>
 800b716:	4b92      	ldr	r3, [pc, #584]	; (800b960 <_dtoa_r+0x2e0>)
 800b718:	9301      	str	r3, [sp, #4]
 800b71a:	3308      	adds	r3, #8
 800b71c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b71e:	6013      	str	r3, [r2, #0]
 800b720:	9801      	ldr	r0, [sp, #4]
 800b722:	b013      	add	sp, #76	; 0x4c
 800b724:	ecbd 8b04 	vpop	{d8-d9}
 800b728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b72c:	4b8b      	ldr	r3, [pc, #556]	; (800b95c <_dtoa_r+0x2dc>)
 800b72e:	9301      	str	r3, [sp, #4]
 800b730:	3303      	adds	r3, #3
 800b732:	e7f3      	b.n	800b71c <_dtoa_r+0x9c>
 800b734:	2200      	movs	r2, #0
 800b736:	2300      	movs	r3, #0
 800b738:	4650      	mov	r0, sl
 800b73a:	4659      	mov	r1, fp
 800b73c:	f7f5 f9cc 	bl	8000ad8 <__aeabi_dcmpeq>
 800b740:	ec4b ab19 	vmov	d9, sl, fp
 800b744:	4680      	mov	r8, r0
 800b746:	b158      	cbz	r0, 800b760 <_dtoa_r+0xe0>
 800b748:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b74a:	2301      	movs	r3, #1
 800b74c:	6013      	str	r3, [r2, #0]
 800b74e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b750:	2b00      	cmp	r3, #0
 800b752:	f000 856b 	beq.w	800c22c <_dtoa_r+0xbac>
 800b756:	4883      	ldr	r0, [pc, #524]	; (800b964 <_dtoa_r+0x2e4>)
 800b758:	6018      	str	r0, [r3, #0]
 800b75a:	1e43      	subs	r3, r0, #1
 800b75c:	9301      	str	r3, [sp, #4]
 800b75e:	e7df      	b.n	800b720 <_dtoa_r+0xa0>
 800b760:	ec4b ab10 	vmov	d0, sl, fp
 800b764:	aa10      	add	r2, sp, #64	; 0x40
 800b766:	a911      	add	r1, sp, #68	; 0x44
 800b768:	4620      	mov	r0, r4
 800b76a:	f001 f8ab 	bl	800c8c4 <__d2b>
 800b76e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b772:	ee08 0a10 	vmov	s16, r0
 800b776:	2d00      	cmp	r5, #0
 800b778:	f000 8084 	beq.w	800b884 <_dtoa_r+0x204>
 800b77c:	ee19 3a90 	vmov	r3, s19
 800b780:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b784:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b788:	4656      	mov	r6, sl
 800b78a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b78e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b792:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b796:	4b74      	ldr	r3, [pc, #464]	; (800b968 <_dtoa_r+0x2e8>)
 800b798:	2200      	movs	r2, #0
 800b79a:	4630      	mov	r0, r6
 800b79c:	4639      	mov	r1, r7
 800b79e:	f7f4 fd7b 	bl	8000298 <__aeabi_dsub>
 800b7a2:	a365      	add	r3, pc, #404	; (adr r3, 800b938 <_dtoa_r+0x2b8>)
 800b7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a8:	f7f4 ff2e 	bl	8000608 <__aeabi_dmul>
 800b7ac:	a364      	add	r3, pc, #400	; (adr r3, 800b940 <_dtoa_r+0x2c0>)
 800b7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b2:	f7f4 fd73 	bl	800029c <__adddf3>
 800b7b6:	4606      	mov	r6, r0
 800b7b8:	4628      	mov	r0, r5
 800b7ba:	460f      	mov	r7, r1
 800b7bc:	f7f4 feba 	bl	8000534 <__aeabi_i2d>
 800b7c0:	a361      	add	r3, pc, #388	; (adr r3, 800b948 <_dtoa_r+0x2c8>)
 800b7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c6:	f7f4 ff1f 	bl	8000608 <__aeabi_dmul>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	4630      	mov	r0, r6
 800b7d0:	4639      	mov	r1, r7
 800b7d2:	f7f4 fd63 	bl	800029c <__adddf3>
 800b7d6:	4606      	mov	r6, r0
 800b7d8:	460f      	mov	r7, r1
 800b7da:	f7f5 f9c5 	bl	8000b68 <__aeabi_d2iz>
 800b7de:	2200      	movs	r2, #0
 800b7e0:	9000      	str	r0, [sp, #0]
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	4630      	mov	r0, r6
 800b7e6:	4639      	mov	r1, r7
 800b7e8:	f7f5 f980 	bl	8000aec <__aeabi_dcmplt>
 800b7ec:	b150      	cbz	r0, 800b804 <_dtoa_r+0x184>
 800b7ee:	9800      	ldr	r0, [sp, #0]
 800b7f0:	f7f4 fea0 	bl	8000534 <__aeabi_i2d>
 800b7f4:	4632      	mov	r2, r6
 800b7f6:	463b      	mov	r3, r7
 800b7f8:	f7f5 f96e 	bl	8000ad8 <__aeabi_dcmpeq>
 800b7fc:	b910      	cbnz	r0, 800b804 <_dtoa_r+0x184>
 800b7fe:	9b00      	ldr	r3, [sp, #0]
 800b800:	3b01      	subs	r3, #1
 800b802:	9300      	str	r3, [sp, #0]
 800b804:	9b00      	ldr	r3, [sp, #0]
 800b806:	2b16      	cmp	r3, #22
 800b808:	d85a      	bhi.n	800b8c0 <_dtoa_r+0x240>
 800b80a:	9a00      	ldr	r2, [sp, #0]
 800b80c:	4b57      	ldr	r3, [pc, #348]	; (800b96c <_dtoa_r+0x2ec>)
 800b80e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b816:	ec51 0b19 	vmov	r0, r1, d9
 800b81a:	f7f5 f967 	bl	8000aec <__aeabi_dcmplt>
 800b81e:	2800      	cmp	r0, #0
 800b820:	d050      	beq.n	800b8c4 <_dtoa_r+0x244>
 800b822:	9b00      	ldr	r3, [sp, #0]
 800b824:	3b01      	subs	r3, #1
 800b826:	9300      	str	r3, [sp, #0]
 800b828:	2300      	movs	r3, #0
 800b82a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b82c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b82e:	1b5d      	subs	r5, r3, r5
 800b830:	1e6b      	subs	r3, r5, #1
 800b832:	9305      	str	r3, [sp, #20]
 800b834:	bf45      	ittet	mi
 800b836:	f1c5 0301 	rsbmi	r3, r5, #1
 800b83a:	9304      	strmi	r3, [sp, #16]
 800b83c:	2300      	movpl	r3, #0
 800b83e:	2300      	movmi	r3, #0
 800b840:	bf4c      	ite	mi
 800b842:	9305      	strmi	r3, [sp, #20]
 800b844:	9304      	strpl	r3, [sp, #16]
 800b846:	9b00      	ldr	r3, [sp, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	db3d      	blt.n	800b8c8 <_dtoa_r+0x248>
 800b84c:	9b05      	ldr	r3, [sp, #20]
 800b84e:	9a00      	ldr	r2, [sp, #0]
 800b850:	920a      	str	r2, [sp, #40]	; 0x28
 800b852:	4413      	add	r3, r2
 800b854:	9305      	str	r3, [sp, #20]
 800b856:	2300      	movs	r3, #0
 800b858:	9307      	str	r3, [sp, #28]
 800b85a:	9b06      	ldr	r3, [sp, #24]
 800b85c:	2b09      	cmp	r3, #9
 800b85e:	f200 8089 	bhi.w	800b974 <_dtoa_r+0x2f4>
 800b862:	2b05      	cmp	r3, #5
 800b864:	bfc4      	itt	gt
 800b866:	3b04      	subgt	r3, #4
 800b868:	9306      	strgt	r3, [sp, #24]
 800b86a:	9b06      	ldr	r3, [sp, #24]
 800b86c:	f1a3 0302 	sub.w	r3, r3, #2
 800b870:	bfcc      	ite	gt
 800b872:	2500      	movgt	r5, #0
 800b874:	2501      	movle	r5, #1
 800b876:	2b03      	cmp	r3, #3
 800b878:	f200 8087 	bhi.w	800b98a <_dtoa_r+0x30a>
 800b87c:	e8df f003 	tbb	[pc, r3]
 800b880:	59383a2d 	.word	0x59383a2d
 800b884:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b888:	441d      	add	r5, r3
 800b88a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b88e:	2b20      	cmp	r3, #32
 800b890:	bfc1      	itttt	gt
 800b892:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b896:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b89a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b89e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b8a2:	bfda      	itte	le
 800b8a4:	f1c3 0320 	rsble	r3, r3, #32
 800b8a8:	fa06 f003 	lslle.w	r0, r6, r3
 800b8ac:	4318      	orrgt	r0, r3
 800b8ae:	f7f4 fe31 	bl	8000514 <__aeabi_ui2d>
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	4606      	mov	r6, r0
 800b8b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b8ba:	3d01      	subs	r5, #1
 800b8bc:	930e      	str	r3, [sp, #56]	; 0x38
 800b8be:	e76a      	b.n	800b796 <_dtoa_r+0x116>
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e7b2      	b.n	800b82a <_dtoa_r+0x1aa>
 800b8c4:	900b      	str	r0, [sp, #44]	; 0x2c
 800b8c6:	e7b1      	b.n	800b82c <_dtoa_r+0x1ac>
 800b8c8:	9b04      	ldr	r3, [sp, #16]
 800b8ca:	9a00      	ldr	r2, [sp, #0]
 800b8cc:	1a9b      	subs	r3, r3, r2
 800b8ce:	9304      	str	r3, [sp, #16]
 800b8d0:	4253      	negs	r3, r2
 800b8d2:	9307      	str	r3, [sp, #28]
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	930a      	str	r3, [sp, #40]	; 0x28
 800b8d8:	e7bf      	b.n	800b85a <_dtoa_r+0x1da>
 800b8da:	2300      	movs	r3, #0
 800b8dc:	9308      	str	r3, [sp, #32]
 800b8de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	dc55      	bgt.n	800b990 <_dtoa_r+0x310>
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	9209      	str	r2, [sp, #36]	; 0x24
 800b8ee:	e00c      	b.n	800b90a <_dtoa_r+0x28a>
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	e7f3      	b.n	800b8dc <_dtoa_r+0x25c>
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8f8:	9308      	str	r3, [sp, #32]
 800b8fa:	9b00      	ldr	r3, [sp, #0]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	9302      	str	r3, [sp, #8]
 800b900:	3301      	adds	r3, #1
 800b902:	2b01      	cmp	r3, #1
 800b904:	9303      	str	r3, [sp, #12]
 800b906:	bfb8      	it	lt
 800b908:	2301      	movlt	r3, #1
 800b90a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b90c:	2200      	movs	r2, #0
 800b90e:	6042      	str	r2, [r0, #4]
 800b910:	2204      	movs	r2, #4
 800b912:	f102 0614 	add.w	r6, r2, #20
 800b916:	429e      	cmp	r6, r3
 800b918:	6841      	ldr	r1, [r0, #4]
 800b91a:	d93d      	bls.n	800b998 <_dtoa_r+0x318>
 800b91c:	4620      	mov	r0, r4
 800b91e:	f000 fca9 	bl	800c274 <_Balloc>
 800b922:	9001      	str	r0, [sp, #4]
 800b924:	2800      	cmp	r0, #0
 800b926:	d13b      	bne.n	800b9a0 <_dtoa_r+0x320>
 800b928:	4b11      	ldr	r3, [pc, #68]	; (800b970 <_dtoa_r+0x2f0>)
 800b92a:	4602      	mov	r2, r0
 800b92c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b930:	e6c0      	b.n	800b6b4 <_dtoa_r+0x34>
 800b932:	2301      	movs	r3, #1
 800b934:	e7df      	b.n	800b8f6 <_dtoa_r+0x276>
 800b936:	bf00      	nop
 800b938:	636f4361 	.word	0x636f4361
 800b93c:	3fd287a7 	.word	0x3fd287a7
 800b940:	8b60c8b3 	.word	0x8b60c8b3
 800b944:	3fc68a28 	.word	0x3fc68a28
 800b948:	509f79fb 	.word	0x509f79fb
 800b94c:	3fd34413 	.word	0x3fd34413
 800b950:	0800d8e1 	.word	0x0800d8e1
 800b954:	0800d8f8 	.word	0x0800d8f8
 800b958:	7ff00000 	.word	0x7ff00000
 800b95c:	0800d8dd 	.word	0x0800d8dd
 800b960:	0800d8d4 	.word	0x0800d8d4
 800b964:	0800d8b1 	.word	0x0800d8b1
 800b968:	3ff80000 	.word	0x3ff80000
 800b96c:	0800d9e8 	.word	0x0800d9e8
 800b970:	0800d953 	.word	0x0800d953
 800b974:	2501      	movs	r5, #1
 800b976:	2300      	movs	r3, #0
 800b978:	9306      	str	r3, [sp, #24]
 800b97a:	9508      	str	r5, [sp, #32]
 800b97c:	f04f 33ff 	mov.w	r3, #4294967295
 800b980:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b984:	2200      	movs	r2, #0
 800b986:	2312      	movs	r3, #18
 800b988:	e7b0      	b.n	800b8ec <_dtoa_r+0x26c>
 800b98a:	2301      	movs	r3, #1
 800b98c:	9308      	str	r3, [sp, #32]
 800b98e:	e7f5      	b.n	800b97c <_dtoa_r+0x2fc>
 800b990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b992:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b996:	e7b8      	b.n	800b90a <_dtoa_r+0x28a>
 800b998:	3101      	adds	r1, #1
 800b99a:	6041      	str	r1, [r0, #4]
 800b99c:	0052      	lsls	r2, r2, #1
 800b99e:	e7b8      	b.n	800b912 <_dtoa_r+0x292>
 800b9a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9a2:	9a01      	ldr	r2, [sp, #4]
 800b9a4:	601a      	str	r2, [r3, #0]
 800b9a6:	9b03      	ldr	r3, [sp, #12]
 800b9a8:	2b0e      	cmp	r3, #14
 800b9aa:	f200 809d 	bhi.w	800bae8 <_dtoa_r+0x468>
 800b9ae:	2d00      	cmp	r5, #0
 800b9b0:	f000 809a 	beq.w	800bae8 <_dtoa_r+0x468>
 800b9b4:	9b00      	ldr	r3, [sp, #0]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	dd32      	ble.n	800ba20 <_dtoa_r+0x3a0>
 800b9ba:	4ab7      	ldr	r2, [pc, #732]	; (800bc98 <_dtoa_r+0x618>)
 800b9bc:	f003 030f 	and.w	r3, r3, #15
 800b9c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b9c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b9c8:	9b00      	ldr	r3, [sp, #0]
 800b9ca:	05d8      	lsls	r0, r3, #23
 800b9cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b9d0:	d516      	bpl.n	800ba00 <_dtoa_r+0x380>
 800b9d2:	4bb2      	ldr	r3, [pc, #712]	; (800bc9c <_dtoa_r+0x61c>)
 800b9d4:	ec51 0b19 	vmov	r0, r1, d9
 800b9d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b9dc:	f7f4 ff3e 	bl	800085c <__aeabi_ddiv>
 800b9e0:	f007 070f 	and.w	r7, r7, #15
 800b9e4:	4682      	mov	sl, r0
 800b9e6:	468b      	mov	fp, r1
 800b9e8:	2503      	movs	r5, #3
 800b9ea:	4eac      	ldr	r6, [pc, #688]	; (800bc9c <_dtoa_r+0x61c>)
 800b9ec:	b957      	cbnz	r7, 800ba04 <_dtoa_r+0x384>
 800b9ee:	4642      	mov	r2, r8
 800b9f0:	464b      	mov	r3, r9
 800b9f2:	4650      	mov	r0, sl
 800b9f4:	4659      	mov	r1, fp
 800b9f6:	f7f4 ff31 	bl	800085c <__aeabi_ddiv>
 800b9fa:	4682      	mov	sl, r0
 800b9fc:	468b      	mov	fp, r1
 800b9fe:	e028      	b.n	800ba52 <_dtoa_r+0x3d2>
 800ba00:	2502      	movs	r5, #2
 800ba02:	e7f2      	b.n	800b9ea <_dtoa_r+0x36a>
 800ba04:	07f9      	lsls	r1, r7, #31
 800ba06:	d508      	bpl.n	800ba1a <_dtoa_r+0x39a>
 800ba08:	4640      	mov	r0, r8
 800ba0a:	4649      	mov	r1, r9
 800ba0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba10:	f7f4 fdfa 	bl	8000608 <__aeabi_dmul>
 800ba14:	3501      	adds	r5, #1
 800ba16:	4680      	mov	r8, r0
 800ba18:	4689      	mov	r9, r1
 800ba1a:	107f      	asrs	r7, r7, #1
 800ba1c:	3608      	adds	r6, #8
 800ba1e:	e7e5      	b.n	800b9ec <_dtoa_r+0x36c>
 800ba20:	f000 809b 	beq.w	800bb5a <_dtoa_r+0x4da>
 800ba24:	9b00      	ldr	r3, [sp, #0]
 800ba26:	4f9d      	ldr	r7, [pc, #628]	; (800bc9c <_dtoa_r+0x61c>)
 800ba28:	425e      	negs	r6, r3
 800ba2a:	4b9b      	ldr	r3, [pc, #620]	; (800bc98 <_dtoa_r+0x618>)
 800ba2c:	f006 020f 	and.w	r2, r6, #15
 800ba30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba38:	ec51 0b19 	vmov	r0, r1, d9
 800ba3c:	f7f4 fde4 	bl	8000608 <__aeabi_dmul>
 800ba40:	1136      	asrs	r6, r6, #4
 800ba42:	4682      	mov	sl, r0
 800ba44:	468b      	mov	fp, r1
 800ba46:	2300      	movs	r3, #0
 800ba48:	2502      	movs	r5, #2
 800ba4a:	2e00      	cmp	r6, #0
 800ba4c:	d17a      	bne.n	800bb44 <_dtoa_r+0x4c4>
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d1d3      	bne.n	800b9fa <_dtoa_r+0x37a>
 800ba52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	f000 8082 	beq.w	800bb5e <_dtoa_r+0x4de>
 800ba5a:	4b91      	ldr	r3, [pc, #580]	; (800bca0 <_dtoa_r+0x620>)
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	4650      	mov	r0, sl
 800ba60:	4659      	mov	r1, fp
 800ba62:	f7f5 f843 	bl	8000aec <__aeabi_dcmplt>
 800ba66:	2800      	cmp	r0, #0
 800ba68:	d079      	beq.n	800bb5e <_dtoa_r+0x4de>
 800ba6a:	9b03      	ldr	r3, [sp, #12]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d076      	beq.n	800bb5e <_dtoa_r+0x4de>
 800ba70:	9b02      	ldr	r3, [sp, #8]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	dd36      	ble.n	800bae4 <_dtoa_r+0x464>
 800ba76:	9b00      	ldr	r3, [sp, #0]
 800ba78:	4650      	mov	r0, sl
 800ba7a:	4659      	mov	r1, fp
 800ba7c:	1e5f      	subs	r7, r3, #1
 800ba7e:	2200      	movs	r2, #0
 800ba80:	4b88      	ldr	r3, [pc, #544]	; (800bca4 <_dtoa_r+0x624>)
 800ba82:	f7f4 fdc1 	bl	8000608 <__aeabi_dmul>
 800ba86:	9e02      	ldr	r6, [sp, #8]
 800ba88:	4682      	mov	sl, r0
 800ba8a:	468b      	mov	fp, r1
 800ba8c:	3501      	adds	r5, #1
 800ba8e:	4628      	mov	r0, r5
 800ba90:	f7f4 fd50 	bl	8000534 <__aeabi_i2d>
 800ba94:	4652      	mov	r2, sl
 800ba96:	465b      	mov	r3, fp
 800ba98:	f7f4 fdb6 	bl	8000608 <__aeabi_dmul>
 800ba9c:	4b82      	ldr	r3, [pc, #520]	; (800bca8 <_dtoa_r+0x628>)
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f7f4 fbfc 	bl	800029c <__adddf3>
 800baa4:	46d0      	mov	r8, sl
 800baa6:	46d9      	mov	r9, fp
 800baa8:	4682      	mov	sl, r0
 800baaa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800baae:	2e00      	cmp	r6, #0
 800bab0:	d158      	bne.n	800bb64 <_dtoa_r+0x4e4>
 800bab2:	4b7e      	ldr	r3, [pc, #504]	; (800bcac <_dtoa_r+0x62c>)
 800bab4:	2200      	movs	r2, #0
 800bab6:	4640      	mov	r0, r8
 800bab8:	4649      	mov	r1, r9
 800baba:	f7f4 fbed 	bl	8000298 <__aeabi_dsub>
 800babe:	4652      	mov	r2, sl
 800bac0:	465b      	mov	r3, fp
 800bac2:	4680      	mov	r8, r0
 800bac4:	4689      	mov	r9, r1
 800bac6:	f7f5 f82f 	bl	8000b28 <__aeabi_dcmpgt>
 800baca:	2800      	cmp	r0, #0
 800bacc:	f040 8295 	bne.w	800bffa <_dtoa_r+0x97a>
 800bad0:	4652      	mov	r2, sl
 800bad2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bad6:	4640      	mov	r0, r8
 800bad8:	4649      	mov	r1, r9
 800bada:	f7f5 f807 	bl	8000aec <__aeabi_dcmplt>
 800bade:	2800      	cmp	r0, #0
 800bae0:	f040 8289 	bne.w	800bff6 <_dtoa_r+0x976>
 800bae4:	ec5b ab19 	vmov	sl, fp, d9
 800bae8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800baea:	2b00      	cmp	r3, #0
 800baec:	f2c0 8148 	blt.w	800bd80 <_dtoa_r+0x700>
 800baf0:	9a00      	ldr	r2, [sp, #0]
 800baf2:	2a0e      	cmp	r2, #14
 800baf4:	f300 8144 	bgt.w	800bd80 <_dtoa_r+0x700>
 800baf8:	4b67      	ldr	r3, [pc, #412]	; (800bc98 <_dtoa_r+0x618>)
 800bafa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bafe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	f280 80d5 	bge.w	800bcb4 <_dtoa_r+0x634>
 800bb0a:	9b03      	ldr	r3, [sp, #12]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	f300 80d1 	bgt.w	800bcb4 <_dtoa_r+0x634>
 800bb12:	f040 826f 	bne.w	800bff4 <_dtoa_r+0x974>
 800bb16:	4b65      	ldr	r3, [pc, #404]	; (800bcac <_dtoa_r+0x62c>)
 800bb18:	2200      	movs	r2, #0
 800bb1a:	4640      	mov	r0, r8
 800bb1c:	4649      	mov	r1, r9
 800bb1e:	f7f4 fd73 	bl	8000608 <__aeabi_dmul>
 800bb22:	4652      	mov	r2, sl
 800bb24:	465b      	mov	r3, fp
 800bb26:	f7f4 fff5 	bl	8000b14 <__aeabi_dcmpge>
 800bb2a:	9e03      	ldr	r6, [sp, #12]
 800bb2c:	4637      	mov	r7, r6
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	f040 8245 	bne.w	800bfbe <_dtoa_r+0x93e>
 800bb34:	9d01      	ldr	r5, [sp, #4]
 800bb36:	2331      	movs	r3, #49	; 0x31
 800bb38:	f805 3b01 	strb.w	r3, [r5], #1
 800bb3c:	9b00      	ldr	r3, [sp, #0]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	9300      	str	r3, [sp, #0]
 800bb42:	e240      	b.n	800bfc6 <_dtoa_r+0x946>
 800bb44:	07f2      	lsls	r2, r6, #31
 800bb46:	d505      	bpl.n	800bb54 <_dtoa_r+0x4d4>
 800bb48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb4c:	f7f4 fd5c 	bl	8000608 <__aeabi_dmul>
 800bb50:	3501      	adds	r5, #1
 800bb52:	2301      	movs	r3, #1
 800bb54:	1076      	asrs	r6, r6, #1
 800bb56:	3708      	adds	r7, #8
 800bb58:	e777      	b.n	800ba4a <_dtoa_r+0x3ca>
 800bb5a:	2502      	movs	r5, #2
 800bb5c:	e779      	b.n	800ba52 <_dtoa_r+0x3d2>
 800bb5e:	9f00      	ldr	r7, [sp, #0]
 800bb60:	9e03      	ldr	r6, [sp, #12]
 800bb62:	e794      	b.n	800ba8e <_dtoa_r+0x40e>
 800bb64:	9901      	ldr	r1, [sp, #4]
 800bb66:	4b4c      	ldr	r3, [pc, #304]	; (800bc98 <_dtoa_r+0x618>)
 800bb68:	4431      	add	r1, r6
 800bb6a:	910d      	str	r1, [sp, #52]	; 0x34
 800bb6c:	9908      	ldr	r1, [sp, #32]
 800bb6e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bb72:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bb76:	2900      	cmp	r1, #0
 800bb78:	d043      	beq.n	800bc02 <_dtoa_r+0x582>
 800bb7a:	494d      	ldr	r1, [pc, #308]	; (800bcb0 <_dtoa_r+0x630>)
 800bb7c:	2000      	movs	r0, #0
 800bb7e:	f7f4 fe6d 	bl	800085c <__aeabi_ddiv>
 800bb82:	4652      	mov	r2, sl
 800bb84:	465b      	mov	r3, fp
 800bb86:	f7f4 fb87 	bl	8000298 <__aeabi_dsub>
 800bb8a:	9d01      	ldr	r5, [sp, #4]
 800bb8c:	4682      	mov	sl, r0
 800bb8e:	468b      	mov	fp, r1
 800bb90:	4649      	mov	r1, r9
 800bb92:	4640      	mov	r0, r8
 800bb94:	f7f4 ffe8 	bl	8000b68 <__aeabi_d2iz>
 800bb98:	4606      	mov	r6, r0
 800bb9a:	f7f4 fccb 	bl	8000534 <__aeabi_i2d>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	460b      	mov	r3, r1
 800bba2:	4640      	mov	r0, r8
 800bba4:	4649      	mov	r1, r9
 800bba6:	f7f4 fb77 	bl	8000298 <__aeabi_dsub>
 800bbaa:	3630      	adds	r6, #48	; 0x30
 800bbac:	f805 6b01 	strb.w	r6, [r5], #1
 800bbb0:	4652      	mov	r2, sl
 800bbb2:	465b      	mov	r3, fp
 800bbb4:	4680      	mov	r8, r0
 800bbb6:	4689      	mov	r9, r1
 800bbb8:	f7f4 ff98 	bl	8000aec <__aeabi_dcmplt>
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	d163      	bne.n	800bc88 <_dtoa_r+0x608>
 800bbc0:	4642      	mov	r2, r8
 800bbc2:	464b      	mov	r3, r9
 800bbc4:	4936      	ldr	r1, [pc, #216]	; (800bca0 <_dtoa_r+0x620>)
 800bbc6:	2000      	movs	r0, #0
 800bbc8:	f7f4 fb66 	bl	8000298 <__aeabi_dsub>
 800bbcc:	4652      	mov	r2, sl
 800bbce:	465b      	mov	r3, fp
 800bbd0:	f7f4 ff8c 	bl	8000aec <__aeabi_dcmplt>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	f040 80b5 	bne.w	800bd44 <_dtoa_r+0x6c4>
 800bbda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbdc:	429d      	cmp	r5, r3
 800bbde:	d081      	beq.n	800bae4 <_dtoa_r+0x464>
 800bbe0:	4b30      	ldr	r3, [pc, #192]	; (800bca4 <_dtoa_r+0x624>)
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	4650      	mov	r0, sl
 800bbe6:	4659      	mov	r1, fp
 800bbe8:	f7f4 fd0e 	bl	8000608 <__aeabi_dmul>
 800bbec:	4b2d      	ldr	r3, [pc, #180]	; (800bca4 <_dtoa_r+0x624>)
 800bbee:	4682      	mov	sl, r0
 800bbf0:	468b      	mov	fp, r1
 800bbf2:	4640      	mov	r0, r8
 800bbf4:	4649      	mov	r1, r9
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	f7f4 fd06 	bl	8000608 <__aeabi_dmul>
 800bbfc:	4680      	mov	r8, r0
 800bbfe:	4689      	mov	r9, r1
 800bc00:	e7c6      	b.n	800bb90 <_dtoa_r+0x510>
 800bc02:	4650      	mov	r0, sl
 800bc04:	4659      	mov	r1, fp
 800bc06:	f7f4 fcff 	bl	8000608 <__aeabi_dmul>
 800bc0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc0c:	9d01      	ldr	r5, [sp, #4]
 800bc0e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc10:	4682      	mov	sl, r0
 800bc12:	468b      	mov	fp, r1
 800bc14:	4649      	mov	r1, r9
 800bc16:	4640      	mov	r0, r8
 800bc18:	f7f4 ffa6 	bl	8000b68 <__aeabi_d2iz>
 800bc1c:	4606      	mov	r6, r0
 800bc1e:	f7f4 fc89 	bl	8000534 <__aeabi_i2d>
 800bc22:	3630      	adds	r6, #48	; 0x30
 800bc24:	4602      	mov	r2, r0
 800bc26:	460b      	mov	r3, r1
 800bc28:	4640      	mov	r0, r8
 800bc2a:	4649      	mov	r1, r9
 800bc2c:	f7f4 fb34 	bl	8000298 <__aeabi_dsub>
 800bc30:	f805 6b01 	strb.w	r6, [r5], #1
 800bc34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc36:	429d      	cmp	r5, r3
 800bc38:	4680      	mov	r8, r0
 800bc3a:	4689      	mov	r9, r1
 800bc3c:	f04f 0200 	mov.w	r2, #0
 800bc40:	d124      	bne.n	800bc8c <_dtoa_r+0x60c>
 800bc42:	4b1b      	ldr	r3, [pc, #108]	; (800bcb0 <_dtoa_r+0x630>)
 800bc44:	4650      	mov	r0, sl
 800bc46:	4659      	mov	r1, fp
 800bc48:	f7f4 fb28 	bl	800029c <__adddf3>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	460b      	mov	r3, r1
 800bc50:	4640      	mov	r0, r8
 800bc52:	4649      	mov	r1, r9
 800bc54:	f7f4 ff68 	bl	8000b28 <__aeabi_dcmpgt>
 800bc58:	2800      	cmp	r0, #0
 800bc5a:	d173      	bne.n	800bd44 <_dtoa_r+0x6c4>
 800bc5c:	4652      	mov	r2, sl
 800bc5e:	465b      	mov	r3, fp
 800bc60:	4913      	ldr	r1, [pc, #76]	; (800bcb0 <_dtoa_r+0x630>)
 800bc62:	2000      	movs	r0, #0
 800bc64:	f7f4 fb18 	bl	8000298 <__aeabi_dsub>
 800bc68:	4602      	mov	r2, r0
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	4640      	mov	r0, r8
 800bc6e:	4649      	mov	r1, r9
 800bc70:	f7f4 ff3c 	bl	8000aec <__aeabi_dcmplt>
 800bc74:	2800      	cmp	r0, #0
 800bc76:	f43f af35 	beq.w	800bae4 <_dtoa_r+0x464>
 800bc7a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bc7c:	1e6b      	subs	r3, r5, #1
 800bc7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bc84:	2b30      	cmp	r3, #48	; 0x30
 800bc86:	d0f8      	beq.n	800bc7a <_dtoa_r+0x5fa>
 800bc88:	9700      	str	r7, [sp, #0]
 800bc8a:	e049      	b.n	800bd20 <_dtoa_r+0x6a0>
 800bc8c:	4b05      	ldr	r3, [pc, #20]	; (800bca4 <_dtoa_r+0x624>)
 800bc8e:	f7f4 fcbb 	bl	8000608 <__aeabi_dmul>
 800bc92:	4680      	mov	r8, r0
 800bc94:	4689      	mov	r9, r1
 800bc96:	e7bd      	b.n	800bc14 <_dtoa_r+0x594>
 800bc98:	0800d9e8 	.word	0x0800d9e8
 800bc9c:	0800d9c0 	.word	0x0800d9c0
 800bca0:	3ff00000 	.word	0x3ff00000
 800bca4:	40240000 	.word	0x40240000
 800bca8:	401c0000 	.word	0x401c0000
 800bcac:	40140000 	.word	0x40140000
 800bcb0:	3fe00000 	.word	0x3fe00000
 800bcb4:	9d01      	ldr	r5, [sp, #4]
 800bcb6:	4656      	mov	r6, sl
 800bcb8:	465f      	mov	r7, fp
 800bcba:	4642      	mov	r2, r8
 800bcbc:	464b      	mov	r3, r9
 800bcbe:	4630      	mov	r0, r6
 800bcc0:	4639      	mov	r1, r7
 800bcc2:	f7f4 fdcb 	bl	800085c <__aeabi_ddiv>
 800bcc6:	f7f4 ff4f 	bl	8000b68 <__aeabi_d2iz>
 800bcca:	4682      	mov	sl, r0
 800bccc:	f7f4 fc32 	bl	8000534 <__aeabi_i2d>
 800bcd0:	4642      	mov	r2, r8
 800bcd2:	464b      	mov	r3, r9
 800bcd4:	f7f4 fc98 	bl	8000608 <__aeabi_dmul>
 800bcd8:	4602      	mov	r2, r0
 800bcda:	460b      	mov	r3, r1
 800bcdc:	4630      	mov	r0, r6
 800bcde:	4639      	mov	r1, r7
 800bce0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bce4:	f7f4 fad8 	bl	8000298 <__aeabi_dsub>
 800bce8:	f805 6b01 	strb.w	r6, [r5], #1
 800bcec:	9e01      	ldr	r6, [sp, #4]
 800bcee:	9f03      	ldr	r7, [sp, #12]
 800bcf0:	1bae      	subs	r6, r5, r6
 800bcf2:	42b7      	cmp	r7, r6
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	d135      	bne.n	800bd66 <_dtoa_r+0x6e6>
 800bcfa:	f7f4 facf 	bl	800029c <__adddf3>
 800bcfe:	4642      	mov	r2, r8
 800bd00:	464b      	mov	r3, r9
 800bd02:	4606      	mov	r6, r0
 800bd04:	460f      	mov	r7, r1
 800bd06:	f7f4 ff0f 	bl	8000b28 <__aeabi_dcmpgt>
 800bd0a:	b9d0      	cbnz	r0, 800bd42 <_dtoa_r+0x6c2>
 800bd0c:	4642      	mov	r2, r8
 800bd0e:	464b      	mov	r3, r9
 800bd10:	4630      	mov	r0, r6
 800bd12:	4639      	mov	r1, r7
 800bd14:	f7f4 fee0 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd18:	b110      	cbz	r0, 800bd20 <_dtoa_r+0x6a0>
 800bd1a:	f01a 0f01 	tst.w	sl, #1
 800bd1e:	d110      	bne.n	800bd42 <_dtoa_r+0x6c2>
 800bd20:	4620      	mov	r0, r4
 800bd22:	ee18 1a10 	vmov	r1, s16
 800bd26:	f000 fae5 	bl	800c2f4 <_Bfree>
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	9800      	ldr	r0, [sp, #0]
 800bd2e:	702b      	strb	r3, [r5, #0]
 800bd30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd32:	3001      	adds	r0, #1
 800bd34:	6018      	str	r0, [r3, #0]
 800bd36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	f43f acf1 	beq.w	800b720 <_dtoa_r+0xa0>
 800bd3e:	601d      	str	r5, [r3, #0]
 800bd40:	e4ee      	b.n	800b720 <_dtoa_r+0xa0>
 800bd42:	9f00      	ldr	r7, [sp, #0]
 800bd44:	462b      	mov	r3, r5
 800bd46:	461d      	mov	r5, r3
 800bd48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd4c:	2a39      	cmp	r2, #57	; 0x39
 800bd4e:	d106      	bne.n	800bd5e <_dtoa_r+0x6de>
 800bd50:	9a01      	ldr	r2, [sp, #4]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d1f7      	bne.n	800bd46 <_dtoa_r+0x6c6>
 800bd56:	9901      	ldr	r1, [sp, #4]
 800bd58:	2230      	movs	r2, #48	; 0x30
 800bd5a:	3701      	adds	r7, #1
 800bd5c:	700a      	strb	r2, [r1, #0]
 800bd5e:	781a      	ldrb	r2, [r3, #0]
 800bd60:	3201      	adds	r2, #1
 800bd62:	701a      	strb	r2, [r3, #0]
 800bd64:	e790      	b.n	800bc88 <_dtoa_r+0x608>
 800bd66:	4ba6      	ldr	r3, [pc, #664]	; (800c000 <_dtoa_r+0x980>)
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f7f4 fc4d 	bl	8000608 <__aeabi_dmul>
 800bd6e:	2200      	movs	r2, #0
 800bd70:	2300      	movs	r3, #0
 800bd72:	4606      	mov	r6, r0
 800bd74:	460f      	mov	r7, r1
 800bd76:	f7f4 feaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd7a:	2800      	cmp	r0, #0
 800bd7c:	d09d      	beq.n	800bcba <_dtoa_r+0x63a>
 800bd7e:	e7cf      	b.n	800bd20 <_dtoa_r+0x6a0>
 800bd80:	9a08      	ldr	r2, [sp, #32]
 800bd82:	2a00      	cmp	r2, #0
 800bd84:	f000 80d7 	beq.w	800bf36 <_dtoa_r+0x8b6>
 800bd88:	9a06      	ldr	r2, [sp, #24]
 800bd8a:	2a01      	cmp	r2, #1
 800bd8c:	f300 80ba 	bgt.w	800bf04 <_dtoa_r+0x884>
 800bd90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd92:	2a00      	cmp	r2, #0
 800bd94:	f000 80b2 	beq.w	800befc <_dtoa_r+0x87c>
 800bd98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bd9c:	9e07      	ldr	r6, [sp, #28]
 800bd9e:	9d04      	ldr	r5, [sp, #16]
 800bda0:	9a04      	ldr	r2, [sp, #16]
 800bda2:	441a      	add	r2, r3
 800bda4:	9204      	str	r2, [sp, #16]
 800bda6:	9a05      	ldr	r2, [sp, #20]
 800bda8:	2101      	movs	r1, #1
 800bdaa:	441a      	add	r2, r3
 800bdac:	4620      	mov	r0, r4
 800bdae:	9205      	str	r2, [sp, #20]
 800bdb0:	f000 fb58 	bl	800c464 <__i2b>
 800bdb4:	4607      	mov	r7, r0
 800bdb6:	2d00      	cmp	r5, #0
 800bdb8:	dd0c      	ble.n	800bdd4 <_dtoa_r+0x754>
 800bdba:	9b05      	ldr	r3, [sp, #20]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	dd09      	ble.n	800bdd4 <_dtoa_r+0x754>
 800bdc0:	42ab      	cmp	r3, r5
 800bdc2:	9a04      	ldr	r2, [sp, #16]
 800bdc4:	bfa8      	it	ge
 800bdc6:	462b      	movge	r3, r5
 800bdc8:	1ad2      	subs	r2, r2, r3
 800bdca:	9204      	str	r2, [sp, #16]
 800bdcc:	9a05      	ldr	r2, [sp, #20]
 800bdce:	1aed      	subs	r5, r5, r3
 800bdd0:	1ad3      	subs	r3, r2, r3
 800bdd2:	9305      	str	r3, [sp, #20]
 800bdd4:	9b07      	ldr	r3, [sp, #28]
 800bdd6:	b31b      	cbz	r3, 800be20 <_dtoa_r+0x7a0>
 800bdd8:	9b08      	ldr	r3, [sp, #32]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	f000 80af 	beq.w	800bf3e <_dtoa_r+0x8be>
 800bde0:	2e00      	cmp	r6, #0
 800bde2:	dd13      	ble.n	800be0c <_dtoa_r+0x78c>
 800bde4:	4639      	mov	r1, r7
 800bde6:	4632      	mov	r2, r6
 800bde8:	4620      	mov	r0, r4
 800bdea:	f000 fbfb 	bl	800c5e4 <__pow5mult>
 800bdee:	ee18 2a10 	vmov	r2, s16
 800bdf2:	4601      	mov	r1, r0
 800bdf4:	4607      	mov	r7, r0
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	f000 fb4a 	bl	800c490 <__multiply>
 800bdfc:	ee18 1a10 	vmov	r1, s16
 800be00:	4680      	mov	r8, r0
 800be02:	4620      	mov	r0, r4
 800be04:	f000 fa76 	bl	800c2f4 <_Bfree>
 800be08:	ee08 8a10 	vmov	s16, r8
 800be0c:	9b07      	ldr	r3, [sp, #28]
 800be0e:	1b9a      	subs	r2, r3, r6
 800be10:	d006      	beq.n	800be20 <_dtoa_r+0x7a0>
 800be12:	ee18 1a10 	vmov	r1, s16
 800be16:	4620      	mov	r0, r4
 800be18:	f000 fbe4 	bl	800c5e4 <__pow5mult>
 800be1c:	ee08 0a10 	vmov	s16, r0
 800be20:	2101      	movs	r1, #1
 800be22:	4620      	mov	r0, r4
 800be24:	f000 fb1e 	bl	800c464 <__i2b>
 800be28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	4606      	mov	r6, r0
 800be2e:	f340 8088 	ble.w	800bf42 <_dtoa_r+0x8c2>
 800be32:	461a      	mov	r2, r3
 800be34:	4601      	mov	r1, r0
 800be36:	4620      	mov	r0, r4
 800be38:	f000 fbd4 	bl	800c5e4 <__pow5mult>
 800be3c:	9b06      	ldr	r3, [sp, #24]
 800be3e:	2b01      	cmp	r3, #1
 800be40:	4606      	mov	r6, r0
 800be42:	f340 8081 	ble.w	800bf48 <_dtoa_r+0x8c8>
 800be46:	f04f 0800 	mov.w	r8, #0
 800be4a:	6933      	ldr	r3, [r6, #16]
 800be4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800be50:	6918      	ldr	r0, [r3, #16]
 800be52:	f000 fab7 	bl	800c3c4 <__hi0bits>
 800be56:	f1c0 0020 	rsb	r0, r0, #32
 800be5a:	9b05      	ldr	r3, [sp, #20]
 800be5c:	4418      	add	r0, r3
 800be5e:	f010 001f 	ands.w	r0, r0, #31
 800be62:	f000 8092 	beq.w	800bf8a <_dtoa_r+0x90a>
 800be66:	f1c0 0320 	rsb	r3, r0, #32
 800be6a:	2b04      	cmp	r3, #4
 800be6c:	f340 808a 	ble.w	800bf84 <_dtoa_r+0x904>
 800be70:	f1c0 001c 	rsb	r0, r0, #28
 800be74:	9b04      	ldr	r3, [sp, #16]
 800be76:	4403      	add	r3, r0
 800be78:	9304      	str	r3, [sp, #16]
 800be7a:	9b05      	ldr	r3, [sp, #20]
 800be7c:	4403      	add	r3, r0
 800be7e:	4405      	add	r5, r0
 800be80:	9305      	str	r3, [sp, #20]
 800be82:	9b04      	ldr	r3, [sp, #16]
 800be84:	2b00      	cmp	r3, #0
 800be86:	dd07      	ble.n	800be98 <_dtoa_r+0x818>
 800be88:	ee18 1a10 	vmov	r1, s16
 800be8c:	461a      	mov	r2, r3
 800be8e:	4620      	mov	r0, r4
 800be90:	f000 fc02 	bl	800c698 <__lshift>
 800be94:	ee08 0a10 	vmov	s16, r0
 800be98:	9b05      	ldr	r3, [sp, #20]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	dd05      	ble.n	800beaa <_dtoa_r+0x82a>
 800be9e:	4631      	mov	r1, r6
 800bea0:	461a      	mov	r2, r3
 800bea2:	4620      	mov	r0, r4
 800bea4:	f000 fbf8 	bl	800c698 <__lshift>
 800bea8:	4606      	mov	r6, r0
 800beaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800beac:	2b00      	cmp	r3, #0
 800beae:	d06e      	beq.n	800bf8e <_dtoa_r+0x90e>
 800beb0:	ee18 0a10 	vmov	r0, s16
 800beb4:	4631      	mov	r1, r6
 800beb6:	f000 fc5f 	bl	800c778 <__mcmp>
 800beba:	2800      	cmp	r0, #0
 800bebc:	da67      	bge.n	800bf8e <_dtoa_r+0x90e>
 800bebe:	9b00      	ldr	r3, [sp, #0]
 800bec0:	3b01      	subs	r3, #1
 800bec2:	ee18 1a10 	vmov	r1, s16
 800bec6:	9300      	str	r3, [sp, #0]
 800bec8:	220a      	movs	r2, #10
 800beca:	2300      	movs	r3, #0
 800becc:	4620      	mov	r0, r4
 800bece:	f000 fa33 	bl	800c338 <__multadd>
 800bed2:	9b08      	ldr	r3, [sp, #32]
 800bed4:	ee08 0a10 	vmov	s16, r0
 800bed8:	2b00      	cmp	r3, #0
 800beda:	f000 81b1 	beq.w	800c240 <_dtoa_r+0xbc0>
 800bede:	2300      	movs	r3, #0
 800bee0:	4639      	mov	r1, r7
 800bee2:	220a      	movs	r2, #10
 800bee4:	4620      	mov	r0, r4
 800bee6:	f000 fa27 	bl	800c338 <__multadd>
 800beea:	9b02      	ldr	r3, [sp, #8]
 800beec:	2b00      	cmp	r3, #0
 800beee:	4607      	mov	r7, r0
 800bef0:	f300 808e 	bgt.w	800c010 <_dtoa_r+0x990>
 800bef4:	9b06      	ldr	r3, [sp, #24]
 800bef6:	2b02      	cmp	r3, #2
 800bef8:	dc51      	bgt.n	800bf9e <_dtoa_r+0x91e>
 800befa:	e089      	b.n	800c010 <_dtoa_r+0x990>
 800befc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800befe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bf02:	e74b      	b.n	800bd9c <_dtoa_r+0x71c>
 800bf04:	9b03      	ldr	r3, [sp, #12]
 800bf06:	1e5e      	subs	r6, r3, #1
 800bf08:	9b07      	ldr	r3, [sp, #28]
 800bf0a:	42b3      	cmp	r3, r6
 800bf0c:	bfbf      	itttt	lt
 800bf0e:	9b07      	ldrlt	r3, [sp, #28]
 800bf10:	9607      	strlt	r6, [sp, #28]
 800bf12:	1af2      	sublt	r2, r6, r3
 800bf14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bf16:	bfb6      	itet	lt
 800bf18:	189b      	addlt	r3, r3, r2
 800bf1a:	1b9e      	subge	r6, r3, r6
 800bf1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bf1e:	9b03      	ldr	r3, [sp, #12]
 800bf20:	bfb8      	it	lt
 800bf22:	2600      	movlt	r6, #0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	bfb7      	itett	lt
 800bf28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bf2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bf30:	1a9d      	sublt	r5, r3, r2
 800bf32:	2300      	movlt	r3, #0
 800bf34:	e734      	b.n	800bda0 <_dtoa_r+0x720>
 800bf36:	9e07      	ldr	r6, [sp, #28]
 800bf38:	9d04      	ldr	r5, [sp, #16]
 800bf3a:	9f08      	ldr	r7, [sp, #32]
 800bf3c:	e73b      	b.n	800bdb6 <_dtoa_r+0x736>
 800bf3e:	9a07      	ldr	r2, [sp, #28]
 800bf40:	e767      	b.n	800be12 <_dtoa_r+0x792>
 800bf42:	9b06      	ldr	r3, [sp, #24]
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	dc18      	bgt.n	800bf7a <_dtoa_r+0x8fa>
 800bf48:	f1ba 0f00 	cmp.w	sl, #0
 800bf4c:	d115      	bne.n	800bf7a <_dtoa_r+0x8fa>
 800bf4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bf52:	b993      	cbnz	r3, 800bf7a <_dtoa_r+0x8fa>
 800bf54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bf58:	0d1b      	lsrs	r3, r3, #20
 800bf5a:	051b      	lsls	r3, r3, #20
 800bf5c:	b183      	cbz	r3, 800bf80 <_dtoa_r+0x900>
 800bf5e:	9b04      	ldr	r3, [sp, #16]
 800bf60:	3301      	adds	r3, #1
 800bf62:	9304      	str	r3, [sp, #16]
 800bf64:	9b05      	ldr	r3, [sp, #20]
 800bf66:	3301      	adds	r3, #1
 800bf68:	9305      	str	r3, [sp, #20]
 800bf6a:	f04f 0801 	mov.w	r8, #1
 800bf6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	f47f af6a 	bne.w	800be4a <_dtoa_r+0x7ca>
 800bf76:	2001      	movs	r0, #1
 800bf78:	e76f      	b.n	800be5a <_dtoa_r+0x7da>
 800bf7a:	f04f 0800 	mov.w	r8, #0
 800bf7e:	e7f6      	b.n	800bf6e <_dtoa_r+0x8ee>
 800bf80:	4698      	mov	r8, r3
 800bf82:	e7f4      	b.n	800bf6e <_dtoa_r+0x8ee>
 800bf84:	f43f af7d 	beq.w	800be82 <_dtoa_r+0x802>
 800bf88:	4618      	mov	r0, r3
 800bf8a:	301c      	adds	r0, #28
 800bf8c:	e772      	b.n	800be74 <_dtoa_r+0x7f4>
 800bf8e:	9b03      	ldr	r3, [sp, #12]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	dc37      	bgt.n	800c004 <_dtoa_r+0x984>
 800bf94:	9b06      	ldr	r3, [sp, #24]
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	dd34      	ble.n	800c004 <_dtoa_r+0x984>
 800bf9a:	9b03      	ldr	r3, [sp, #12]
 800bf9c:	9302      	str	r3, [sp, #8]
 800bf9e:	9b02      	ldr	r3, [sp, #8]
 800bfa0:	b96b      	cbnz	r3, 800bfbe <_dtoa_r+0x93e>
 800bfa2:	4631      	mov	r1, r6
 800bfa4:	2205      	movs	r2, #5
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	f000 f9c6 	bl	800c338 <__multadd>
 800bfac:	4601      	mov	r1, r0
 800bfae:	4606      	mov	r6, r0
 800bfb0:	ee18 0a10 	vmov	r0, s16
 800bfb4:	f000 fbe0 	bl	800c778 <__mcmp>
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	f73f adbb 	bgt.w	800bb34 <_dtoa_r+0x4b4>
 800bfbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfc0:	9d01      	ldr	r5, [sp, #4]
 800bfc2:	43db      	mvns	r3, r3
 800bfc4:	9300      	str	r3, [sp, #0]
 800bfc6:	f04f 0800 	mov.w	r8, #0
 800bfca:	4631      	mov	r1, r6
 800bfcc:	4620      	mov	r0, r4
 800bfce:	f000 f991 	bl	800c2f4 <_Bfree>
 800bfd2:	2f00      	cmp	r7, #0
 800bfd4:	f43f aea4 	beq.w	800bd20 <_dtoa_r+0x6a0>
 800bfd8:	f1b8 0f00 	cmp.w	r8, #0
 800bfdc:	d005      	beq.n	800bfea <_dtoa_r+0x96a>
 800bfde:	45b8      	cmp	r8, r7
 800bfe0:	d003      	beq.n	800bfea <_dtoa_r+0x96a>
 800bfe2:	4641      	mov	r1, r8
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	f000 f985 	bl	800c2f4 <_Bfree>
 800bfea:	4639      	mov	r1, r7
 800bfec:	4620      	mov	r0, r4
 800bfee:	f000 f981 	bl	800c2f4 <_Bfree>
 800bff2:	e695      	b.n	800bd20 <_dtoa_r+0x6a0>
 800bff4:	2600      	movs	r6, #0
 800bff6:	4637      	mov	r7, r6
 800bff8:	e7e1      	b.n	800bfbe <_dtoa_r+0x93e>
 800bffa:	9700      	str	r7, [sp, #0]
 800bffc:	4637      	mov	r7, r6
 800bffe:	e599      	b.n	800bb34 <_dtoa_r+0x4b4>
 800c000:	40240000 	.word	0x40240000
 800c004:	9b08      	ldr	r3, [sp, #32]
 800c006:	2b00      	cmp	r3, #0
 800c008:	f000 80ca 	beq.w	800c1a0 <_dtoa_r+0xb20>
 800c00c:	9b03      	ldr	r3, [sp, #12]
 800c00e:	9302      	str	r3, [sp, #8]
 800c010:	2d00      	cmp	r5, #0
 800c012:	dd05      	ble.n	800c020 <_dtoa_r+0x9a0>
 800c014:	4639      	mov	r1, r7
 800c016:	462a      	mov	r2, r5
 800c018:	4620      	mov	r0, r4
 800c01a:	f000 fb3d 	bl	800c698 <__lshift>
 800c01e:	4607      	mov	r7, r0
 800c020:	f1b8 0f00 	cmp.w	r8, #0
 800c024:	d05b      	beq.n	800c0de <_dtoa_r+0xa5e>
 800c026:	6879      	ldr	r1, [r7, #4]
 800c028:	4620      	mov	r0, r4
 800c02a:	f000 f923 	bl	800c274 <_Balloc>
 800c02e:	4605      	mov	r5, r0
 800c030:	b928      	cbnz	r0, 800c03e <_dtoa_r+0x9be>
 800c032:	4b87      	ldr	r3, [pc, #540]	; (800c250 <_dtoa_r+0xbd0>)
 800c034:	4602      	mov	r2, r0
 800c036:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c03a:	f7ff bb3b 	b.w	800b6b4 <_dtoa_r+0x34>
 800c03e:	693a      	ldr	r2, [r7, #16]
 800c040:	3202      	adds	r2, #2
 800c042:	0092      	lsls	r2, r2, #2
 800c044:	f107 010c 	add.w	r1, r7, #12
 800c048:	300c      	adds	r0, #12
 800c04a:	f7fe fe0d 	bl	800ac68 <memcpy>
 800c04e:	2201      	movs	r2, #1
 800c050:	4629      	mov	r1, r5
 800c052:	4620      	mov	r0, r4
 800c054:	f000 fb20 	bl	800c698 <__lshift>
 800c058:	9b01      	ldr	r3, [sp, #4]
 800c05a:	f103 0901 	add.w	r9, r3, #1
 800c05e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c062:	4413      	add	r3, r2
 800c064:	9305      	str	r3, [sp, #20]
 800c066:	f00a 0301 	and.w	r3, sl, #1
 800c06a:	46b8      	mov	r8, r7
 800c06c:	9304      	str	r3, [sp, #16]
 800c06e:	4607      	mov	r7, r0
 800c070:	4631      	mov	r1, r6
 800c072:	ee18 0a10 	vmov	r0, s16
 800c076:	f7ff fa77 	bl	800b568 <quorem>
 800c07a:	4641      	mov	r1, r8
 800c07c:	9002      	str	r0, [sp, #8]
 800c07e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c082:	ee18 0a10 	vmov	r0, s16
 800c086:	f000 fb77 	bl	800c778 <__mcmp>
 800c08a:	463a      	mov	r2, r7
 800c08c:	9003      	str	r0, [sp, #12]
 800c08e:	4631      	mov	r1, r6
 800c090:	4620      	mov	r0, r4
 800c092:	f000 fb8d 	bl	800c7b0 <__mdiff>
 800c096:	68c2      	ldr	r2, [r0, #12]
 800c098:	f109 3bff 	add.w	fp, r9, #4294967295
 800c09c:	4605      	mov	r5, r0
 800c09e:	bb02      	cbnz	r2, 800c0e2 <_dtoa_r+0xa62>
 800c0a0:	4601      	mov	r1, r0
 800c0a2:	ee18 0a10 	vmov	r0, s16
 800c0a6:	f000 fb67 	bl	800c778 <__mcmp>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	4629      	mov	r1, r5
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	9207      	str	r2, [sp, #28]
 800c0b2:	f000 f91f 	bl	800c2f4 <_Bfree>
 800c0b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c0ba:	ea43 0102 	orr.w	r1, r3, r2
 800c0be:	9b04      	ldr	r3, [sp, #16]
 800c0c0:	430b      	orrs	r3, r1
 800c0c2:	464d      	mov	r5, r9
 800c0c4:	d10f      	bne.n	800c0e6 <_dtoa_r+0xa66>
 800c0c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c0ca:	d02a      	beq.n	800c122 <_dtoa_r+0xaa2>
 800c0cc:	9b03      	ldr	r3, [sp, #12]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	dd02      	ble.n	800c0d8 <_dtoa_r+0xa58>
 800c0d2:	9b02      	ldr	r3, [sp, #8]
 800c0d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c0d8:	f88b a000 	strb.w	sl, [fp]
 800c0dc:	e775      	b.n	800bfca <_dtoa_r+0x94a>
 800c0de:	4638      	mov	r0, r7
 800c0e0:	e7ba      	b.n	800c058 <_dtoa_r+0x9d8>
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	e7e2      	b.n	800c0ac <_dtoa_r+0xa2c>
 800c0e6:	9b03      	ldr	r3, [sp, #12]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	db04      	blt.n	800c0f6 <_dtoa_r+0xa76>
 800c0ec:	9906      	ldr	r1, [sp, #24]
 800c0ee:	430b      	orrs	r3, r1
 800c0f0:	9904      	ldr	r1, [sp, #16]
 800c0f2:	430b      	orrs	r3, r1
 800c0f4:	d122      	bne.n	800c13c <_dtoa_r+0xabc>
 800c0f6:	2a00      	cmp	r2, #0
 800c0f8:	ddee      	ble.n	800c0d8 <_dtoa_r+0xa58>
 800c0fa:	ee18 1a10 	vmov	r1, s16
 800c0fe:	2201      	movs	r2, #1
 800c100:	4620      	mov	r0, r4
 800c102:	f000 fac9 	bl	800c698 <__lshift>
 800c106:	4631      	mov	r1, r6
 800c108:	ee08 0a10 	vmov	s16, r0
 800c10c:	f000 fb34 	bl	800c778 <__mcmp>
 800c110:	2800      	cmp	r0, #0
 800c112:	dc03      	bgt.n	800c11c <_dtoa_r+0xa9c>
 800c114:	d1e0      	bne.n	800c0d8 <_dtoa_r+0xa58>
 800c116:	f01a 0f01 	tst.w	sl, #1
 800c11a:	d0dd      	beq.n	800c0d8 <_dtoa_r+0xa58>
 800c11c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c120:	d1d7      	bne.n	800c0d2 <_dtoa_r+0xa52>
 800c122:	2339      	movs	r3, #57	; 0x39
 800c124:	f88b 3000 	strb.w	r3, [fp]
 800c128:	462b      	mov	r3, r5
 800c12a:	461d      	mov	r5, r3
 800c12c:	3b01      	subs	r3, #1
 800c12e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c132:	2a39      	cmp	r2, #57	; 0x39
 800c134:	d071      	beq.n	800c21a <_dtoa_r+0xb9a>
 800c136:	3201      	adds	r2, #1
 800c138:	701a      	strb	r2, [r3, #0]
 800c13a:	e746      	b.n	800bfca <_dtoa_r+0x94a>
 800c13c:	2a00      	cmp	r2, #0
 800c13e:	dd07      	ble.n	800c150 <_dtoa_r+0xad0>
 800c140:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c144:	d0ed      	beq.n	800c122 <_dtoa_r+0xaa2>
 800c146:	f10a 0301 	add.w	r3, sl, #1
 800c14a:	f88b 3000 	strb.w	r3, [fp]
 800c14e:	e73c      	b.n	800bfca <_dtoa_r+0x94a>
 800c150:	9b05      	ldr	r3, [sp, #20]
 800c152:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c156:	4599      	cmp	r9, r3
 800c158:	d047      	beq.n	800c1ea <_dtoa_r+0xb6a>
 800c15a:	ee18 1a10 	vmov	r1, s16
 800c15e:	2300      	movs	r3, #0
 800c160:	220a      	movs	r2, #10
 800c162:	4620      	mov	r0, r4
 800c164:	f000 f8e8 	bl	800c338 <__multadd>
 800c168:	45b8      	cmp	r8, r7
 800c16a:	ee08 0a10 	vmov	s16, r0
 800c16e:	f04f 0300 	mov.w	r3, #0
 800c172:	f04f 020a 	mov.w	r2, #10
 800c176:	4641      	mov	r1, r8
 800c178:	4620      	mov	r0, r4
 800c17a:	d106      	bne.n	800c18a <_dtoa_r+0xb0a>
 800c17c:	f000 f8dc 	bl	800c338 <__multadd>
 800c180:	4680      	mov	r8, r0
 800c182:	4607      	mov	r7, r0
 800c184:	f109 0901 	add.w	r9, r9, #1
 800c188:	e772      	b.n	800c070 <_dtoa_r+0x9f0>
 800c18a:	f000 f8d5 	bl	800c338 <__multadd>
 800c18e:	4639      	mov	r1, r7
 800c190:	4680      	mov	r8, r0
 800c192:	2300      	movs	r3, #0
 800c194:	220a      	movs	r2, #10
 800c196:	4620      	mov	r0, r4
 800c198:	f000 f8ce 	bl	800c338 <__multadd>
 800c19c:	4607      	mov	r7, r0
 800c19e:	e7f1      	b.n	800c184 <_dtoa_r+0xb04>
 800c1a0:	9b03      	ldr	r3, [sp, #12]
 800c1a2:	9302      	str	r3, [sp, #8]
 800c1a4:	9d01      	ldr	r5, [sp, #4]
 800c1a6:	ee18 0a10 	vmov	r0, s16
 800c1aa:	4631      	mov	r1, r6
 800c1ac:	f7ff f9dc 	bl	800b568 <quorem>
 800c1b0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c1b4:	9b01      	ldr	r3, [sp, #4]
 800c1b6:	f805 ab01 	strb.w	sl, [r5], #1
 800c1ba:	1aea      	subs	r2, r5, r3
 800c1bc:	9b02      	ldr	r3, [sp, #8]
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	dd09      	ble.n	800c1d6 <_dtoa_r+0xb56>
 800c1c2:	ee18 1a10 	vmov	r1, s16
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	220a      	movs	r2, #10
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	f000 f8b4 	bl	800c338 <__multadd>
 800c1d0:	ee08 0a10 	vmov	s16, r0
 800c1d4:	e7e7      	b.n	800c1a6 <_dtoa_r+0xb26>
 800c1d6:	9b02      	ldr	r3, [sp, #8]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	bfc8      	it	gt
 800c1dc:	461d      	movgt	r5, r3
 800c1de:	9b01      	ldr	r3, [sp, #4]
 800c1e0:	bfd8      	it	le
 800c1e2:	2501      	movle	r5, #1
 800c1e4:	441d      	add	r5, r3
 800c1e6:	f04f 0800 	mov.w	r8, #0
 800c1ea:	ee18 1a10 	vmov	r1, s16
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	f000 fa51 	bl	800c698 <__lshift>
 800c1f6:	4631      	mov	r1, r6
 800c1f8:	ee08 0a10 	vmov	s16, r0
 800c1fc:	f000 fabc 	bl	800c778 <__mcmp>
 800c200:	2800      	cmp	r0, #0
 800c202:	dc91      	bgt.n	800c128 <_dtoa_r+0xaa8>
 800c204:	d102      	bne.n	800c20c <_dtoa_r+0xb8c>
 800c206:	f01a 0f01 	tst.w	sl, #1
 800c20a:	d18d      	bne.n	800c128 <_dtoa_r+0xaa8>
 800c20c:	462b      	mov	r3, r5
 800c20e:	461d      	mov	r5, r3
 800c210:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c214:	2a30      	cmp	r2, #48	; 0x30
 800c216:	d0fa      	beq.n	800c20e <_dtoa_r+0xb8e>
 800c218:	e6d7      	b.n	800bfca <_dtoa_r+0x94a>
 800c21a:	9a01      	ldr	r2, [sp, #4]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d184      	bne.n	800c12a <_dtoa_r+0xaaa>
 800c220:	9b00      	ldr	r3, [sp, #0]
 800c222:	3301      	adds	r3, #1
 800c224:	9300      	str	r3, [sp, #0]
 800c226:	2331      	movs	r3, #49	; 0x31
 800c228:	7013      	strb	r3, [r2, #0]
 800c22a:	e6ce      	b.n	800bfca <_dtoa_r+0x94a>
 800c22c:	4b09      	ldr	r3, [pc, #36]	; (800c254 <_dtoa_r+0xbd4>)
 800c22e:	f7ff ba95 	b.w	800b75c <_dtoa_r+0xdc>
 800c232:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c234:	2b00      	cmp	r3, #0
 800c236:	f47f aa6e 	bne.w	800b716 <_dtoa_r+0x96>
 800c23a:	4b07      	ldr	r3, [pc, #28]	; (800c258 <_dtoa_r+0xbd8>)
 800c23c:	f7ff ba8e 	b.w	800b75c <_dtoa_r+0xdc>
 800c240:	9b02      	ldr	r3, [sp, #8]
 800c242:	2b00      	cmp	r3, #0
 800c244:	dcae      	bgt.n	800c1a4 <_dtoa_r+0xb24>
 800c246:	9b06      	ldr	r3, [sp, #24]
 800c248:	2b02      	cmp	r3, #2
 800c24a:	f73f aea8 	bgt.w	800bf9e <_dtoa_r+0x91e>
 800c24e:	e7a9      	b.n	800c1a4 <_dtoa_r+0xb24>
 800c250:	0800d953 	.word	0x0800d953
 800c254:	0800d8b0 	.word	0x0800d8b0
 800c258:	0800d8d4 	.word	0x0800d8d4

0800c25c <_localeconv_r>:
 800c25c:	4800      	ldr	r0, [pc, #0]	; (800c260 <_localeconv_r+0x4>)
 800c25e:	4770      	bx	lr
 800c260:	20000274 	.word	0x20000274

0800c264 <malloc>:
 800c264:	4b02      	ldr	r3, [pc, #8]	; (800c270 <malloc+0xc>)
 800c266:	4601      	mov	r1, r0
 800c268:	6818      	ldr	r0, [r3, #0]
 800c26a:	f000 bc09 	b.w	800ca80 <_malloc_r>
 800c26e:	bf00      	nop
 800c270:	20000120 	.word	0x20000120

0800c274 <_Balloc>:
 800c274:	b570      	push	{r4, r5, r6, lr}
 800c276:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c278:	4604      	mov	r4, r0
 800c27a:	460d      	mov	r5, r1
 800c27c:	b976      	cbnz	r6, 800c29c <_Balloc+0x28>
 800c27e:	2010      	movs	r0, #16
 800c280:	f7ff fff0 	bl	800c264 <malloc>
 800c284:	4602      	mov	r2, r0
 800c286:	6260      	str	r0, [r4, #36]	; 0x24
 800c288:	b920      	cbnz	r0, 800c294 <_Balloc+0x20>
 800c28a:	4b18      	ldr	r3, [pc, #96]	; (800c2ec <_Balloc+0x78>)
 800c28c:	4818      	ldr	r0, [pc, #96]	; (800c2f0 <_Balloc+0x7c>)
 800c28e:	2166      	movs	r1, #102	; 0x66
 800c290:	f000 fc7a 	bl	800cb88 <__assert_func>
 800c294:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c298:	6006      	str	r6, [r0, #0]
 800c29a:	60c6      	str	r6, [r0, #12]
 800c29c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c29e:	68f3      	ldr	r3, [r6, #12]
 800c2a0:	b183      	cbz	r3, 800c2c4 <_Balloc+0x50>
 800c2a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2a4:	68db      	ldr	r3, [r3, #12]
 800c2a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c2aa:	b9b8      	cbnz	r0, 800c2dc <_Balloc+0x68>
 800c2ac:	2101      	movs	r1, #1
 800c2ae:	fa01 f605 	lsl.w	r6, r1, r5
 800c2b2:	1d72      	adds	r2, r6, #5
 800c2b4:	0092      	lsls	r2, r2, #2
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	f000 fb60 	bl	800c97c <_calloc_r>
 800c2bc:	b160      	cbz	r0, 800c2d8 <_Balloc+0x64>
 800c2be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c2c2:	e00e      	b.n	800c2e2 <_Balloc+0x6e>
 800c2c4:	2221      	movs	r2, #33	; 0x21
 800c2c6:	2104      	movs	r1, #4
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	f000 fb57 	bl	800c97c <_calloc_r>
 800c2ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2d0:	60f0      	str	r0, [r6, #12]
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d1e4      	bne.n	800c2a2 <_Balloc+0x2e>
 800c2d8:	2000      	movs	r0, #0
 800c2da:	bd70      	pop	{r4, r5, r6, pc}
 800c2dc:	6802      	ldr	r2, [r0, #0]
 800c2de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c2e8:	e7f7      	b.n	800c2da <_Balloc+0x66>
 800c2ea:	bf00      	nop
 800c2ec:	0800d8e1 	.word	0x0800d8e1
 800c2f0:	0800d964 	.word	0x0800d964

0800c2f4 <_Bfree>:
 800c2f4:	b570      	push	{r4, r5, r6, lr}
 800c2f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c2f8:	4605      	mov	r5, r0
 800c2fa:	460c      	mov	r4, r1
 800c2fc:	b976      	cbnz	r6, 800c31c <_Bfree+0x28>
 800c2fe:	2010      	movs	r0, #16
 800c300:	f7ff ffb0 	bl	800c264 <malloc>
 800c304:	4602      	mov	r2, r0
 800c306:	6268      	str	r0, [r5, #36]	; 0x24
 800c308:	b920      	cbnz	r0, 800c314 <_Bfree+0x20>
 800c30a:	4b09      	ldr	r3, [pc, #36]	; (800c330 <_Bfree+0x3c>)
 800c30c:	4809      	ldr	r0, [pc, #36]	; (800c334 <_Bfree+0x40>)
 800c30e:	218a      	movs	r1, #138	; 0x8a
 800c310:	f000 fc3a 	bl	800cb88 <__assert_func>
 800c314:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c318:	6006      	str	r6, [r0, #0]
 800c31a:	60c6      	str	r6, [r0, #12]
 800c31c:	b13c      	cbz	r4, 800c32e <_Bfree+0x3a>
 800c31e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c320:	6862      	ldr	r2, [r4, #4]
 800c322:	68db      	ldr	r3, [r3, #12]
 800c324:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c328:	6021      	str	r1, [r4, #0]
 800c32a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c32e:	bd70      	pop	{r4, r5, r6, pc}
 800c330:	0800d8e1 	.word	0x0800d8e1
 800c334:	0800d964 	.word	0x0800d964

0800c338 <__multadd>:
 800c338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c33c:	690d      	ldr	r5, [r1, #16]
 800c33e:	4607      	mov	r7, r0
 800c340:	460c      	mov	r4, r1
 800c342:	461e      	mov	r6, r3
 800c344:	f101 0c14 	add.w	ip, r1, #20
 800c348:	2000      	movs	r0, #0
 800c34a:	f8dc 3000 	ldr.w	r3, [ip]
 800c34e:	b299      	uxth	r1, r3
 800c350:	fb02 6101 	mla	r1, r2, r1, r6
 800c354:	0c1e      	lsrs	r6, r3, #16
 800c356:	0c0b      	lsrs	r3, r1, #16
 800c358:	fb02 3306 	mla	r3, r2, r6, r3
 800c35c:	b289      	uxth	r1, r1
 800c35e:	3001      	adds	r0, #1
 800c360:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c364:	4285      	cmp	r5, r0
 800c366:	f84c 1b04 	str.w	r1, [ip], #4
 800c36a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c36e:	dcec      	bgt.n	800c34a <__multadd+0x12>
 800c370:	b30e      	cbz	r6, 800c3b6 <__multadd+0x7e>
 800c372:	68a3      	ldr	r3, [r4, #8]
 800c374:	42ab      	cmp	r3, r5
 800c376:	dc19      	bgt.n	800c3ac <__multadd+0x74>
 800c378:	6861      	ldr	r1, [r4, #4]
 800c37a:	4638      	mov	r0, r7
 800c37c:	3101      	adds	r1, #1
 800c37e:	f7ff ff79 	bl	800c274 <_Balloc>
 800c382:	4680      	mov	r8, r0
 800c384:	b928      	cbnz	r0, 800c392 <__multadd+0x5a>
 800c386:	4602      	mov	r2, r0
 800c388:	4b0c      	ldr	r3, [pc, #48]	; (800c3bc <__multadd+0x84>)
 800c38a:	480d      	ldr	r0, [pc, #52]	; (800c3c0 <__multadd+0x88>)
 800c38c:	21b5      	movs	r1, #181	; 0xb5
 800c38e:	f000 fbfb 	bl	800cb88 <__assert_func>
 800c392:	6922      	ldr	r2, [r4, #16]
 800c394:	3202      	adds	r2, #2
 800c396:	f104 010c 	add.w	r1, r4, #12
 800c39a:	0092      	lsls	r2, r2, #2
 800c39c:	300c      	adds	r0, #12
 800c39e:	f7fe fc63 	bl	800ac68 <memcpy>
 800c3a2:	4621      	mov	r1, r4
 800c3a4:	4638      	mov	r0, r7
 800c3a6:	f7ff ffa5 	bl	800c2f4 <_Bfree>
 800c3aa:	4644      	mov	r4, r8
 800c3ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c3b0:	3501      	adds	r5, #1
 800c3b2:	615e      	str	r6, [r3, #20]
 800c3b4:	6125      	str	r5, [r4, #16]
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3bc:	0800d953 	.word	0x0800d953
 800c3c0:	0800d964 	.word	0x0800d964

0800c3c4 <__hi0bits>:
 800c3c4:	0c03      	lsrs	r3, r0, #16
 800c3c6:	041b      	lsls	r3, r3, #16
 800c3c8:	b9d3      	cbnz	r3, 800c400 <__hi0bits+0x3c>
 800c3ca:	0400      	lsls	r0, r0, #16
 800c3cc:	2310      	movs	r3, #16
 800c3ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c3d2:	bf04      	itt	eq
 800c3d4:	0200      	lsleq	r0, r0, #8
 800c3d6:	3308      	addeq	r3, #8
 800c3d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c3dc:	bf04      	itt	eq
 800c3de:	0100      	lsleq	r0, r0, #4
 800c3e0:	3304      	addeq	r3, #4
 800c3e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c3e6:	bf04      	itt	eq
 800c3e8:	0080      	lsleq	r0, r0, #2
 800c3ea:	3302      	addeq	r3, #2
 800c3ec:	2800      	cmp	r0, #0
 800c3ee:	db05      	blt.n	800c3fc <__hi0bits+0x38>
 800c3f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c3f4:	f103 0301 	add.w	r3, r3, #1
 800c3f8:	bf08      	it	eq
 800c3fa:	2320      	moveq	r3, #32
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	4770      	bx	lr
 800c400:	2300      	movs	r3, #0
 800c402:	e7e4      	b.n	800c3ce <__hi0bits+0xa>

0800c404 <__lo0bits>:
 800c404:	6803      	ldr	r3, [r0, #0]
 800c406:	f013 0207 	ands.w	r2, r3, #7
 800c40a:	4601      	mov	r1, r0
 800c40c:	d00b      	beq.n	800c426 <__lo0bits+0x22>
 800c40e:	07da      	lsls	r2, r3, #31
 800c410:	d423      	bmi.n	800c45a <__lo0bits+0x56>
 800c412:	0798      	lsls	r0, r3, #30
 800c414:	bf49      	itett	mi
 800c416:	085b      	lsrmi	r3, r3, #1
 800c418:	089b      	lsrpl	r3, r3, #2
 800c41a:	2001      	movmi	r0, #1
 800c41c:	600b      	strmi	r3, [r1, #0]
 800c41e:	bf5c      	itt	pl
 800c420:	600b      	strpl	r3, [r1, #0]
 800c422:	2002      	movpl	r0, #2
 800c424:	4770      	bx	lr
 800c426:	b298      	uxth	r0, r3
 800c428:	b9a8      	cbnz	r0, 800c456 <__lo0bits+0x52>
 800c42a:	0c1b      	lsrs	r3, r3, #16
 800c42c:	2010      	movs	r0, #16
 800c42e:	b2da      	uxtb	r2, r3
 800c430:	b90a      	cbnz	r2, 800c436 <__lo0bits+0x32>
 800c432:	3008      	adds	r0, #8
 800c434:	0a1b      	lsrs	r3, r3, #8
 800c436:	071a      	lsls	r2, r3, #28
 800c438:	bf04      	itt	eq
 800c43a:	091b      	lsreq	r3, r3, #4
 800c43c:	3004      	addeq	r0, #4
 800c43e:	079a      	lsls	r2, r3, #30
 800c440:	bf04      	itt	eq
 800c442:	089b      	lsreq	r3, r3, #2
 800c444:	3002      	addeq	r0, #2
 800c446:	07da      	lsls	r2, r3, #31
 800c448:	d403      	bmi.n	800c452 <__lo0bits+0x4e>
 800c44a:	085b      	lsrs	r3, r3, #1
 800c44c:	f100 0001 	add.w	r0, r0, #1
 800c450:	d005      	beq.n	800c45e <__lo0bits+0x5a>
 800c452:	600b      	str	r3, [r1, #0]
 800c454:	4770      	bx	lr
 800c456:	4610      	mov	r0, r2
 800c458:	e7e9      	b.n	800c42e <__lo0bits+0x2a>
 800c45a:	2000      	movs	r0, #0
 800c45c:	4770      	bx	lr
 800c45e:	2020      	movs	r0, #32
 800c460:	4770      	bx	lr
	...

0800c464 <__i2b>:
 800c464:	b510      	push	{r4, lr}
 800c466:	460c      	mov	r4, r1
 800c468:	2101      	movs	r1, #1
 800c46a:	f7ff ff03 	bl	800c274 <_Balloc>
 800c46e:	4602      	mov	r2, r0
 800c470:	b928      	cbnz	r0, 800c47e <__i2b+0x1a>
 800c472:	4b05      	ldr	r3, [pc, #20]	; (800c488 <__i2b+0x24>)
 800c474:	4805      	ldr	r0, [pc, #20]	; (800c48c <__i2b+0x28>)
 800c476:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c47a:	f000 fb85 	bl	800cb88 <__assert_func>
 800c47e:	2301      	movs	r3, #1
 800c480:	6144      	str	r4, [r0, #20]
 800c482:	6103      	str	r3, [r0, #16]
 800c484:	bd10      	pop	{r4, pc}
 800c486:	bf00      	nop
 800c488:	0800d953 	.word	0x0800d953
 800c48c:	0800d964 	.word	0x0800d964

0800c490 <__multiply>:
 800c490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c494:	4691      	mov	r9, r2
 800c496:	690a      	ldr	r2, [r1, #16]
 800c498:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	bfb8      	it	lt
 800c4a0:	460b      	movlt	r3, r1
 800c4a2:	460c      	mov	r4, r1
 800c4a4:	bfbc      	itt	lt
 800c4a6:	464c      	movlt	r4, r9
 800c4a8:	4699      	movlt	r9, r3
 800c4aa:	6927      	ldr	r7, [r4, #16]
 800c4ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c4b0:	68a3      	ldr	r3, [r4, #8]
 800c4b2:	6861      	ldr	r1, [r4, #4]
 800c4b4:	eb07 060a 	add.w	r6, r7, sl
 800c4b8:	42b3      	cmp	r3, r6
 800c4ba:	b085      	sub	sp, #20
 800c4bc:	bfb8      	it	lt
 800c4be:	3101      	addlt	r1, #1
 800c4c0:	f7ff fed8 	bl	800c274 <_Balloc>
 800c4c4:	b930      	cbnz	r0, 800c4d4 <__multiply+0x44>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	4b44      	ldr	r3, [pc, #272]	; (800c5dc <__multiply+0x14c>)
 800c4ca:	4845      	ldr	r0, [pc, #276]	; (800c5e0 <__multiply+0x150>)
 800c4cc:	f240 115d 	movw	r1, #349	; 0x15d
 800c4d0:	f000 fb5a 	bl	800cb88 <__assert_func>
 800c4d4:	f100 0514 	add.w	r5, r0, #20
 800c4d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c4dc:	462b      	mov	r3, r5
 800c4de:	2200      	movs	r2, #0
 800c4e0:	4543      	cmp	r3, r8
 800c4e2:	d321      	bcc.n	800c528 <__multiply+0x98>
 800c4e4:	f104 0314 	add.w	r3, r4, #20
 800c4e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c4ec:	f109 0314 	add.w	r3, r9, #20
 800c4f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c4f4:	9202      	str	r2, [sp, #8]
 800c4f6:	1b3a      	subs	r2, r7, r4
 800c4f8:	3a15      	subs	r2, #21
 800c4fa:	f022 0203 	bic.w	r2, r2, #3
 800c4fe:	3204      	adds	r2, #4
 800c500:	f104 0115 	add.w	r1, r4, #21
 800c504:	428f      	cmp	r7, r1
 800c506:	bf38      	it	cc
 800c508:	2204      	movcc	r2, #4
 800c50a:	9201      	str	r2, [sp, #4]
 800c50c:	9a02      	ldr	r2, [sp, #8]
 800c50e:	9303      	str	r3, [sp, #12]
 800c510:	429a      	cmp	r2, r3
 800c512:	d80c      	bhi.n	800c52e <__multiply+0x9e>
 800c514:	2e00      	cmp	r6, #0
 800c516:	dd03      	ble.n	800c520 <__multiply+0x90>
 800c518:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d05a      	beq.n	800c5d6 <__multiply+0x146>
 800c520:	6106      	str	r6, [r0, #16]
 800c522:	b005      	add	sp, #20
 800c524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c528:	f843 2b04 	str.w	r2, [r3], #4
 800c52c:	e7d8      	b.n	800c4e0 <__multiply+0x50>
 800c52e:	f8b3 a000 	ldrh.w	sl, [r3]
 800c532:	f1ba 0f00 	cmp.w	sl, #0
 800c536:	d024      	beq.n	800c582 <__multiply+0xf2>
 800c538:	f104 0e14 	add.w	lr, r4, #20
 800c53c:	46a9      	mov	r9, r5
 800c53e:	f04f 0c00 	mov.w	ip, #0
 800c542:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c546:	f8d9 1000 	ldr.w	r1, [r9]
 800c54a:	fa1f fb82 	uxth.w	fp, r2
 800c54e:	b289      	uxth	r1, r1
 800c550:	fb0a 110b 	mla	r1, sl, fp, r1
 800c554:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c558:	f8d9 2000 	ldr.w	r2, [r9]
 800c55c:	4461      	add	r1, ip
 800c55e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c562:	fb0a c20b 	mla	r2, sl, fp, ip
 800c566:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c56a:	b289      	uxth	r1, r1
 800c56c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c570:	4577      	cmp	r7, lr
 800c572:	f849 1b04 	str.w	r1, [r9], #4
 800c576:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c57a:	d8e2      	bhi.n	800c542 <__multiply+0xb2>
 800c57c:	9a01      	ldr	r2, [sp, #4]
 800c57e:	f845 c002 	str.w	ip, [r5, r2]
 800c582:	9a03      	ldr	r2, [sp, #12]
 800c584:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c588:	3304      	adds	r3, #4
 800c58a:	f1b9 0f00 	cmp.w	r9, #0
 800c58e:	d020      	beq.n	800c5d2 <__multiply+0x142>
 800c590:	6829      	ldr	r1, [r5, #0]
 800c592:	f104 0c14 	add.w	ip, r4, #20
 800c596:	46ae      	mov	lr, r5
 800c598:	f04f 0a00 	mov.w	sl, #0
 800c59c:	f8bc b000 	ldrh.w	fp, [ip]
 800c5a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c5a4:	fb09 220b 	mla	r2, r9, fp, r2
 800c5a8:	4492      	add	sl, r2
 800c5aa:	b289      	uxth	r1, r1
 800c5ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c5b0:	f84e 1b04 	str.w	r1, [lr], #4
 800c5b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c5b8:	f8be 1000 	ldrh.w	r1, [lr]
 800c5bc:	0c12      	lsrs	r2, r2, #16
 800c5be:	fb09 1102 	mla	r1, r9, r2, r1
 800c5c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c5c6:	4567      	cmp	r7, ip
 800c5c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c5cc:	d8e6      	bhi.n	800c59c <__multiply+0x10c>
 800c5ce:	9a01      	ldr	r2, [sp, #4]
 800c5d0:	50a9      	str	r1, [r5, r2]
 800c5d2:	3504      	adds	r5, #4
 800c5d4:	e79a      	b.n	800c50c <__multiply+0x7c>
 800c5d6:	3e01      	subs	r6, #1
 800c5d8:	e79c      	b.n	800c514 <__multiply+0x84>
 800c5da:	bf00      	nop
 800c5dc:	0800d953 	.word	0x0800d953
 800c5e0:	0800d964 	.word	0x0800d964

0800c5e4 <__pow5mult>:
 800c5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5e8:	4615      	mov	r5, r2
 800c5ea:	f012 0203 	ands.w	r2, r2, #3
 800c5ee:	4606      	mov	r6, r0
 800c5f0:	460f      	mov	r7, r1
 800c5f2:	d007      	beq.n	800c604 <__pow5mult+0x20>
 800c5f4:	4c25      	ldr	r4, [pc, #148]	; (800c68c <__pow5mult+0xa8>)
 800c5f6:	3a01      	subs	r2, #1
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c5fe:	f7ff fe9b 	bl	800c338 <__multadd>
 800c602:	4607      	mov	r7, r0
 800c604:	10ad      	asrs	r5, r5, #2
 800c606:	d03d      	beq.n	800c684 <__pow5mult+0xa0>
 800c608:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c60a:	b97c      	cbnz	r4, 800c62c <__pow5mult+0x48>
 800c60c:	2010      	movs	r0, #16
 800c60e:	f7ff fe29 	bl	800c264 <malloc>
 800c612:	4602      	mov	r2, r0
 800c614:	6270      	str	r0, [r6, #36]	; 0x24
 800c616:	b928      	cbnz	r0, 800c624 <__pow5mult+0x40>
 800c618:	4b1d      	ldr	r3, [pc, #116]	; (800c690 <__pow5mult+0xac>)
 800c61a:	481e      	ldr	r0, [pc, #120]	; (800c694 <__pow5mult+0xb0>)
 800c61c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c620:	f000 fab2 	bl	800cb88 <__assert_func>
 800c624:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c628:	6004      	str	r4, [r0, #0]
 800c62a:	60c4      	str	r4, [r0, #12]
 800c62c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c630:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c634:	b94c      	cbnz	r4, 800c64a <__pow5mult+0x66>
 800c636:	f240 2171 	movw	r1, #625	; 0x271
 800c63a:	4630      	mov	r0, r6
 800c63c:	f7ff ff12 	bl	800c464 <__i2b>
 800c640:	2300      	movs	r3, #0
 800c642:	f8c8 0008 	str.w	r0, [r8, #8]
 800c646:	4604      	mov	r4, r0
 800c648:	6003      	str	r3, [r0, #0]
 800c64a:	f04f 0900 	mov.w	r9, #0
 800c64e:	07eb      	lsls	r3, r5, #31
 800c650:	d50a      	bpl.n	800c668 <__pow5mult+0x84>
 800c652:	4639      	mov	r1, r7
 800c654:	4622      	mov	r2, r4
 800c656:	4630      	mov	r0, r6
 800c658:	f7ff ff1a 	bl	800c490 <__multiply>
 800c65c:	4639      	mov	r1, r7
 800c65e:	4680      	mov	r8, r0
 800c660:	4630      	mov	r0, r6
 800c662:	f7ff fe47 	bl	800c2f4 <_Bfree>
 800c666:	4647      	mov	r7, r8
 800c668:	106d      	asrs	r5, r5, #1
 800c66a:	d00b      	beq.n	800c684 <__pow5mult+0xa0>
 800c66c:	6820      	ldr	r0, [r4, #0]
 800c66e:	b938      	cbnz	r0, 800c680 <__pow5mult+0x9c>
 800c670:	4622      	mov	r2, r4
 800c672:	4621      	mov	r1, r4
 800c674:	4630      	mov	r0, r6
 800c676:	f7ff ff0b 	bl	800c490 <__multiply>
 800c67a:	6020      	str	r0, [r4, #0]
 800c67c:	f8c0 9000 	str.w	r9, [r0]
 800c680:	4604      	mov	r4, r0
 800c682:	e7e4      	b.n	800c64e <__pow5mult+0x6a>
 800c684:	4638      	mov	r0, r7
 800c686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c68a:	bf00      	nop
 800c68c:	0800dab0 	.word	0x0800dab0
 800c690:	0800d8e1 	.word	0x0800d8e1
 800c694:	0800d964 	.word	0x0800d964

0800c698 <__lshift>:
 800c698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c69c:	460c      	mov	r4, r1
 800c69e:	6849      	ldr	r1, [r1, #4]
 800c6a0:	6923      	ldr	r3, [r4, #16]
 800c6a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c6a6:	68a3      	ldr	r3, [r4, #8]
 800c6a8:	4607      	mov	r7, r0
 800c6aa:	4691      	mov	r9, r2
 800c6ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c6b0:	f108 0601 	add.w	r6, r8, #1
 800c6b4:	42b3      	cmp	r3, r6
 800c6b6:	db0b      	blt.n	800c6d0 <__lshift+0x38>
 800c6b8:	4638      	mov	r0, r7
 800c6ba:	f7ff fddb 	bl	800c274 <_Balloc>
 800c6be:	4605      	mov	r5, r0
 800c6c0:	b948      	cbnz	r0, 800c6d6 <__lshift+0x3e>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	4b2a      	ldr	r3, [pc, #168]	; (800c770 <__lshift+0xd8>)
 800c6c6:	482b      	ldr	r0, [pc, #172]	; (800c774 <__lshift+0xdc>)
 800c6c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c6cc:	f000 fa5c 	bl	800cb88 <__assert_func>
 800c6d0:	3101      	adds	r1, #1
 800c6d2:	005b      	lsls	r3, r3, #1
 800c6d4:	e7ee      	b.n	800c6b4 <__lshift+0x1c>
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	f100 0114 	add.w	r1, r0, #20
 800c6dc:	f100 0210 	add.w	r2, r0, #16
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	4553      	cmp	r3, sl
 800c6e4:	db37      	blt.n	800c756 <__lshift+0xbe>
 800c6e6:	6920      	ldr	r0, [r4, #16]
 800c6e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c6ec:	f104 0314 	add.w	r3, r4, #20
 800c6f0:	f019 091f 	ands.w	r9, r9, #31
 800c6f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c6f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c6fc:	d02f      	beq.n	800c75e <__lshift+0xc6>
 800c6fe:	f1c9 0e20 	rsb	lr, r9, #32
 800c702:	468a      	mov	sl, r1
 800c704:	f04f 0c00 	mov.w	ip, #0
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	fa02 f209 	lsl.w	r2, r2, r9
 800c70e:	ea42 020c 	orr.w	r2, r2, ip
 800c712:	f84a 2b04 	str.w	r2, [sl], #4
 800c716:	f853 2b04 	ldr.w	r2, [r3], #4
 800c71a:	4298      	cmp	r0, r3
 800c71c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c720:	d8f2      	bhi.n	800c708 <__lshift+0x70>
 800c722:	1b03      	subs	r3, r0, r4
 800c724:	3b15      	subs	r3, #21
 800c726:	f023 0303 	bic.w	r3, r3, #3
 800c72a:	3304      	adds	r3, #4
 800c72c:	f104 0215 	add.w	r2, r4, #21
 800c730:	4290      	cmp	r0, r2
 800c732:	bf38      	it	cc
 800c734:	2304      	movcc	r3, #4
 800c736:	f841 c003 	str.w	ip, [r1, r3]
 800c73a:	f1bc 0f00 	cmp.w	ip, #0
 800c73e:	d001      	beq.n	800c744 <__lshift+0xac>
 800c740:	f108 0602 	add.w	r6, r8, #2
 800c744:	3e01      	subs	r6, #1
 800c746:	4638      	mov	r0, r7
 800c748:	612e      	str	r6, [r5, #16]
 800c74a:	4621      	mov	r1, r4
 800c74c:	f7ff fdd2 	bl	800c2f4 <_Bfree>
 800c750:	4628      	mov	r0, r5
 800c752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c756:	f842 0f04 	str.w	r0, [r2, #4]!
 800c75a:	3301      	adds	r3, #1
 800c75c:	e7c1      	b.n	800c6e2 <__lshift+0x4a>
 800c75e:	3904      	subs	r1, #4
 800c760:	f853 2b04 	ldr.w	r2, [r3], #4
 800c764:	f841 2f04 	str.w	r2, [r1, #4]!
 800c768:	4298      	cmp	r0, r3
 800c76a:	d8f9      	bhi.n	800c760 <__lshift+0xc8>
 800c76c:	e7ea      	b.n	800c744 <__lshift+0xac>
 800c76e:	bf00      	nop
 800c770:	0800d953 	.word	0x0800d953
 800c774:	0800d964 	.word	0x0800d964

0800c778 <__mcmp>:
 800c778:	b530      	push	{r4, r5, lr}
 800c77a:	6902      	ldr	r2, [r0, #16]
 800c77c:	690c      	ldr	r4, [r1, #16]
 800c77e:	1b12      	subs	r2, r2, r4
 800c780:	d10e      	bne.n	800c7a0 <__mcmp+0x28>
 800c782:	f100 0314 	add.w	r3, r0, #20
 800c786:	3114      	adds	r1, #20
 800c788:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c78c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c790:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c794:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c798:	42a5      	cmp	r5, r4
 800c79a:	d003      	beq.n	800c7a4 <__mcmp+0x2c>
 800c79c:	d305      	bcc.n	800c7aa <__mcmp+0x32>
 800c79e:	2201      	movs	r2, #1
 800c7a0:	4610      	mov	r0, r2
 800c7a2:	bd30      	pop	{r4, r5, pc}
 800c7a4:	4283      	cmp	r3, r0
 800c7a6:	d3f3      	bcc.n	800c790 <__mcmp+0x18>
 800c7a8:	e7fa      	b.n	800c7a0 <__mcmp+0x28>
 800c7aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c7ae:	e7f7      	b.n	800c7a0 <__mcmp+0x28>

0800c7b0 <__mdiff>:
 800c7b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b4:	460c      	mov	r4, r1
 800c7b6:	4606      	mov	r6, r0
 800c7b8:	4611      	mov	r1, r2
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	4690      	mov	r8, r2
 800c7be:	f7ff ffdb 	bl	800c778 <__mcmp>
 800c7c2:	1e05      	subs	r5, r0, #0
 800c7c4:	d110      	bne.n	800c7e8 <__mdiff+0x38>
 800c7c6:	4629      	mov	r1, r5
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	f7ff fd53 	bl	800c274 <_Balloc>
 800c7ce:	b930      	cbnz	r0, 800c7de <__mdiff+0x2e>
 800c7d0:	4b3a      	ldr	r3, [pc, #232]	; (800c8bc <__mdiff+0x10c>)
 800c7d2:	4602      	mov	r2, r0
 800c7d4:	f240 2132 	movw	r1, #562	; 0x232
 800c7d8:	4839      	ldr	r0, [pc, #228]	; (800c8c0 <__mdiff+0x110>)
 800c7da:	f000 f9d5 	bl	800cb88 <__assert_func>
 800c7de:	2301      	movs	r3, #1
 800c7e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c7e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7e8:	bfa4      	itt	ge
 800c7ea:	4643      	movge	r3, r8
 800c7ec:	46a0      	movge	r8, r4
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c7f4:	bfa6      	itte	ge
 800c7f6:	461c      	movge	r4, r3
 800c7f8:	2500      	movge	r5, #0
 800c7fa:	2501      	movlt	r5, #1
 800c7fc:	f7ff fd3a 	bl	800c274 <_Balloc>
 800c800:	b920      	cbnz	r0, 800c80c <__mdiff+0x5c>
 800c802:	4b2e      	ldr	r3, [pc, #184]	; (800c8bc <__mdiff+0x10c>)
 800c804:	4602      	mov	r2, r0
 800c806:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c80a:	e7e5      	b.n	800c7d8 <__mdiff+0x28>
 800c80c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c810:	6926      	ldr	r6, [r4, #16]
 800c812:	60c5      	str	r5, [r0, #12]
 800c814:	f104 0914 	add.w	r9, r4, #20
 800c818:	f108 0514 	add.w	r5, r8, #20
 800c81c:	f100 0e14 	add.w	lr, r0, #20
 800c820:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c824:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c828:	f108 0210 	add.w	r2, r8, #16
 800c82c:	46f2      	mov	sl, lr
 800c82e:	2100      	movs	r1, #0
 800c830:	f859 3b04 	ldr.w	r3, [r9], #4
 800c834:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c838:	fa1f f883 	uxth.w	r8, r3
 800c83c:	fa11 f18b 	uxtah	r1, r1, fp
 800c840:	0c1b      	lsrs	r3, r3, #16
 800c842:	eba1 0808 	sub.w	r8, r1, r8
 800c846:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c84a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c84e:	fa1f f888 	uxth.w	r8, r8
 800c852:	1419      	asrs	r1, r3, #16
 800c854:	454e      	cmp	r6, r9
 800c856:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c85a:	f84a 3b04 	str.w	r3, [sl], #4
 800c85e:	d8e7      	bhi.n	800c830 <__mdiff+0x80>
 800c860:	1b33      	subs	r3, r6, r4
 800c862:	3b15      	subs	r3, #21
 800c864:	f023 0303 	bic.w	r3, r3, #3
 800c868:	3304      	adds	r3, #4
 800c86a:	3415      	adds	r4, #21
 800c86c:	42a6      	cmp	r6, r4
 800c86e:	bf38      	it	cc
 800c870:	2304      	movcc	r3, #4
 800c872:	441d      	add	r5, r3
 800c874:	4473      	add	r3, lr
 800c876:	469e      	mov	lr, r3
 800c878:	462e      	mov	r6, r5
 800c87a:	4566      	cmp	r6, ip
 800c87c:	d30e      	bcc.n	800c89c <__mdiff+0xec>
 800c87e:	f10c 0203 	add.w	r2, ip, #3
 800c882:	1b52      	subs	r2, r2, r5
 800c884:	f022 0203 	bic.w	r2, r2, #3
 800c888:	3d03      	subs	r5, #3
 800c88a:	45ac      	cmp	ip, r5
 800c88c:	bf38      	it	cc
 800c88e:	2200      	movcc	r2, #0
 800c890:	441a      	add	r2, r3
 800c892:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c896:	b17b      	cbz	r3, 800c8b8 <__mdiff+0x108>
 800c898:	6107      	str	r7, [r0, #16]
 800c89a:	e7a3      	b.n	800c7e4 <__mdiff+0x34>
 800c89c:	f856 8b04 	ldr.w	r8, [r6], #4
 800c8a0:	fa11 f288 	uxtah	r2, r1, r8
 800c8a4:	1414      	asrs	r4, r2, #16
 800c8a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c8aa:	b292      	uxth	r2, r2
 800c8ac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c8b0:	f84e 2b04 	str.w	r2, [lr], #4
 800c8b4:	1421      	asrs	r1, r4, #16
 800c8b6:	e7e0      	b.n	800c87a <__mdiff+0xca>
 800c8b8:	3f01      	subs	r7, #1
 800c8ba:	e7ea      	b.n	800c892 <__mdiff+0xe2>
 800c8bc:	0800d953 	.word	0x0800d953
 800c8c0:	0800d964 	.word	0x0800d964

0800c8c4 <__d2b>:
 800c8c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c8c8:	4689      	mov	r9, r1
 800c8ca:	2101      	movs	r1, #1
 800c8cc:	ec57 6b10 	vmov	r6, r7, d0
 800c8d0:	4690      	mov	r8, r2
 800c8d2:	f7ff fccf 	bl	800c274 <_Balloc>
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	b930      	cbnz	r0, 800c8e8 <__d2b+0x24>
 800c8da:	4602      	mov	r2, r0
 800c8dc:	4b25      	ldr	r3, [pc, #148]	; (800c974 <__d2b+0xb0>)
 800c8de:	4826      	ldr	r0, [pc, #152]	; (800c978 <__d2b+0xb4>)
 800c8e0:	f240 310a 	movw	r1, #778	; 0x30a
 800c8e4:	f000 f950 	bl	800cb88 <__assert_func>
 800c8e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c8ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c8f0:	bb35      	cbnz	r5, 800c940 <__d2b+0x7c>
 800c8f2:	2e00      	cmp	r6, #0
 800c8f4:	9301      	str	r3, [sp, #4]
 800c8f6:	d028      	beq.n	800c94a <__d2b+0x86>
 800c8f8:	4668      	mov	r0, sp
 800c8fa:	9600      	str	r6, [sp, #0]
 800c8fc:	f7ff fd82 	bl	800c404 <__lo0bits>
 800c900:	9900      	ldr	r1, [sp, #0]
 800c902:	b300      	cbz	r0, 800c946 <__d2b+0x82>
 800c904:	9a01      	ldr	r2, [sp, #4]
 800c906:	f1c0 0320 	rsb	r3, r0, #32
 800c90a:	fa02 f303 	lsl.w	r3, r2, r3
 800c90e:	430b      	orrs	r3, r1
 800c910:	40c2      	lsrs	r2, r0
 800c912:	6163      	str	r3, [r4, #20]
 800c914:	9201      	str	r2, [sp, #4]
 800c916:	9b01      	ldr	r3, [sp, #4]
 800c918:	61a3      	str	r3, [r4, #24]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	bf14      	ite	ne
 800c91e:	2202      	movne	r2, #2
 800c920:	2201      	moveq	r2, #1
 800c922:	6122      	str	r2, [r4, #16]
 800c924:	b1d5      	cbz	r5, 800c95c <__d2b+0x98>
 800c926:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c92a:	4405      	add	r5, r0
 800c92c:	f8c9 5000 	str.w	r5, [r9]
 800c930:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c934:	f8c8 0000 	str.w	r0, [r8]
 800c938:	4620      	mov	r0, r4
 800c93a:	b003      	add	sp, #12
 800c93c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c940:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c944:	e7d5      	b.n	800c8f2 <__d2b+0x2e>
 800c946:	6161      	str	r1, [r4, #20]
 800c948:	e7e5      	b.n	800c916 <__d2b+0x52>
 800c94a:	a801      	add	r0, sp, #4
 800c94c:	f7ff fd5a 	bl	800c404 <__lo0bits>
 800c950:	9b01      	ldr	r3, [sp, #4]
 800c952:	6163      	str	r3, [r4, #20]
 800c954:	2201      	movs	r2, #1
 800c956:	6122      	str	r2, [r4, #16]
 800c958:	3020      	adds	r0, #32
 800c95a:	e7e3      	b.n	800c924 <__d2b+0x60>
 800c95c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c960:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c964:	f8c9 0000 	str.w	r0, [r9]
 800c968:	6918      	ldr	r0, [r3, #16]
 800c96a:	f7ff fd2b 	bl	800c3c4 <__hi0bits>
 800c96e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c972:	e7df      	b.n	800c934 <__d2b+0x70>
 800c974:	0800d953 	.word	0x0800d953
 800c978:	0800d964 	.word	0x0800d964

0800c97c <_calloc_r>:
 800c97c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c97e:	fba1 2402 	umull	r2, r4, r1, r2
 800c982:	b94c      	cbnz	r4, 800c998 <_calloc_r+0x1c>
 800c984:	4611      	mov	r1, r2
 800c986:	9201      	str	r2, [sp, #4]
 800c988:	f000 f87a 	bl	800ca80 <_malloc_r>
 800c98c:	9a01      	ldr	r2, [sp, #4]
 800c98e:	4605      	mov	r5, r0
 800c990:	b930      	cbnz	r0, 800c9a0 <_calloc_r+0x24>
 800c992:	4628      	mov	r0, r5
 800c994:	b003      	add	sp, #12
 800c996:	bd30      	pop	{r4, r5, pc}
 800c998:	220c      	movs	r2, #12
 800c99a:	6002      	str	r2, [r0, #0]
 800c99c:	2500      	movs	r5, #0
 800c99e:	e7f8      	b.n	800c992 <_calloc_r+0x16>
 800c9a0:	4621      	mov	r1, r4
 800c9a2:	f7fe f96f 	bl	800ac84 <memset>
 800c9a6:	e7f4      	b.n	800c992 <_calloc_r+0x16>

0800c9a8 <_free_r>:
 800c9a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9aa:	2900      	cmp	r1, #0
 800c9ac:	d044      	beq.n	800ca38 <_free_r+0x90>
 800c9ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9b2:	9001      	str	r0, [sp, #4]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	f1a1 0404 	sub.w	r4, r1, #4
 800c9ba:	bfb8      	it	lt
 800c9bc:	18e4      	addlt	r4, r4, r3
 800c9be:	f000 f925 	bl	800cc0c <__malloc_lock>
 800c9c2:	4a1e      	ldr	r2, [pc, #120]	; (800ca3c <_free_r+0x94>)
 800c9c4:	9801      	ldr	r0, [sp, #4]
 800c9c6:	6813      	ldr	r3, [r2, #0]
 800c9c8:	b933      	cbnz	r3, 800c9d8 <_free_r+0x30>
 800c9ca:	6063      	str	r3, [r4, #4]
 800c9cc:	6014      	str	r4, [r2, #0]
 800c9ce:	b003      	add	sp, #12
 800c9d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c9d4:	f000 b920 	b.w	800cc18 <__malloc_unlock>
 800c9d8:	42a3      	cmp	r3, r4
 800c9da:	d908      	bls.n	800c9ee <_free_r+0x46>
 800c9dc:	6825      	ldr	r5, [r4, #0]
 800c9de:	1961      	adds	r1, r4, r5
 800c9e0:	428b      	cmp	r3, r1
 800c9e2:	bf01      	itttt	eq
 800c9e4:	6819      	ldreq	r1, [r3, #0]
 800c9e6:	685b      	ldreq	r3, [r3, #4]
 800c9e8:	1949      	addeq	r1, r1, r5
 800c9ea:	6021      	streq	r1, [r4, #0]
 800c9ec:	e7ed      	b.n	800c9ca <_free_r+0x22>
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	b10b      	cbz	r3, 800c9f8 <_free_r+0x50>
 800c9f4:	42a3      	cmp	r3, r4
 800c9f6:	d9fa      	bls.n	800c9ee <_free_r+0x46>
 800c9f8:	6811      	ldr	r1, [r2, #0]
 800c9fa:	1855      	adds	r5, r2, r1
 800c9fc:	42a5      	cmp	r5, r4
 800c9fe:	d10b      	bne.n	800ca18 <_free_r+0x70>
 800ca00:	6824      	ldr	r4, [r4, #0]
 800ca02:	4421      	add	r1, r4
 800ca04:	1854      	adds	r4, r2, r1
 800ca06:	42a3      	cmp	r3, r4
 800ca08:	6011      	str	r1, [r2, #0]
 800ca0a:	d1e0      	bne.n	800c9ce <_free_r+0x26>
 800ca0c:	681c      	ldr	r4, [r3, #0]
 800ca0e:	685b      	ldr	r3, [r3, #4]
 800ca10:	6053      	str	r3, [r2, #4]
 800ca12:	4421      	add	r1, r4
 800ca14:	6011      	str	r1, [r2, #0]
 800ca16:	e7da      	b.n	800c9ce <_free_r+0x26>
 800ca18:	d902      	bls.n	800ca20 <_free_r+0x78>
 800ca1a:	230c      	movs	r3, #12
 800ca1c:	6003      	str	r3, [r0, #0]
 800ca1e:	e7d6      	b.n	800c9ce <_free_r+0x26>
 800ca20:	6825      	ldr	r5, [r4, #0]
 800ca22:	1961      	adds	r1, r4, r5
 800ca24:	428b      	cmp	r3, r1
 800ca26:	bf04      	itt	eq
 800ca28:	6819      	ldreq	r1, [r3, #0]
 800ca2a:	685b      	ldreq	r3, [r3, #4]
 800ca2c:	6063      	str	r3, [r4, #4]
 800ca2e:	bf04      	itt	eq
 800ca30:	1949      	addeq	r1, r1, r5
 800ca32:	6021      	streq	r1, [r4, #0]
 800ca34:	6054      	str	r4, [r2, #4]
 800ca36:	e7ca      	b.n	800c9ce <_free_r+0x26>
 800ca38:	b003      	add	sp, #12
 800ca3a:	bd30      	pop	{r4, r5, pc}
 800ca3c:	200039e4 	.word	0x200039e4

0800ca40 <sbrk_aligned>:
 800ca40:	b570      	push	{r4, r5, r6, lr}
 800ca42:	4e0e      	ldr	r6, [pc, #56]	; (800ca7c <sbrk_aligned+0x3c>)
 800ca44:	460c      	mov	r4, r1
 800ca46:	6831      	ldr	r1, [r6, #0]
 800ca48:	4605      	mov	r5, r0
 800ca4a:	b911      	cbnz	r1, 800ca52 <sbrk_aligned+0x12>
 800ca4c:	f000 f88c 	bl	800cb68 <_sbrk_r>
 800ca50:	6030      	str	r0, [r6, #0]
 800ca52:	4621      	mov	r1, r4
 800ca54:	4628      	mov	r0, r5
 800ca56:	f000 f887 	bl	800cb68 <_sbrk_r>
 800ca5a:	1c43      	adds	r3, r0, #1
 800ca5c:	d00a      	beq.n	800ca74 <sbrk_aligned+0x34>
 800ca5e:	1cc4      	adds	r4, r0, #3
 800ca60:	f024 0403 	bic.w	r4, r4, #3
 800ca64:	42a0      	cmp	r0, r4
 800ca66:	d007      	beq.n	800ca78 <sbrk_aligned+0x38>
 800ca68:	1a21      	subs	r1, r4, r0
 800ca6a:	4628      	mov	r0, r5
 800ca6c:	f000 f87c 	bl	800cb68 <_sbrk_r>
 800ca70:	3001      	adds	r0, #1
 800ca72:	d101      	bne.n	800ca78 <sbrk_aligned+0x38>
 800ca74:	f04f 34ff 	mov.w	r4, #4294967295
 800ca78:	4620      	mov	r0, r4
 800ca7a:	bd70      	pop	{r4, r5, r6, pc}
 800ca7c:	200039e8 	.word	0x200039e8

0800ca80 <_malloc_r>:
 800ca80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca84:	1ccd      	adds	r5, r1, #3
 800ca86:	f025 0503 	bic.w	r5, r5, #3
 800ca8a:	3508      	adds	r5, #8
 800ca8c:	2d0c      	cmp	r5, #12
 800ca8e:	bf38      	it	cc
 800ca90:	250c      	movcc	r5, #12
 800ca92:	2d00      	cmp	r5, #0
 800ca94:	4607      	mov	r7, r0
 800ca96:	db01      	blt.n	800ca9c <_malloc_r+0x1c>
 800ca98:	42a9      	cmp	r1, r5
 800ca9a:	d905      	bls.n	800caa8 <_malloc_r+0x28>
 800ca9c:	230c      	movs	r3, #12
 800ca9e:	603b      	str	r3, [r7, #0]
 800caa0:	2600      	movs	r6, #0
 800caa2:	4630      	mov	r0, r6
 800caa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caa8:	4e2e      	ldr	r6, [pc, #184]	; (800cb64 <_malloc_r+0xe4>)
 800caaa:	f000 f8af 	bl	800cc0c <__malloc_lock>
 800caae:	6833      	ldr	r3, [r6, #0]
 800cab0:	461c      	mov	r4, r3
 800cab2:	bb34      	cbnz	r4, 800cb02 <_malloc_r+0x82>
 800cab4:	4629      	mov	r1, r5
 800cab6:	4638      	mov	r0, r7
 800cab8:	f7ff ffc2 	bl	800ca40 <sbrk_aligned>
 800cabc:	1c43      	adds	r3, r0, #1
 800cabe:	4604      	mov	r4, r0
 800cac0:	d14d      	bne.n	800cb5e <_malloc_r+0xde>
 800cac2:	6834      	ldr	r4, [r6, #0]
 800cac4:	4626      	mov	r6, r4
 800cac6:	2e00      	cmp	r6, #0
 800cac8:	d140      	bne.n	800cb4c <_malloc_r+0xcc>
 800caca:	6823      	ldr	r3, [r4, #0]
 800cacc:	4631      	mov	r1, r6
 800cace:	4638      	mov	r0, r7
 800cad0:	eb04 0803 	add.w	r8, r4, r3
 800cad4:	f000 f848 	bl	800cb68 <_sbrk_r>
 800cad8:	4580      	cmp	r8, r0
 800cada:	d13a      	bne.n	800cb52 <_malloc_r+0xd2>
 800cadc:	6821      	ldr	r1, [r4, #0]
 800cade:	3503      	adds	r5, #3
 800cae0:	1a6d      	subs	r5, r5, r1
 800cae2:	f025 0503 	bic.w	r5, r5, #3
 800cae6:	3508      	adds	r5, #8
 800cae8:	2d0c      	cmp	r5, #12
 800caea:	bf38      	it	cc
 800caec:	250c      	movcc	r5, #12
 800caee:	4629      	mov	r1, r5
 800caf0:	4638      	mov	r0, r7
 800caf2:	f7ff ffa5 	bl	800ca40 <sbrk_aligned>
 800caf6:	3001      	adds	r0, #1
 800caf8:	d02b      	beq.n	800cb52 <_malloc_r+0xd2>
 800cafa:	6823      	ldr	r3, [r4, #0]
 800cafc:	442b      	add	r3, r5
 800cafe:	6023      	str	r3, [r4, #0]
 800cb00:	e00e      	b.n	800cb20 <_malloc_r+0xa0>
 800cb02:	6822      	ldr	r2, [r4, #0]
 800cb04:	1b52      	subs	r2, r2, r5
 800cb06:	d41e      	bmi.n	800cb46 <_malloc_r+0xc6>
 800cb08:	2a0b      	cmp	r2, #11
 800cb0a:	d916      	bls.n	800cb3a <_malloc_r+0xba>
 800cb0c:	1961      	adds	r1, r4, r5
 800cb0e:	42a3      	cmp	r3, r4
 800cb10:	6025      	str	r5, [r4, #0]
 800cb12:	bf18      	it	ne
 800cb14:	6059      	strne	r1, [r3, #4]
 800cb16:	6863      	ldr	r3, [r4, #4]
 800cb18:	bf08      	it	eq
 800cb1a:	6031      	streq	r1, [r6, #0]
 800cb1c:	5162      	str	r2, [r4, r5]
 800cb1e:	604b      	str	r3, [r1, #4]
 800cb20:	4638      	mov	r0, r7
 800cb22:	f104 060b 	add.w	r6, r4, #11
 800cb26:	f000 f877 	bl	800cc18 <__malloc_unlock>
 800cb2a:	f026 0607 	bic.w	r6, r6, #7
 800cb2e:	1d23      	adds	r3, r4, #4
 800cb30:	1af2      	subs	r2, r6, r3
 800cb32:	d0b6      	beq.n	800caa2 <_malloc_r+0x22>
 800cb34:	1b9b      	subs	r3, r3, r6
 800cb36:	50a3      	str	r3, [r4, r2]
 800cb38:	e7b3      	b.n	800caa2 <_malloc_r+0x22>
 800cb3a:	6862      	ldr	r2, [r4, #4]
 800cb3c:	42a3      	cmp	r3, r4
 800cb3e:	bf0c      	ite	eq
 800cb40:	6032      	streq	r2, [r6, #0]
 800cb42:	605a      	strne	r2, [r3, #4]
 800cb44:	e7ec      	b.n	800cb20 <_malloc_r+0xa0>
 800cb46:	4623      	mov	r3, r4
 800cb48:	6864      	ldr	r4, [r4, #4]
 800cb4a:	e7b2      	b.n	800cab2 <_malloc_r+0x32>
 800cb4c:	4634      	mov	r4, r6
 800cb4e:	6876      	ldr	r6, [r6, #4]
 800cb50:	e7b9      	b.n	800cac6 <_malloc_r+0x46>
 800cb52:	230c      	movs	r3, #12
 800cb54:	603b      	str	r3, [r7, #0]
 800cb56:	4638      	mov	r0, r7
 800cb58:	f000 f85e 	bl	800cc18 <__malloc_unlock>
 800cb5c:	e7a1      	b.n	800caa2 <_malloc_r+0x22>
 800cb5e:	6025      	str	r5, [r4, #0]
 800cb60:	e7de      	b.n	800cb20 <_malloc_r+0xa0>
 800cb62:	bf00      	nop
 800cb64:	200039e4 	.word	0x200039e4

0800cb68 <_sbrk_r>:
 800cb68:	b538      	push	{r3, r4, r5, lr}
 800cb6a:	4d06      	ldr	r5, [pc, #24]	; (800cb84 <_sbrk_r+0x1c>)
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	4604      	mov	r4, r0
 800cb70:	4608      	mov	r0, r1
 800cb72:	602b      	str	r3, [r5, #0]
 800cb74:	f7f5 fd2c 	bl	80025d0 <_sbrk>
 800cb78:	1c43      	adds	r3, r0, #1
 800cb7a:	d102      	bne.n	800cb82 <_sbrk_r+0x1a>
 800cb7c:	682b      	ldr	r3, [r5, #0]
 800cb7e:	b103      	cbz	r3, 800cb82 <_sbrk_r+0x1a>
 800cb80:	6023      	str	r3, [r4, #0]
 800cb82:	bd38      	pop	{r3, r4, r5, pc}
 800cb84:	200039ec 	.word	0x200039ec

0800cb88 <__assert_func>:
 800cb88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb8a:	4614      	mov	r4, r2
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	4b09      	ldr	r3, [pc, #36]	; (800cbb4 <__assert_func+0x2c>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	4605      	mov	r5, r0
 800cb94:	68d8      	ldr	r0, [r3, #12]
 800cb96:	b14c      	cbz	r4, 800cbac <__assert_func+0x24>
 800cb98:	4b07      	ldr	r3, [pc, #28]	; (800cbb8 <__assert_func+0x30>)
 800cb9a:	9100      	str	r1, [sp, #0]
 800cb9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cba0:	4906      	ldr	r1, [pc, #24]	; (800cbbc <__assert_func+0x34>)
 800cba2:	462b      	mov	r3, r5
 800cba4:	f000 f80e 	bl	800cbc4 <fiprintf>
 800cba8:	f000 fa64 	bl	800d074 <abort>
 800cbac:	4b04      	ldr	r3, [pc, #16]	; (800cbc0 <__assert_func+0x38>)
 800cbae:	461c      	mov	r4, r3
 800cbb0:	e7f3      	b.n	800cb9a <__assert_func+0x12>
 800cbb2:	bf00      	nop
 800cbb4:	20000120 	.word	0x20000120
 800cbb8:	0800dabc 	.word	0x0800dabc
 800cbbc:	0800dac9 	.word	0x0800dac9
 800cbc0:	0800daf7 	.word	0x0800daf7

0800cbc4 <fiprintf>:
 800cbc4:	b40e      	push	{r1, r2, r3}
 800cbc6:	b503      	push	{r0, r1, lr}
 800cbc8:	4601      	mov	r1, r0
 800cbca:	ab03      	add	r3, sp, #12
 800cbcc:	4805      	ldr	r0, [pc, #20]	; (800cbe4 <fiprintf+0x20>)
 800cbce:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbd2:	6800      	ldr	r0, [r0, #0]
 800cbd4:	9301      	str	r3, [sp, #4]
 800cbd6:	f000 f84f 	bl	800cc78 <_vfiprintf_r>
 800cbda:	b002      	add	sp, #8
 800cbdc:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbe0:	b003      	add	sp, #12
 800cbe2:	4770      	bx	lr
 800cbe4:	20000120 	.word	0x20000120

0800cbe8 <__ascii_mbtowc>:
 800cbe8:	b082      	sub	sp, #8
 800cbea:	b901      	cbnz	r1, 800cbee <__ascii_mbtowc+0x6>
 800cbec:	a901      	add	r1, sp, #4
 800cbee:	b142      	cbz	r2, 800cc02 <__ascii_mbtowc+0x1a>
 800cbf0:	b14b      	cbz	r3, 800cc06 <__ascii_mbtowc+0x1e>
 800cbf2:	7813      	ldrb	r3, [r2, #0]
 800cbf4:	600b      	str	r3, [r1, #0]
 800cbf6:	7812      	ldrb	r2, [r2, #0]
 800cbf8:	1e10      	subs	r0, r2, #0
 800cbfa:	bf18      	it	ne
 800cbfc:	2001      	movne	r0, #1
 800cbfe:	b002      	add	sp, #8
 800cc00:	4770      	bx	lr
 800cc02:	4610      	mov	r0, r2
 800cc04:	e7fb      	b.n	800cbfe <__ascii_mbtowc+0x16>
 800cc06:	f06f 0001 	mvn.w	r0, #1
 800cc0a:	e7f8      	b.n	800cbfe <__ascii_mbtowc+0x16>

0800cc0c <__malloc_lock>:
 800cc0c:	4801      	ldr	r0, [pc, #4]	; (800cc14 <__malloc_lock+0x8>)
 800cc0e:	f000 bbf1 	b.w	800d3f4 <__retarget_lock_acquire_recursive>
 800cc12:	bf00      	nop
 800cc14:	200039f0 	.word	0x200039f0

0800cc18 <__malloc_unlock>:
 800cc18:	4801      	ldr	r0, [pc, #4]	; (800cc20 <__malloc_unlock+0x8>)
 800cc1a:	f000 bbec 	b.w	800d3f6 <__retarget_lock_release_recursive>
 800cc1e:	bf00      	nop
 800cc20:	200039f0 	.word	0x200039f0

0800cc24 <__sfputc_r>:
 800cc24:	6893      	ldr	r3, [r2, #8]
 800cc26:	3b01      	subs	r3, #1
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	b410      	push	{r4}
 800cc2c:	6093      	str	r3, [r2, #8]
 800cc2e:	da08      	bge.n	800cc42 <__sfputc_r+0x1e>
 800cc30:	6994      	ldr	r4, [r2, #24]
 800cc32:	42a3      	cmp	r3, r4
 800cc34:	db01      	blt.n	800cc3a <__sfputc_r+0x16>
 800cc36:	290a      	cmp	r1, #10
 800cc38:	d103      	bne.n	800cc42 <__sfputc_r+0x1e>
 800cc3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc3e:	f000 b94b 	b.w	800ced8 <__swbuf_r>
 800cc42:	6813      	ldr	r3, [r2, #0]
 800cc44:	1c58      	adds	r0, r3, #1
 800cc46:	6010      	str	r0, [r2, #0]
 800cc48:	7019      	strb	r1, [r3, #0]
 800cc4a:	4608      	mov	r0, r1
 800cc4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc50:	4770      	bx	lr

0800cc52 <__sfputs_r>:
 800cc52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc54:	4606      	mov	r6, r0
 800cc56:	460f      	mov	r7, r1
 800cc58:	4614      	mov	r4, r2
 800cc5a:	18d5      	adds	r5, r2, r3
 800cc5c:	42ac      	cmp	r4, r5
 800cc5e:	d101      	bne.n	800cc64 <__sfputs_r+0x12>
 800cc60:	2000      	movs	r0, #0
 800cc62:	e007      	b.n	800cc74 <__sfputs_r+0x22>
 800cc64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc68:	463a      	mov	r2, r7
 800cc6a:	4630      	mov	r0, r6
 800cc6c:	f7ff ffda 	bl	800cc24 <__sfputc_r>
 800cc70:	1c43      	adds	r3, r0, #1
 800cc72:	d1f3      	bne.n	800cc5c <__sfputs_r+0xa>
 800cc74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cc78 <_vfiprintf_r>:
 800cc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc7c:	460d      	mov	r5, r1
 800cc7e:	b09d      	sub	sp, #116	; 0x74
 800cc80:	4614      	mov	r4, r2
 800cc82:	4698      	mov	r8, r3
 800cc84:	4606      	mov	r6, r0
 800cc86:	b118      	cbz	r0, 800cc90 <_vfiprintf_r+0x18>
 800cc88:	6983      	ldr	r3, [r0, #24]
 800cc8a:	b90b      	cbnz	r3, 800cc90 <_vfiprintf_r+0x18>
 800cc8c:	f000 fb14 	bl	800d2b8 <__sinit>
 800cc90:	4b89      	ldr	r3, [pc, #548]	; (800ceb8 <_vfiprintf_r+0x240>)
 800cc92:	429d      	cmp	r5, r3
 800cc94:	d11b      	bne.n	800ccce <_vfiprintf_r+0x56>
 800cc96:	6875      	ldr	r5, [r6, #4]
 800cc98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc9a:	07d9      	lsls	r1, r3, #31
 800cc9c:	d405      	bmi.n	800ccaa <_vfiprintf_r+0x32>
 800cc9e:	89ab      	ldrh	r3, [r5, #12]
 800cca0:	059a      	lsls	r2, r3, #22
 800cca2:	d402      	bmi.n	800ccaa <_vfiprintf_r+0x32>
 800cca4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cca6:	f000 fba5 	bl	800d3f4 <__retarget_lock_acquire_recursive>
 800ccaa:	89ab      	ldrh	r3, [r5, #12]
 800ccac:	071b      	lsls	r3, r3, #28
 800ccae:	d501      	bpl.n	800ccb4 <_vfiprintf_r+0x3c>
 800ccb0:	692b      	ldr	r3, [r5, #16]
 800ccb2:	b9eb      	cbnz	r3, 800ccf0 <_vfiprintf_r+0x78>
 800ccb4:	4629      	mov	r1, r5
 800ccb6:	4630      	mov	r0, r6
 800ccb8:	f000 f96e 	bl	800cf98 <__swsetup_r>
 800ccbc:	b1c0      	cbz	r0, 800ccf0 <_vfiprintf_r+0x78>
 800ccbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccc0:	07dc      	lsls	r4, r3, #31
 800ccc2:	d50e      	bpl.n	800cce2 <_vfiprintf_r+0x6a>
 800ccc4:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc8:	b01d      	add	sp, #116	; 0x74
 800ccca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccce:	4b7b      	ldr	r3, [pc, #492]	; (800cebc <_vfiprintf_r+0x244>)
 800ccd0:	429d      	cmp	r5, r3
 800ccd2:	d101      	bne.n	800ccd8 <_vfiprintf_r+0x60>
 800ccd4:	68b5      	ldr	r5, [r6, #8]
 800ccd6:	e7df      	b.n	800cc98 <_vfiprintf_r+0x20>
 800ccd8:	4b79      	ldr	r3, [pc, #484]	; (800cec0 <_vfiprintf_r+0x248>)
 800ccda:	429d      	cmp	r5, r3
 800ccdc:	bf08      	it	eq
 800ccde:	68f5      	ldreq	r5, [r6, #12]
 800cce0:	e7da      	b.n	800cc98 <_vfiprintf_r+0x20>
 800cce2:	89ab      	ldrh	r3, [r5, #12]
 800cce4:	0598      	lsls	r0, r3, #22
 800cce6:	d4ed      	bmi.n	800ccc4 <_vfiprintf_r+0x4c>
 800cce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccea:	f000 fb84 	bl	800d3f6 <__retarget_lock_release_recursive>
 800ccee:	e7e9      	b.n	800ccc4 <_vfiprintf_r+0x4c>
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	9309      	str	r3, [sp, #36]	; 0x24
 800ccf4:	2320      	movs	r3, #32
 800ccf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ccfa:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccfe:	2330      	movs	r3, #48	; 0x30
 800cd00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cec4 <_vfiprintf_r+0x24c>
 800cd04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd08:	f04f 0901 	mov.w	r9, #1
 800cd0c:	4623      	mov	r3, r4
 800cd0e:	469a      	mov	sl, r3
 800cd10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd14:	b10a      	cbz	r2, 800cd1a <_vfiprintf_r+0xa2>
 800cd16:	2a25      	cmp	r2, #37	; 0x25
 800cd18:	d1f9      	bne.n	800cd0e <_vfiprintf_r+0x96>
 800cd1a:	ebba 0b04 	subs.w	fp, sl, r4
 800cd1e:	d00b      	beq.n	800cd38 <_vfiprintf_r+0xc0>
 800cd20:	465b      	mov	r3, fp
 800cd22:	4622      	mov	r2, r4
 800cd24:	4629      	mov	r1, r5
 800cd26:	4630      	mov	r0, r6
 800cd28:	f7ff ff93 	bl	800cc52 <__sfputs_r>
 800cd2c:	3001      	adds	r0, #1
 800cd2e:	f000 80aa 	beq.w	800ce86 <_vfiprintf_r+0x20e>
 800cd32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd34:	445a      	add	r2, fp
 800cd36:	9209      	str	r2, [sp, #36]	; 0x24
 800cd38:	f89a 3000 	ldrb.w	r3, [sl]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	f000 80a2 	beq.w	800ce86 <_vfiprintf_r+0x20e>
 800cd42:	2300      	movs	r3, #0
 800cd44:	f04f 32ff 	mov.w	r2, #4294967295
 800cd48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd4c:	f10a 0a01 	add.w	sl, sl, #1
 800cd50:	9304      	str	r3, [sp, #16]
 800cd52:	9307      	str	r3, [sp, #28]
 800cd54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd58:	931a      	str	r3, [sp, #104]	; 0x68
 800cd5a:	4654      	mov	r4, sl
 800cd5c:	2205      	movs	r2, #5
 800cd5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd62:	4858      	ldr	r0, [pc, #352]	; (800cec4 <_vfiprintf_r+0x24c>)
 800cd64:	f7f3 fa44 	bl	80001f0 <memchr>
 800cd68:	9a04      	ldr	r2, [sp, #16]
 800cd6a:	b9d8      	cbnz	r0, 800cda4 <_vfiprintf_r+0x12c>
 800cd6c:	06d1      	lsls	r1, r2, #27
 800cd6e:	bf44      	itt	mi
 800cd70:	2320      	movmi	r3, #32
 800cd72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd76:	0713      	lsls	r3, r2, #28
 800cd78:	bf44      	itt	mi
 800cd7a:	232b      	movmi	r3, #43	; 0x2b
 800cd7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd80:	f89a 3000 	ldrb.w	r3, [sl]
 800cd84:	2b2a      	cmp	r3, #42	; 0x2a
 800cd86:	d015      	beq.n	800cdb4 <_vfiprintf_r+0x13c>
 800cd88:	9a07      	ldr	r2, [sp, #28]
 800cd8a:	4654      	mov	r4, sl
 800cd8c:	2000      	movs	r0, #0
 800cd8e:	f04f 0c0a 	mov.w	ip, #10
 800cd92:	4621      	mov	r1, r4
 800cd94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd98:	3b30      	subs	r3, #48	; 0x30
 800cd9a:	2b09      	cmp	r3, #9
 800cd9c:	d94e      	bls.n	800ce3c <_vfiprintf_r+0x1c4>
 800cd9e:	b1b0      	cbz	r0, 800cdce <_vfiprintf_r+0x156>
 800cda0:	9207      	str	r2, [sp, #28]
 800cda2:	e014      	b.n	800cdce <_vfiprintf_r+0x156>
 800cda4:	eba0 0308 	sub.w	r3, r0, r8
 800cda8:	fa09 f303 	lsl.w	r3, r9, r3
 800cdac:	4313      	orrs	r3, r2
 800cdae:	9304      	str	r3, [sp, #16]
 800cdb0:	46a2      	mov	sl, r4
 800cdb2:	e7d2      	b.n	800cd5a <_vfiprintf_r+0xe2>
 800cdb4:	9b03      	ldr	r3, [sp, #12]
 800cdb6:	1d19      	adds	r1, r3, #4
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	9103      	str	r1, [sp, #12]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	bfbb      	ittet	lt
 800cdc0:	425b      	neglt	r3, r3
 800cdc2:	f042 0202 	orrlt.w	r2, r2, #2
 800cdc6:	9307      	strge	r3, [sp, #28]
 800cdc8:	9307      	strlt	r3, [sp, #28]
 800cdca:	bfb8      	it	lt
 800cdcc:	9204      	strlt	r2, [sp, #16]
 800cdce:	7823      	ldrb	r3, [r4, #0]
 800cdd0:	2b2e      	cmp	r3, #46	; 0x2e
 800cdd2:	d10c      	bne.n	800cdee <_vfiprintf_r+0x176>
 800cdd4:	7863      	ldrb	r3, [r4, #1]
 800cdd6:	2b2a      	cmp	r3, #42	; 0x2a
 800cdd8:	d135      	bne.n	800ce46 <_vfiprintf_r+0x1ce>
 800cdda:	9b03      	ldr	r3, [sp, #12]
 800cddc:	1d1a      	adds	r2, r3, #4
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	9203      	str	r2, [sp, #12]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	bfb8      	it	lt
 800cde6:	f04f 33ff 	movlt.w	r3, #4294967295
 800cdea:	3402      	adds	r4, #2
 800cdec:	9305      	str	r3, [sp, #20]
 800cdee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ced4 <_vfiprintf_r+0x25c>
 800cdf2:	7821      	ldrb	r1, [r4, #0]
 800cdf4:	2203      	movs	r2, #3
 800cdf6:	4650      	mov	r0, sl
 800cdf8:	f7f3 f9fa 	bl	80001f0 <memchr>
 800cdfc:	b140      	cbz	r0, 800ce10 <_vfiprintf_r+0x198>
 800cdfe:	2340      	movs	r3, #64	; 0x40
 800ce00:	eba0 000a 	sub.w	r0, r0, sl
 800ce04:	fa03 f000 	lsl.w	r0, r3, r0
 800ce08:	9b04      	ldr	r3, [sp, #16]
 800ce0a:	4303      	orrs	r3, r0
 800ce0c:	3401      	adds	r4, #1
 800ce0e:	9304      	str	r3, [sp, #16]
 800ce10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce14:	482c      	ldr	r0, [pc, #176]	; (800cec8 <_vfiprintf_r+0x250>)
 800ce16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce1a:	2206      	movs	r2, #6
 800ce1c:	f7f3 f9e8 	bl	80001f0 <memchr>
 800ce20:	2800      	cmp	r0, #0
 800ce22:	d03f      	beq.n	800cea4 <_vfiprintf_r+0x22c>
 800ce24:	4b29      	ldr	r3, [pc, #164]	; (800cecc <_vfiprintf_r+0x254>)
 800ce26:	bb1b      	cbnz	r3, 800ce70 <_vfiprintf_r+0x1f8>
 800ce28:	9b03      	ldr	r3, [sp, #12]
 800ce2a:	3307      	adds	r3, #7
 800ce2c:	f023 0307 	bic.w	r3, r3, #7
 800ce30:	3308      	adds	r3, #8
 800ce32:	9303      	str	r3, [sp, #12]
 800ce34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce36:	443b      	add	r3, r7
 800ce38:	9309      	str	r3, [sp, #36]	; 0x24
 800ce3a:	e767      	b.n	800cd0c <_vfiprintf_r+0x94>
 800ce3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce40:	460c      	mov	r4, r1
 800ce42:	2001      	movs	r0, #1
 800ce44:	e7a5      	b.n	800cd92 <_vfiprintf_r+0x11a>
 800ce46:	2300      	movs	r3, #0
 800ce48:	3401      	adds	r4, #1
 800ce4a:	9305      	str	r3, [sp, #20]
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	f04f 0c0a 	mov.w	ip, #10
 800ce52:	4620      	mov	r0, r4
 800ce54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce58:	3a30      	subs	r2, #48	; 0x30
 800ce5a:	2a09      	cmp	r2, #9
 800ce5c:	d903      	bls.n	800ce66 <_vfiprintf_r+0x1ee>
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d0c5      	beq.n	800cdee <_vfiprintf_r+0x176>
 800ce62:	9105      	str	r1, [sp, #20]
 800ce64:	e7c3      	b.n	800cdee <_vfiprintf_r+0x176>
 800ce66:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce6a:	4604      	mov	r4, r0
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	e7f0      	b.n	800ce52 <_vfiprintf_r+0x1da>
 800ce70:	ab03      	add	r3, sp, #12
 800ce72:	9300      	str	r3, [sp, #0]
 800ce74:	462a      	mov	r2, r5
 800ce76:	4b16      	ldr	r3, [pc, #88]	; (800ced0 <_vfiprintf_r+0x258>)
 800ce78:	a904      	add	r1, sp, #16
 800ce7a:	4630      	mov	r0, r6
 800ce7c:	f7fd ffaa 	bl	800add4 <_printf_float>
 800ce80:	4607      	mov	r7, r0
 800ce82:	1c78      	adds	r0, r7, #1
 800ce84:	d1d6      	bne.n	800ce34 <_vfiprintf_r+0x1bc>
 800ce86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce88:	07d9      	lsls	r1, r3, #31
 800ce8a:	d405      	bmi.n	800ce98 <_vfiprintf_r+0x220>
 800ce8c:	89ab      	ldrh	r3, [r5, #12]
 800ce8e:	059a      	lsls	r2, r3, #22
 800ce90:	d402      	bmi.n	800ce98 <_vfiprintf_r+0x220>
 800ce92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce94:	f000 faaf 	bl	800d3f6 <__retarget_lock_release_recursive>
 800ce98:	89ab      	ldrh	r3, [r5, #12]
 800ce9a:	065b      	lsls	r3, r3, #25
 800ce9c:	f53f af12 	bmi.w	800ccc4 <_vfiprintf_r+0x4c>
 800cea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cea2:	e711      	b.n	800ccc8 <_vfiprintf_r+0x50>
 800cea4:	ab03      	add	r3, sp, #12
 800cea6:	9300      	str	r3, [sp, #0]
 800cea8:	462a      	mov	r2, r5
 800ceaa:	4b09      	ldr	r3, [pc, #36]	; (800ced0 <_vfiprintf_r+0x258>)
 800ceac:	a904      	add	r1, sp, #16
 800ceae:	4630      	mov	r0, r6
 800ceb0:	f7fe fa34 	bl	800b31c <_printf_i>
 800ceb4:	e7e4      	b.n	800ce80 <_vfiprintf_r+0x208>
 800ceb6:	bf00      	nop
 800ceb8:	0800dc34 	.word	0x0800dc34
 800cebc:	0800dc54 	.word	0x0800dc54
 800cec0:	0800dc14 	.word	0x0800dc14
 800cec4:	0800db02 	.word	0x0800db02
 800cec8:	0800db0c 	.word	0x0800db0c
 800cecc:	0800add5 	.word	0x0800add5
 800ced0:	0800cc53 	.word	0x0800cc53
 800ced4:	0800db08 	.word	0x0800db08

0800ced8 <__swbuf_r>:
 800ced8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceda:	460e      	mov	r6, r1
 800cedc:	4614      	mov	r4, r2
 800cede:	4605      	mov	r5, r0
 800cee0:	b118      	cbz	r0, 800ceea <__swbuf_r+0x12>
 800cee2:	6983      	ldr	r3, [r0, #24]
 800cee4:	b90b      	cbnz	r3, 800ceea <__swbuf_r+0x12>
 800cee6:	f000 f9e7 	bl	800d2b8 <__sinit>
 800ceea:	4b21      	ldr	r3, [pc, #132]	; (800cf70 <__swbuf_r+0x98>)
 800ceec:	429c      	cmp	r4, r3
 800ceee:	d12b      	bne.n	800cf48 <__swbuf_r+0x70>
 800cef0:	686c      	ldr	r4, [r5, #4]
 800cef2:	69a3      	ldr	r3, [r4, #24]
 800cef4:	60a3      	str	r3, [r4, #8]
 800cef6:	89a3      	ldrh	r3, [r4, #12]
 800cef8:	071a      	lsls	r2, r3, #28
 800cefa:	d52f      	bpl.n	800cf5c <__swbuf_r+0x84>
 800cefc:	6923      	ldr	r3, [r4, #16]
 800cefe:	b36b      	cbz	r3, 800cf5c <__swbuf_r+0x84>
 800cf00:	6923      	ldr	r3, [r4, #16]
 800cf02:	6820      	ldr	r0, [r4, #0]
 800cf04:	1ac0      	subs	r0, r0, r3
 800cf06:	6963      	ldr	r3, [r4, #20]
 800cf08:	b2f6      	uxtb	r6, r6
 800cf0a:	4283      	cmp	r3, r0
 800cf0c:	4637      	mov	r7, r6
 800cf0e:	dc04      	bgt.n	800cf1a <__swbuf_r+0x42>
 800cf10:	4621      	mov	r1, r4
 800cf12:	4628      	mov	r0, r5
 800cf14:	f000 f93c 	bl	800d190 <_fflush_r>
 800cf18:	bb30      	cbnz	r0, 800cf68 <__swbuf_r+0x90>
 800cf1a:	68a3      	ldr	r3, [r4, #8]
 800cf1c:	3b01      	subs	r3, #1
 800cf1e:	60a3      	str	r3, [r4, #8]
 800cf20:	6823      	ldr	r3, [r4, #0]
 800cf22:	1c5a      	adds	r2, r3, #1
 800cf24:	6022      	str	r2, [r4, #0]
 800cf26:	701e      	strb	r6, [r3, #0]
 800cf28:	6963      	ldr	r3, [r4, #20]
 800cf2a:	3001      	adds	r0, #1
 800cf2c:	4283      	cmp	r3, r0
 800cf2e:	d004      	beq.n	800cf3a <__swbuf_r+0x62>
 800cf30:	89a3      	ldrh	r3, [r4, #12]
 800cf32:	07db      	lsls	r3, r3, #31
 800cf34:	d506      	bpl.n	800cf44 <__swbuf_r+0x6c>
 800cf36:	2e0a      	cmp	r6, #10
 800cf38:	d104      	bne.n	800cf44 <__swbuf_r+0x6c>
 800cf3a:	4621      	mov	r1, r4
 800cf3c:	4628      	mov	r0, r5
 800cf3e:	f000 f927 	bl	800d190 <_fflush_r>
 800cf42:	b988      	cbnz	r0, 800cf68 <__swbuf_r+0x90>
 800cf44:	4638      	mov	r0, r7
 800cf46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf48:	4b0a      	ldr	r3, [pc, #40]	; (800cf74 <__swbuf_r+0x9c>)
 800cf4a:	429c      	cmp	r4, r3
 800cf4c:	d101      	bne.n	800cf52 <__swbuf_r+0x7a>
 800cf4e:	68ac      	ldr	r4, [r5, #8]
 800cf50:	e7cf      	b.n	800cef2 <__swbuf_r+0x1a>
 800cf52:	4b09      	ldr	r3, [pc, #36]	; (800cf78 <__swbuf_r+0xa0>)
 800cf54:	429c      	cmp	r4, r3
 800cf56:	bf08      	it	eq
 800cf58:	68ec      	ldreq	r4, [r5, #12]
 800cf5a:	e7ca      	b.n	800cef2 <__swbuf_r+0x1a>
 800cf5c:	4621      	mov	r1, r4
 800cf5e:	4628      	mov	r0, r5
 800cf60:	f000 f81a 	bl	800cf98 <__swsetup_r>
 800cf64:	2800      	cmp	r0, #0
 800cf66:	d0cb      	beq.n	800cf00 <__swbuf_r+0x28>
 800cf68:	f04f 37ff 	mov.w	r7, #4294967295
 800cf6c:	e7ea      	b.n	800cf44 <__swbuf_r+0x6c>
 800cf6e:	bf00      	nop
 800cf70:	0800dc34 	.word	0x0800dc34
 800cf74:	0800dc54 	.word	0x0800dc54
 800cf78:	0800dc14 	.word	0x0800dc14

0800cf7c <__ascii_wctomb>:
 800cf7c:	b149      	cbz	r1, 800cf92 <__ascii_wctomb+0x16>
 800cf7e:	2aff      	cmp	r2, #255	; 0xff
 800cf80:	bf85      	ittet	hi
 800cf82:	238a      	movhi	r3, #138	; 0x8a
 800cf84:	6003      	strhi	r3, [r0, #0]
 800cf86:	700a      	strbls	r2, [r1, #0]
 800cf88:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf8c:	bf98      	it	ls
 800cf8e:	2001      	movls	r0, #1
 800cf90:	4770      	bx	lr
 800cf92:	4608      	mov	r0, r1
 800cf94:	4770      	bx	lr
	...

0800cf98 <__swsetup_r>:
 800cf98:	4b32      	ldr	r3, [pc, #200]	; (800d064 <__swsetup_r+0xcc>)
 800cf9a:	b570      	push	{r4, r5, r6, lr}
 800cf9c:	681d      	ldr	r5, [r3, #0]
 800cf9e:	4606      	mov	r6, r0
 800cfa0:	460c      	mov	r4, r1
 800cfa2:	b125      	cbz	r5, 800cfae <__swsetup_r+0x16>
 800cfa4:	69ab      	ldr	r3, [r5, #24]
 800cfa6:	b913      	cbnz	r3, 800cfae <__swsetup_r+0x16>
 800cfa8:	4628      	mov	r0, r5
 800cfaa:	f000 f985 	bl	800d2b8 <__sinit>
 800cfae:	4b2e      	ldr	r3, [pc, #184]	; (800d068 <__swsetup_r+0xd0>)
 800cfb0:	429c      	cmp	r4, r3
 800cfb2:	d10f      	bne.n	800cfd4 <__swsetup_r+0x3c>
 800cfb4:	686c      	ldr	r4, [r5, #4]
 800cfb6:	89a3      	ldrh	r3, [r4, #12]
 800cfb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cfbc:	0719      	lsls	r1, r3, #28
 800cfbe:	d42c      	bmi.n	800d01a <__swsetup_r+0x82>
 800cfc0:	06dd      	lsls	r5, r3, #27
 800cfc2:	d411      	bmi.n	800cfe8 <__swsetup_r+0x50>
 800cfc4:	2309      	movs	r3, #9
 800cfc6:	6033      	str	r3, [r6, #0]
 800cfc8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cfcc:	81a3      	strh	r3, [r4, #12]
 800cfce:	f04f 30ff 	mov.w	r0, #4294967295
 800cfd2:	e03e      	b.n	800d052 <__swsetup_r+0xba>
 800cfd4:	4b25      	ldr	r3, [pc, #148]	; (800d06c <__swsetup_r+0xd4>)
 800cfd6:	429c      	cmp	r4, r3
 800cfd8:	d101      	bne.n	800cfde <__swsetup_r+0x46>
 800cfda:	68ac      	ldr	r4, [r5, #8]
 800cfdc:	e7eb      	b.n	800cfb6 <__swsetup_r+0x1e>
 800cfde:	4b24      	ldr	r3, [pc, #144]	; (800d070 <__swsetup_r+0xd8>)
 800cfe0:	429c      	cmp	r4, r3
 800cfe2:	bf08      	it	eq
 800cfe4:	68ec      	ldreq	r4, [r5, #12]
 800cfe6:	e7e6      	b.n	800cfb6 <__swsetup_r+0x1e>
 800cfe8:	0758      	lsls	r0, r3, #29
 800cfea:	d512      	bpl.n	800d012 <__swsetup_r+0x7a>
 800cfec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfee:	b141      	cbz	r1, 800d002 <__swsetup_r+0x6a>
 800cff0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cff4:	4299      	cmp	r1, r3
 800cff6:	d002      	beq.n	800cffe <__swsetup_r+0x66>
 800cff8:	4630      	mov	r0, r6
 800cffa:	f7ff fcd5 	bl	800c9a8 <_free_r>
 800cffe:	2300      	movs	r3, #0
 800d000:	6363      	str	r3, [r4, #52]	; 0x34
 800d002:	89a3      	ldrh	r3, [r4, #12]
 800d004:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d008:	81a3      	strh	r3, [r4, #12]
 800d00a:	2300      	movs	r3, #0
 800d00c:	6063      	str	r3, [r4, #4]
 800d00e:	6923      	ldr	r3, [r4, #16]
 800d010:	6023      	str	r3, [r4, #0]
 800d012:	89a3      	ldrh	r3, [r4, #12]
 800d014:	f043 0308 	orr.w	r3, r3, #8
 800d018:	81a3      	strh	r3, [r4, #12]
 800d01a:	6923      	ldr	r3, [r4, #16]
 800d01c:	b94b      	cbnz	r3, 800d032 <__swsetup_r+0x9a>
 800d01e:	89a3      	ldrh	r3, [r4, #12]
 800d020:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d028:	d003      	beq.n	800d032 <__swsetup_r+0x9a>
 800d02a:	4621      	mov	r1, r4
 800d02c:	4630      	mov	r0, r6
 800d02e:	f000 fa09 	bl	800d444 <__smakebuf_r>
 800d032:	89a0      	ldrh	r0, [r4, #12]
 800d034:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d038:	f010 0301 	ands.w	r3, r0, #1
 800d03c:	d00a      	beq.n	800d054 <__swsetup_r+0xbc>
 800d03e:	2300      	movs	r3, #0
 800d040:	60a3      	str	r3, [r4, #8]
 800d042:	6963      	ldr	r3, [r4, #20]
 800d044:	425b      	negs	r3, r3
 800d046:	61a3      	str	r3, [r4, #24]
 800d048:	6923      	ldr	r3, [r4, #16]
 800d04a:	b943      	cbnz	r3, 800d05e <__swsetup_r+0xc6>
 800d04c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d050:	d1ba      	bne.n	800cfc8 <__swsetup_r+0x30>
 800d052:	bd70      	pop	{r4, r5, r6, pc}
 800d054:	0781      	lsls	r1, r0, #30
 800d056:	bf58      	it	pl
 800d058:	6963      	ldrpl	r3, [r4, #20]
 800d05a:	60a3      	str	r3, [r4, #8]
 800d05c:	e7f4      	b.n	800d048 <__swsetup_r+0xb0>
 800d05e:	2000      	movs	r0, #0
 800d060:	e7f7      	b.n	800d052 <__swsetup_r+0xba>
 800d062:	bf00      	nop
 800d064:	20000120 	.word	0x20000120
 800d068:	0800dc34 	.word	0x0800dc34
 800d06c:	0800dc54 	.word	0x0800dc54
 800d070:	0800dc14 	.word	0x0800dc14

0800d074 <abort>:
 800d074:	b508      	push	{r3, lr}
 800d076:	2006      	movs	r0, #6
 800d078:	f000 fa4c 	bl	800d514 <raise>
 800d07c:	2001      	movs	r0, #1
 800d07e:	f7f5 fa2f 	bl	80024e0 <_exit>
	...

0800d084 <__sflush_r>:
 800d084:	898a      	ldrh	r2, [r1, #12]
 800d086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d08a:	4605      	mov	r5, r0
 800d08c:	0710      	lsls	r0, r2, #28
 800d08e:	460c      	mov	r4, r1
 800d090:	d458      	bmi.n	800d144 <__sflush_r+0xc0>
 800d092:	684b      	ldr	r3, [r1, #4]
 800d094:	2b00      	cmp	r3, #0
 800d096:	dc05      	bgt.n	800d0a4 <__sflush_r+0x20>
 800d098:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	dc02      	bgt.n	800d0a4 <__sflush_r+0x20>
 800d09e:	2000      	movs	r0, #0
 800d0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0a6:	2e00      	cmp	r6, #0
 800d0a8:	d0f9      	beq.n	800d09e <__sflush_r+0x1a>
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d0b0:	682f      	ldr	r7, [r5, #0]
 800d0b2:	602b      	str	r3, [r5, #0]
 800d0b4:	d032      	beq.n	800d11c <__sflush_r+0x98>
 800d0b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d0b8:	89a3      	ldrh	r3, [r4, #12]
 800d0ba:	075a      	lsls	r2, r3, #29
 800d0bc:	d505      	bpl.n	800d0ca <__sflush_r+0x46>
 800d0be:	6863      	ldr	r3, [r4, #4]
 800d0c0:	1ac0      	subs	r0, r0, r3
 800d0c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0c4:	b10b      	cbz	r3, 800d0ca <__sflush_r+0x46>
 800d0c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d0c8:	1ac0      	subs	r0, r0, r3
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	4602      	mov	r2, r0
 800d0ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0d0:	6a21      	ldr	r1, [r4, #32]
 800d0d2:	4628      	mov	r0, r5
 800d0d4:	47b0      	blx	r6
 800d0d6:	1c43      	adds	r3, r0, #1
 800d0d8:	89a3      	ldrh	r3, [r4, #12]
 800d0da:	d106      	bne.n	800d0ea <__sflush_r+0x66>
 800d0dc:	6829      	ldr	r1, [r5, #0]
 800d0de:	291d      	cmp	r1, #29
 800d0e0:	d82c      	bhi.n	800d13c <__sflush_r+0xb8>
 800d0e2:	4a2a      	ldr	r2, [pc, #168]	; (800d18c <__sflush_r+0x108>)
 800d0e4:	40ca      	lsrs	r2, r1
 800d0e6:	07d6      	lsls	r6, r2, #31
 800d0e8:	d528      	bpl.n	800d13c <__sflush_r+0xb8>
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	6062      	str	r2, [r4, #4]
 800d0ee:	04d9      	lsls	r1, r3, #19
 800d0f0:	6922      	ldr	r2, [r4, #16]
 800d0f2:	6022      	str	r2, [r4, #0]
 800d0f4:	d504      	bpl.n	800d100 <__sflush_r+0x7c>
 800d0f6:	1c42      	adds	r2, r0, #1
 800d0f8:	d101      	bne.n	800d0fe <__sflush_r+0x7a>
 800d0fa:	682b      	ldr	r3, [r5, #0]
 800d0fc:	b903      	cbnz	r3, 800d100 <__sflush_r+0x7c>
 800d0fe:	6560      	str	r0, [r4, #84]	; 0x54
 800d100:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d102:	602f      	str	r7, [r5, #0]
 800d104:	2900      	cmp	r1, #0
 800d106:	d0ca      	beq.n	800d09e <__sflush_r+0x1a>
 800d108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d10c:	4299      	cmp	r1, r3
 800d10e:	d002      	beq.n	800d116 <__sflush_r+0x92>
 800d110:	4628      	mov	r0, r5
 800d112:	f7ff fc49 	bl	800c9a8 <_free_r>
 800d116:	2000      	movs	r0, #0
 800d118:	6360      	str	r0, [r4, #52]	; 0x34
 800d11a:	e7c1      	b.n	800d0a0 <__sflush_r+0x1c>
 800d11c:	6a21      	ldr	r1, [r4, #32]
 800d11e:	2301      	movs	r3, #1
 800d120:	4628      	mov	r0, r5
 800d122:	47b0      	blx	r6
 800d124:	1c41      	adds	r1, r0, #1
 800d126:	d1c7      	bne.n	800d0b8 <__sflush_r+0x34>
 800d128:	682b      	ldr	r3, [r5, #0]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d0c4      	beq.n	800d0b8 <__sflush_r+0x34>
 800d12e:	2b1d      	cmp	r3, #29
 800d130:	d001      	beq.n	800d136 <__sflush_r+0xb2>
 800d132:	2b16      	cmp	r3, #22
 800d134:	d101      	bne.n	800d13a <__sflush_r+0xb6>
 800d136:	602f      	str	r7, [r5, #0]
 800d138:	e7b1      	b.n	800d09e <__sflush_r+0x1a>
 800d13a:	89a3      	ldrh	r3, [r4, #12]
 800d13c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d140:	81a3      	strh	r3, [r4, #12]
 800d142:	e7ad      	b.n	800d0a0 <__sflush_r+0x1c>
 800d144:	690f      	ldr	r7, [r1, #16]
 800d146:	2f00      	cmp	r7, #0
 800d148:	d0a9      	beq.n	800d09e <__sflush_r+0x1a>
 800d14a:	0793      	lsls	r3, r2, #30
 800d14c:	680e      	ldr	r6, [r1, #0]
 800d14e:	bf08      	it	eq
 800d150:	694b      	ldreq	r3, [r1, #20]
 800d152:	600f      	str	r7, [r1, #0]
 800d154:	bf18      	it	ne
 800d156:	2300      	movne	r3, #0
 800d158:	eba6 0807 	sub.w	r8, r6, r7
 800d15c:	608b      	str	r3, [r1, #8]
 800d15e:	f1b8 0f00 	cmp.w	r8, #0
 800d162:	dd9c      	ble.n	800d09e <__sflush_r+0x1a>
 800d164:	6a21      	ldr	r1, [r4, #32]
 800d166:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d168:	4643      	mov	r3, r8
 800d16a:	463a      	mov	r2, r7
 800d16c:	4628      	mov	r0, r5
 800d16e:	47b0      	blx	r6
 800d170:	2800      	cmp	r0, #0
 800d172:	dc06      	bgt.n	800d182 <__sflush_r+0xfe>
 800d174:	89a3      	ldrh	r3, [r4, #12]
 800d176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d17a:	81a3      	strh	r3, [r4, #12]
 800d17c:	f04f 30ff 	mov.w	r0, #4294967295
 800d180:	e78e      	b.n	800d0a0 <__sflush_r+0x1c>
 800d182:	4407      	add	r7, r0
 800d184:	eba8 0800 	sub.w	r8, r8, r0
 800d188:	e7e9      	b.n	800d15e <__sflush_r+0xda>
 800d18a:	bf00      	nop
 800d18c:	20400001 	.word	0x20400001

0800d190 <_fflush_r>:
 800d190:	b538      	push	{r3, r4, r5, lr}
 800d192:	690b      	ldr	r3, [r1, #16]
 800d194:	4605      	mov	r5, r0
 800d196:	460c      	mov	r4, r1
 800d198:	b913      	cbnz	r3, 800d1a0 <_fflush_r+0x10>
 800d19a:	2500      	movs	r5, #0
 800d19c:	4628      	mov	r0, r5
 800d19e:	bd38      	pop	{r3, r4, r5, pc}
 800d1a0:	b118      	cbz	r0, 800d1aa <_fflush_r+0x1a>
 800d1a2:	6983      	ldr	r3, [r0, #24]
 800d1a4:	b90b      	cbnz	r3, 800d1aa <_fflush_r+0x1a>
 800d1a6:	f000 f887 	bl	800d2b8 <__sinit>
 800d1aa:	4b14      	ldr	r3, [pc, #80]	; (800d1fc <_fflush_r+0x6c>)
 800d1ac:	429c      	cmp	r4, r3
 800d1ae:	d11b      	bne.n	800d1e8 <_fflush_r+0x58>
 800d1b0:	686c      	ldr	r4, [r5, #4]
 800d1b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d0ef      	beq.n	800d19a <_fflush_r+0xa>
 800d1ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1bc:	07d0      	lsls	r0, r2, #31
 800d1be:	d404      	bmi.n	800d1ca <_fflush_r+0x3a>
 800d1c0:	0599      	lsls	r1, r3, #22
 800d1c2:	d402      	bmi.n	800d1ca <_fflush_r+0x3a>
 800d1c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1c6:	f000 f915 	bl	800d3f4 <__retarget_lock_acquire_recursive>
 800d1ca:	4628      	mov	r0, r5
 800d1cc:	4621      	mov	r1, r4
 800d1ce:	f7ff ff59 	bl	800d084 <__sflush_r>
 800d1d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1d4:	07da      	lsls	r2, r3, #31
 800d1d6:	4605      	mov	r5, r0
 800d1d8:	d4e0      	bmi.n	800d19c <_fflush_r+0xc>
 800d1da:	89a3      	ldrh	r3, [r4, #12]
 800d1dc:	059b      	lsls	r3, r3, #22
 800d1de:	d4dd      	bmi.n	800d19c <_fflush_r+0xc>
 800d1e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1e2:	f000 f908 	bl	800d3f6 <__retarget_lock_release_recursive>
 800d1e6:	e7d9      	b.n	800d19c <_fflush_r+0xc>
 800d1e8:	4b05      	ldr	r3, [pc, #20]	; (800d200 <_fflush_r+0x70>)
 800d1ea:	429c      	cmp	r4, r3
 800d1ec:	d101      	bne.n	800d1f2 <_fflush_r+0x62>
 800d1ee:	68ac      	ldr	r4, [r5, #8]
 800d1f0:	e7df      	b.n	800d1b2 <_fflush_r+0x22>
 800d1f2:	4b04      	ldr	r3, [pc, #16]	; (800d204 <_fflush_r+0x74>)
 800d1f4:	429c      	cmp	r4, r3
 800d1f6:	bf08      	it	eq
 800d1f8:	68ec      	ldreq	r4, [r5, #12]
 800d1fa:	e7da      	b.n	800d1b2 <_fflush_r+0x22>
 800d1fc:	0800dc34 	.word	0x0800dc34
 800d200:	0800dc54 	.word	0x0800dc54
 800d204:	0800dc14 	.word	0x0800dc14

0800d208 <std>:
 800d208:	2300      	movs	r3, #0
 800d20a:	b510      	push	{r4, lr}
 800d20c:	4604      	mov	r4, r0
 800d20e:	e9c0 3300 	strd	r3, r3, [r0]
 800d212:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d216:	6083      	str	r3, [r0, #8]
 800d218:	8181      	strh	r1, [r0, #12]
 800d21a:	6643      	str	r3, [r0, #100]	; 0x64
 800d21c:	81c2      	strh	r2, [r0, #14]
 800d21e:	6183      	str	r3, [r0, #24]
 800d220:	4619      	mov	r1, r3
 800d222:	2208      	movs	r2, #8
 800d224:	305c      	adds	r0, #92	; 0x5c
 800d226:	f7fd fd2d 	bl	800ac84 <memset>
 800d22a:	4b05      	ldr	r3, [pc, #20]	; (800d240 <std+0x38>)
 800d22c:	6263      	str	r3, [r4, #36]	; 0x24
 800d22e:	4b05      	ldr	r3, [pc, #20]	; (800d244 <std+0x3c>)
 800d230:	62a3      	str	r3, [r4, #40]	; 0x28
 800d232:	4b05      	ldr	r3, [pc, #20]	; (800d248 <std+0x40>)
 800d234:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d236:	4b05      	ldr	r3, [pc, #20]	; (800d24c <std+0x44>)
 800d238:	6224      	str	r4, [r4, #32]
 800d23a:	6323      	str	r3, [r4, #48]	; 0x30
 800d23c:	bd10      	pop	{r4, pc}
 800d23e:	bf00      	nop
 800d240:	0800d54d 	.word	0x0800d54d
 800d244:	0800d56f 	.word	0x0800d56f
 800d248:	0800d5a7 	.word	0x0800d5a7
 800d24c:	0800d5cb 	.word	0x0800d5cb

0800d250 <_cleanup_r>:
 800d250:	4901      	ldr	r1, [pc, #4]	; (800d258 <_cleanup_r+0x8>)
 800d252:	f000 b8af 	b.w	800d3b4 <_fwalk_reent>
 800d256:	bf00      	nop
 800d258:	0800d191 	.word	0x0800d191

0800d25c <__sfmoreglue>:
 800d25c:	b570      	push	{r4, r5, r6, lr}
 800d25e:	2268      	movs	r2, #104	; 0x68
 800d260:	1e4d      	subs	r5, r1, #1
 800d262:	4355      	muls	r5, r2
 800d264:	460e      	mov	r6, r1
 800d266:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d26a:	f7ff fc09 	bl	800ca80 <_malloc_r>
 800d26e:	4604      	mov	r4, r0
 800d270:	b140      	cbz	r0, 800d284 <__sfmoreglue+0x28>
 800d272:	2100      	movs	r1, #0
 800d274:	e9c0 1600 	strd	r1, r6, [r0]
 800d278:	300c      	adds	r0, #12
 800d27a:	60a0      	str	r0, [r4, #8]
 800d27c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d280:	f7fd fd00 	bl	800ac84 <memset>
 800d284:	4620      	mov	r0, r4
 800d286:	bd70      	pop	{r4, r5, r6, pc}

0800d288 <__sfp_lock_acquire>:
 800d288:	4801      	ldr	r0, [pc, #4]	; (800d290 <__sfp_lock_acquire+0x8>)
 800d28a:	f000 b8b3 	b.w	800d3f4 <__retarget_lock_acquire_recursive>
 800d28e:	bf00      	nop
 800d290:	200039f1 	.word	0x200039f1

0800d294 <__sfp_lock_release>:
 800d294:	4801      	ldr	r0, [pc, #4]	; (800d29c <__sfp_lock_release+0x8>)
 800d296:	f000 b8ae 	b.w	800d3f6 <__retarget_lock_release_recursive>
 800d29a:	bf00      	nop
 800d29c:	200039f1 	.word	0x200039f1

0800d2a0 <__sinit_lock_acquire>:
 800d2a0:	4801      	ldr	r0, [pc, #4]	; (800d2a8 <__sinit_lock_acquire+0x8>)
 800d2a2:	f000 b8a7 	b.w	800d3f4 <__retarget_lock_acquire_recursive>
 800d2a6:	bf00      	nop
 800d2a8:	200039f2 	.word	0x200039f2

0800d2ac <__sinit_lock_release>:
 800d2ac:	4801      	ldr	r0, [pc, #4]	; (800d2b4 <__sinit_lock_release+0x8>)
 800d2ae:	f000 b8a2 	b.w	800d3f6 <__retarget_lock_release_recursive>
 800d2b2:	bf00      	nop
 800d2b4:	200039f2 	.word	0x200039f2

0800d2b8 <__sinit>:
 800d2b8:	b510      	push	{r4, lr}
 800d2ba:	4604      	mov	r4, r0
 800d2bc:	f7ff fff0 	bl	800d2a0 <__sinit_lock_acquire>
 800d2c0:	69a3      	ldr	r3, [r4, #24]
 800d2c2:	b11b      	cbz	r3, 800d2cc <__sinit+0x14>
 800d2c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2c8:	f7ff bff0 	b.w	800d2ac <__sinit_lock_release>
 800d2cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d2d0:	6523      	str	r3, [r4, #80]	; 0x50
 800d2d2:	4b13      	ldr	r3, [pc, #76]	; (800d320 <__sinit+0x68>)
 800d2d4:	4a13      	ldr	r2, [pc, #76]	; (800d324 <__sinit+0x6c>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	62a2      	str	r2, [r4, #40]	; 0x28
 800d2da:	42a3      	cmp	r3, r4
 800d2dc:	bf04      	itt	eq
 800d2de:	2301      	moveq	r3, #1
 800d2e0:	61a3      	streq	r3, [r4, #24]
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	f000 f820 	bl	800d328 <__sfp>
 800d2e8:	6060      	str	r0, [r4, #4]
 800d2ea:	4620      	mov	r0, r4
 800d2ec:	f000 f81c 	bl	800d328 <__sfp>
 800d2f0:	60a0      	str	r0, [r4, #8]
 800d2f2:	4620      	mov	r0, r4
 800d2f4:	f000 f818 	bl	800d328 <__sfp>
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	60e0      	str	r0, [r4, #12]
 800d2fc:	2104      	movs	r1, #4
 800d2fe:	6860      	ldr	r0, [r4, #4]
 800d300:	f7ff ff82 	bl	800d208 <std>
 800d304:	68a0      	ldr	r0, [r4, #8]
 800d306:	2201      	movs	r2, #1
 800d308:	2109      	movs	r1, #9
 800d30a:	f7ff ff7d 	bl	800d208 <std>
 800d30e:	68e0      	ldr	r0, [r4, #12]
 800d310:	2202      	movs	r2, #2
 800d312:	2112      	movs	r1, #18
 800d314:	f7ff ff78 	bl	800d208 <std>
 800d318:	2301      	movs	r3, #1
 800d31a:	61a3      	str	r3, [r4, #24]
 800d31c:	e7d2      	b.n	800d2c4 <__sinit+0xc>
 800d31e:	bf00      	nop
 800d320:	0800d89c 	.word	0x0800d89c
 800d324:	0800d251 	.word	0x0800d251

0800d328 <__sfp>:
 800d328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d32a:	4607      	mov	r7, r0
 800d32c:	f7ff ffac 	bl	800d288 <__sfp_lock_acquire>
 800d330:	4b1e      	ldr	r3, [pc, #120]	; (800d3ac <__sfp+0x84>)
 800d332:	681e      	ldr	r6, [r3, #0]
 800d334:	69b3      	ldr	r3, [r6, #24]
 800d336:	b913      	cbnz	r3, 800d33e <__sfp+0x16>
 800d338:	4630      	mov	r0, r6
 800d33a:	f7ff ffbd 	bl	800d2b8 <__sinit>
 800d33e:	3648      	adds	r6, #72	; 0x48
 800d340:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d344:	3b01      	subs	r3, #1
 800d346:	d503      	bpl.n	800d350 <__sfp+0x28>
 800d348:	6833      	ldr	r3, [r6, #0]
 800d34a:	b30b      	cbz	r3, 800d390 <__sfp+0x68>
 800d34c:	6836      	ldr	r6, [r6, #0]
 800d34e:	e7f7      	b.n	800d340 <__sfp+0x18>
 800d350:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d354:	b9d5      	cbnz	r5, 800d38c <__sfp+0x64>
 800d356:	4b16      	ldr	r3, [pc, #88]	; (800d3b0 <__sfp+0x88>)
 800d358:	60e3      	str	r3, [r4, #12]
 800d35a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d35e:	6665      	str	r5, [r4, #100]	; 0x64
 800d360:	f000 f847 	bl	800d3f2 <__retarget_lock_init_recursive>
 800d364:	f7ff ff96 	bl	800d294 <__sfp_lock_release>
 800d368:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d36c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d370:	6025      	str	r5, [r4, #0]
 800d372:	61a5      	str	r5, [r4, #24]
 800d374:	2208      	movs	r2, #8
 800d376:	4629      	mov	r1, r5
 800d378:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d37c:	f7fd fc82 	bl	800ac84 <memset>
 800d380:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d384:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d388:	4620      	mov	r0, r4
 800d38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d38c:	3468      	adds	r4, #104	; 0x68
 800d38e:	e7d9      	b.n	800d344 <__sfp+0x1c>
 800d390:	2104      	movs	r1, #4
 800d392:	4638      	mov	r0, r7
 800d394:	f7ff ff62 	bl	800d25c <__sfmoreglue>
 800d398:	4604      	mov	r4, r0
 800d39a:	6030      	str	r0, [r6, #0]
 800d39c:	2800      	cmp	r0, #0
 800d39e:	d1d5      	bne.n	800d34c <__sfp+0x24>
 800d3a0:	f7ff ff78 	bl	800d294 <__sfp_lock_release>
 800d3a4:	230c      	movs	r3, #12
 800d3a6:	603b      	str	r3, [r7, #0]
 800d3a8:	e7ee      	b.n	800d388 <__sfp+0x60>
 800d3aa:	bf00      	nop
 800d3ac:	0800d89c 	.word	0x0800d89c
 800d3b0:	ffff0001 	.word	0xffff0001

0800d3b4 <_fwalk_reent>:
 800d3b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3b8:	4606      	mov	r6, r0
 800d3ba:	4688      	mov	r8, r1
 800d3bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d3c0:	2700      	movs	r7, #0
 800d3c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d3c6:	f1b9 0901 	subs.w	r9, r9, #1
 800d3ca:	d505      	bpl.n	800d3d8 <_fwalk_reent+0x24>
 800d3cc:	6824      	ldr	r4, [r4, #0]
 800d3ce:	2c00      	cmp	r4, #0
 800d3d0:	d1f7      	bne.n	800d3c2 <_fwalk_reent+0xe>
 800d3d2:	4638      	mov	r0, r7
 800d3d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3d8:	89ab      	ldrh	r3, [r5, #12]
 800d3da:	2b01      	cmp	r3, #1
 800d3dc:	d907      	bls.n	800d3ee <_fwalk_reent+0x3a>
 800d3de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	d003      	beq.n	800d3ee <_fwalk_reent+0x3a>
 800d3e6:	4629      	mov	r1, r5
 800d3e8:	4630      	mov	r0, r6
 800d3ea:	47c0      	blx	r8
 800d3ec:	4307      	orrs	r7, r0
 800d3ee:	3568      	adds	r5, #104	; 0x68
 800d3f0:	e7e9      	b.n	800d3c6 <_fwalk_reent+0x12>

0800d3f2 <__retarget_lock_init_recursive>:
 800d3f2:	4770      	bx	lr

0800d3f4 <__retarget_lock_acquire_recursive>:
 800d3f4:	4770      	bx	lr

0800d3f6 <__retarget_lock_release_recursive>:
 800d3f6:	4770      	bx	lr

0800d3f8 <__swhatbuf_r>:
 800d3f8:	b570      	push	{r4, r5, r6, lr}
 800d3fa:	460e      	mov	r6, r1
 800d3fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d400:	2900      	cmp	r1, #0
 800d402:	b096      	sub	sp, #88	; 0x58
 800d404:	4614      	mov	r4, r2
 800d406:	461d      	mov	r5, r3
 800d408:	da08      	bge.n	800d41c <__swhatbuf_r+0x24>
 800d40a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d40e:	2200      	movs	r2, #0
 800d410:	602a      	str	r2, [r5, #0]
 800d412:	061a      	lsls	r2, r3, #24
 800d414:	d410      	bmi.n	800d438 <__swhatbuf_r+0x40>
 800d416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d41a:	e00e      	b.n	800d43a <__swhatbuf_r+0x42>
 800d41c:	466a      	mov	r2, sp
 800d41e:	f000 f8fb 	bl	800d618 <_fstat_r>
 800d422:	2800      	cmp	r0, #0
 800d424:	dbf1      	blt.n	800d40a <__swhatbuf_r+0x12>
 800d426:	9a01      	ldr	r2, [sp, #4]
 800d428:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d42c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d430:	425a      	negs	r2, r3
 800d432:	415a      	adcs	r2, r3
 800d434:	602a      	str	r2, [r5, #0]
 800d436:	e7ee      	b.n	800d416 <__swhatbuf_r+0x1e>
 800d438:	2340      	movs	r3, #64	; 0x40
 800d43a:	2000      	movs	r0, #0
 800d43c:	6023      	str	r3, [r4, #0]
 800d43e:	b016      	add	sp, #88	; 0x58
 800d440:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d444 <__smakebuf_r>:
 800d444:	898b      	ldrh	r3, [r1, #12]
 800d446:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d448:	079d      	lsls	r5, r3, #30
 800d44a:	4606      	mov	r6, r0
 800d44c:	460c      	mov	r4, r1
 800d44e:	d507      	bpl.n	800d460 <__smakebuf_r+0x1c>
 800d450:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d454:	6023      	str	r3, [r4, #0]
 800d456:	6123      	str	r3, [r4, #16]
 800d458:	2301      	movs	r3, #1
 800d45a:	6163      	str	r3, [r4, #20]
 800d45c:	b002      	add	sp, #8
 800d45e:	bd70      	pop	{r4, r5, r6, pc}
 800d460:	ab01      	add	r3, sp, #4
 800d462:	466a      	mov	r2, sp
 800d464:	f7ff ffc8 	bl	800d3f8 <__swhatbuf_r>
 800d468:	9900      	ldr	r1, [sp, #0]
 800d46a:	4605      	mov	r5, r0
 800d46c:	4630      	mov	r0, r6
 800d46e:	f7ff fb07 	bl	800ca80 <_malloc_r>
 800d472:	b948      	cbnz	r0, 800d488 <__smakebuf_r+0x44>
 800d474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d478:	059a      	lsls	r2, r3, #22
 800d47a:	d4ef      	bmi.n	800d45c <__smakebuf_r+0x18>
 800d47c:	f023 0303 	bic.w	r3, r3, #3
 800d480:	f043 0302 	orr.w	r3, r3, #2
 800d484:	81a3      	strh	r3, [r4, #12]
 800d486:	e7e3      	b.n	800d450 <__smakebuf_r+0xc>
 800d488:	4b0d      	ldr	r3, [pc, #52]	; (800d4c0 <__smakebuf_r+0x7c>)
 800d48a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d48c:	89a3      	ldrh	r3, [r4, #12]
 800d48e:	6020      	str	r0, [r4, #0]
 800d490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d494:	81a3      	strh	r3, [r4, #12]
 800d496:	9b00      	ldr	r3, [sp, #0]
 800d498:	6163      	str	r3, [r4, #20]
 800d49a:	9b01      	ldr	r3, [sp, #4]
 800d49c:	6120      	str	r0, [r4, #16]
 800d49e:	b15b      	cbz	r3, 800d4b8 <__smakebuf_r+0x74>
 800d4a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4a4:	4630      	mov	r0, r6
 800d4a6:	f000 f8c9 	bl	800d63c <_isatty_r>
 800d4aa:	b128      	cbz	r0, 800d4b8 <__smakebuf_r+0x74>
 800d4ac:	89a3      	ldrh	r3, [r4, #12]
 800d4ae:	f023 0303 	bic.w	r3, r3, #3
 800d4b2:	f043 0301 	orr.w	r3, r3, #1
 800d4b6:	81a3      	strh	r3, [r4, #12]
 800d4b8:	89a0      	ldrh	r0, [r4, #12]
 800d4ba:	4305      	orrs	r5, r0
 800d4bc:	81a5      	strh	r5, [r4, #12]
 800d4be:	e7cd      	b.n	800d45c <__smakebuf_r+0x18>
 800d4c0:	0800d251 	.word	0x0800d251

0800d4c4 <_raise_r>:
 800d4c4:	291f      	cmp	r1, #31
 800d4c6:	b538      	push	{r3, r4, r5, lr}
 800d4c8:	4604      	mov	r4, r0
 800d4ca:	460d      	mov	r5, r1
 800d4cc:	d904      	bls.n	800d4d8 <_raise_r+0x14>
 800d4ce:	2316      	movs	r3, #22
 800d4d0:	6003      	str	r3, [r0, #0]
 800d4d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d4d6:	bd38      	pop	{r3, r4, r5, pc}
 800d4d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d4da:	b112      	cbz	r2, 800d4e2 <_raise_r+0x1e>
 800d4dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d4e0:	b94b      	cbnz	r3, 800d4f6 <_raise_r+0x32>
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	f000 f830 	bl	800d548 <_getpid_r>
 800d4e8:	462a      	mov	r2, r5
 800d4ea:	4601      	mov	r1, r0
 800d4ec:	4620      	mov	r0, r4
 800d4ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4f2:	f000 b817 	b.w	800d524 <_kill_r>
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	d00a      	beq.n	800d510 <_raise_r+0x4c>
 800d4fa:	1c59      	adds	r1, r3, #1
 800d4fc:	d103      	bne.n	800d506 <_raise_r+0x42>
 800d4fe:	2316      	movs	r3, #22
 800d500:	6003      	str	r3, [r0, #0]
 800d502:	2001      	movs	r0, #1
 800d504:	e7e7      	b.n	800d4d6 <_raise_r+0x12>
 800d506:	2400      	movs	r4, #0
 800d508:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d50c:	4628      	mov	r0, r5
 800d50e:	4798      	blx	r3
 800d510:	2000      	movs	r0, #0
 800d512:	e7e0      	b.n	800d4d6 <_raise_r+0x12>

0800d514 <raise>:
 800d514:	4b02      	ldr	r3, [pc, #8]	; (800d520 <raise+0xc>)
 800d516:	4601      	mov	r1, r0
 800d518:	6818      	ldr	r0, [r3, #0]
 800d51a:	f7ff bfd3 	b.w	800d4c4 <_raise_r>
 800d51e:	bf00      	nop
 800d520:	20000120 	.word	0x20000120

0800d524 <_kill_r>:
 800d524:	b538      	push	{r3, r4, r5, lr}
 800d526:	4d07      	ldr	r5, [pc, #28]	; (800d544 <_kill_r+0x20>)
 800d528:	2300      	movs	r3, #0
 800d52a:	4604      	mov	r4, r0
 800d52c:	4608      	mov	r0, r1
 800d52e:	4611      	mov	r1, r2
 800d530:	602b      	str	r3, [r5, #0]
 800d532:	f7f4 ffc5 	bl	80024c0 <_kill>
 800d536:	1c43      	adds	r3, r0, #1
 800d538:	d102      	bne.n	800d540 <_kill_r+0x1c>
 800d53a:	682b      	ldr	r3, [r5, #0]
 800d53c:	b103      	cbz	r3, 800d540 <_kill_r+0x1c>
 800d53e:	6023      	str	r3, [r4, #0]
 800d540:	bd38      	pop	{r3, r4, r5, pc}
 800d542:	bf00      	nop
 800d544:	200039ec 	.word	0x200039ec

0800d548 <_getpid_r>:
 800d548:	f7f4 bfb2 	b.w	80024b0 <_getpid>

0800d54c <__sread>:
 800d54c:	b510      	push	{r4, lr}
 800d54e:	460c      	mov	r4, r1
 800d550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d554:	f000 f894 	bl	800d680 <_read_r>
 800d558:	2800      	cmp	r0, #0
 800d55a:	bfab      	itete	ge
 800d55c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d55e:	89a3      	ldrhlt	r3, [r4, #12]
 800d560:	181b      	addge	r3, r3, r0
 800d562:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d566:	bfac      	ite	ge
 800d568:	6563      	strge	r3, [r4, #84]	; 0x54
 800d56a:	81a3      	strhlt	r3, [r4, #12]
 800d56c:	bd10      	pop	{r4, pc}

0800d56e <__swrite>:
 800d56e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d572:	461f      	mov	r7, r3
 800d574:	898b      	ldrh	r3, [r1, #12]
 800d576:	05db      	lsls	r3, r3, #23
 800d578:	4605      	mov	r5, r0
 800d57a:	460c      	mov	r4, r1
 800d57c:	4616      	mov	r6, r2
 800d57e:	d505      	bpl.n	800d58c <__swrite+0x1e>
 800d580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d584:	2302      	movs	r3, #2
 800d586:	2200      	movs	r2, #0
 800d588:	f000 f868 	bl	800d65c <_lseek_r>
 800d58c:	89a3      	ldrh	r3, [r4, #12]
 800d58e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d592:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d596:	81a3      	strh	r3, [r4, #12]
 800d598:	4632      	mov	r2, r6
 800d59a:	463b      	mov	r3, r7
 800d59c:	4628      	mov	r0, r5
 800d59e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5a2:	f000 b817 	b.w	800d5d4 <_write_r>

0800d5a6 <__sseek>:
 800d5a6:	b510      	push	{r4, lr}
 800d5a8:	460c      	mov	r4, r1
 800d5aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5ae:	f000 f855 	bl	800d65c <_lseek_r>
 800d5b2:	1c43      	adds	r3, r0, #1
 800d5b4:	89a3      	ldrh	r3, [r4, #12]
 800d5b6:	bf15      	itete	ne
 800d5b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800d5ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d5be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d5c2:	81a3      	strheq	r3, [r4, #12]
 800d5c4:	bf18      	it	ne
 800d5c6:	81a3      	strhne	r3, [r4, #12]
 800d5c8:	bd10      	pop	{r4, pc}

0800d5ca <__sclose>:
 800d5ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5ce:	f000 b813 	b.w	800d5f8 <_close_r>
	...

0800d5d4 <_write_r>:
 800d5d4:	b538      	push	{r3, r4, r5, lr}
 800d5d6:	4d07      	ldr	r5, [pc, #28]	; (800d5f4 <_write_r+0x20>)
 800d5d8:	4604      	mov	r4, r0
 800d5da:	4608      	mov	r0, r1
 800d5dc:	4611      	mov	r1, r2
 800d5de:	2200      	movs	r2, #0
 800d5e0:	602a      	str	r2, [r5, #0]
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	f7f4 ffa3 	bl	800252e <_write>
 800d5e8:	1c43      	adds	r3, r0, #1
 800d5ea:	d102      	bne.n	800d5f2 <_write_r+0x1e>
 800d5ec:	682b      	ldr	r3, [r5, #0]
 800d5ee:	b103      	cbz	r3, 800d5f2 <_write_r+0x1e>
 800d5f0:	6023      	str	r3, [r4, #0]
 800d5f2:	bd38      	pop	{r3, r4, r5, pc}
 800d5f4:	200039ec 	.word	0x200039ec

0800d5f8 <_close_r>:
 800d5f8:	b538      	push	{r3, r4, r5, lr}
 800d5fa:	4d06      	ldr	r5, [pc, #24]	; (800d614 <_close_r+0x1c>)
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	4604      	mov	r4, r0
 800d600:	4608      	mov	r0, r1
 800d602:	602b      	str	r3, [r5, #0]
 800d604:	f7f4 ffaf 	bl	8002566 <_close>
 800d608:	1c43      	adds	r3, r0, #1
 800d60a:	d102      	bne.n	800d612 <_close_r+0x1a>
 800d60c:	682b      	ldr	r3, [r5, #0]
 800d60e:	b103      	cbz	r3, 800d612 <_close_r+0x1a>
 800d610:	6023      	str	r3, [r4, #0]
 800d612:	bd38      	pop	{r3, r4, r5, pc}
 800d614:	200039ec 	.word	0x200039ec

0800d618 <_fstat_r>:
 800d618:	b538      	push	{r3, r4, r5, lr}
 800d61a:	4d07      	ldr	r5, [pc, #28]	; (800d638 <_fstat_r+0x20>)
 800d61c:	2300      	movs	r3, #0
 800d61e:	4604      	mov	r4, r0
 800d620:	4608      	mov	r0, r1
 800d622:	4611      	mov	r1, r2
 800d624:	602b      	str	r3, [r5, #0]
 800d626:	f7f4 ffaa 	bl	800257e <_fstat>
 800d62a:	1c43      	adds	r3, r0, #1
 800d62c:	d102      	bne.n	800d634 <_fstat_r+0x1c>
 800d62e:	682b      	ldr	r3, [r5, #0]
 800d630:	b103      	cbz	r3, 800d634 <_fstat_r+0x1c>
 800d632:	6023      	str	r3, [r4, #0]
 800d634:	bd38      	pop	{r3, r4, r5, pc}
 800d636:	bf00      	nop
 800d638:	200039ec 	.word	0x200039ec

0800d63c <_isatty_r>:
 800d63c:	b538      	push	{r3, r4, r5, lr}
 800d63e:	4d06      	ldr	r5, [pc, #24]	; (800d658 <_isatty_r+0x1c>)
 800d640:	2300      	movs	r3, #0
 800d642:	4604      	mov	r4, r0
 800d644:	4608      	mov	r0, r1
 800d646:	602b      	str	r3, [r5, #0]
 800d648:	f7f4 ffa9 	bl	800259e <_isatty>
 800d64c:	1c43      	adds	r3, r0, #1
 800d64e:	d102      	bne.n	800d656 <_isatty_r+0x1a>
 800d650:	682b      	ldr	r3, [r5, #0]
 800d652:	b103      	cbz	r3, 800d656 <_isatty_r+0x1a>
 800d654:	6023      	str	r3, [r4, #0]
 800d656:	bd38      	pop	{r3, r4, r5, pc}
 800d658:	200039ec 	.word	0x200039ec

0800d65c <_lseek_r>:
 800d65c:	b538      	push	{r3, r4, r5, lr}
 800d65e:	4d07      	ldr	r5, [pc, #28]	; (800d67c <_lseek_r+0x20>)
 800d660:	4604      	mov	r4, r0
 800d662:	4608      	mov	r0, r1
 800d664:	4611      	mov	r1, r2
 800d666:	2200      	movs	r2, #0
 800d668:	602a      	str	r2, [r5, #0]
 800d66a:	461a      	mov	r2, r3
 800d66c:	f7f4 ffa2 	bl	80025b4 <_lseek>
 800d670:	1c43      	adds	r3, r0, #1
 800d672:	d102      	bne.n	800d67a <_lseek_r+0x1e>
 800d674:	682b      	ldr	r3, [r5, #0]
 800d676:	b103      	cbz	r3, 800d67a <_lseek_r+0x1e>
 800d678:	6023      	str	r3, [r4, #0]
 800d67a:	bd38      	pop	{r3, r4, r5, pc}
 800d67c:	200039ec 	.word	0x200039ec

0800d680 <_read_r>:
 800d680:	b538      	push	{r3, r4, r5, lr}
 800d682:	4d07      	ldr	r5, [pc, #28]	; (800d6a0 <_read_r+0x20>)
 800d684:	4604      	mov	r4, r0
 800d686:	4608      	mov	r0, r1
 800d688:	4611      	mov	r1, r2
 800d68a:	2200      	movs	r2, #0
 800d68c:	602a      	str	r2, [r5, #0]
 800d68e:	461a      	mov	r2, r3
 800d690:	f7f4 ff30 	bl	80024f4 <_read>
 800d694:	1c43      	adds	r3, r0, #1
 800d696:	d102      	bne.n	800d69e <_read_r+0x1e>
 800d698:	682b      	ldr	r3, [r5, #0]
 800d69a:	b103      	cbz	r3, 800d69e <_read_r+0x1e>
 800d69c:	6023      	str	r3, [r4, #0]
 800d69e:	bd38      	pop	{r3, r4, r5, pc}
 800d6a0:	200039ec 	.word	0x200039ec
 800d6a4:	00000000 	.word	0x00000000

0800d6a8 <cbrt>:
 800d6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6ac:	ec51 0b10 	vmov	r0, r1, d0
 800d6b0:	4a5b      	ldr	r2, [pc, #364]	; (800d820 <cbrt+0x178>)
 800d6b2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	ed2d 8b02 	vpush	{d8}
 800d6bc:	ee10 2a10 	vmov	r2, s0
 800d6c0:	468a      	mov	sl, r1
 800d6c2:	d908      	bls.n	800d6d6 <cbrt+0x2e>
 800d6c4:	460b      	mov	r3, r1
 800d6c6:	f7f2 fde9 	bl	800029c <__adddf3>
 800d6ca:	ecbd 8b02 	vpop	{d8}
 800d6ce:	ec41 0b10 	vmov	d0, r0, r1
 800d6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6d6:	431a      	orrs	r2, r3
 800d6d8:	d0f7      	beq.n	800d6ca <cbrt+0x22>
 800d6da:	4a52      	ldr	r2, [pc, #328]	; (800d824 <cbrt+0x17c>)
 800d6dc:	ea0a 0202 	and.w	r2, sl, r2
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	4604      	mov	r4, r0
 800d6e4:	461d      	mov	r5, r3
 800d6e6:	2a00      	cmp	r2, #0
 800d6e8:	d17b      	bne.n	800d7e2 <cbrt+0x13a>
 800d6ea:	4b4f      	ldr	r3, [pc, #316]	; (800d828 <cbrt+0x180>)
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	f7f2 ff8b 	bl	8000608 <__aeabi_dmul>
 800d6f2:	2203      	movs	r2, #3
 800d6f4:	fbb1 f3f2 	udiv	r3, r1, r2
 800d6f8:	f103 5725 	add.w	r7, r3, #692060160	; 0x29400000
 800d6fc:	f507 177d 	add.w	r7, r7, #4145152	; 0x3f4000
 800d700:	f507 5762 	add.w	r7, r7, #14464	; 0x3880
 800d704:	4606      	mov	r6, r0
 800d706:	3713      	adds	r7, #19
 800d708:	4632      	mov	r2, r6
 800d70a:	463b      	mov	r3, r7
 800d70c:	4630      	mov	r0, r6
 800d70e:	4639      	mov	r1, r7
 800d710:	f7f2 ff7a 	bl	8000608 <__aeabi_dmul>
 800d714:	4622      	mov	r2, r4
 800d716:	462b      	mov	r3, r5
 800d718:	f7f3 f8a0 	bl	800085c <__aeabi_ddiv>
 800d71c:	4632      	mov	r2, r6
 800d71e:	463b      	mov	r3, r7
 800d720:	f7f2 ff72 	bl	8000608 <__aeabi_dmul>
 800d724:	a334      	add	r3, pc, #208	; (adr r3, 800d7f8 <cbrt+0x150>)
 800d726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d72a:	f7f2 fdb7 	bl	800029c <__adddf3>
 800d72e:	a334      	add	r3, pc, #208	; (adr r3, 800d800 <cbrt+0x158>)
 800d730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d734:	4680      	mov	r8, r0
 800d736:	4689      	mov	r9, r1
 800d738:	f7f2 fdb0 	bl	800029c <__adddf3>
 800d73c:	4642      	mov	r2, r8
 800d73e:	464b      	mov	r3, r9
 800d740:	ec41 0b18 	vmov	d8, r0, r1
 800d744:	a130      	add	r1, pc, #192	; (adr r1, 800d808 <cbrt+0x160>)
 800d746:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d74a:	f7f3 f887 	bl	800085c <__aeabi_ddiv>
 800d74e:	4602      	mov	r2, r0
 800d750:	460b      	mov	r3, r1
 800d752:	ec51 0b18 	vmov	r0, r1, d8
 800d756:	f7f2 fda1 	bl	800029c <__adddf3>
 800d75a:	4602      	mov	r2, r0
 800d75c:	460b      	mov	r3, r1
 800d75e:	a12c      	add	r1, pc, #176	; (adr r1, 800d810 <cbrt+0x168>)
 800d760:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d764:	f7f3 f87a 	bl	800085c <__aeabi_ddiv>
 800d768:	a32b      	add	r3, pc, #172	; (adr r3, 800d818 <cbrt+0x170>)
 800d76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d76e:	f7f2 fd95 	bl	800029c <__adddf3>
 800d772:	4632      	mov	r2, r6
 800d774:	463b      	mov	r3, r7
 800d776:	f7f2 ff47 	bl	8000608 <__aeabi_dmul>
 800d77a:	2600      	movs	r6, #0
 800d77c:	1c4f      	adds	r7, r1, #1
 800d77e:	4632      	mov	r2, r6
 800d780:	463b      	mov	r3, r7
 800d782:	4630      	mov	r0, r6
 800d784:	4639      	mov	r1, r7
 800d786:	f7f2 ff3f 	bl	8000608 <__aeabi_dmul>
 800d78a:	4602      	mov	r2, r0
 800d78c:	460b      	mov	r3, r1
 800d78e:	4620      	mov	r0, r4
 800d790:	4629      	mov	r1, r5
 800d792:	f7f3 f863 	bl	800085c <__aeabi_ddiv>
 800d796:	4632      	mov	r2, r6
 800d798:	463b      	mov	r3, r7
 800d79a:	4680      	mov	r8, r0
 800d79c:	4689      	mov	r9, r1
 800d79e:	f7f2 fd7b 	bl	8000298 <__aeabi_dsub>
 800d7a2:	4632      	mov	r2, r6
 800d7a4:	460d      	mov	r5, r1
 800d7a6:	4604      	mov	r4, r0
 800d7a8:	463b      	mov	r3, r7
 800d7aa:	4630      	mov	r0, r6
 800d7ac:	4639      	mov	r1, r7
 800d7ae:	f7f2 fd75 	bl	800029c <__adddf3>
 800d7b2:	4642      	mov	r2, r8
 800d7b4:	464b      	mov	r3, r9
 800d7b6:	f7f2 fd71 	bl	800029c <__adddf3>
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	460b      	mov	r3, r1
 800d7be:	4620      	mov	r0, r4
 800d7c0:	4629      	mov	r1, r5
 800d7c2:	f7f3 f84b 	bl	800085c <__aeabi_ddiv>
 800d7c6:	4632      	mov	r2, r6
 800d7c8:	463b      	mov	r3, r7
 800d7ca:	f7f2 ff1d 	bl	8000608 <__aeabi_dmul>
 800d7ce:	463b      	mov	r3, r7
 800d7d0:	4632      	mov	r2, r6
 800d7d2:	f7f2 fd63 	bl	800029c <__adddf3>
 800d7d6:	f00a 4300 	and.w	r3, sl, #2147483648	; 0x80000000
 800d7da:	ea43 0501 	orr.w	r5, r3, r1
 800d7de:	4629      	mov	r1, r5
 800d7e0:	e773      	b.n	800d6ca <cbrt+0x22>
 800d7e2:	2203      	movs	r2, #3
 800d7e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7e8:	f103 572c 	add.w	r7, r3, #721420288	; 0x2b000000
 800d7ec:	f5a7 07c1 	sub.w	r7, r7, #6324224	; 0x608000
 800d7f0:	2600      	movs	r6, #0
 800d7f2:	f2a7 776d 	subw	r7, r7, #1901	; 0x76d
 800d7f6:	e787      	b.n	800d708 <cbrt+0x60>
 800d7f8:	f15f15f1 	.word	0xf15f15f1
 800d7fc:	3fe15f15 	.word	0x3fe15f15
 800d800:	0ea0ea0f 	.word	0x0ea0ea0f
 800d804:	3ff6a0ea 	.word	0x3ff6a0ea
 800d808:	2532c834 	.word	0x2532c834
 800d80c:	bfe691de 	.word	0xbfe691de
 800d810:	6db6db6e 	.word	0x6db6db6e
 800d814:	3ff9b6db 	.word	0x3ff9b6db
 800d818:	b6db6db7 	.word	0xb6db6db7
 800d81c:	3fd6db6d 	.word	0x3fd6db6d
 800d820:	7fefffff 	.word	0x7fefffff
 800d824:	7ff00000 	.word	0x7ff00000
 800d828:	43500000 	.word	0x43500000

0800d82c <_init>:
 800d82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d82e:	bf00      	nop
 800d830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d832:	bc08      	pop	{r3}
 800d834:	469e      	mov	lr, r3
 800d836:	4770      	bx	lr

0800d838 <_fini>:
 800d838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d83a:	bf00      	nop
 800d83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d83e:	bc08      	pop	{r3}
 800d840:	469e      	mov	lr, r3
 800d842:	4770      	bx	lr
