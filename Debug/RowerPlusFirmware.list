
RowerPlusFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d604  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  0800d7a8  0800d7a8  0001d7a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbec  0800dbec  000202f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800dbec  0800dbec  0001dbec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbf4  0800dbf4  000202f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbf4  0800dbf4  0001dbf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dbf8  0800dbf8  0001dbf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  0800dbfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f40  200002f8  0800def4  000202f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004238  0800def4  00024238  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cda2  00000000  00000000  00020326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044bf  00000000  00000000  0003d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017e0  00000000  00000000  00041588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001620  00000000  00000000  00042d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bd9b  00000000  00000000  00044388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f022  00000000  00000000  00060123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096a80  00000000  00000000  0007f145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  00115bc5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007324  00000000  00000000  00115c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00001360  00000000  00000000  0011cfac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002f8 	.word	0x200002f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d78c 	.word	0x0800d78c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002fc 	.word	0x200002fc
 80001dc:	0800d78c 	.word	0x0800d78c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <storage_write>:
} storage_internal_data_t;

storage_internal_data_t int_data = {0};

void storage_write(storage_data_t* data)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af04      	add	r7, sp, #16
 8000f62:	6078      	str	r0, [r7, #4]
	memset(&int_data, 0, sizeof(storage_internal_data_t));
 8000f64:	2210      	movs	r2, #16
 8000f66:	2100      	movs	r1, #0
 8000f68:	481f      	ldr	r0, [pc, #124]	; (8000fe8 <storage_write+0x8c>)
 8000f6a:	f009 fe3b 	bl	800abe4 <memset>
	int_data.ka = data->ka;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <storage_write+0x8c>)
 8000f74:	6013      	str	r3, [r2, #0]
	int_data.km = data->km;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <storage_write+0x8c>)
 8000f7c:	6053      	str	r3, [r2, #4]
	int_data.ks = data->ks;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <storage_write+0x8c>)
 8000f84:	6093      	str	r3, [r2, #8]

	for(uint32_t i = 0; i < sizeof(storage_internal_data_t); i++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	e013      	b.n	8000fb4 <storage_write+0x58>
	{
		if(i != 12 && i != 13)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2b0c      	cmp	r3, #12
 8000f90:	d00d      	beq.n	8000fae <storage_write+0x52>
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2b0d      	cmp	r3, #13
 8000f96:	d00a      	beq.n	8000fae <storage_write+0x52>
		{
			int_data.checksum += ((char*)&int_data)[i];
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <storage_write+0x8c>)
 8000f9a:	899a      	ldrh	r2, [r3, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4912      	ldr	r1, [pc, #72]	; (8000fe8 <storage_write+0x8c>)
 8000fa0:	440b      	add	r3, r1
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <storage_write+0x8c>)
 8000fac:	819a      	strh	r2, [r3, #12]
	for(uint32_t i = 0; i < sizeof(storage_internal_data_t); i++)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	2b0f      	cmp	r3, #15
 8000fb8:	d9e8      	bls.n	8000f8c <storage_write+0x30>
		}
	}

	int_data.checksum += 10;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <storage_write+0x8c>)
 8000fbc:	899b      	ldrh	r3, [r3, #12]
 8000fbe:	330a      	adds	r3, #10
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <storage_write+0x8c>)
 8000fc4:	819a      	strh	r2, [r3, #12]

	HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, 0, 2, &int_data, sizeof(storage_internal_data_t), 100);
 8000fc6:	2364      	movs	r3, #100	; 0x64
 8000fc8:	9302      	str	r3, [sp, #8]
 8000fca:	2310      	movs	r3, #16
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <storage_write+0x8c>)
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	21a0      	movs	r1, #160	; 0xa0
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <storage_write+0x90>)
 8000fda:	f001 feef 	bl	8002dbc <HAL_I2C_Mem_Write>
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000314 	.word	0x20000314
 8000fec:	200026a4 	.word	0x200026a4

08000ff0 <storage_read>:

BOOL storage_read(storage_data_t* output)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	6078      	str	r0, [r7, #4]
	memset(&int_data, 0, sizeof(storage_internal_data_t));
 8000ff8:	2210      	movs	r2, #16
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4821      	ldr	r0, [pc, #132]	; (8001084 <storage_read+0x94>)
 8000ffe:	f009 fdf1 	bl	800abe4 <memset>
	if(HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, 0, 2, &int_data, sizeof(storage_internal_data_t), 100) == HAL_OK)
 8001002:	2364      	movs	r3, #100	; 0x64
 8001004:	9302      	str	r3, [sp, #8]
 8001006:	2310      	movs	r3, #16
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <storage_read+0x94>)
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2302      	movs	r3, #2
 8001010:	2200      	movs	r2, #0
 8001012:	21a0      	movs	r1, #160	; 0xa0
 8001014:	481c      	ldr	r0, [pc, #112]	; (8001088 <storage_read+0x98>)
 8001016:	f001 ffcb 	bl	8002fb0 <HAL_I2C_Mem_Read>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d12b      	bne.n	8001078 <storage_read+0x88>
	{
		uint16_t checksum = 10;
 8001020:	230a      	movs	r3, #10
 8001022:	81fb      	strh	r3, [r7, #14]

		for(uint32_t i = 0; i < sizeof(storage_internal_data_t); i++)
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	e010      	b.n	800104c <storage_read+0x5c>
		{
			if(i != 12 && i != 13)
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	2b0c      	cmp	r3, #12
 800102e:	d00a      	beq.n	8001046 <storage_read+0x56>
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2b0d      	cmp	r3, #13
 8001034:	d007      	beq.n	8001046 <storage_read+0x56>
			{
				checksum += ((char*)&int_data)[i];
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	4a12      	ldr	r2, [pc, #72]	; (8001084 <storage_read+0x94>)
 800103a:	4413      	add	r3, r2
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b29a      	uxth	r2, r3
 8001040:	89fb      	ldrh	r3, [r7, #14]
 8001042:	4413      	add	r3, r2
 8001044:	81fb      	strh	r3, [r7, #14]
		for(uint32_t i = 0; i < sizeof(storage_internal_data_t); i++)
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	3301      	adds	r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	2b0f      	cmp	r3, #15
 8001050:	d9eb      	bls.n	800102a <storage_read+0x3a>
			}
		}

		if(checksum == int_data.checksum)
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <storage_read+0x94>)
 8001054:	899b      	ldrh	r3, [r3, #12]
 8001056:	89fa      	ldrh	r2, [r7, #14]
 8001058:	429a      	cmp	r2, r3
 800105a:	d10d      	bne.n	8001078 <storage_read+0x88>
		{
			output->ka = int_data.ka;
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <storage_read+0x94>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	601a      	str	r2, [r3, #0]
			output->km = int_data.km;
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <storage_read+0x94>)
 8001066:	685a      	ldr	r2, [r3, #4]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	605a      	str	r2, [r3, #4]
			output->ks = int_data.ks;
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <storage_read+0x94>)
 800106e:	689a      	ldr	r2, [r3, #8]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	609a      	str	r2, [r3, #8]

			return TRUE;
 8001074:	2301      	movs	r3, #1
 8001076:	e000      	b.n	800107a <storage_read+0x8a>
		}
	}

	return FALSE;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000314 	.word	0x20000314
 8001088:	200026a4 	.word	0x200026a4

0800108c <hall_parser_init>:
extern TIM_HandleTypeDef htim2;

ergometer_stroke_params_t stroke_params = {0};

void hall_parser_init()
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af02      	add	r7, sp, #8
	arm_fir_init_f32(&fir_instance, ANGULAR_VELOCITY_FIR_COEFFS_SIZE, fir_coefficients, fir_state_buffer, FIR_BLOCK_SIZE);
 8001092:	2340      	movs	r3, #64	; 0x40
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <hall_parser_init+0x1c>)
 8001098:	4a04      	ldr	r2, [pc, #16]	; (80010ac <hall_parser_init+0x20>)
 800109a:	2104      	movs	r1, #4
 800109c:	4804      	ldr	r0, [pc, #16]	; (80010b0 <hall_parser_init+0x24>)
 800109e:	f009 fd57 	bl	800ab50 <arm_fir_init_f32>
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000330 	.word	0x20000330
 80010ac:	20000000 	.word	0x20000000
 80010b0:	20000324 	.word	0x20000324

080010b4 <shift_array_left_f>:
		arr[i-1] = arr[i];
	}
}

static inline void shift_array_left_f(float* arr, uint32_t size)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 1; i < size; i++)
 80010be:	2301      	movs	r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	e00f      	b.n	80010e4 <shift_array_left_f+0x30>
	{
		arr[i-1] = arr[i];
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	441a      	add	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80010d2:	3b01      	subs	r3, #1
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	440b      	add	r3, r1
 80010da:	6812      	ldr	r2, [r2, #0]
 80010dc:	601a      	str	r2, [r3, #0]
	for(uint32_t i = 1; i < size; i++)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	3301      	adds	r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d3eb      	bcc.n	80010c4 <shift_array_left_f+0x10>
	}
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <shift_array_left_st>:

static inline void shift_array_left_st(systemtime_t* arr, uint32_t size)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b085      	sub	sp, #20
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	6039      	str	r1, [r7, #0]
	for(uint32_t i = 1; i < size; i++)
 8001104:	2301      	movs	r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	e012      	b.n	8001130 <shift_array_left_st+0x36>
	{
		arr[i-1] = arr[i];
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	18d1      	adds	r1, r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001118:	3b01      	subs	r3, #1
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	4413      	add	r3, r2
 8001120:	460a      	mov	r2, r1
 8001122:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001126:	e883 0003 	stmia.w	r3, {r0, r1}
	for(uint32_t i = 1; i < size; i++)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3301      	adds	r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	d3e8      	bcc.n	800110a <shift_array_left_st+0x10>
	}
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <hall_parser_push_trigger>:
		arr[i] = arr[i-1];
	}
}

void hall_parser_push_trigger(hall_parser_t* parser)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_RAW_HALL
	char buffer[] = "0\r\n1\r\n0\r\n";
	HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 100);
#else
	systemtime_get_time(&system_time);
 8001150:	482a      	ldr	r0, [pc, #168]	; (80011fc <hall_parser_push_trigger+0xb4>)
 8001152:	f001 f935 	bl	80023c0 <systemtime_get_time>

	uint32_t delta_t = systemtime_time_diff_us(&system_time, &parser->angular_velocities_times[ANGULAR_VELOCITIES_BUFFER_SIZE - 1]);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f603 430c 	addw	r3, r3, #3084	; 0xc0c
 800115c:	4619      	mov	r1, r3
 800115e:	4827      	ldr	r0, [pc, #156]	; (80011fc <hall_parser_push_trigger+0xb4>)
 8001160:	f001 f946 	bl	80023f0 <systemtime_time_diff_us>
 8001164:	60f8      	str	r0, [r7, #12]
			parser->angular_velocities_times[ANGULAR_VELOCITIES_BUFFER_SIZE - 1].ms,
			parser->angular_velocities_times[ANGULAR_VELOCITIES_BUFFER_SIZE - 1].us);
	HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 100);
#endif

	float w = (float)ANG_VEL_NUMERATOR/delta_t;
 8001166:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001200 <hall_parser_push_trigger+0xb8>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	ee07 3a90 	vmov	s15, r3
 8001170:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001178:	edc7 7a02 	vstr	s15, [r7, #8]

	if(w > ANGULAR_VELOCITY_LIMIT)
 800117c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001180:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001204 <hall_parser_push_trigger+0xbc>
 8001184:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118c:	dc32      	bgt.n	80011f4 <hall_parser_push_trigger+0xac>
	{
		return;
	}

	shift_array_left_f(parser->angular_velocities, ANGULAR_VELOCITIES_BUFFER_SIZE);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3314      	adds	r3, #20
 8001192:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff8c 	bl	80010b4 <shift_array_left_f>
	shift_array_left_st(parser->angular_velocities_times, ANGULAR_VELOCITIES_BUFFER_SIZE);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f203 4314 	addw	r3, r3, #1044	; 0x414
 80011a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ffa7 	bl	80010fa <shift_array_left_st>

	parser->base_point--;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f8d3 3c14 	ldr.w	r3, [r3, #3092]	; 0xc14
 80011b2:	1e5a      	subs	r2, r3, #1
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
	parser->turning_point--;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 80011c0:	1e5a      	subs	r2, r3, #1
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f8c3 2c18 	str.w	r2, [r3, #3096]	; 0xc18
	parser->angular_velocities[ANGULAR_VELOCITIES_BUFFER_SIZE - 1] = w;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	601a      	str	r2, [r3, #0]
	memcpy(&parser->angular_velocities_times[ANGULAR_VELOCITIES_BUFFER_SIZE - 1], &system_time, sizeof(systemtime_t));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f603 430c 	addw	r3, r3, #3084	; 0xc0c
 80011d8:	2208      	movs	r2, #8
 80011da:	4908      	ldr	r1, [pc, #32]	; (80011fc <hall_parser_push_trigger+0xb4>)
 80011dc:	4618      	mov	r0, r3
 80011de:	f009 fcf3 	bl	800abc8 <memcpy>

	if(parser->angular_velocities_times[ANGULAR_VELOCITIES_BUFFER_SIZE - 2].ms > 0)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f8d3 3c04 	ldr.w	r3, [r3, #3076]	; 0xc04
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d004      	beq.n	80011f6 <hall_parser_push_trigger+0xae>
	{
		angular_velocity_measurement_received(parser);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 f80b 	bl	8001208 <angular_velocity_measurement_received>
 80011f2:	e000      	b.n	80011f6 <hall_parser_push_trigger+0xae>
		return;
 80011f4:	bf00      	nop
	}
#endif
}
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	2000083c 	.word	0x2000083c
 8001200:	49bfbf63 	.word	0x49bfbf63
 8001204:	437a0000 	.word	0x437a0000

08001208 <angular_velocity_measurement_received>:

static inline void angular_velocity_measurement_received(hall_parser_t* parser)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	// Apply filter (just averaging the last measurement with the previous one to remove zig-zag from curve)
	shift_array_left_f(parser->angular_velocities_filtered, ANGULAR_VELOCITIES_BUFFER_SIZE);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	f603 431c 	addw	r3, r3, #3100	; 0xc1c
 8001216:	f44f 7180 	mov.w	r1, #256	; 0x100
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff ff4a 	bl	80010b4 <shift_array_left_f>
	parser->angular_velocities_filtered[ANGULAR_VELOCITIES_BUFFER_SIZE-1] =
			get_angular_velocity_filtered(parser);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 fa8b 	bl	800173c <get_angular_velocity_filtered>
 8001226:	eef0 7a40 	vmov.f32	s15, s0
	parser->angular_velocities_filtered[ANGULAR_VELOCITIES_BUFFER_SIZE-1] =
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001230:	edc3 7a06 	vstr	s15, [r3, #24]

	STROKE_STATE new_state = get_stroke_state(parser);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 f818 	bl	800126a <get_stroke_state>
 800123a:	4603      	mov	r3, r0
 800123c:	73fb      	strb	r3, [r7, #15]
	{
		buffer = "REST\r\n";
	}
	HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 100);
#else
	if(new_state == DECELERATING)
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d104      	bne.n	800124e <angular_velocity_measurement_received+0x46>
	{
		parser->turning_point = ANGULAR_VELOCITIES_BUFFER_SIZE-ANGULAR_VELOCITIES_LAG;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	22fd      	movs	r2, #253	; 0xfd
 8001248:	f8c3 2c18 	str.w	r2, [r3, #3096]	; 0xc18
	}

	parser->stroke_state = new_state;
	*/
#endif
}
 800124c:	e009      	b.n	8001262 <angular_velocity_measurement_received+0x5a>
	} else if (new_state == PULLING)
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	2b02      	cmp	r3, #2
 8001252:	d106      	bne.n	8001262 <angular_velocity_measurement_received+0x5a>
		compute_stroke(parser);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 f82d 	bl	80012b4 <compute_stroke>
		parser->base_point = ANGULAR_VELOCITIES_BUFFER_SIZE-ANGULAR_VELOCITIES_LAG;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	22fd      	movs	r2, #253	; 0xfd
 800125e:	f8c3 2c14 	str.w	r2, [r3, #3092]	; 0xc14
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <get_stroke_state>:

static inline STROKE_STATE get_stroke_state(hall_parser_t* parser)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
	if(parser->angular_velocities[ANGULAR_VELOCITIES_BUFFER_SIZE-ANGULAR_VELOCITIES_LAG] > ANGULAR_VELOCITY_ACTIVATION_TRESHOLD)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001278:	edd3 7a00 	vldr	s15, [r3]
 800127c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001288:	dd0f      	ble.n	80012aa <get_stroke_state+0x40>
		/*
		 * We operate on filtered data to remove the noise that would make the detection
		 * of slope change more difficult
		 */
		//apply_fir(&fir_instance, parser->angular_velocities, parser->angular_velocities_filtered, ANGULAR_VELOCITIES_BUFFER_SIZE);
		if(is_w_a_maximum(parser))
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 fac1 	bl	8001812 <is_w_a_maximum>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <get_stroke_state+0x30>
		{
			return DECELERATING;
 8001296:	2301      	movs	r3, #1
 8001298:	e008      	b.n	80012ac <get_stroke_state+0x42>
		} else if(is_w_a_minimum(parser))
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 fa88 	bl	80017b0 <is_w_a_minimum>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <get_stroke_state+0x40>
		{
			return PULLING;
 80012a6:	2302      	movs	r3, #2
 80012a8:	e000      	b.n	80012ac <get_stroke_state+0x42>
		}
	}

	return REST;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <compute_stroke>:
		arm_fir_f32(instance, data + i * FIR_BLOCK_SIZE, out_data + i * FIR_BLOCK_SIZE, FIR_BLOCK_SIZE);
	}
}

void compute_stroke(hall_parser_t* parser)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	ed2d 8b02 	vpush	{d8}
 80012ba:	b08e      	sub	sp, #56	; 0x38
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	if(parser->base_point < ANGULAR_VELOCITIES_BUFFER_SIZE && parser->turning_point < ANGULAR_VELOCITIES_BUFFER_SIZE &&
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f8d3 3c14 	ldr.w	r3, [r3, #3092]	; 0xc14
 80012c6:	2bff      	cmp	r3, #255	; 0xff
 80012c8:	f200 8173 	bhi.w	80015b2 <compute_stroke+0x2fe>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 80012d2:	2bff      	cmp	r3, #255	; 0xff
 80012d4:	f200 816d 	bhi.w	80015b2 <compute_stroke+0x2fe>
			parser->turning_point > parser->base_point && ANGULAR_VELOCITIES_BUFFER_SIZE - parser->turning_point > STROKE_DECEL_MIN_POINTS &&
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f8d3 3c14 	ldr.w	r3, [r3, #3092]	; 0xc14
	if(parser->base_point < ANGULAR_VELOCITIES_BUFFER_SIZE && parser->turning_point < ANGULAR_VELOCITIES_BUFFER_SIZE &&
 80012e4:	429a      	cmp	r2, r3
 80012e6:	f240 8164 	bls.w	80015b2 <compute_stroke+0x2fe>
			parser->turning_point > parser->base_point && ANGULAR_VELOCITIES_BUFFER_SIZE - parser->turning_point > STROKE_DECEL_MIN_POINTS &&
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 80012f0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80012f4:	2b07      	cmp	r3, #7
 80012f6:	f240 815c 	bls.w	80015b2 <compute_stroke+0x2fe>
			parser->turning_point - parser->base_point > STROKE_PULL_MIN_POINTS)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f8d3 3c14 	ldr.w	r3, [r3, #3092]	; 0xc14
 8001306:	1ad3      	subs	r3, r2, r3
			parser->turning_point > parser->base_point && ANGULAR_VELOCITIES_BUFFER_SIZE - parser->turning_point > STROKE_DECEL_MIN_POINTS &&
 8001308:	2b04      	cmp	r3, #4
 800130a:	f240 8152 	bls.w	80015b2 <compute_stroke+0x2fe>
	{
		// If we don't have damping params (kA and kM) we can't go on
		if(parser->damping_constants.has_params == TRUE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	791b      	ldrb	r3, [r3, #4]
 8001312:	2b01      	cmp	r3, #1
 8001314:	f040 80c0 	bne.w	8001498 <compute_stroke+0x1e4>
		{
			// Compute the energy spent
			float energy = 0.0f;
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	637b      	str	r3, [r7, #52]	; 0x34
			float distance = 0.0f;
 800131e:	f04f 0300 	mov.w	r3, #0
 8001322:	633b      	str	r3, [r7, #48]	; 0x30

			float ka_c = parser->damping_constants.ka / DISTANCE_CORRELATION_COEFFICIENT;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	ed93 7a02 	vldr	s14, [r3, #8]
 800132a:	eddf 6aa5 	vldr	s13, [pc, #660]	; 80015c0 <compute_stroke+0x30c>
 800132e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001332:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			float km_c = parser->damping_constants.km / DISTANCE_CORRELATION_COEFFICIENT;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	ed93 7a03 	vldr	s14, [r3, #12]
 800133c:	eddf 6aa0 	vldr	s13, [pc, #640]	; 80015c0 <compute_stroke+0x30c>
 8001340:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001344:	edc7 7a08 	vstr	s15, [r7, #32]
			float ks_c = parser->damping_constants.ks / DISTANCE_CORRELATION_COEFFICIENT;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	ed93 7a04 	vldr	s14, [r3, #16]
 800134e:	eddf 6a9c 	vldr	s13, [pc, #624]	; 80015c0 <compute_stroke+0x30c>
 8001352:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001356:	edc7 7a07 	vstr	s15, [r7, #28]

			for(uint32_t i = parser->base_point; i < parser->turning_point; i++)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f8d3 3c14 	ldr.w	r3, [r3, #3092]	; 0xc14
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001362:	e053      	b.n	800140c <compute_stroke+0x158>
			{
				energy += -compute_energy(parser, parser->angular_velocities_filtered[i], parser->angular_velocities_filtered[i-1],
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001368:	f203 3306 	addw	r3, r3, #774	; 0x306
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	3304      	adds	r3, #4
 8001372:	edd3 7a00 	vldr	s15, [r3]
 8001376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001378:	3b01      	subs	r3, #1
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	f203 3306 	addw	r3, r3, #774	; 0x306
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	3304      	adds	r3, #4
 8001386:	ed93 7a00 	vldr	s14, [r3]
 800138a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138c:	3382      	adds	r3, #130	; 0x82
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	4413      	add	r3, r2
 8001394:	1d19      	adds	r1, r3, #4
						&parser->angular_velocities_times[i], &parser->angular_velocities_times[i-1]);
 8001396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001398:	3b01      	subs	r3, #1
				energy += -compute_energy(parser, parser->angular_velocities_filtered[i], parser->angular_velocities_filtered[i-1],
 800139a:	3382      	adds	r3, #130	; 0x82
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	3304      	adds	r3, #4
 80013a4:	461a      	mov	r2, r3
 80013a6:	eef0 0a47 	vmov.f32	s1, s14
 80013aa:	eeb0 0a67 	vmov.f32	s0, s15
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 f95a 	bl	8001668 <compute_energy>
 80013b4:	eef0 7a40 	vmov.f32	s15, s0
 80013b8:	eef1 7a67 	vneg.f32	s15, s15
 80013bc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80013c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
				distance += -compute_distance(M_PI_2, parser->angular_velocities_filtered[i], ka_c, km_c, ks_c);
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013cc:	f203 3306 	addw	r3, r3, #774	; 0x306
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	3304      	adds	r3, #4
 80013d6:	edd3 7a00 	vldr	s15, [r3]
 80013da:	ed97 2a07 	vldr	s4, [r7, #28]
 80013de:	edd7 1a08 	vldr	s3, [r7, #32]
 80013e2:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 80013e6:	eef0 0a67 	vmov.f32	s1, s15
 80013ea:	ed9f 0a76 	vldr	s0, [pc, #472]	; 80015c4 <compute_stroke+0x310>
 80013ee:	f000 f8f5 	bl	80015dc <compute_distance>
 80013f2:	eef0 7a40 	vmov.f32	s15, s0
 80013f6:	eef1 7a67 	vneg.f32	s15, s15
 80013fa:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80013fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001402:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
			for(uint32_t i = parser->base_point; i < parser->turning_point; i++)
 8001406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001408:	3301      	adds	r3, #1
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 8001412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001414:	429a      	cmp	r2, r3
 8001416:	d3a5      	bcc.n	8001364 <compute_stroke+0xb0>
			}

			// Compute other variables
			float mean_power = (float)(1e6*energy) / systemtime_time_diff_us(&parser->angular_velocities_times[parser->turning_point-1], &parser->angular_velocities_times[parser->base_point]);
 8001418:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800141c:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80015c8 <compute_stroke+0x314>
 8001420:	ee27 8a87 	vmul.f32	s16, s15, s14
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 800142a:	3b01      	subs	r3, #1
 800142c:	3382      	adds	r3, #130	; 0x82
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	4413      	add	r3, r2
 8001434:	1d18      	adds	r0, r3, #4
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f8d3 3c14 	ldr.w	r3, [r3, #3092]	; 0xc14
 800143c:	3382      	adds	r3, #130	; 0x82
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	3304      	adds	r3, #4
 8001446:	4619      	mov	r1, r3
 8001448:	f000 ffd2 	bl	80023f0 <systemtime_time_diff_us>
 800144c:	ee07 0a90 	vmov	s15, r0
 8001450:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001454:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001458:	edc7 7a06 	vstr	s15, [r7, #24]
			uint32_t stroke_time = systemtime_time_diff_us(&parser->angular_velocities_times[ANGULAR_VELOCITIES_BUFFER_SIZE-2], &parser->angular_velocities_times[parser->turning_point]);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f603 4004 	addw	r0, r3, #3076	; 0xc04
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 8001468:	3382      	adds	r3, #130	; 0x82
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	4413      	add	r3, r2
 8001470:	3304      	adds	r3, #4
 8001472:	4619      	mov	r1, r3
 8001474:	f000 ffbc 	bl	80023f0 <systemtime_time_diff_us>
 8001478:	6178      	str	r0, [r7, #20]

			// Send the stroke results
			stroke_params.energy_j = energy;
 800147a:	4a54      	ldr	r2, [pc, #336]	; (80015cc <compute_stroke+0x318>)
 800147c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800147e:	6013      	str	r3, [r2, #0]
			stroke_params.mean_power = mean_power;
 8001480:	4a52      	ldr	r2, [pc, #328]	; (80015cc <compute_stroke+0x318>)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	6053      	str	r3, [r2, #4]
			stroke_params.distance = distance;
 8001486:	4a51      	ldr	r2, [pc, #324]	; (80015cc <compute_stroke+0x318>)
 8001488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800148a:	6093      	str	r3, [r2, #8]
			parser->callback(&stroke_params);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	484d      	ldr	r0, [pc, #308]	; (80015cc <compute_stroke+0x318>)
 8001496:	4798      	blx	r3
		 * so we can update the kA and kM values after every stroke, taking into account
		 * every modification to the environment that could have happened
		 *
		 * Or we could fit to a quadratic equation
		 */
		uint32_t regression_count = ANGULAR_VELOCITIES_BUFFER_SIZE - parser->turning_point - 9;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 800149e:	f1c3 03f7 	rsb	r3, r3, #247	; 0xf7
 80014a2:	613b      	str	r3, [r7, #16]

		if(regression_count > REGRESSION_MIN_POINTS)
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	2b18      	cmp	r3, #24
 80014a8:	f240 8083 	bls.w	80015b2 <compute_stroke+0x2fe>
		{
			for(uint32_t i = parser->turning_point + 4; i < ANGULAR_VELOCITIES_BUFFER_SIZE-5; i++)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 80014b2:	3304      	adds	r3, #4
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80014b6:	e04e      	b.n	8001556 <compute_stroke+0x2a2>
			{
				regression_y[i - parser->turning_point - 4] = 1e6f*(parser->angular_velocities_filtered[i] - parser->angular_velocities_filtered[i-1])
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014bc:	f203 3306 	addw	r3, r3, #774	; 0x306
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	4413      	add	r3, r2
 80014c4:	3304      	adds	r3, #4
 80014c6:	ed93 7a00 	vldr	s14, [r3]
 80014ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014cc:	3b01      	subs	r3, #1
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	f203 3306 	addw	r3, r3, #774	; 0x306
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	3304      	adds	r3, #4
 80014da:	edd3 7a00 	vldr	s15, [r3]
 80014de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80015c8 <compute_stroke+0x314>
 80014e6:	ee27 8a87 	vmul.f32	s16, s15, s14
												/ systemtime_time_diff_us(&parser->angular_velocities_times[i], &parser->angular_velocities_times[i-1]);
 80014ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ec:	3382      	adds	r3, #130	; 0x82
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	4413      	add	r3, r2
 80014f4:	1d18      	adds	r0, r3, #4
 80014f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f8:	3b01      	subs	r3, #1
 80014fa:	3382      	adds	r3, #130	; 0x82
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	3304      	adds	r3, #4
 8001504:	4619      	mov	r1, r3
 8001506:	f000 ff73 	bl	80023f0 <systemtime_time_diff_us>
 800150a:	ee07 0a90 	vmov	s15, r0
 800150e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
				regression_y[i - parser->turning_point - 4] = 1e6f*(parser->angular_velocities_filtered[i] - parser->angular_velocities_filtered[i-1])
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 8001518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	3b04      	subs	r3, #4
												/ systemtime_time_diff_us(&parser->angular_velocities_times[i], &parser->angular_velocities_times[i-1]);
 800151e:	eec8 7a07 	vdiv.f32	s15, s16, s14
				regression_y[i - parser->turning_point - 4] = 1e6f*(parser->angular_velocities_filtered[i] - parser->angular_velocities_filtered[i-1])
 8001522:	4a2b      	ldr	r2, [pc, #172]	; (80015d0 <compute_stroke+0x31c>)
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	edc3 7a00 	vstr	s15, [r3]
				regression_x[i - parser->turning_point - 4] = parser->angular_velocities_filtered[i];
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
 8001532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	3b04      	subs	r3, #4
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800153c:	f202 3206 	addw	r2, r2, #774	; 0x306
 8001540:	0092      	lsls	r2, r2, #2
 8001542:	440a      	add	r2, r1
 8001544:	3204      	adds	r2, #4
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	4922      	ldr	r1, [pc, #136]	; (80015d4 <compute_stroke+0x320>)
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	601a      	str	r2, [r3, #0]
			for(uint32_t i = parser->turning_point + 4; i < ANGULAR_VELOCITIES_BUFFER_SIZE-5; i++)
 8001550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001552:	3301      	adds	r3, #1
 8001554:	62bb      	str	r3, [r7, #40]	; 0x28
 8001556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001558:	2bfa      	cmp	r3, #250	; 0xfa
 800155a:	d9ad      	bls.n	80014b8 <compute_stroke+0x204>
			}

			lms_result_t* result = lms_quadratic(regression_y, regression_x, regression_count);
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	491d      	ldr	r1, [pc, #116]	; (80015d4 <compute_stroke+0x320>)
 8001560:	481b      	ldr	r0, [pc, #108]	; (80015d0 <compute_stroke+0x31c>)
 8001562:	f000 f987 	bl	8001874 <lms_quadratic>
 8001566:	60f8      	str	r0, [r7, #12]

			// Here we check if the regression is good enough through the R2 parameter,
			// otherwise we discard the results
			if(result != NULL && result->r2 > LINREG_R2_MIN_TRESHOLD)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d021      	beq.n	80015b2 <compute_stroke+0x2fe>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	edd3 7a03 	vldr	s15, [r3, #12]
 8001574:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80015d8 <compute_stroke+0x324>
 8001578:	eef4 7ac7 	vcmpe.f32	s15, s14
 800157c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001580:	dc00      	bgt.n	8001584 <compute_stroke+0x2d0>
				HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 100);
#endif
			}
		}
	}
}
 8001582:	e016      	b.n	80015b2 <compute_stroke+0x2fe>
				parser->damping_constants.ka = result->c;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	609a      	str	r2, [r3, #8]
				parser->damping_constants.km = result->b;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	60da      	str	r2, [r3, #12]
				parser->damping_constants.ks = result->a;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	611a      	str	r2, [r3, #16]
				parser->damping_constants.has_params = TRUE;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	711a      	strb	r2, [r3, #4]
				parser->damping_params_callback(&parser->damping_constants);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	3204      	adds	r2, #4
 80015ae:	4610      	mov	r0, r2
 80015b0:	4798      	blx	r3
}
 80015b2:	bf00      	nop
 80015b4:	3738      	adds	r7, #56	; 0x38
 80015b6:	46bd      	mov	sp, r7
 80015b8:	ecbd 8b02 	vpop	{d8}
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40333333 	.word	0x40333333
 80015c4:	3fc90fdb 	.word	0x3fc90fdb
 80015c8:	49742400 	.word	0x49742400
 80015cc:	20000844 	.word	0x20000844
 80015d0:	2000063c 	.word	0x2000063c
 80015d4:	2000043c 	.word	0x2000043c
 80015d8:	3f666666 	.word	0x3f666666

080015dc <compute_distance>:

static inline float compute_distance(float angle, float w2, float ka_c, float km_c, float ks_c)
{
 80015dc:	b5b0      	push	{r4, r5, r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	ed87 0a05 	vstr	s0, [r7, #20]
 80015e6:	edc7 0a04 	vstr	s1, [r7, #16]
 80015ea:	ed87 1a03 	vstr	s2, [r7, #12]
 80015ee:	edc7 1a02 	vstr	s3, [r7, #8]
 80015f2:	ed87 2a01 	vstr	s4, [r7, #4]
	return angle * cbrt(ka_c + km_c/w2 + ks_c/sqr(w2));
 80015f6:	6978      	ldr	r0, [r7, #20]
 80015f8:	f7fe ffae 	bl	8000558 <__aeabi_f2d>
 80015fc:	4604      	mov	r4, r0
 80015fe:	460d      	mov	r5, r1
 8001600:	edd7 6a02 	vldr	s13, [r7, #8]
 8001604:	edd7 7a04 	vldr	s15, [r7, #16]
 8001608:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800160c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001610:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001614:	edd7 7a04 	vldr	s15, [r7, #16]
 8001618:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800161c:	ed97 6a01 	vldr	s12, [r7, #4]
 8001620:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001628:	ee17 0a90 	vmov	r0, s15
 800162c:	f7fe ff94 	bl	8000558 <__aeabi_f2d>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	ec43 2b10 	vmov	d0, r2, r3
 8001638:	f00b ffe6 	bl	800d608 <cbrt>
 800163c:	ec53 2b10 	vmov	r2, r3, d0
 8001640:	4620      	mov	r0, r4
 8001642:	4629      	mov	r1, r5
 8001644:	f7fe ffe0 	bl	8000608 <__aeabi_dmul>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff fab2 	bl	8000bb8 <__aeabi_d2f>
 8001654:	4603      	mov	r3, r0
 8001656:	ee07 3a90 	vmov	s15, r3
}
 800165a:	eeb0 0a67 	vmov.f32	s0, s15
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bdb0      	pop	{r4, r5, r7, pc}
 8001664:	0000      	movs	r0, r0
	...

08001668 <compute_energy>:

static inline float compute_energy(hall_parser_t* parser, float w2, float w1, systemtime_t* t2, systemtime_t* t1)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	ed2d 8b02 	vpush	{d8}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6178      	str	r0, [r7, #20]
 8001674:	ed87 0a04 	vstr	s0, [r7, #16]
 8001678:	edc7 0a03 	vstr	s1, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
	 * dE = dTheta * (I * dw/dt + kA * w^2 + kM * w + kS)
	 * This formula includes a magnetic damping (kM) constant
	 * because the ergometer has two permanent magnets to increase the resistance
	 * and kS accounts for other factors that do not depend on angular velocity
	 */
	if(t2 - t1 > 0)
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	dd44      	ble.n	8001714 <compute_energy+0xac>
	{
		return
				M_PI_2*(
						parser->params.I *
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001690:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001694:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001738 <compute_energy+0xd0>
 8001698:	ee27 7a87 	vmul.f32	s14, s15, s14
						1e6f * (w2 - w1) / systemtime_time_diff_us(t2, t1)
 800169c:	edd7 6a04 	vldr	s13, [r7, #16]
 80016a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80016a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80016a8:	ee27 8a27 	vmul.f32	s16, s14, s15
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	68b8      	ldr	r0, [r7, #8]
 80016b0:	f000 fe9e 	bl	80023f0 <systemtime_time_diff_us>
 80016b4:	ee07 0a90 	vmov	s15, r0
 80016b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016bc:	ee88 7a27 	vdiv.f32	s14, s16, s15
						+ parser->damping_constants.ka*sqr(w2)
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	edd3 6a02 	vldr	s13, [r3, #8]
 80016c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80016ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80016ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016d2:	ee37 7a27 	vadd.f32	s14, s14, s15
		+ parser->damping_constants.km*w2
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	edd3 6a03 	vldr	s13, [r3, #12]
 80016dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80016e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e4:	ee37 7a27 	vadd.f32	s14, s14, s15
		+ parser->damping_constants.ks
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80016ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f2:	ee17 0a90 	vmov	r0, s15
 80016f6:	f7fe ff2f 	bl	8000558 <__aeabi_f2d>
				M_PI_2*(
 80016fa:	a30d      	add	r3, pc, #52	; (adr r3, 8001730 <compute_energy+0xc8>)
 80016fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001700:	f7fe ff82 	bl	8000608 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4610      	mov	r0, r2
 800170a:	4619      	mov	r1, r3
 800170c:	f7ff fa54 	bl	8000bb8 <__aeabi_d2f>
 8001710:	4603      	mov	r3, r0
 8001712:	e001      	b.n	8001718 <compute_energy+0xb0>
				);
	} else
	{
		return 0;
 8001714:	f04f 0300 	mov.w	r3, #0
	}
}
 8001718:	ee07 3a90 	vmov	s15, r3
 800171c:	eeb0 0a67 	vmov.f32	s0, s15
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	ecbd 8b02 	vpop	{d8}
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	f3af 8000 	nop.w
 8001730:	54442d18 	.word	0x54442d18
 8001734:	3ff921fb 	.word	0x3ff921fb
 8001738:	49742400 	.word	0x49742400

0800173c <get_angular_velocity_filtered>:

static inline float get_angular_velocity_filtered(hall_parser_t* parser)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	// Averaging with last 3 measurements
	// The n-1 and n-2 coefficients are the same to remove the zig-zag noise
	
	return 0.3f * parser->angular_velocities[ANGULAR_VELOCITIES_BUFFER_SIZE-1] 
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80017a8 <get_angular_velocity_filtered+0x6c>
 8001752:	ee27 7a87 	vmul.f32	s14, s15, s14
		+ 0.3f * parser->angular_velocities[ANGULAR_VELOCITIES_BUFFER_SIZE-2]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800175c:	edd3 7a00 	vldr	s15, [r3]
 8001760:	eddf 6a11 	vldr	s13, [pc, #68]	; 80017a8 <get_angular_velocity_filtered+0x6c>
 8001764:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001768:	ee37 7a27 	vadd.f32	s14, s14, s15
		+ 0.2f * parser->angular_velocities[ANGULAR_VELOCITIES_BUFFER_SIZE-3]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80017ac <get_angular_velocity_filtered+0x70>
 800177a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800177e:	ee37 7a27 	vadd.f32	s14, s14, s15
		+ 0.2f * parser->angular_velocities[ANGULAR_VELOCITIES_BUFFER_SIZE-4];
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001788:	edd3 7a00 	vldr	s15, [r3]
 800178c:	eddf 6a07 	vldr	s13, [pc, #28]	; 80017ac <get_angular_velocity_filtered+0x70>
 8001790:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001794:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001798:	eeb0 0a67 	vmov.f32	s0, s15
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	3e99999a 	.word	0x3e99999a
 80017ac:	3e4ccccd 	.word	0x3e4ccccd

080017b0 <is_w_a_minimum>:

static inline BOOL is_w_a_minimum(hall_parser_t* parser)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	BOOL result = TRUE;
 80017b8:	2301      	movs	r3, #1
 80017ba:	74fb      	strb	r3, [r7, #19]
	float w = parser->angular_velocities_filtered[ANGULAR_VELOCITIES_BUFFER_SIZE - ANGULAR_VELOCITIES_LAG - 1];
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	60fb      	str	r3, [r7, #12]
	for(uint32_t i = ANGULAR_VELOCITIES_BUFFER_SIZE - ANGULAR_VELOCITIES_LAG*2 - 1; i < ANGULAR_VELOCITIES_BUFFER_SIZE; i++)
 80017c6:	23f9      	movs	r3, #249	; 0xf9
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	e018      	b.n	80017fe <is_w_a_minimum+0x4e>
	{
		if(i == ANGULAR_VELOCITIES_BUFFER_SIZE - ANGULAR_VELOCITIES_LAG - 1)
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	2bfc      	cmp	r3, #252	; 0xfc
 80017d0:	d011      	beq.n	80017f6 <is_w_a_minimum+0x46>
		{
			continue;
		}
		if(w >= parser->angular_velocities_filtered[i])
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f203 3306 	addw	r3, r3, #774	; 0x306
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	3304      	adds	r3, #4
 80017e0:	edd3 7a00 	vldr	s15, [r3]
 80017e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80017e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f0:	db02      	blt.n	80017f8 <is_w_a_minimum+0x48>
		{
			return FALSE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	e007      	b.n	8001806 <is_w_a_minimum+0x56>
			continue;
 80017f6:	bf00      	nop
	for(uint32_t i = ANGULAR_VELOCITIES_BUFFER_SIZE - ANGULAR_VELOCITIES_LAG*2 - 1; i < ANGULAR_VELOCITIES_BUFFER_SIZE; i++)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	3301      	adds	r3, #1
 80017fc:	617b      	str	r3, [r7, #20]
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	2bff      	cmp	r3, #255	; 0xff
 8001802:	d9e3      	bls.n	80017cc <is_w_a_minimum+0x1c>
		}
	}
	return TRUE;
 8001804:	2301      	movs	r3, #1
}
 8001806:	4618      	mov	r0, r3
 8001808:	371c      	adds	r7, #28
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <is_w_a_maximum>:

static inline BOOL is_w_a_maximum(hall_parser_t* parser)
{
 8001812:	b480      	push	{r7}
 8001814:	b087      	sub	sp, #28
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
	BOOL result = TRUE;
 800181a:	2301      	movs	r3, #1
 800181c:	74fb      	strb	r3, [r7, #19]
	float w = parser->angular_velocities_filtered[ANGULAR_VELOCITIES_BUFFER_SIZE - ANGULAR_VELOCITIES_LAG - 1];
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	60fb      	str	r3, [r7, #12]
	for(uint32_t i = ANGULAR_VELOCITIES_BUFFER_SIZE - ANGULAR_VELOCITIES_LAG*2 - 1; i < ANGULAR_VELOCITIES_BUFFER_SIZE; i++)
 8001828:	23f9      	movs	r3, #249	; 0xf9
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	e018      	b.n	8001860 <is_w_a_maximum+0x4e>
	{
		if(i == ANGULAR_VELOCITIES_BUFFER_SIZE - ANGULAR_VELOCITIES_LAG - 1)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	2bfc      	cmp	r3, #252	; 0xfc
 8001832:	d011      	beq.n	8001858 <is_w_a_maximum+0x46>
		{
			continue;
		}
		if(w <= parser->angular_velocities_filtered[i])
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f203 3306 	addw	r3, r3, #774	; 0x306
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	3304      	adds	r3, #4
 8001842:	edd3 7a00 	vldr	s15, [r3]
 8001846:	ed97 7a03 	vldr	s14, [r7, #12]
 800184a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001852:	d802      	bhi.n	800185a <is_w_a_maximum+0x48>
		{
			return FALSE;
 8001854:	2300      	movs	r3, #0
 8001856:	e007      	b.n	8001868 <is_w_a_maximum+0x56>
			continue;
 8001858:	bf00      	nop
	for(uint32_t i = ANGULAR_VELOCITIES_BUFFER_SIZE - ANGULAR_VELOCITIES_LAG*2 - 1; i < ANGULAR_VELOCITIES_BUFFER_SIZE; i++)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	3301      	adds	r3, #1
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	2bff      	cmp	r3, #255	; 0xff
 8001864:	d9e3      	bls.n	800182e <is_w_a_maximum+0x1c>
		}
	}
	return TRUE;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	371c      	adds	r7, #28
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <lms_quadratic>:
arm_matrix_instance_f32 ATMAI_AT;
arm_matrix_instance_f32 B;
arm_matrix_instance_f32 X;

lms_result_t* lms_quadratic(float* y_data, float* x_data, uint32_t size)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
	// A is the matrix with the x values
	// B is the matrix (vector) with the y values
	// X is the matrix with the coefficients

	// X = (At * A)^(-1) * At * B
	arm_mat_init_f32(&A, size, 3, A_m);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	b299      	uxth	r1, r3
 8001884:	4b87      	ldr	r3, [pc, #540]	; (8001aa4 <lms_quadratic+0x230>)
 8001886:	2203      	movs	r2, #3
 8001888:	4887      	ldr	r0, [pc, #540]	; (8001aa8 <lms_quadratic+0x234>)
 800188a:	f009 f95d 	bl	800ab48 <arm_mat_init_f32>
	arm_mat_init_f32(&AT, 3, size, AT_m);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	b29a      	uxth	r2, r3
 8001892:	4b86      	ldr	r3, [pc, #536]	; (8001aac <lms_quadratic+0x238>)
 8001894:	2103      	movs	r1, #3
 8001896:	4886      	ldr	r0, [pc, #536]	; (8001ab0 <lms_quadratic+0x23c>)
 8001898:	f009 f956 	bl	800ab48 <arm_mat_init_f32>
	arm_mat_init_f32(&ATMA, 3, 3, ATMA_m);
 800189c:	4b85      	ldr	r3, [pc, #532]	; (8001ab4 <lms_quadratic+0x240>)
 800189e:	2203      	movs	r2, #3
 80018a0:	2103      	movs	r1, #3
 80018a2:	4885      	ldr	r0, [pc, #532]	; (8001ab8 <lms_quadratic+0x244>)
 80018a4:	f009 f950 	bl	800ab48 <arm_mat_init_f32>
	arm_mat_init_f32(&ATMAI, 3, 3, ATMAI_m);
 80018a8:	4b84      	ldr	r3, [pc, #528]	; (8001abc <lms_quadratic+0x248>)
 80018aa:	2203      	movs	r2, #3
 80018ac:	2103      	movs	r1, #3
 80018ae:	4884      	ldr	r0, [pc, #528]	; (8001ac0 <lms_quadratic+0x24c>)
 80018b0:	f009 f94a 	bl	800ab48 <arm_mat_init_f32>
	arm_mat_init_f32(&ATMAI_AT, 3, size, ATMAI_AT_m);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	4b82      	ldr	r3, [pc, #520]	; (8001ac4 <lms_quadratic+0x250>)
 80018ba:	2103      	movs	r1, #3
 80018bc:	4882      	ldr	r0, [pc, #520]	; (8001ac8 <lms_quadratic+0x254>)
 80018be:	f009 f943 	bl	800ab48 <arm_mat_init_f32>
	arm_mat_init_f32(&B, size, 1, y_data);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	b299      	uxth	r1, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2201      	movs	r2, #1
 80018ca:	4880      	ldr	r0, [pc, #512]	; (8001acc <lms_quadratic+0x258>)
 80018cc:	f009 f93c 	bl	800ab48 <arm_mat_init_f32>
	arm_mat_init_f32(&X, 3, 1, X_m);
 80018d0:	4b7f      	ldr	r3, [pc, #508]	; (8001ad0 <lms_quadratic+0x25c>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	2103      	movs	r1, #3
 80018d6:	487f      	ldr	r0, [pc, #508]	; (8001ad4 <lms_quadratic+0x260>)
 80018d8:	f009 f936 	bl	800ab48 <arm_mat_init_f32>

	build_A_mat(x_data, size, A_m);
 80018dc:	4a71      	ldr	r2, [pc, #452]	; (8001aa4 <lms_quadratic+0x230>)
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	68b8      	ldr	r0, [r7, #8]
 80018e2:	f000 f8fb 	bl	8001adc <build_A_mat>

	LMS_CHECK_STATUS(arm_mat_trans_f32(&A, &AT));
 80018e6:	4972      	ldr	r1, [pc, #456]	; (8001ab0 <lms_quadratic+0x23c>)
 80018e8:	486f      	ldr	r0, [pc, #444]	; (8001aa8 <lms_quadratic+0x234>)
 80018ea:	f008 feb7 	bl	800a65c <arm_mat_trans_f32>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <lms_quadratic+0x84>
 80018f4:	2300      	movs	r3, #0
 80018f6:	e0d0      	b.n	8001a9a <lms_quadratic+0x226>
	LMS_CHECK_STATUS(arm_mat_mult_f32(&AT, &A, &ATMA));
 80018f8:	4a6f      	ldr	r2, [pc, #444]	; (8001ab8 <lms_quadratic+0x244>)
 80018fa:	496b      	ldr	r1, [pc, #428]	; (8001aa8 <lms_quadratic+0x234>)
 80018fc:	486c      	ldr	r0, [pc, #432]	; (8001ab0 <lms_quadratic+0x23c>)
 80018fe:	f008 ff21 	bl	800a744 <arm_mat_mult_f32>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <lms_quadratic+0x98>
 8001908:	2300      	movs	r3, #0
 800190a:	e0c6      	b.n	8001a9a <lms_quadratic+0x226>
	LMS_CHECK_STATUS(arm_mat_inverse_f32(&ATMA, &ATMAI));
 800190c:	496c      	ldr	r1, [pc, #432]	; (8001ac0 <lms_quadratic+0x24c>)
 800190e:	486a      	ldr	r0, [pc, #424]	; (8001ab8 <lms_quadratic+0x244>)
 8001910:	f008 ffd0 	bl	800a8b4 <arm_mat_inverse_f32>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <lms_quadratic+0xaa>
 800191a:	2300      	movs	r3, #0
 800191c:	e0bd      	b.n	8001a9a <lms_quadratic+0x226>
	LMS_CHECK_STATUS(arm_mat_mult_f32(&ATMAI, &AT, &ATMAI_AT));
 800191e:	4a6a      	ldr	r2, [pc, #424]	; (8001ac8 <lms_quadratic+0x254>)
 8001920:	4963      	ldr	r1, [pc, #396]	; (8001ab0 <lms_quadratic+0x23c>)
 8001922:	4867      	ldr	r0, [pc, #412]	; (8001ac0 <lms_quadratic+0x24c>)
 8001924:	f008 ff0e 	bl	800a744 <arm_mat_mult_f32>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <lms_quadratic+0xbe>
 800192e:	2300      	movs	r3, #0
 8001930:	e0b3      	b.n	8001a9a <lms_quadratic+0x226>
	LMS_CHECK_STATUS(arm_mat_mult_f32(&ATMAI_AT, &B, &X));
 8001932:	4a68      	ldr	r2, [pc, #416]	; (8001ad4 <lms_quadratic+0x260>)
 8001934:	4965      	ldr	r1, [pc, #404]	; (8001acc <lms_quadratic+0x258>)
 8001936:	4864      	ldr	r0, [pc, #400]	; (8001ac8 <lms_quadratic+0x254>)
 8001938:	f008 ff04 	bl	800a744 <arm_mat_mult_f32>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <lms_quadratic+0xd2>
 8001942:	2300      	movs	r3, #0
 8001944:	e0a9      	b.n	8001a9a <lms_quadratic+0x226>

	float y_avg, ss_res, ss_tot;
	arm_mean_f32(y_data, size, &y_avg);
 8001946:	f107 0310 	add.w	r3, r7, #16
 800194a:	461a      	mov	r2, r3
 800194c:	6879      	ldr	r1, [r7, #4]
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f008 fe52 	bl	800a5f8 <arm_mean_f32>

	for(uint32_t i = 0; i < size; i++)
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
 8001958:	e080      	b.n	8001a5c <lms_quadratic+0x1e8>
	{
		ss_res += sqr(y_data[i] - (X_m[0] + X_m[1]*A_m[i*3+1] + X_m[2]*A_m[i*3+2]));
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	4413      	add	r3, r2
 8001962:	ed93 7a00 	vldr	s14, [r3]
 8001966:	4b5a      	ldr	r3, [pc, #360]	; (8001ad0 <lms_quadratic+0x25c>)
 8001968:	edd3 6a00 	vldr	s13, [r3]
 800196c:	4b58      	ldr	r3, [pc, #352]	; (8001ad0 <lms_quadratic+0x25c>)
 800196e:	ed93 6a01 	vldr	s12, [r3, #4]
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	3301      	adds	r3, #1
 800197c:	4a49      	ldr	r2, [pc, #292]	; (8001aa4 <lms_quadratic+0x230>)
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	edd3 7a00 	vldr	s15, [r3]
 8001986:	ee66 7a27 	vmul.f32	s15, s12, s15
 800198a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800198e:	4b50      	ldr	r3, [pc, #320]	; (8001ad0 <lms_quadratic+0x25c>)
 8001990:	ed93 6a02 	vldr	s12, [r3, #8]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	4613      	mov	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4413      	add	r3, r2
 800199c:	3302      	adds	r3, #2
 800199e:	4a41      	ldr	r2, [pc, #260]	; (8001aa4 <lms_quadratic+0x230>)
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	4413      	add	r3, r2
 80019bc:	edd3 6a00 	vldr	s13, [r3]
 80019c0:	4b43      	ldr	r3, [pc, #268]	; (8001ad0 <lms_quadratic+0x25c>)
 80019c2:	ed93 6a00 	vldr	s12, [r3]
 80019c6:	4b42      	ldr	r3, [pc, #264]	; (8001ad0 <lms_quadratic+0x25c>)
 80019c8:	edd3 5a01 	vldr	s11, [r3, #4]
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	3301      	adds	r3, #1
 80019d6:	4a33      	ldr	r2, [pc, #204]	; (8001aa4 <lms_quadratic+0x230>)
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	edd3 7a00 	vldr	s15, [r3]
 80019e0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019e4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80019e8:	4b39      	ldr	r3, [pc, #228]	; (8001ad0 <lms_quadratic+0x25c>)
 80019ea:	edd3 5a02 	vldr	s11, [r3, #8]
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	4613      	mov	r3, r2
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4413      	add	r3, r2
 80019f6:	3302      	adds	r3, #2
 80019f8:	4a2a      	ldr	r2, [pc, #168]	; (8001aa4 <lms_quadratic+0x230>)
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	edd3 7a00 	vldr	s15, [r3]
 8001a02:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a06:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001a0a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a12:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1a:	edc7 7a07 	vstr	s15, [r7, #28]
		ss_tot += sqr(y_data[i] - y_avg);
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	4413      	add	r3, r2
 8001a26:	ed93 7a00 	vldr	s14, [r3]
 8001a2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	4413      	add	r3, r2
 8001a3a:	edd3 6a00 	vldr	s13, [r3]
 8001a3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a42:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a52:	edc7 7a06 	vstr	s15, [r7, #24]
	for(uint32_t i = 0; i < size; i++)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	f4ff af7a 	bcc.w	800195a <lms_quadratic+0xe6>
	}

	lms_result.a = X_m[0];
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <lms_quadratic+0x25c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a1b      	ldr	r2, [pc, #108]	; (8001ad8 <lms_quadratic+0x264>)
 8001a6c:	6013      	str	r3, [r2, #0]
	lms_result.b = X_m[1];
 8001a6e:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <lms_quadratic+0x25c>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4a19      	ldr	r2, [pc, #100]	; (8001ad8 <lms_quadratic+0x264>)
 8001a74:	6053      	str	r3, [r2, #4]
	lms_result.c = X_m[2];
 8001a76:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <lms_quadratic+0x25c>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	4a17      	ldr	r2, [pc, #92]	; (8001ad8 <lms_quadratic+0x264>)
 8001a7c:	6093      	str	r3, [r2, #8]
	lms_result.r2 = 1 - ss_res/ss_tot;
 8001a7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001a82:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <lms_quadratic+0x264>)
 8001a94:	edc3 7a03 	vstr	s15, [r3, #12]

	return &lms_result;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <lms_quadratic+0x264>)
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3720      	adds	r7, #32
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000850 	.word	0x20000850
 8001aa8:	2000266c 	.word	0x2000266c
 8001aac:	20000e50 	.word	0x20000e50
 8001ab0:	20002674 	.word	0x20002674
 8001ab4:	20001450 	.word	0x20001450
 8001ab8:	2000267c 	.word	0x2000267c
 8001abc:	20001a50 	.word	0x20001a50
 8001ac0:	20002684 	.word	0x20002684
 8001ac4:	20002050 	.word	0x20002050
 8001ac8:	2000268c 	.word	0x2000268c
 8001acc:	20002694 	.word	0x20002694
 8001ad0:	20002650 	.word	0x20002650
 8001ad4:	2000269c 	.word	0x2000269c
 8001ad8:	2000265c 	.word	0x2000265c

08001adc <build_A_mat>:

static inline void build_A_mat(float* x_data, uint32_t size, float* matrix)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
	// Since we want a quadratic fit, we build the A matrix from the x values with:
	// the first column having value 1 (constant coefficient)
	// the second column having value x (linear coefficient)
	// the third one having value x^2 (quadratic coefficient)

	for(uint32_t i = 0; i < size; i++)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	e033      	b.n	8001b56 <build_A_mat+0x7a>
	{
		matrix[i*3] = 1;
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	4613      	mov	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	461a      	mov	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b02:	601a      	str	r2, [r3, #0]
		matrix[i*3+1] = x_data[i];
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	18d1      	adds	r1, r2, r3
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4413      	add	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	3304      	adds	r3, #4
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	680a      	ldr	r2, [r1, #0]
 8001b1e:	601a      	str	r2, [r3, #0]
		matrix[i*3+2] = sqr(x_data[i]);
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	ed93 7a00 	vldr	s14, [r3]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	4413      	add	r3, r2
 8001b34:	edd3 7a00 	vldr	s15, [r3]
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4413      	add	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	3308      	adds	r3, #8
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	4413      	add	r3, r2
 8001b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b4c:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t i = 0; i < size; i++)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	3301      	adds	r3, #1
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d3c7      	bcc.n	8001aee <build_A_mat+0x12>
	}
}
 8001b5e:	bf00      	nop
 8001b60:	bf00      	nop
 8001b62:	371c      	adds	r7, #28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b70:	f000 fc82 	bl	8002478 <HAL_Init>

  /* USER CODE BEGIN Init */

  // This delay is required since when we power the device through E5V pin
  // the STLink HSE needs some time to be powered up
  HAL_Delay(3000);
 8001b74:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001b78:	f000 fcf0 	bl	800255c <HAL_Delay>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b7c:	f000 f84a 	bl	8001c14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b80:	f000 f95a 	bl	8001e38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b84:	f000 f92e 	bl	8001de4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001b88:	f000 f8dc 	bl	8001d44 <MX_TIM1_Init>
  MX_I2C1_Init();
 8001b8c:	f000 f8ac 	bl	8001ce8 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001b90:	f008 f8ae 	bl	8009cf0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	hall_parser_init();
 8001b94:	f7ff fa7a 	bl	800108c <hall_parser_init>
	memset(&hall_parser, 0, sizeof(hall_parser_t));
 8001b98:	f241 0228 	movw	r2, #4136	; 0x1028
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4817      	ldr	r0, [pc, #92]	; (8001bfc <main+0x90>)
 8001ba0:	f009 f820 	bl	800abe4 <memset>

	// We check if we have the parameters stored inside the EEPROM
	// If that's the case, we use them straight away
	if(storage_read(&storage_data)) {
 8001ba4:	4816      	ldr	r0, [pc, #88]	; (8001c00 <main+0x94>)
 8001ba6:	f7ff fa23 	bl	8000ff0 <storage_read>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00e      	beq.n	8001bce <main+0x62>
		hall_parser.damping_constants.ka = storage_data.ka;
 8001bb0:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <main+0x94>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a11      	ldr	r2, [pc, #68]	; (8001bfc <main+0x90>)
 8001bb6:	6093      	str	r3, [r2, #8]
		hall_parser.damping_constants.km = storage_data.km;
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <main+0x94>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	4a0f      	ldr	r2, [pc, #60]	; (8001bfc <main+0x90>)
 8001bbe:	60d3      	str	r3, [r2, #12]
		hall_parser.damping_constants.ks = storage_data.ks;
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <main+0x94>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	; (8001bfc <main+0x90>)
 8001bc6:	6113      	str	r3, [r2, #16]
		hall_parser.damping_constants.has_params = TRUE;
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <main+0x90>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	711a      	strb	r2, [r3, #4]
	}

	hall_parser.callback = ergometer_stroke;
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <main+0x90>)
 8001bd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <main+0x98>)
 8001bd8:	61d3      	str	r3, [r2, #28]
	hall_parser.damping_params_callback = params_received;
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <main+0x90>)
 8001bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <main+0x9c>)
 8001be4:	6213      	str	r3, [r2, #32]
	hall_parser.params.I = MOMENT_OF_INERTIA;
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <main+0x90>)
 8001be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <main+0xa0>)
 8001bf0:	6253      	str	r3, [r2, #36]	; 0x24

	HAL_TIM_Base_Start_IT(&htim1);
 8001bf2:	4807      	ldr	r0, [pc, #28]	; (8001c10 <main+0xa4>)
 8001bf4:	f003 feaa 	bl	800594c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <main+0x8c>
 8001bfa:	bf00      	nop
 8001bfc:	20002784 	.word	0x20002784
 8001c00:	200037ac 	.word	0x200037ac
 8001c04:	08001f05 	.word	0x08001f05
 8001c08:	08001f41 	.word	0x08001f41
 8001c0c:	3baee200 	.word	0x3baee200
 8001c10:	200026f8 	.word	0x200026f8

08001c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b094      	sub	sp, #80	; 0x50
 8001c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c1a:	f107 0320 	add.w	r3, r7, #32
 8001c1e:	2230      	movs	r2, #48	; 0x30
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f008 ffde 	bl	800abe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c28:	f107 030c 	add.w	r3, r7, #12
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	4b28      	ldr	r3, [pc, #160]	; (8001ce0 <SystemClock_Config+0xcc>)
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	4a27      	ldr	r2, [pc, #156]	; (8001ce0 <SystemClock_Config+0xcc>)
 8001c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c46:	6413      	str	r3, [r2, #64]	; 0x40
 8001c48:	4b25      	ldr	r3, [pc, #148]	; (8001ce0 <SystemClock_Config+0xcc>)
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c54:	2300      	movs	r3, #0
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	4b22      	ldr	r3, [pc, #136]	; (8001ce4 <SystemClock_Config+0xd0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c60:	4a20      	ldr	r2, [pc, #128]	; (8001ce4 <SystemClock_Config+0xd0>)
 8001c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <SystemClock_Config+0xd0>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c74:	2301      	movs	r3, #1
 8001c76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c88:	2304      	movs	r3, #4
 8001c8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c8c:	23a8      	movs	r3, #168	; 0xa8
 8001c8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c90:	2304      	movs	r3, #4
 8001c92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c94:	2307      	movs	r3, #7
 8001c96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c98:	f107 0320 	add.w	r3, r7, #32
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f003 f96d 	bl	8004f7c <HAL_RCC_OscConfig>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001ca8:	f000 f976 	bl	8001f98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cac:	230f      	movs	r3, #15
 8001cae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cc2:	f107 030c 	add.w	r3, r7, #12
 8001cc6:	2102      	movs	r1, #2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f003 fbcf 	bl	800546c <HAL_RCC_ClockConfig>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001cd4:	f000 f960 	bl	8001f98 <Error_Handler>
  }
}
 8001cd8:	bf00      	nop
 8001cda:	3750      	adds	r7, #80	; 0x50
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40007000 	.word	0x40007000

08001ce8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <MX_I2C1_Init+0x50>)
 8001cee:	4a13      	ldr	r2, [pc, #76]	; (8001d3c <MX_I2C1_Init+0x54>)
 8001cf0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001cf2:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <MX_I2C1_Init+0x50>)
 8001cf4:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <MX_I2C1_Init+0x58>)
 8001cf6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <MX_I2C1_Init+0x50>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <MX_I2C1_Init+0x50>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <MX_I2C1_Init+0x50>)
 8001d06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <MX_I2C1_Init+0x50>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d12:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MX_I2C1_Init+0x50>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d18:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <MX_I2C1_Init+0x50>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d1e:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <MX_I2C1_Init+0x50>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d24:	4804      	ldr	r0, [pc, #16]	; (8001d38 <MX_I2C1_Init+0x50>)
 8001d26:	f000 ff05 	bl	8002b34 <HAL_I2C_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d30:	f000 f932 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	200026a4 	.word	0x200026a4
 8001d3c:	40005400 	.word	0x40005400
 8001d40:	00061a80 	.word	0x00061a80

08001d44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d4a:	f107 0308 	add.w	r3, r7, #8
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	605a      	str	r2, [r3, #4]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d58:	463b      	mov	r3, r7
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d60:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <MX_TIM1_Init+0x98>)
 8001d62:	4a1f      	ldr	r2, [pc, #124]	; (8001de0 <MX_TIM1_Init+0x9c>)
 8001d64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001d66:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <MX_TIM1_Init+0x98>)
 8001d68:	2253      	movs	r2, #83	; 0x53
 8001d6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6c:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <MX_TIM1_Init+0x98>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001d72:	4b1a      	ldr	r3, [pc, #104]	; (8001ddc <MX_TIM1_Init+0x98>)
 8001d74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d7a:	4b18      	ldr	r3, [pc, #96]	; (8001ddc <MX_TIM1_Init+0x98>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d80:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <MX_TIM1_Init+0x98>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d86:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <MX_TIM1_Init+0x98>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d8c:	4813      	ldr	r0, [pc, #76]	; (8001ddc <MX_TIM1_Init+0x98>)
 8001d8e:	f003 fd8d 	bl	80058ac <HAL_TIM_Base_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001d98:	f000 f8fe 	bl	8001f98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001da0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001da2:	f107 0308 	add.w	r3, r7, #8
 8001da6:	4619      	mov	r1, r3
 8001da8:	480c      	ldr	r0, [pc, #48]	; (8001ddc <MX_TIM1_Init+0x98>)
 8001daa:	f003 ff39 	bl	8005c20 <HAL_TIM_ConfigClockSource>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001db4:	f000 f8f0 	bl	8001f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db8:	2300      	movs	r3, #0
 8001dba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dc0:	463b      	mov	r3, r7
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4805      	ldr	r0, [pc, #20]	; (8001ddc <MX_TIM1_Init+0x98>)
 8001dc6:	f004 f93f 	bl	8006048 <HAL_TIMEx_MasterConfigSynchronization>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001dd0:	f000 f8e2 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001dd4:	bf00      	nop
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	200026f8 	.word	0x200026f8
 8001de0:	40010000 	.word	0x40010000

08001de4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <MX_USART2_UART_Init+0x4c>)
 8001dea:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <MX_USART2_UART_Init+0x50>)
 8001dec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <MX_USART2_UART_Init+0x4c>)
 8001df0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001df4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <MX_USART2_UART_Init+0x4c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <MX_USART2_UART_Init+0x4c>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e02:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <MX_USART2_UART_Init+0x4c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <MX_USART2_UART_Init+0x4c>)
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e0e:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <MX_USART2_UART_Init+0x4c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <MX_USART2_UART_Init+0x4c>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e1a:	4805      	ldr	r0, [pc, #20]	; (8001e30 <MX_USART2_UART_Init+0x4c>)
 8001e1c:	f004 f996 	bl	800614c <HAL_UART_Init>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e26:	f000 f8b7 	bl	8001f98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20002740 	.word	0x20002740
 8001e34:	40004400 	.word	0x40004400

08001e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3e:	f107 030c 	add.w	r3, r7, #12
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	60da      	str	r2, [r3, #12]
 8001e4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	4b2a      	ldr	r3, [pc, #168]	; (8001efc <MX_GPIO_Init+0xc4>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a29      	ldr	r2, [pc, #164]	; (8001efc <MX_GPIO_Init+0xc4>)
 8001e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b27      	ldr	r3, [pc, #156]	; (8001efc <MX_GPIO_Init+0xc4>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	607b      	str	r3, [r7, #4]
 8001e6e:	4b23      	ldr	r3, [pc, #140]	; (8001efc <MX_GPIO_Init+0xc4>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a22      	ldr	r2, [pc, #136]	; (8001efc <MX_GPIO_Init+0xc4>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b20      	ldr	r3, [pc, #128]	; (8001efc <MX_GPIO_Init+0xc4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	607b      	str	r3, [r7, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	603b      	str	r3, [r7, #0]
 8001e8a:	4b1c      	ldr	r3, [pc, #112]	; (8001efc <MX_GPIO_Init+0xc4>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a1b      	ldr	r2, [pc, #108]	; (8001efc <MX_GPIO_Init+0xc4>)
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b19      	ldr	r3, [pc, #100]	; (8001efc <MX_GPIO_Init+0xc4>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2120      	movs	r1, #32
 8001ea6:	4816      	ldr	r0, [pc, #88]	; (8001f00 <MX_GPIO_Init+0xc8>)
 8001ea8:	f000 fe12 	bl	8002ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HALL_Pin */
  GPIO_InitStruct.Pin = HALL_Pin;
 8001eac:	2301      	movs	r3, #1
 8001eae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001eb0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001eb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HALL_GPIO_Port, &GPIO_InitStruct);
 8001eba:	f107 030c 	add.w	r3, r7, #12
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	480f      	ldr	r0, [pc, #60]	; (8001f00 <MX_GPIO_Init+0xc8>)
 8001ec2:	f000 fc81 	bl	80027c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ec6:	2320      	movs	r3, #32
 8001ec8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	4619      	mov	r1, r3
 8001edc:	4808      	ldr	r0, [pc, #32]	; (8001f00 <MX_GPIO_Init+0xc8>)
 8001ede:	f000 fc73 	bl	80027c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 2);
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	2006      	movs	r0, #6
 8001ee8:	f000 fc37 	bl	800275a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001eec:	2006      	movs	r0, #6
 8001eee:	f000 fc50 	bl	8002792 <HAL_NVIC_EnableIRQ>

}
 8001ef2:	bf00      	nop
 8001ef4:	3720      	adds	r7, #32
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40020000 	.word	0x40020000

08001f04 <ergometer_stroke>:

/* USER CODE BEGIN 4 */
void ergometer_stroke(ergometer_stroke_params_t* stroke_params)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_STROKE_PARAMS
	char buffer[32];
	sprintf(buffer, "%.3f,%.3f,%.3f\r\n", stroke_params->energy_j, stroke_params->mean_power, stroke_params->distance);
	HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 100);
#else
	usb_out_data.energy_j = stroke_params->energy_j;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a09      	ldr	r2, [pc, #36]	; (8001f38 <ergometer_stroke+0x34>)
 8001f12:	6013      	str	r3, [r2, #0]
	usb_out_data.mean_power = stroke_params->mean_power;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	4a07      	ldr	r2, [pc, #28]	; (8001f38 <ergometer_stroke+0x34>)
 8001f1a:	6053      	str	r3, [r2, #4]
	usb_out_data.distance = stroke_params->distance;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <ergometer_stroke+0x34>)
 8001f22:	6093      	str	r3, [r2, #8]

	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &usb_out_data, 16);
 8001f24:	2210      	movs	r2, #16
 8001f26:	4904      	ldr	r1, [pc, #16]	; (8001f38 <ergometer_stroke+0x34>)
 8001f28:	4804      	ldr	r0, [pc, #16]	; (8001f3c <ergometer_stroke+0x38>)
 8001f2a:	f006 fa5f 	bl	80083ec <USBD_CUSTOM_HID_SendReport>
#endif
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	200037b8 	.word	0x200037b8
 8001f3c:	200037d8 	.word	0x200037d8

08001f40 <params_received>:

void params_received(damping_constants_t* damping_constants)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	// Every time we compute new valid parameters we save them into the EEPROM
	storage_data.ka = damping_constants->ka;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	4a08      	ldr	r2, [pc, #32]	; (8001f70 <params_received+0x30>)
 8001f4e:	6013      	str	r3, [r2, #0]
	storage_data.km = damping_constants->km;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	4a06      	ldr	r2, [pc, #24]	; (8001f70 <params_received+0x30>)
 8001f56:	6053      	str	r3, [r2, #4]
	storage_data.ks = damping_constants->ks;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <params_received+0x30>)
 8001f5e:	6093      	str	r3, [r2, #8]
	storage_write(&storage_data);
 8001f60:	4803      	ldr	r0, [pc, #12]	; (8001f70 <params_received+0x30>)
 8001f62:	f7fe fffb 	bl	8000f5c <storage_write>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	200037ac 	.word	0x200037ac

08001f74 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == HALL_Pin)
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d102      	bne.n	8001f8a <HAL_GPIO_EXTI_Callback+0x16>
	{
		hall_parser_push_trigger(&hall_parser);
 8001f84:	4803      	ldr	r0, [pc, #12]	; (8001f94 <HAL_GPIO_EXTI_Callback+0x20>)
 8001f86:	f7ff f8df 	bl	8001148 <hall_parser_push_trigger>
	}
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20002784 	.word	0x20002784

08001f98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f9c:	b672      	cpsid	i
}
 8001f9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fa0:	e7fe      	b.n	8001fa0 <Error_Handler+0x8>
	...

08001fa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	4a0f      	ldr	r2, [pc, #60]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fba:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	603b      	str	r3, [r7, #0]
 8001fca:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	4a08      	ldr	r2, [pc, #32]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_MspInit+0x4c>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fde:	603b      	str	r3, [r7, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001fe2:	2007      	movs	r0, #7
 8001fe4:	f000 fbae 	bl	8002744 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40023800 	.word	0x40023800

08001ff4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08a      	sub	sp, #40	; 0x28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a19      	ldr	r2, [pc, #100]	; (8002078 <HAL_I2C_MspInit+0x84>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d12b      	bne.n	800206e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	4b18      	ldr	r3, [pc, #96]	; (800207c <HAL_I2C_MspInit+0x88>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a17      	ldr	r2, [pc, #92]	; (800207c <HAL_I2C_MspInit+0x88>)
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <HAL_I2C_MspInit+0x88>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002032:	23c0      	movs	r3, #192	; 0xc0
 8002034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002036:	2312      	movs	r3, #18
 8002038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203e:	2303      	movs	r3, #3
 8002040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002042:	2304      	movs	r3, #4
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002046:	f107 0314 	add.w	r3, r7, #20
 800204a:	4619      	mov	r1, r3
 800204c:	480c      	ldr	r0, [pc, #48]	; (8002080 <HAL_I2C_MspInit+0x8c>)
 800204e:	f000 fbbb 	bl	80027c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_I2C_MspInit+0x88>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	4a08      	ldr	r2, [pc, #32]	; (800207c <HAL_I2C_MspInit+0x88>)
 800205c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002060:	6413      	str	r3, [r2, #64]	; 0x40
 8002062:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_I2C_MspInit+0x88>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800206e:	bf00      	nop
 8002070:	3728      	adds	r7, #40	; 0x28
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40005400 	.word	0x40005400
 800207c:	40023800 	.word	0x40023800
 8002080:	40020400 	.word	0x40020400

08002084 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0e      	ldr	r2, [pc, #56]	; (80020cc <HAL_TIM_Base_MspInit+0x48>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d115      	bne.n	80020c2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <HAL_TIM_Base_MspInit+0x4c>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <HAL_TIM_Base_MspInit+0x4c>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6453      	str	r3, [r2, #68]	; 0x44
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_TIM_Base_MspInit+0x4c>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 1);
 80020b2:	2201      	movs	r2, #1
 80020b4:	2100      	movs	r1, #0
 80020b6:	2019      	movs	r0, #25
 80020b8:	f000 fb4f 	bl	800275a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020bc:	2019      	movs	r0, #25
 80020be:	f000 fb68 	bl	8002792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40010000 	.word	0x40010000
 80020d0:	40023800 	.word	0x40023800

080020d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	; 0x28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a19      	ldr	r2, [pc, #100]	; (8002158 <HAL_UART_MspInit+0x84>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d12b      	bne.n	800214e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	4b18      	ldr	r3, [pc, #96]	; (800215c <HAL_UART_MspInit+0x88>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	4a17      	ldr	r2, [pc, #92]	; (800215c <HAL_UART_MspInit+0x88>)
 8002100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002104:	6413      	str	r3, [r2, #64]	; 0x40
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <HAL_UART_MspInit+0x88>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	4b11      	ldr	r3, [pc, #68]	; (800215c <HAL_UART_MspInit+0x88>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a10      	ldr	r2, [pc, #64]	; (800215c <HAL_UART_MspInit+0x88>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <HAL_UART_MspInit+0x88>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800212e:	230c      	movs	r3, #12
 8002130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800213e:	2307      	movs	r3, #7
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002142:	f107 0314 	add.w	r3, r7, #20
 8002146:	4619      	mov	r1, r3
 8002148:	4805      	ldr	r0, [pc, #20]	; (8002160 <HAL_UART_MspInit+0x8c>)
 800214a:	f000 fb3d 	bl	80027c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800214e:	bf00      	nop
 8002150:	3728      	adds	r7, #40	; 0x28
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40004400 	.word	0x40004400
 800215c:	40023800 	.word	0x40023800
 8002160:	40020000 	.word	0x40020000

08002164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002168:	e7fe      	b.n	8002168 <NMI_Handler+0x4>

0800216a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800216e:	e7fe      	b.n	800216e <HardFault_Handler+0x4>

08002170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <MemManage_Handler+0x4>

08002176 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800217a:	e7fe      	b.n	800217a <BusFault_Handler+0x4>

0800217c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002180:	e7fe      	b.n	8002180 <UsageFault_Handler+0x4>

08002182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021b0:	f000 f9b4 	bl	800251c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_Pin);
 80021bc:	2001      	movs	r0, #1
 80021be:	f000 fca1 	bl	8002b04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	systemtime_increase_ms();
 80021cc:	f000 f8ea 	bl	80023a4 <systemtime_increase_ms>
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021d0:	4802      	ldr	r0, [pc, #8]	; (80021dc <TIM1_UP_TIM10_IRQHandler+0x14>)
 80021d2:	f003 fc1d 	bl	8005a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200026f8 	.word	0x200026f8

080021e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <OTG_FS_IRQHandler+0x10>)
 80021e6:	f001 fdb4 	bl	8003d52 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20003cf4 	.word	0x20003cf4

080021f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
	return 1;
 80021f8:	2301      	movs	r3, #1
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <_kill>:

int _kill(int pid, int sig)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800220e:	f008 fcb1 	bl	800ab74 <__errno>
 8002212:	4603      	mov	r3, r0
 8002214:	2216      	movs	r2, #22
 8002216:	601a      	str	r2, [r3, #0]
	return -1;
 8002218:	f04f 33ff 	mov.w	r3, #4294967295
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <_exit>:

void _exit (int status)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800222c:	f04f 31ff 	mov.w	r1, #4294967295
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ffe7 	bl	8002204 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002236:	e7fe      	b.n	8002236 <_exit+0x12>

08002238 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	60b9      	str	r1, [r7, #8]
 8002242:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	e00a      	b.n	8002260 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800224a:	f3af 8000 	nop.w
 800224e:	4601      	mov	r1, r0
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	60ba      	str	r2, [r7, #8]
 8002256:	b2ca      	uxtb	r2, r1
 8002258:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	3301      	adds	r3, #1
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	429a      	cmp	r2, r3
 8002266:	dbf0      	blt.n	800224a <_read+0x12>
	}

return len;
 8002268:	687b      	ldr	r3, [r7, #4]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b086      	sub	sp, #24
 8002276:	af00      	add	r7, sp, #0
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	e009      	b.n	8002298 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	60ba      	str	r2, [r7, #8]
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	3301      	adds	r3, #1
 8002296:	617b      	str	r3, [r7, #20]
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	429a      	cmp	r2, r3
 800229e:	dbf1      	blt.n	8002284 <_write+0x12>
	}
	return len;
 80022a0:	687b      	ldr	r3, [r7, #4]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <_close>:

int _close(int file)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
	return -1;
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022d2:	605a      	str	r2, [r3, #4]
	return 0;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <_isatty>:

int _isatty(int file)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
	return 1;
 80022ea:	2301      	movs	r3, #1
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
	return 0;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800231c:	4a14      	ldr	r2, [pc, #80]	; (8002370 <_sbrk+0x5c>)
 800231e:	4b15      	ldr	r3, [pc, #84]	; (8002374 <_sbrk+0x60>)
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002328:	4b13      	ldr	r3, [pc, #76]	; (8002378 <_sbrk+0x64>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d102      	bne.n	8002336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <_sbrk+0x64>)
 8002332:	4a12      	ldr	r2, [pc, #72]	; (800237c <_sbrk+0x68>)
 8002334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <_sbrk+0x64>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	429a      	cmp	r2, r3
 8002342:	d207      	bcs.n	8002354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002344:	f008 fc16 	bl	800ab74 <__errno>
 8002348:	4603      	mov	r3, r0
 800234a:	220c      	movs	r2, #12
 800234c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800234e:	f04f 33ff 	mov.w	r3, #4294967295
 8002352:	e009      	b.n	8002368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <_sbrk+0x64>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800235a:	4b07      	ldr	r3, [pc, #28]	; (8002378 <_sbrk+0x64>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	4a05      	ldr	r2, [pc, #20]	; (8002378 <_sbrk+0x64>)
 8002364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002366:	68fb      	ldr	r3, [r7, #12]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20018000 	.word	0x20018000
 8002374:	00000400 	.word	0x00000400
 8002378:	200037c8 	.word	0x200037c8
 800237c:	20004238 	.word	0x20004238

08002380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <SystemInit+0x20>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238a:	4a05      	ldr	r2, [pc, #20]	; (80023a0 <SystemInit+0x20>)
 800238c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <systemtime_increase_ms>:

uint32_t systemtime_ms = 0;
extern TIM_HandleTypeDef htim1;

void systemtime_increase_ms()
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
	systemtime_ms++;
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <systemtime_increase_ms+0x18>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	3301      	adds	r3, #1
 80023ae:	4a03      	ldr	r2, [pc, #12]	; (80023bc <systemtime_increase_ms+0x18>)
 80023b0:	6013      	str	r3, [r2, #0]
}
 80023b2:	bf00      	nop
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	200037cc 	.word	0x200037cc

080023c0 <systemtime_get_time>:

void systemtime_get_time(systemtime_t* st)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
	st->ms = systemtime_ms;
 80023c8:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <systemtime_get_time+0x28>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	601a      	str	r2, [r3, #0]
	st->us = __HAL_TIM_GET_COUNTER(&htim1);
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <systemtime_get_time+0x2c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	605a      	str	r2, [r3, #4]
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	200037cc 	.word	0x200037cc
 80023ec:	200026f8 	.word	0x200026f8

080023f0 <systemtime_time_diff_us>:
{
	return (st1->ms - st2->ms) + ((float)st1->us - st2->us)/1000.0f;
}

uint32_t systemtime_time_diff_us(systemtime_t* st1, systemtime_t* st2)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
	return (st1->ms - st2->ms)*1000 + (st1->us - st2->us);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002408:	fb03 f202 	mul.w	r2, r3, r2
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6859      	ldr	r1, [r3, #4]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	1acb      	subs	r3, r1, r3
 8002416:	4413      	add	r3, r2
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800245c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002428:	480d      	ldr	r0, [pc, #52]	; (8002460 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800242a:	490e      	ldr	r1, [pc, #56]	; (8002464 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800242c:	4a0e      	ldr	r2, [pc, #56]	; (8002468 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800242e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002430:	e002      	b.n	8002438 <LoopCopyDataInit>

08002432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002436:	3304      	adds	r3, #4

08002438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800243a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800243c:	d3f9      	bcc.n	8002432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800243e:	4a0b      	ldr	r2, [pc, #44]	; (800246c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002440:	4c0b      	ldr	r4, [pc, #44]	; (8002470 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002444:	e001      	b.n	800244a <LoopFillZerobss>

08002446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002448:	3204      	adds	r2, #4

0800244a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800244a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800244c:	d3fb      	bcc.n	8002446 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800244e:	f7ff ff97 	bl	8002380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002452:	f008 fb95 	bl	800ab80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002456:	f7ff fb89 	bl	8001b6c <main>
  bx  lr    
 800245a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800245c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002464:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8002468:	0800dbfc 	.word	0x0800dbfc
  ldr r2, =_sbss
 800246c:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8002470:	20004238 	.word	0x20004238

08002474 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002474:	e7fe      	b.n	8002474 <ADC_IRQHandler>
	...

08002478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800247c:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <HAL_Init+0x40>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <HAL_Init+0x40>)
 8002482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002486:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HAL_Init+0x40>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <HAL_Init+0x40>)
 800248e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002492:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <HAL_Init+0x40>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a07      	ldr	r2, [pc, #28]	; (80024b8 <HAL_Init+0x40>)
 800249a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a0:	2003      	movs	r0, #3
 80024a2:	f000 f94f 	bl	8002744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024a6:	2000      	movs	r0, #0
 80024a8:	f000 f808 	bl	80024bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024ac:	f7ff fd7a 	bl	8001fa4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023c00 	.word	0x40023c00

080024bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024c4:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_InitTick+0x54>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_InitTick+0x58>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	4619      	mov	r1, r3
 80024ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 f967 	bl	80027ae <HAL_SYSTICK_Config>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e00e      	b.n	8002508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b0f      	cmp	r3, #15
 80024ee:	d80a      	bhi.n	8002506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024f0:	2200      	movs	r2, #0
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	f04f 30ff 	mov.w	r0, #4294967295
 80024f8:	f000 f92f 	bl	800275a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024fc:	4a06      	ldr	r2, [pc, #24]	; (8002518 <HAL_InitTick+0x5c>)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	e000      	b.n	8002508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000010 	.word	0x20000010
 8002514:	20000018 	.word	0x20000018
 8002518:	20000014 	.word	0x20000014

0800251c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_IncTick+0x20>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	461a      	mov	r2, r3
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_IncTick+0x24>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4413      	add	r3, r2
 800252c:	4a04      	ldr	r2, [pc, #16]	; (8002540 <HAL_IncTick+0x24>)
 800252e:	6013      	str	r3, [r2, #0]
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20000018 	.word	0x20000018
 8002540:	200037d0 	.word	0x200037d0

08002544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return uwTick;
 8002548:	4b03      	ldr	r3, [pc, #12]	; (8002558 <HAL_GetTick+0x14>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	200037d0 	.word	0x200037d0

0800255c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002564:	f7ff ffee 	bl	8002544 <HAL_GetTick>
 8002568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002574:	d005      	beq.n	8002582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002576:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <HAL_Delay+0x44>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4413      	add	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002582:	bf00      	nop
 8002584:	f7ff ffde 	bl	8002544 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	429a      	cmp	r2, r3
 8002592:	d8f7      	bhi.n	8002584 <HAL_Delay+0x28>
  {
  }
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000018 	.word	0x20000018

080025a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <__NVIC_SetPriorityGrouping+0x44>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025c0:	4013      	ands	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025d6:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <__NVIC_SetPriorityGrouping+0x44>)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	60d3      	str	r3, [r2, #12]
}
 80025dc:	bf00      	nop
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f0:	4b04      	ldr	r3, [pc, #16]	; (8002604 <__NVIC_GetPriorityGrouping+0x18>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	f003 0307 	and.w	r3, r3, #7
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	2b00      	cmp	r3, #0
 8002618:	db0b      	blt.n	8002632 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	f003 021f 	and.w	r2, r3, #31
 8002620:	4907      	ldr	r1, [pc, #28]	; (8002640 <__NVIC_EnableIRQ+0x38>)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	2001      	movs	r0, #1
 800262a:	fa00 f202 	lsl.w	r2, r0, r2
 800262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	e000e100 	.word	0xe000e100

08002644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	6039      	str	r1, [r7, #0]
 800264e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002654:	2b00      	cmp	r3, #0
 8002656:	db0a      	blt.n	800266e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	b2da      	uxtb	r2, r3
 800265c:	490c      	ldr	r1, [pc, #48]	; (8002690 <__NVIC_SetPriority+0x4c>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	0112      	lsls	r2, r2, #4
 8002664:	b2d2      	uxtb	r2, r2
 8002666:	440b      	add	r3, r1
 8002668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800266c:	e00a      	b.n	8002684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	b2da      	uxtb	r2, r3
 8002672:	4908      	ldr	r1, [pc, #32]	; (8002694 <__NVIC_SetPriority+0x50>)
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	3b04      	subs	r3, #4
 800267c:	0112      	lsls	r2, r2, #4
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	440b      	add	r3, r1
 8002682:	761a      	strb	r2, [r3, #24]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000e100 	.word	0xe000e100
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002698:	b480      	push	{r7}
 800269a:	b089      	sub	sp, #36	; 0x24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f1c3 0307 	rsb	r3, r3, #7
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	bf28      	it	cs
 80026b6:	2304      	movcs	r3, #4
 80026b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3304      	adds	r3, #4
 80026be:	2b06      	cmp	r3, #6
 80026c0:	d902      	bls.n	80026c8 <NVIC_EncodePriority+0x30>
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3b03      	subs	r3, #3
 80026c6:	e000      	b.n	80026ca <NVIC_EncodePriority+0x32>
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	f04f 32ff 	mov.w	r2, #4294967295
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43da      	mvns	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	401a      	ands	r2, r3
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e0:	f04f 31ff 	mov.w	r1, #4294967295
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ea:	43d9      	mvns	r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f0:	4313      	orrs	r3, r2
         );
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3724      	adds	r7, #36	; 0x24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3b01      	subs	r3, #1
 800270c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002710:	d301      	bcc.n	8002716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002712:	2301      	movs	r3, #1
 8002714:	e00f      	b.n	8002736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002716:	4a0a      	ldr	r2, [pc, #40]	; (8002740 <SysTick_Config+0x40>)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3b01      	subs	r3, #1
 800271c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800271e:	210f      	movs	r1, #15
 8002720:	f04f 30ff 	mov.w	r0, #4294967295
 8002724:	f7ff ff8e 	bl	8002644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <SysTick_Config+0x40>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800272e:	4b04      	ldr	r3, [pc, #16]	; (8002740 <SysTick_Config+0x40>)
 8002730:	2207      	movs	r2, #7
 8002732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	e000e010 	.word	0xe000e010

08002744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff ff29 	bl	80025a4 <__NVIC_SetPriorityGrouping>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800275a:	b580      	push	{r7, lr}
 800275c:	b086      	sub	sp, #24
 800275e:	af00      	add	r7, sp, #0
 8002760:	4603      	mov	r3, r0
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
 8002766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800276c:	f7ff ff3e 	bl	80025ec <__NVIC_GetPriorityGrouping>
 8002770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	6978      	ldr	r0, [r7, #20]
 8002778:	f7ff ff8e 	bl	8002698 <NVIC_EncodePriority>
 800277c:	4602      	mov	r2, r0
 800277e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ff5d 	bl	8002644 <__NVIC_SetPriority>
}
 800278a:	bf00      	nop
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	4603      	mov	r3, r0
 800279a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800279c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff ff31 	bl	8002608 <__NVIC_EnableIRQ>
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff ffa2 	bl	8002700 <SysTick_Config>
 80027bc:	4603      	mov	r3, r0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b089      	sub	sp, #36	; 0x24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027de:	2300      	movs	r3, #0
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	e159      	b.n	8002a98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027e4:	2201      	movs	r2, #1
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4013      	ands	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	f040 8148 	bne.w	8002a92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	2b01      	cmp	r3, #1
 800280c:	d005      	beq.n	800281a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002816:	2b02      	cmp	r3, #2
 8002818:	d130      	bne.n	800287c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	2203      	movs	r2, #3
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002850:	2201      	movs	r2, #1
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	f003 0201 	and.w	r2, r3, #1
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	2b03      	cmp	r3, #3
 8002886:	d017      	beq.n	80028b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	2203      	movs	r2, #3
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d123      	bne.n	800290c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	08da      	lsrs	r2, r3, #3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3208      	adds	r2, #8
 80028cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	220f      	movs	r2, #15
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	08da      	lsrs	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3208      	adds	r2, #8
 8002906:	69b9      	ldr	r1, [r7, #24]
 8002908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0203 	and.w	r2, r3, #3
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80a2 	beq.w	8002a92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b57      	ldr	r3, [pc, #348]	; (8002ab0 <HAL_GPIO_Init+0x2e8>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	4a56      	ldr	r2, [pc, #344]	; (8002ab0 <HAL_GPIO_Init+0x2e8>)
 8002958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800295c:	6453      	str	r3, [r2, #68]	; 0x44
 800295e:	4b54      	ldr	r3, [pc, #336]	; (8002ab0 <HAL_GPIO_Init+0x2e8>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800296a:	4a52      	ldr	r2, [pc, #328]	; (8002ab4 <HAL_GPIO_Init+0x2ec>)
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	089b      	lsrs	r3, r3, #2
 8002970:	3302      	adds	r3, #2
 8002972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	220f      	movs	r2, #15
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a49      	ldr	r2, [pc, #292]	; (8002ab8 <HAL_GPIO_Init+0x2f0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d019      	beq.n	80029ca <HAL_GPIO_Init+0x202>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a48      	ldr	r2, [pc, #288]	; (8002abc <HAL_GPIO_Init+0x2f4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d013      	beq.n	80029c6 <HAL_GPIO_Init+0x1fe>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a47      	ldr	r2, [pc, #284]	; (8002ac0 <HAL_GPIO_Init+0x2f8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d00d      	beq.n	80029c2 <HAL_GPIO_Init+0x1fa>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a46      	ldr	r2, [pc, #280]	; (8002ac4 <HAL_GPIO_Init+0x2fc>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d007      	beq.n	80029be <HAL_GPIO_Init+0x1f6>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a45      	ldr	r2, [pc, #276]	; (8002ac8 <HAL_GPIO_Init+0x300>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d101      	bne.n	80029ba <HAL_GPIO_Init+0x1f2>
 80029b6:	2304      	movs	r3, #4
 80029b8:	e008      	b.n	80029cc <HAL_GPIO_Init+0x204>
 80029ba:	2307      	movs	r3, #7
 80029bc:	e006      	b.n	80029cc <HAL_GPIO_Init+0x204>
 80029be:	2303      	movs	r3, #3
 80029c0:	e004      	b.n	80029cc <HAL_GPIO_Init+0x204>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e002      	b.n	80029cc <HAL_GPIO_Init+0x204>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <HAL_GPIO_Init+0x204>
 80029ca:	2300      	movs	r3, #0
 80029cc:	69fa      	ldr	r2, [r7, #28]
 80029ce:	f002 0203 	and.w	r2, r2, #3
 80029d2:	0092      	lsls	r2, r2, #2
 80029d4:	4093      	lsls	r3, r2
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029dc:	4935      	ldr	r1, [pc, #212]	; (8002ab4 <HAL_GPIO_Init+0x2ec>)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	089b      	lsrs	r3, r3, #2
 80029e2:	3302      	adds	r3, #2
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ea:	4b38      	ldr	r3, [pc, #224]	; (8002acc <HAL_GPIO_Init+0x304>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a0e:	4a2f      	ldr	r2, [pc, #188]	; (8002acc <HAL_GPIO_Init+0x304>)
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a14:	4b2d      	ldr	r3, [pc, #180]	; (8002acc <HAL_GPIO_Init+0x304>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a38:	4a24      	ldr	r2, [pc, #144]	; (8002acc <HAL_GPIO_Init+0x304>)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a3e:	4b23      	ldr	r3, [pc, #140]	; (8002acc <HAL_GPIO_Init+0x304>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a62:	4a1a      	ldr	r2, [pc, #104]	; (8002acc <HAL_GPIO_Init+0x304>)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a68:	4b18      	ldr	r3, [pc, #96]	; (8002acc <HAL_GPIO_Init+0x304>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a8c:	4a0f      	ldr	r2, [pc, #60]	; (8002acc <HAL_GPIO_Init+0x304>)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	3301      	adds	r3, #1
 8002a96:	61fb      	str	r3, [r7, #28]
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	2b0f      	cmp	r3, #15
 8002a9c:	f67f aea2 	bls.w	80027e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop
 8002aa4:	3724      	adds	r7, #36	; 0x24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40013800 	.word	0x40013800
 8002ab8:	40020000 	.word	0x40020000
 8002abc:	40020400 	.word	0x40020400
 8002ac0:	40020800 	.word	0x40020800
 8002ac4:	40020c00 	.word	0x40020c00
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	40013c00 	.word	0x40013c00

08002ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	807b      	strh	r3, [r7, #2]
 8002adc:	4613      	mov	r3, r2
 8002ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae0:	787b      	ldrb	r3, [r7, #1]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ae6:	887a      	ldrh	r2, [r7, #2]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002aec:	e003      	b.n	8002af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aee:	887b      	ldrh	r3, [r7, #2]
 8002af0:	041a      	lsls	r2, r3, #16
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	619a      	str	r2, [r3, #24]
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
	...

08002b04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b0e:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b10:	695a      	ldr	r2, [r3, #20]
 8002b12:	88fb      	ldrh	r3, [r7, #6]
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d006      	beq.n	8002b28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b1a:	4a05      	ldr	r2, [pc, #20]	; (8002b30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b1c:	88fb      	ldrh	r3, [r7, #6]
 8002b1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fa26 	bl	8001f74 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40013c00 	.word	0x40013c00

08002b34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e12b      	b.n	8002d9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d106      	bne.n	8002b60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7ff fa4a 	bl	8001ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2224      	movs	r2, #36	; 0x24
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0201 	bic.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b98:	f002 fe60 	bl	800585c <HAL_RCC_GetPCLK1Freq>
 8002b9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	4a81      	ldr	r2, [pc, #516]	; (8002da8 <HAL_I2C_Init+0x274>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d807      	bhi.n	8002bb8 <HAL_I2C_Init+0x84>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4a80      	ldr	r2, [pc, #512]	; (8002dac <HAL_I2C_Init+0x278>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	bf94      	ite	ls
 8002bb0:	2301      	movls	r3, #1
 8002bb2:	2300      	movhi	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	e006      	b.n	8002bc6 <HAL_I2C_Init+0x92>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4a7d      	ldr	r2, [pc, #500]	; (8002db0 <HAL_I2C_Init+0x27c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	bf94      	ite	ls
 8002bc0:	2301      	movls	r3, #1
 8002bc2:	2300      	movhi	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e0e7      	b.n	8002d9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	4a78      	ldr	r2, [pc, #480]	; (8002db4 <HAL_I2C_Init+0x280>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	0c9b      	lsrs	r3, r3, #18
 8002bd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	4a6a      	ldr	r2, [pc, #424]	; (8002da8 <HAL_I2C_Init+0x274>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d802      	bhi.n	8002c08 <HAL_I2C_Init+0xd4>
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	3301      	adds	r3, #1
 8002c06:	e009      	b.n	8002c1c <HAL_I2C_Init+0xe8>
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c0e:	fb02 f303 	mul.w	r3, r2, r3
 8002c12:	4a69      	ldr	r2, [pc, #420]	; (8002db8 <HAL_I2C_Init+0x284>)
 8002c14:	fba2 2303 	umull	r2, r3, r2, r3
 8002c18:	099b      	lsrs	r3, r3, #6
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	430b      	orrs	r3, r1
 8002c22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	495c      	ldr	r1, [pc, #368]	; (8002da8 <HAL_I2C_Init+0x274>)
 8002c38:	428b      	cmp	r3, r1
 8002c3a:	d819      	bhi.n	8002c70 <HAL_I2C_Init+0x13c>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	1e59      	subs	r1, r3, #1
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c4a:	1c59      	adds	r1, r3, #1
 8002c4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c50:	400b      	ands	r3, r1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <HAL_I2C_Init+0x138>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	1e59      	subs	r1, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c64:	3301      	adds	r3, #1
 8002c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c6a:	e051      	b.n	8002d10 <HAL_I2C_Init+0x1dc>
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	e04f      	b.n	8002d10 <HAL_I2C_Init+0x1dc>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d111      	bne.n	8002c9c <HAL_I2C_Init+0x168>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	1e58      	subs	r0, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6859      	ldr	r1, [r3, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	440b      	add	r3, r1
 8002c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	e012      	b.n	8002cc2 <HAL_I2C_Init+0x18e>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1e58      	subs	r0, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6859      	ldr	r1, [r3, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	0099      	lsls	r1, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf0c      	ite	eq
 8002cbc:	2301      	moveq	r3, #1
 8002cbe:	2300      	movne	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_I2C_Init+0x196>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e022      	b.n	8002d10 <HAL_I2C_Init+0x1dc>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10e      	bne.n	8002cf0 <HAL_I2C_Init+0x1bc>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1e58      	subs	r0, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6859      	ldr	r1, [r3, #4]
 8002cda:	460b      	mov	r3, r1
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	440b      	add	r3, r1
 8002ce0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cee:	e00f      	b.n	8002d10 <HAL_I2C_Init+0x1dc>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1e58      	subs	r0, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6859      	ldr	r1, [r3, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	0099      	lsls	r1, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d06:	3301      	adds	r3, #1
 8002d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	6809      	ldr	r1, [r1, #0]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69da      	ldr	r2, [r3, #28]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6911      	ldr	r1, [r2, #16]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	68d2      	ldr	r2, [r2, #12]
 8002d4a:	4311      	orrs	r1, r2
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6812      	ldr	r2, [r2, #0]
 8002d50:	430b      	orrs	r3, r1
 8002d52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695a      	ldr	r2, [r3, #20]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	000186a0 	.word	0x000186a0
 8002dac:	001e847f 	.word	0x001e847f
 8002db0:	003d08ff 	.word	0x003d08ff
 8002db4:	431bde83 	.word	0x431bde83
 8002db8:	10624dd3 	.word	0x10624dd3

08002dbc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	4608      	mov	r0, r1
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4603      	mov	r3, r0
 8002dcc:	817b      	strh	r3, [r7, #10]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	813b      	strh	r3, [r7, #8]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dd6:	f7ff fbb5 	bl	8002544 <HAL_GetTick>
 8002dda:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	f040 80d9 	bne.w	8002f9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	2319      	movs	r3, #25
 8002df0:	2201      	movs	r2, #1
 8002df2:	496d      	ldr	r1, [pc, #436]	; (8002fa8 <HAL_I2C_Mem_Write+0x1ec>)
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 fc7f 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e00:	2302      	movs	r3, #2
 8002e02:	e0cc      	b.n	8002f9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_I2C_Mem_Write+0x56>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e0c5      	b.n	8002f9e <HAL_I2C_Mem_Write+0x1e2>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d007      	beq.n	8002e38 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2221      	movs	r2, #33	; 0x21
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2240      	movs	r2, #64	; 0x40
 8002e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6a3a      	ldr	r2, [r7, #32]
 8002e62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4a4d      	ldr	r2, [pc, #308]	; (8002fac <HAL_I2C_Mem_Write+0x1f0>)
 8002e78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e7a:	88f8      	ldrh	r0, [r7, #6]
 8002e7c:	893a      	ldrh	r2, [r7, #8]
 8002e7e:	8979      	ldrh	r1, [r7, #10]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	9301      	str	r3, [sp, #4]
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	4603      	mov	r3, r0
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 fab6 	bl	80033fc <I2C_RequestMemoryWrite>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d052      	beq.n	8002f3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e081      	b.n	8002f9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 fd00 	bl	80038a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00d      	beq.n	8002ec6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d107      	bne.n	8002ec2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e06b      	b.n	8002f9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	781a      	ldrb	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d11b      	bne.n	8002f3c <HAL_I2C_Mem_Write+0x180>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d017      	beq.n	8002f3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f10:	781a      	ldrb	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1aa      	bne.n	8002e9a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 fcec 	bl	8003926 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00d      	beq.n	8002f70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d107      	bne.n	8002f6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e016      	b.n	8002f9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	e000      	b.n	8002f9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f9c:	2302      	movs	r3, #2
  }
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3718      	adds	r7, #24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	00100002 	.word	0x00100002
 8002fac:	ffff0000 	.word	0xffff0000

08002fb0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08c      	sub	sp, #48	; 0x30
 8002fb4:	af02      	add	r7, sp, #8
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	4608      	mov	r0, r1
 8002fba:	4611      	mov	r1, r2
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	817b      	strh	r3, [r7, #10]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	813b      	strh	r3, [r7, #8]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fca:	f7ff fabb 	bl	8002544 <HAL_GetTick>
 8002fce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	f040 8208 	bne.w	80033ee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	9300      	str	r3, [sp, #0]
 8002fe2:	2319      	movs	r3, #25
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	497b      	ldr	r1, [pc, #492]	; (80031d4 <HAL_I2C_Mem_Read+0x224>)
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 fb85 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e1fb      	b.n	80033f0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_I2C_Mem_Read+0x56>
 8003002:	2302      	movs	r3, #2
 8003004:	e1f4      	b.n	80033f0 <HAL_I2C_Mem_Read+0x440>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b01      	cmp	r3, #1
 800301a:	d007      	beq.n	800302c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800303a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2222      	movs	r2, #34	; 0x22
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2240      	movs	r2, #64	; 0x40
 8003048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003056:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800305c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4a5b      	ldr	r2, [pc, #364]	; (80031d8 <HAL_I2C_Mem_Read+0x228>)
 800306c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800306e:	88f8      	ldrh	r0, [r7, #6]
 8003070:	893a      	ldrh	r2, [r7, #8]
 8003072:	8979      	ldrh	r1, [r7, #10]
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	9301      	str	r3, [sp, #4]
 8003078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	4603      	mov	r3, r0
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fa52 	bl	8003528 <I2C_RequestMemoryRead>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e1b0      	b.n	80033f0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003092:	2b00      	cmp	r3, #0
 8003094:	d113      	bne.n	80030be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003096:	2300      	movs	r3, #0
 8003098:	623b      	str	r3, [r7, #32]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	623b      	str	r3, [r7, #32]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	623b      	str	r3, [r7, #32]
 80030aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	e184      	b.n	80033c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d11b      	bne.n	80030fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d6:	2300      	movs	r3, #0
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	61fb      	str	r3, [r7, #28]
 80030ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	e164      	b.n	80033c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003102:	2b02      	cmp	r3, #2
 8003104:	d11b      	bne.n	800313e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003114:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003124:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003126:	2300      	movs	r3, #0
 8003128:	61bb      	str	r3, [r7, #24]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	695b      	ldr	r3, [r3, #20]
 8003130:	61bb      	str	r3, [r7, #24]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	61bb      	str	r3, [r7, #24]
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	e144      	b.n	80033c8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	617b      	str	r3, [r7, #20]
 8003152:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003154:	e138      	b.n	80033c8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315a:	2b03      	cmp	r3, #3
 800315c:	f200 80f1 	bhi.w	8003342 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003164:	2b01      	cmp	r3, #1
 8003166:	d123      	bne.n	80031b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 fc1b 	bl	80039a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e139      	b.n	80033f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031ae:	e10b      	b.n	80033c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d14e      	bne.n	8003256 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031be:	2200      	movs	r2, #0
 80031c0:	4906      	ldr	r1, [pc, #24]	; (80031dc <HAL_I2C_Mem_Read+0x22c>)
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 fa98 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d008      	beq.n	80031e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e10e      	b.n	80033f0 <HAL_I2C_Mem_Read+0x440>
 80031d2:	bf00      	nop
 80031d4:	00100002 	.word	0x00100002
 80031d8:	ffff0000 	.word	0xffff0000
 80031dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	3b01      	subs	r3, #1
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	691a      	ldr	r2, [r3, #16]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324a:	b29b      	uxth	r3, r3
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003254:	e0b8      	b.n	80033c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325c:	2200      	movs	r2, #0
 800325e:	4966      	ldr	r1, [pc, #408]	; (80033f8 <HAL_I2C_Mem_Read+0x448>)
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 fa49 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0bf      	b.n	80033f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b8:	2200      	movs	r2, #0
 80032ba:	494f      	ldr	r1, [pc, #316]	; (80033f8 <HAL_I2C_Mem_Read+0x448>)
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 fa1b 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e091      	b.n	80033f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	1c5a      	adds	r2, r3, #1
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003304:	b29b      	uxth	r3, r3
 8003306:	3b01      	subs	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003336:	b29b      	uxth	r3, r3
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003340:	e042      	b.n	80033c8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003344:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 fb2e 	bl	80039a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e04c      	b.n	80033f0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b04      	cmp	r3, #4
 8003394:	d118      	bne.n	80033c8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f47f aec2 	bne.w	8003156 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033ea:	2300      	movs	r3, #0
 80033ec:	e000      	b.n	80033f0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80033ee:	2302      	movs	r3, #2
  }
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3728      	adds	r7, #40	; 0x28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	00010004 	.word	0x00010004

080033fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af02      	add	r7, sp, #8
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	4608      	mov	r0, r1
 8003406:	4611      	mov	r1, r2
 8003408:	461a      	mov	r2, r3
 800340a:	4603      	mov	r3, r0
 800340c:	817b      	strh	r3, [r7, #10]
 800340e:	460b      	mov	r3, r1
 8003410:	813b      	strh	r3, [r7, #8]
 8003412:	4613      	mov	r3, r2
 8003414:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003424:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	2200      	movs	r2, #0
 800342e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f960 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00d      	beq.n	800345a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800344c:	d103      	bne.n	8003456 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003454:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e05f      	b.n	800351a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800345a:	897b      	ldrh	r3, [r7, #10]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003468:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	6a3a      	ldr	r2, [r7, #32]
 800346e:	492d      	ldr	r1, [pc, #180]	; (8003524 <I2C_RequestMemoryWrite+0x128>)
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f998 	bl	80037a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e04c      	b.n	800351a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003498:	6a39      	ldr	r1, [r7, #32]
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 fa02 	bl	80038a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00d      	beq.n	80034c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d107      	bne.n	80034be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e02b      	b.n	800351a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034c2:	88fb      	ldrh	r3, [r7, #6]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d105      	bne.n	80034d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034c8:	893b      	ldrh	r3, [r7, #8]
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	611a      	str	r2, [r3, #16]
 80034d2:	e021      	b.n	8003518 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034d4:	893b      	ldrh	r3, [r7, #8]
 80034d6:	0a1b      	lsrs	r3, r3, #8
 80034d8:	b29b      	uxth	r3, r3
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e4:	6a39      	ldr	r1, [r7, #32]
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f9dc 	bl	80038a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00d      	beq.n	800350e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d107      	bne.n	800350a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003508:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e005      	b.n	800351a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800350e:	893b      	ldrh	r3, [r7, #8]
 8003510:	b2da      	uxtb	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	00010002 	.word	0x00010002

08003528 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af02      	add	r7, sp, #8
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	4608      	mov	r0, r1
 8003532:	4611      	mov	r1, r2
 8003534:	461a      	mov	r2, r3
 8003536:	4603      	mov	r3, r0
 8003538:	817b      	strh	r3, [r7, #10]
 800353a:	460b      	mov	r3, r1
 800353c:	813b      	strh	r3, [r7, #8]
 800353e:	4613      	mov	r3, r2
 8003540:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003550:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003560:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	2200      	movs	r2, #0
 800356a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 f8c2 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00d      	beq.n	8003596 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003588:	d103      	bne.n	8003592 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003590:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e0aa      	b.n	80036ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003596:	897b      	ldrh	r3, [r7, #10]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	6a3a      	ldr	r2, [r7, #32]
 80035aa:	4952      	ldr	r1, [pc, #328]	; (80036f4 <I2C_RequestMemoryRead+0x1cc>)
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 f8fa 	bl	80037a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e097      	b.n	80036ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d4:	6a39      	ldr	r1, [r7, #32]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f964 	bl	80038a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00d      	beq.n	80035fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d107      	bne.n	80035fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e076      	b.n	80036ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d105      	bne.n	8003610 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003604:	893b      	ldrh	r3, [r7, #8]
 8003606:	b2da      	uxtb	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	611a      	str	r2, [r3, #16]
 800360e:	e021      	b.n	8003654 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003610:	893b      	ldrh	r3, [r7, #8]
 8003612:	0a1b      	lsrs	r3, r3, #8
 8003614:	b29b      	uxth	r3, r3
 8003616:	b2da      	uxtb	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800361e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003620:	6a39      	ldr	r1, [r7, #32]
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 f93e 	bl	80038a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00d      	beq.n	800364a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	2b04      	cmp	r3, #4
 8003634:	d107      	bne.n	8003646 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003644:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e050      	b.n	80036ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800364a:	893b      	ldrh	r3, [r7, #8]
 800364c:	b2da      	uxtb	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003656:	6a39      	ldr	r1, [r7, #32]
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 f923 	bl	80038a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00d      	beq.n	8003680 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	2b04      	cmp	r3, #4
 800366a:	d107      	bne.n	800367c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e035      	b.n	80036ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800368e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	2200      	movs	r2, #0
 8003698:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f82b 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00d      	beq.n	80036c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036b6:	d103      	bne.n	80036c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e013      	b.n	80036ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036c4:	897b      	ldrh	r3, [r7, #10]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	6a3a      	ldr	r2, [r7, #32]
 80036d8:	4906      	ldr	r1, [pc, #24]	; (80036f4 <I2C_RequestMemoryRead+0x1cc>)
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 f863 	bl	80037a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	00010002 	.word	0x00010002

080036f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	603b      	str	r3, [r7, #0]
 8003704:	4613      	mov	r3, r2
 8003706:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003708:	e025      	b.n	8003756 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003710:	d021      	beq.n	8003756 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003712:	f7fe ff17 	bl	8002544 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d302      	bcc.n	8003728 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d116      	bne.n	8003756 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	f043 0220 	orr.w	r2, r3, #32
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e023      	b.n	800379e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	0c1b      	lsrs	r3, r3, #16
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b01      	cmp	r3, #1
 800375e:	d10d      	bne.n	800377c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	43da      	mvns	r2, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4013      	ands	r3, r2
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	bf0c      	ite	eq
 8003772:	2301      	moveq	r3, #1
 8003774:	2300      	movne	r3, #0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	461a      	mov	r2, r3
 800377a:	e00c      	b.n	8003796 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	43da      	mvns	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	4013      	ands	r3, r2
 8003788:	b29b      	uxth	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	bf0c      	ite	eq
 800378e:	2301      	moveq	r3, #1
 8003790:	2300      	movne	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	461a      	mov	r2, r3
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	429a      	cmp	r2, r3
 800379a:	d0b6      	beq.n	800370a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	60f8      	str	r0, [r7, #12]
 80037ae:	60b9      	str	r1, [r7, #8]
 80037b0:	607a      	str	r2, [r7, #4]
 80037b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037b4:	e051      	b.n	800385a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c4:	d123      	bne.n	800380e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	f043 0204 	orr.w	r2, r3, #4
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e046      	b.n	800389c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003814:	d021      	beq.n	800385a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003816:	f7fe fe95 	bl	8002544 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	429a      	cmp	r2, r3
 8003824:	d302      	bcc.n	800382c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d116      	bne.n	800385a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f043 0220 	orr.w	r2, r3, #32
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e020      	b.n	800389c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	0c1b      	lsrs	r3, r3, #16
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b01      	cmp	r3, #1
 8003862:	d10c      	bne.n	800387e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	43da      	mvns	r2, r3
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	4013      	ands	r3, r2
 8003870:	b29b      	uxth	r3, r3
 8003872:	2b00      	cmp	r3, #0
 8003874:	bf14      	ite	ne
 8003876:	2301      	movne	r3, #1
 8003878:	2300      	moveq	r3, #0
 800387a:	b2db      	uxtb	r3, r3
 800387c:	e00b      	b.n	8003896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	43da      	mvns	r2, r3
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	4013      	ands	r3, r2
 800388a:	b29b      	uxth	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	bf14      	ite	ne
 8003890:	2301      	movne	r3, #1
 8003892:	2300      	moveq	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d18d      	bne.n	80037b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038b0:	e02d      	b.n	800390e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f8ce 	bl	8003a54 <I2C_IsAcknowledgeFailed>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e02d      	b.n	800391e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c8:	d021      	beq.n	800390e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ca:	f7fe fe3b 	bl	8002544 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d302      	bcc.n	80038e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d116      	bne.n	800390e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f043 0220 	orr.w	r2, r3, #32
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e007      	b.n	800391e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003918:	2b80      	cmp	r3, #128	; 0x80
 800391a:	d1ca      	bne.n	80038b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003932:	e02d      	b.n	8003990 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003934:	68f8      	ldr	r0, [r7, #12]
 8003936:	f000 f88d 	bl	8003a54 <I2C_IsAcknowledgeFailed>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e02d      	b.n	80039a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394a:	d021      	beq.n	8003990 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800394c:	f7fe fdfa 	bl	8002544 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	429a      	cmp	r2, r3
 800395a:	d302      	bcc.n	8003962 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d116      	bne.n	8003990 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	f043 0220 	orr.w	r2, r3, #32
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e007      	b.n	80039a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b04      	cmp	r3, #4
 800399c:	d1ca      	bne.n	8003934 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039b4:	e042      	b.n	8003a3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	f003 0310 	and.w	r3, r3, #16
 80039c0:	2b10      	cmp	r3, #16
 80039c2:	d119      	bne.n	80039f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0210 	mvn.w	r2, #16
 80039cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e029      	b.n	8003a4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f8:	f7fe fda4 	bl	8002544 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d302      	bcc.n	8003a0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d116      	bne.n	8003a3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	f043 0220 	orr.w	r2, r3, #32
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e007      	b.n	8003a4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a46:	2b40      	cmp	r3, #64	; 0x40
 8003a48:	d1b5      	bne.n	80039b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6a:	d11b      	bne.n	8003aa4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	f043 0204 	orr.w	r2, r3, #4
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ab2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ab4:	b08f      	sub	sp, #60	; 0x3c
 8003ab6:	af0a      	add	r7, sp, #40	; 0x28
 8003ab8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e10f      	b.n	8003ce4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f006 fa88 	bl	8009ff4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d102      	bne.n	8003afe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f002 fef9 	bl	80068fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	687e      	ldr	r6, [r7, #4]
 8003b10:	466d      	mov	r5, sp
 8003b12:	f106 0410 	add.w	r4, r6, #16
 8003b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b22:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b26:	1d33      	adds	r3, r6, #4
 8003b28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b2a:	6838      	ldr	r0, [r7, #0]
 8003b2c:	f002 fdd0 	bl	80066d0 <USB_CoreInit>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d005      	beq.n	8003b42 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e0d0      	b.n	8003ce4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2100      	movs	r1, #0
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f002 fee7 	bl	800691c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b4e:	2300      	movs	r3, #0
 8003b50:	73fb      	strb	r3, [r7, #15]
 8003b52:	e04a      	b.n	8003bea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b54:	7bfa      	ldrb	r2, [r7, #15]
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	333d      	adds	r3, #61	; 0x3d
 8003b64:	2201      	movs	r2, #1
 8003b66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b68:	7bfa      	ldrb	r2, [r7, #15]
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4413      	add	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	333c      	adds	r3, #60	; 0x3c
 8003b78:	7bfa      	ldrb	r2, [r7, #15]
 8003b7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b7c:	7bfa      	ldrb	r2, [r7, #15]
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
 8003b80:	b298      	uxth	r0, r3
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	4613      	mov	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4413      	add	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	3344      	adds	r3, #68	; 0x44
 8003b90:	4602      	mov	r2, r0
 8003b92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b94:	7bfa      	ldrb	r2, [r7, #15]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	3340      	adds	r3, #64	; 0x40
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ba8:	7bfa      	ldrb	r2, [r7, #15]
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	3348      	adds	r3, #72	; 0x48
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bbc:	7bfa      	ldrb	r2, [r7, #15]
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	334c      	adds	r3, #76	; 0x4c
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003bd0:	7bfa      	ldrb	r2, [r7, #15]
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	4413      	add	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	3354      	adds	r3, #84	; 0x54
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003be4:	7bfb      	ldrb	r3, [r7, #15]
 8003be6:	3301      	adds	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]
 8003bea:	7bfa      	ldrb	r2, [r7, #15]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d3af      	bcc.n	8003b54 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	73fb      	strb	r3, [r7, #15]
 8003bf8:	e044      	b.n	8003c84 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003bfa:	7bfa      	ldrb	r2, [r7, #15]
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	4413      	add	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	440b      	add	r3, r1
 8003c08:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c10:	7bfa      	ldrb	r2, [r7, #15]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003c22:	7bfa      	ldrb	r2, [r7, #15]
 8003c24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c26:	7bfa      	ldrb	r2, [r7, #15]
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c38:	2200      	movs	r2, #0
 8003c3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c3c:	7bfa      	ldrb	r2, [r7, #15]
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	4613      	mov	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003c4e:	2200      	movs	r2, #0
 8003c50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c52:	7bfa      	ldrb	r2, [r7, #15]
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	4613      	mov	r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	440b      	add	r3, r1
 8003c60:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c68:	7bfa      	ldrb	r2, [r7, #15]
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4413      	add	r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	3301      	adds	r3, #1
 8003c82:	73fb      	strb	r3, [r7, #15]
 8003c84:	7bfa      	ldrb	r2, [r7, #15]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d3b5      	bcc.n	8003bfa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	603b      	str	r3, [r7, #0]
 8003c94:	687e      	ldr	r6, [r7, #4]
 8003c96:	466d      	mov	r5, sp
 8003c98:	f106 0410 	add.w	r4, r6, #16
 8003c9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ca0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ca2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ca4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ca8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cac:	1d33      	adds	r3, r6, #4
 8003cae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cb0:	6838      	ldr	r0, [r7, #0]
 8003cb2:	f002 fe7f 	bl	80069b4 <USB_DevInit>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e00d      	b.n	8003ce4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f003 ffce 	bl	8007c7e <USB_DevDisconnect>

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003cec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_PCD_Start+0x1c>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e020      	b.n	8003d4a <HAL_PCD_Start+0x5e>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d109      	bne.n	8003d2c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d005      	beq.n	8003d2c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d24:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f002 fdd1 	bl	80068d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f003 ff7e 	bl	8007c3c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003d52:	b590      	push	{r4, r7, lr}
 8003d54:	b08d      	sub	sp, #52	; 0x34
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f004 f83c 	bl	8007de6 <USB_GetMode>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f040 848a 	bne.w	800468a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f003 ffa0 	bl	8007cc0 <USB_ReadInterrupts>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 8480 	beq.w	8004688 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	0a1b      	lsrs	r3, r3, #8
 8003d92:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f003 ff8d 	bl	8007cc0 <USB_ReadInterrupts>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d107      	bne.n	8003dc0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695a      	ldr	r2, [r3, #20]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f002 0202 	and.w	r2, r2, #2
 8003dbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f003 ff7b 	bl	8007cc0 <USB_ReadInterrupts>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	2b10      	cmp	r3, #16
 8003dd2:	d161      	bne.n	8003e98 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699a      	ldr	r2, [r3, #24]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0210 	bic.w	r2, r2, #16
 8003de2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	f003 020f 	and.w	r2, r3, #15
 8003df0:	4613      	mov	r3, r2
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	4413      	add	r3, r2
 8003e00:	3304      	adds	r3, #4
 8003e02:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	0c5b      	lsrs	r3, r3, #17
 8003e08:	f003 030f 	and.w	r3, r3, #15
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d124      	bne.n	8003e5a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d035      	beq.n	8003e88 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	091b      	lsrs	r3, r3, #4
 8003e24:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	6a38      	ldr	r0, [r7, #32]
 8003e30:	f003 fdb2 	bl	8007998 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	091b      	lsrs	r3, r3, #4
 8003e3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e40:	441a      	add	r2, r3
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	6a1a      	ldr	r2, [r3, #32]
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	091b      	lsrs	r3, r3, #4
 8003e4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e52:	441a      	add	r2, r3
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	621a      	str	r2, [r3, #32]
 8003e58:	e016      	b.n	8003e88 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	0c5b      	lsrs	r3, r3, #17
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	2b06      	cmp	r3, #6
 8003e64:	d110      	bne.n	8003e88 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e6c:	2208      	movs	r2, #8
 8003e6e:	4619      	mov	r1, r3
 8003e70:	6a38      	ldr	r0, [r7, #32]
 8003e72:	f003 fd91 	bl	8007998 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	6a1a      	ldr	r2, [r3, #32]
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	091b      	lsrs	r3, r3, #4
 8003e7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e82:	441a      	add	r2, r3
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699a      	ldr	r2, [r3, #24]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0210 	orr.w	r2, r2, #16
 8003e96:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f003 ff0f 	bl	8007cc0 <USB_ReadInterrupts>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ea8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003eac:	f040 80a7 	bne.w	8003ffe <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f003 ff14 	bl	8007ce6 <USB_ReadDevAllOutEpInterrupt>
 8003ebe:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003ec0:	e099      	b.n	8003ff6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 808e 	beq.w	8003fea <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	4611      	mov	r1, r2
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f003 ff38 	bl	8007d4e <USB_ReadDevOutEPInterrupt>
 8003ede:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00c      	beq.n	8003f04 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	2301      	movs	r3, #1
 8003efa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003efc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 feaa 	bl	8004c58 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00c      	beq.n	8003f28 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	2308      	movs	r3, #8
 8003f1e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003f20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 ff80 	bl	8004e28 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f003 0310 	and.w	r3, r3, #16
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d008      	beq.n	8003f44 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	015a      	lsls	r2, r3, #5
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3e:	461a      	mov	r2, r3
 8003f40:	2310      	movs	r3, #16
 8003f42:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d030      	beq.n	8003fb0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f56:	2b80      	cmp	r3, #128	; 0x80
 8003f58:	d109      	bne.n	8003f6e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f6c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f70:	4613      	mov	r3, r2
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	4413      	add	r3, r2
 8003f80:	3304      	adds	r3, #4
 8003f82:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	78db      	ldrb	r3, [r3, #3]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d108      	bne.n	8003f9e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	4619      	mov	r1, r3
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f006 f931 	bl	800a200 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003faa:	461a      	mov	r2, r3
 8003fac:	2302      	movs	r3, #2
 8003fae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d008      	beq.n	8003fcc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	2320      	movs	r3, #32
 8003fca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d009      	beq.n	8003fea <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	015a      	lsls	r2, r3, #5
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fe8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	3301      	adds	r3, #1
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff2:	085b      	lsrs	r3, r3, #1
 8003ff4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f47f af62 	bne.w	8003ec2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f003 fe5c 	bl	8007cc0 <USB_ReadInterrupts>
 8004008:	4603      	mov	r3, r0
 800400a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800400e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004012:	f040 80db 	bne.w	80041cc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f003 fe7d 	bl	8007d1a <USB_ReadDevAllInEpInterrupt>
 8004020:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004022:	2300      	movs	r3, #0
 8004024:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004026:	e0cd      	b.n	80041c4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	f000 80c2 	beq.w	80041b8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	4611      	mov	r1, r2
 800403e:	4618      	mov	r0, r3
 8004040:	f003 fea3 	bl	8007d8a <USB_ReadDevInEPInterrupt>
 8004044:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d057      	beq.n	8004100 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	2201      	movs	r2, #1
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	43db      	mvns	r3, r3
 800406a:	69f9      	ldr	r1, [r7, #28]
 800406c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004070:	4013      	ands	r3, r2
 8004072:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	4413      	add	r3, r2
 800407c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004080:	461a      	mov	r2, r3
 8004082:	2301      	movs	r3, #1
 8004084:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d132      	bne.n	80040f4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004092:	4613      	mov	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	440b      	add	r3, r1
 800409c:	334c      	adds	r3, #76	; 0x4c
 800409e:	6819      	ldr	r1, [r3, #0]
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a4:	4613      	mov	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	4413      	add	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4403      	add	r3, r0
 80040ae:	3348      	adds	r3, #72	; 0x48
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4419      	add	r1, r3
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b8:	4613      	mov	r3, r2
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	4413      	add	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4403      	add	r3, r0
 80040c2:	334c      	adds	r3, #76	; 0x4c
 80040c4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d113      	bne.n	80040f4 <HAL_PCD_IRQHandler+0x3a2>
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d0:	4613      	mov	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	3354      	adds	r3, #84	; 0x54
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d108      	bne.n	80040f4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040ec:	461a      	mov	r2, r3
 80040ee:	2101      	movs	r1, #1
 80040f0:	f003 feaa 	bl	8007e48 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80040f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	4619      	mov	r1, r3
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f005 fffb 	bl	800a0f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d008      	beq.n	800411c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	4413      	add	r3, r2
 8004112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004116:	461a      	mov	r2, r3
 8004118:	2308      	movs	r3, #8
 800411a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f003 0310 	and.w	r3, r3, #16
 8004122:	2b00      	cmp	r3, #0
 8004124:	d008      	beq.n	8004138 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	4413      	add	r3, r2
 800412e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004132:	461a      	mov	r2, r3
 8004134:	2310      	movs	r3, #16
 8004136:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413e:	2b00      	cmp	r3, #0
 8004140:	d008      	beq.n	8004154 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414e:	461a      	mov	r2, r3
 8004150:	2340      	movs	r3, #64	; 0x40
 8004152:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d023      	beq.n	80041a6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800415e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004160:	6a38      	ldr	r0, [r7, #32]
 8004162:	f002 fd8b 	bl	8006c7c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004168:	4613      	mov	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	4413      	add	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	3338      	adds	r3, #56	; 0x38
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	4413      	add	r3, r2
 8004176:	3304      	adds	r3, #4
 8004178:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	78db      	ldrb	r3, [r3, #3]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d108      	bne.n	8004194 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2200      	movs	r2, #0
 8004186:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	b2db      	uxtb	r3, r3
 800418c:	4619      	mov	r1, r3
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f006 f848 	bl	800a224 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	4413      	add	r3, r2
 800419c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a0:	461a      	mov	r2, r3
 80041a2:	2302      	movs	r3, #2
 80041a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d003      	beq.n	80041b8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80041b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 fcc3 	bl	8004b3e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	3301      	adds	r3, #1
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80041be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c0:	085b      	lsrs	r3, r3, #1
 80041c2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80041c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f47f af2e 	bne.w	8004028 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f003 fd75 	bl	8007cc0 <USB_ReadInterrupts>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041e0:	d122      	bne.n	8004228 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	69fa      	ldr	r2, [r7, #28]
 80041ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041f0:	f023 0301 	bic.w	r3, r3, #1
 80041f4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d108      	bne.n	8004212 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004208:	2100      	movs	r1, #0
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 feaa 	bl	8004f64 <HAL_PCDEx_LPM_Callback>
 8004210:	e002      	b.n	8004218 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f005 ffe6 	bl	800a1e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695a      	ldr	r2, [r3, #20]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004226:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4618      	mov	r0, r3
 800422e:	f003 fd47 	bl	8007cc0 <USB_ReadInterrupts>
 8004232:	4603      	mov	r3, r0
 8004234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800423c:	d112      	bne.n	8004264 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b01      	cmp	r3, #1
 800424c:	d102      	bne.n	8004254 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f005 ffa2 	bl	800a198 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695a      	ldr	r2, [r3, #20]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004262:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f003 fd29 	bl	8007cc0 <USB_ReadInterrupts>
 800426e:	4603      	mov	r3, r0
 8004270:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004278:	f040 80b7 	bne.w	80043ea <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	69fa      	ldr	r2, [r7, #28]
 8004286:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800428a:	f023 0301 	bic.w	r3, r3, #1
 800428e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2110      	movs	r1, #16
 8004296:	4618      	mov	r0, r3
 8004298:	f002 fcf0 	bl	8006c7c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800429c:	2300      	movs	r3, #0
 800429e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042a0:	e046      	b.n	8004330 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80042a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ae:	461a      	mov	r2, r3
 80042b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042b4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80042b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042c6:	0151      	lsls	r1, r2, #5
 80042c8:	69fa      	ldr	r2, [r7, #28]
 80042ca:	440a      	add	r2, r1
 80042cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80042d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e2:	461a      	mov	r2, r3
 80042e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042e8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80042ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042fa:	0151      	lsls	r1, r2, #5
 80042fc:	69fa      	ldr	r2, [r7, #28]
 80042fe:	440a      	add	r2, r1
 8004300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004304:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004308:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800430a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800431a:	0151      	lsls	r1, r2, #5
 800431c:	69fa      	ldr	r2, [r7, #28]
 800431e:	440a      	add	r2, r1
 8004320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004324:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004328:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800432a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432c:	3301      	adds	r3, #1
 800432e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004336:	429a      	cmp	r2, r3
 8004338:	d3b3      	bcc.n	80042a2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	69fa      	ldr	r2, [r7, #28]
 8004344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004348:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800434c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	2b00      	cmp	r3, #0
 8004354:	d016      	beq.n	8004384 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004360:	69fa      	ldr	r2, [r7, #28]
 8004362:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004366:	f043 030b 	orr.w	r3, r3, #11
 800436a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004376:	69fa      	ldr	r2, [r7, #28]
 8004378:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800437c:	f043 030b 	orr.w	r3, r3, #11
 8004380:	6453      	str	r3, [r2, #68]	; 0x44
 8004382:	e015      	b.n	80043b0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	69fa      	ldr	r2, [r7, #28]
 800438e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004392:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004396:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800439a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	69fa      	ldr	r2, [r7, #28]
 80043a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043aa:	f043 030b 	orr.w	r3, r3, #11
 80043ae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	69fa      	ldr	r2, [r7, #28]
 80043ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80043c2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6818      	ldr	r0, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80043d4:	461a      	mov	r2, r3
 80043d6:	f003 fd37 	bl	8007e48 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695a      	ldr	r2, [r3, #20]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80043e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f003 fc66 	bl	8007cc0 <USB_ReadInterrupts>
 80043f4:	4603      	mov	r3, r0
 80043f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043fe:	d124      	bne.n	800444a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4618      	mov	r0, r3
 8004406:	f003 fcfc 	bl	8007e02 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f002 fcb1 	bl	8006d76 <USB_GetDevSpeed>
 8004414:	4603      	mov	r3, r0
 8004416:	461a      	mov	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681c      	ldr	r4, [r3, #0]
 8004420:	f001 fa10 	bl	8005844 <HAL_RCC_GetHCLKFreq>
 8004424:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800442a:	b2db      	uxtb	r3, r3
 800442c:	461a      	mov	r2, r3
 800442e:	4620      	mov	r0, r4
 8004430:	f002 f9b0 	bl	8006794 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f005 fe86 	bl	800a146 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695a      	ldr	r2, [r3, #20]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004448:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f003 fc36 	bl	8007cc0 <USB_ReadInterrupts>
 8004454:	4603      	mov	r3, r0
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b08      	cmp	r3, #8
 800445c:	d10a      	bne.n	8004474 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f005 fe63 	bl	800a12a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695a      	ldr	r2, [r3, #20]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f002 0208 	and.w	r2, r2, #8
 8004472:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4618      	mov	r0, r3
 800447a:	f003 fc21 	bl	8007cc0 <USB_ReadInterrupts>
 800447e:	4603      	mov	r3, r0
 8004480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004484:	2b80      	cmp	r3, #128	; 0x80
 8004486:	d122      	bne.n	80044ce <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004494:	2301      	movs	r3, #1
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
 8004498:	e014      	b.n	80044c4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449e:	4613      	mov	r3, r2
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	4413      	add	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	440b      	add	r3, r1
 80044a8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d105      	bne.n	80044be <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	4619      	mov	r1, r3
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 fb0f 	bl	8004adc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	3301      	adds	r3, #1
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d3e5      	bcc.n	800449a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f003 fbf4 	bl	8007cc0 <USB_ReadInterrupts>
 80044d8:	4603      	mov	r3, r0
 80044da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044e2:	d13b      	bne.n	800455c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044e4:	2301      	movs	r3, #1
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
 80044e8:	e02b      	b.n	8004542 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fe:	4613      	mov	r3, r2
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	4413      	add	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	440b      	add	r3, r1
 8004508:	3340      	adds	r3, #64	; 0x40
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d115      	bne.n	800453c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004510:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004512:	2b00      	cmp	r3, #0
 8004514:	da12      	bge.n	800453c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451a:	4613      	mov	r3, r2
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	333f      	adds	r3, #63	; 0x3f
 8004526:	2201      	movs	r2, #1
 8004528:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	b2db      	uxtb	r3, r3
 800452e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004532:	b2db      	uxtb	r3, r3
 8004534:	4619      	mov	r1, r3
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fad0 	bl	8004adc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800453c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453e:	3301      	adds	r3, #1
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004548:	429a      	cmp	r2, r3
 800454a:	d3ce      	bcc.n	80044ea <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695a      	ldr	r2, [r3, #20]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800455a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f003 fbad 	bl	8007cc0 <USB_ReadInterrupts>
 8004566:	4603      	mov	r3, r0
 8004568:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800456c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004570:	d155      	bne.n	800461e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004572:	2301      	movs	r3, #1
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
 8004576:	e045      	b.n	8004604 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	4413      	add	r3, r2
 8004580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458c:	4613      	mov	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	440b      	add	r3, r1
 8004596:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d12e      	bne.n	80045fe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80045a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	da2b      	bge.n	80045fe <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80045b2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d121      	bne.n	80045fe <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045be:	4613      	mov	r3, r2
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	4413      	add	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80045cc:	2201      	movs	r2, #1
 80045ce:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80045dc:	6a3b      	ldr	r3, [r7, #32]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10a      	bne.n	80045fe <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	69fa      	ldr	r2, [r7, #28]
 80045f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045fa:	6053      	str	r3, [r2, #4]
            break;
 80045fc:	e007      	b.n	800460e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	3301      	adds	r3, #1
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460a:	429a      	cmp	r2, r3
 800460c:	d3b4      	bcc.n	8004578 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695a      	ldr	r2, [r3, #20]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800461c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f003 fb4c 	bl	8007cc0 <USB_ReadInterrupts>
 8004628:	4603      	mov	r3, r0
 800462a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800462e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004632:	d10a      	bne.n	800464a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f005 fe07 	bl	800a248 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695a      	ldr	r2, [r3, #20]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004648:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f003 fb36 	bl	8007cc0 <USB_ReadInterrupts>
 8004654:	4603      	mov	r3, r0
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	2b04      	cmp	r3, #4
 800465c:	d115      	bne.n	800468a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f005 fdf7 	bl	800a264 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6859      	ldr	r1, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	430a      	orrs	r2, r1
 8004684:	605a      	str	r2, [r3, #4]
 8004686:	e000      	b.n	800468a <HAL_PCD_IRQHandler+0x938>
      return;
 8004688:	bf00      	nop
    }
  }
}
 800468a:	3734      	adds	r7, #52	; 0x34
 800468c:	46bd      	mov	sp, r7
 800468e:	bd90      	pop	{r4, r7, pc}

08004690 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <HAL_PCD_SetAddress+0x1a>
 80046a6:	2302      	movs	r3, #2
 80046a8:	e013      	b.n	80046d2 <HAL_PCD_SetAddress+0x42>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	78fa      	ldrb	r2, [r7, #3]
 80046b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	78fa      	ldrb	r2, [r7, #3]
 80046c0:	4611      	mov	r1, r2
 80046c2:	4618      	mov	r0, r3
 80046c4:	f003 fa94 	bl	8007bf0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b084      	sub	sp, #16
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	4608      	mov	r0, r1
 80046e4:	4611      	mov	r1, r2
 80046e6:	461a      	mov	r2, r3
 80046e8:	4603      	mov	r3, r0
 80046ea:	70fb      	strb	r3, [r7, #3]
 80046ec:	460b      	mov	r3, r1
 80046ee:	803b      	strh	r3, [r7, #0]
 80046f0:	4613      	mov	r3, r2
 80046f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	da0f      	bge.n	8004720 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	f003 020f 	and.w	r2, r3, #15
 8004706:	4613      	mov	r3, r2
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	4413      	add	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	3338      	adds	r3, #56	; 0x38
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	4413      	add	r3, r2
 8004714:	3304      	adds	r3, #4
 8004716:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2201      	movs	r2, #1
 800471c:	705a      	strb	r2, [r3, #1]
 800471e:	e00f      	b.n	8004740 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004720:	78fb      	ldrb	r3, [r7, #3]
 8004722:	f003 020f 	and.w	r2, r3, #15
 8004726:	4613      	mov	r3, r2
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	4413      	add	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	4413      	add	r3, r2
 8004736:	3304      	adds	r3, #4
 8004738:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004740:	78fb      	ldrb	r3, [r7, #3]
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	b2da      	uxtb	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800474c:	883a      	ldrh	r2, [r7, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	78ba      	ldrb	r2, [r7, #2]
 8004756:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	785b      	ldrb	r3, [r3, #1]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d004      	beq.n	800476a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	b29a      	uxth	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800476a:	78bb      	ldrb	r3, [r7, #2]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d102      	bne.n	8004776 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_PCD_EP_Open+0xaa>
 8004780:	2302      	movs	r3, #2
 8004782:	e00e      	b.n	80047a2 <HAL_PCD_EP_Open+0xc8>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68f9      	ldr	r1, [r7, #12]
 8004792:	4618      	mov	r0, r3
 8004794:	f002 fb14 	bl	8006dc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80047a0:	7afb      	ldrb	r3, [r7, #11]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b084      	sub	sp, #16
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
 80047b2:	460b      	mov	r3, r1
 80047b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	da0f      	bge.n	80047de <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047be:	78fb      	ldrb	r3, [r7, #3]
 80047c0:	f003 020f 	and.w	r2, r3, #15
 80047c4:	4613      	mov	r3, r2
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	4413      	add	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	3338      	adds	r3, #56	; 0x38
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	4413      	add	r3, r2
 80047d2:	3304      	adds	r3, #4
 80047d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2201      	movs	r2, #1
 80047da:	705a      	strb	r2, [r3, #1]
 80047dc:	e00f      	b.n	80047fe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047de:	78fb      	ldrb	r3, [r7, #3]
 80047e0:	f003 020f 	and.w	r2, r3, #15
 80047e4:	4613      	mov	r3, r2
 80047e6:	00db      	lsls	r3, r3, #3
 80047e8:	4413      	add	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	4413      	add	r3, r2
 80047f4:	3304      	adds	r3, #4
 80047f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80047fe:	78fb      	ldrb	r3, [r7, #3]
 8004800:	f003 030f 	and.w	r3, r3, #15
 8004804:	b2da      	uxtb	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004810:	2b01      	cmp	r3, #1
 8004812:	d101      	bne.n	8004818 <HAL_PCD_EP_Close+0x6e>
 8004814:	2302      	movs	r3, #2
 8004816:	e00e      	b.n	8004836 <HAL_PCD_EP_Close+0x8c>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68f9      	ldr	r1, [r7, #12]
 8004826:	4618      	mov	r0, r3
 8004828:	f002 fb52 	bl	8006ed0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b086      	sub	sp, #24
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
 800484a:	460b      	mov	r3, r1
 800484c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800484e:	7afb      	ldrb	r3, [r7, #11]
 8004850:	f003 020f 	and.w	r2, r3, #15
 8004854:	4613      	mov	r3, r2
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	4413      	add	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	4413      	add	r3, r2
 8004864:	3304      	adds	r3, #4
 8004866:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2200      	movs	r2, #0
 8004878:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2200      	movs	r2, #0
 800487e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004880:	7afb      	ldrb	r3, [r7, #11]
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	b2da      	uxtb	r2, r3
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d102      	bne.n	800489a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800489a:	7afb      	ldrb	r3, [r7, #11]
 800489c:	f003 030f 	and.w	r3, r3, #15
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d109      	bne.n	80048b8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6818      	ldr	r0, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	461a      	mov	r2, r3
 80048b0:	6979      	ldr	r1, [r7, #20]
 80048b2:	f002 fe31 	bl	8007518 <USB_EP0StartXfer>
 80048b6:	e008      	b.n	80048ca <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6818      	ldr	r0, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	461a      	mov	r2, r3
 80048c4:	6979      	ldr	r1, [r7, #20]
 80048c6:	f002 fbdf 	bl	8007088 <USB_EPStartXfer>
  }

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	607a      	str	r2, [r7, #4]
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	460b      	mov	r3, r1
 80048e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048e4:	7afb      	ldrb	r3, [r7, #11]
 80048e6:	f003 020f 	and.w	r2, r3, #15
 80048ea:	4613      	mov	r3, r2
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	4413      	add	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	3338      	adds	r3, #56	; 0x38
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	4413      	add	r3, r2
 80048f8:	3304      	adds	r3, #4
 80048fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2200      	movs	r2, #0
 800490c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	2201      	movs	r2, #1
 8004912:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004914:	7afb      	ldrb	r3, [r7, #11]
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	b2da      	uxtb	r2, r3
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d102      	bne.n	800492e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800492e:	7afb      	ldrb	r3, [r7, #11]
 8004930:	f003 030f 	and.w	r3, r3, #15
 8004934:	2b00      	cmp	r3, #0
 8004936:	d109      	bne.n	800494c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6818      	ldr	r0, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	b2db      	uxtb	r3, r3
 8004942:	461a      	mov	r2, r3
 8004944:	6979      	ldr	r1, [r7, #20]
 8004946:	f002 fde7 	bl	8007518 <USB_EP0StartXfer>
 800494a:	e008      	b.n	800495e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6818      	ldr	r0, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	b2db      	uxtb	r3, r3
 8004956:	461a      	mov	r2, r3
 8004958:	6979      	ldr	r1, [r7, #20]
 800495a:	f002 fb95 	bl	8007088 <USB_EPStartXfer>
  }

  return HAL_OK;
 800495e:	2300      	movs	r3, #0
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	460b      	mov	r3, r1
 8004972:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004974:	78fb      	ldrb	r3, [r7, #3]
 8004976:	f003 020f 	and.w	r2, r3, #15
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	429a      	cmp	r2, r3
 8004980:	d901      	bls.n	8004986 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e050      	b.n	8004a28 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004986:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800498a:	2b00      	cmp	r3, #0
 800498c:	da0f      	bge.n	80049ae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800498e:	78fb      	ldrb	r3, [r7, #3]
 8004990:	f003 020f 	and.w	r2, r3, #15
 8004994:	4613      	mov	r3, r2
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	4413      	add	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	3338      	adds	r3, #56	; 0x38
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	4413      	add	r3, r2
 80049a2:	3304      	adds	r3, #4
 80049a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2201      	movs	r2, #1
 80049aa:	705a      	strb	r2, [r3, #1]
 80049ac:	e00d      	b.n	80049ca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049ae:	78fa      	ldrb	r2, [r7, #3]
 80049b0:	4613      	mov	r3, r2
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	4413      	add	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	4413      	add	r3, r2
 80049c0:	3304      	adds	r3, #4
 80049c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2201      	movs	r2, #1
 80049ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049d0:	78fb      	ldrb	r3, [r7, #3]
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d101      	bne.n	80049ea <HAL_PCD_EP_SetStall+0x82>
 80049e6:	2302      	movs	r3, #2
 80049e8:	e01e      	b.n	8004a28 <HAL_PCD_EP_SetStall+0xc0>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68f9      	ldr	r1, [r7, #12]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f003 f825 	bl	8007a48 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80049fe:	78fb      	ldrb	r3, [r7, #3]
 8004a00:	f003 030f 	and.w	r3, r3, #15
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10a      	bne.n	8004a1e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6818      	ldr	r0, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	b2d9      	uxtb	r1, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a18:	461a      	mov	r2, r3
 8004a1a:	f003 fa15 	bl	8007e48 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a3c:	78fb      	ldrb	r3, [r7, #3]
 8004a3e:	f003 020f 	and.w	r2, r3, #15
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d901      	bls.n	8004a4e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e042      	b.n	8004ad4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	da0f      	bge.n	8004a76 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a56:	78fb      	ldrb	r3, [r7, #3]
 8004a58:	f003 020f 	and.w	r2, r3, #15
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	4413      	add	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	3338      	adds	r3, #56	; 0x38
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	4413      	add	r3, r2
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2201      	movs	r2, #1
 8004a72:	705a      	strb	r2, [r3, #1]
 8004a74:	e00f      	b.n	8004a96 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a76:	78fb      	ldrb	r3, [r7, #3]
 8004a78:	f003 020f 	and.w	r2, r3, #15
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	4413      	add	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_PCD_EP_ClrStall+0x86>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e00e      	b.n	8004ad4 <HAL_PCD_EP_ClrStall+0xa4>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68f9      	ldr	r1, [r7, #12]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f003 f82d 	bl	8007b24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004ae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	da0c      	bge.n	8004b0a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	f003 020f 	and.w	r2, r3, #15
 8004af6:	4613      	mov	r3, r2
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	4413      	add	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	3338      	adds	r3, #56	; 0x38
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	4413      	add	r3, r2
 8004b04:	3304      	adds	r3, #4
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	e00c      	b.n	8004b24 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b0a:	78fb      	ldrb	r3, [r7, #3]
 8004b0c:	f003 020f 	and.w	r2, r3, #15
 8004b10:	4613      	mov	r3, r2
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	4413      	add	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	4413      	add	r3, r2
 8004b20:	3304      	adds	r3, #4
 8004b22:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68f9      	ldr	r1, [r7, #12]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f002 fe4c 	bl	80077c8 <USB_EPStopXfer>
 8004b30:	4603      	mov	r3, r0
 8004b32:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004b34:	7afb      	ldrb	r3, [r7, #11]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b08a      	sub	sp, #40	; 0x28
 8004b42:	af02      	add	r7, sp, #8
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	4613      	mov	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	4413      	add	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	3338      	adds	r3, #56	; 0x38
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	4413      	add	r3, r2
 8004b62:	3304      	adds	r3, #4
 8004b64:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a1a      	ldr	r2, [r3, #32]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d901      	bls.n	8004b76 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e06c      	b.n	8004c50 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	69fa      	ldr	r2, [r7, #28]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d902      	bls.n	8004b92 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	3303      	adds	r3, #3
 8004b96:	089b      	lsrs	r3, r3, #2
 8004b98:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b9a:	e02b      	b.n	8004bf4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	699a      	ldr	r2, [r3, #24]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	69fa      	ldr	r2, [r7, #28]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d902      	bls.n	8004bb8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	3303      	adds	r3, #3
 8004bbc:	089b      	lsrs	r3, r3, #2
 8004bbe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6919      	ldr	r1, [r3, #16]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	6978      	ldr	r0, [r7, #20]
 8004bd8:	f002 fea0 	bl	800791c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	691a      	ldr	r2, [r3, #16]
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	441a      	add	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a1a      	ldr	r2, [r3, #32]
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	441a      	add	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d809      	bhi.n	8004c1e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6a1a      	ldr	r2, [r3, #32]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d203      	bcs.n	8004c1e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1be      	bne.n	8004b9c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	699a      	ldr	r2, [r3, #24]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d811      	bhi.n	8004c4e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	f003 030f 	and.w	r3, r3, #15
 8004c30:	2201      	movs	r2, #1
 8004c32:	fa02 f303 	lsl.w	r3, r2, r3
 8004c36:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	43db      	mvns	r3, r3
 8004c44:	6939      	ldr	r1, [r7, #16]
 8004c46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3720      	adds	r7, #32
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	333c      	adds	r3, #60	; 0x3c
 8004c70:	3304      	adds	r3, #4
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d17b      	bne.n	8004d86 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f003 0308 	and.w	r3, r3, #8
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d015      	beq.n	8004cc4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	4a61      	ldr	r2, [pc, #388]	; (8004e20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	f240 80b9 	bls.w	8004e14 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 80b3 	beq.w	8004e14 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cc0:	6093      	str	r3, [r2, #8]
 8004cc2:	e0a7      	b.n	8004e14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	f003 0320 	and.w	r3, r3, #32
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d009      	beq.n	8004ce2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	015a      	lsls	r2, r3, #5
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cda:	461a      	mov	r2, r3
 8004cdc:	2320      	movs	r3, #32
 8004cde:	6093      	str	r3, [r2, #8]
 8004ce0:	e098      	b.n	8004e14 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f040 8093 	bne.w	8004e14 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	4a4b      	ldr	r2, [pc, #300]	; (8004e20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d90f      	bls.n	8004d16 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00a      	beq.n	8004d16 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d12:	6093      	str	r3, [r2, #8]
 8004d14:	e07e      	b.n	8004e14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	4413      	add	r3, r2
 8004d28:	3304      	adds	r3, #4
 8004d2a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	69da      	ldr	r2, [r3, #28]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	0159      	lsls	r1, r3, #5
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	440b      	add	r3, r1
 8004d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d42:	1ad2      	subs	r2, r2, r3
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d114      	bne.n	8004d78 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d60:	461a      	mov	r2, r3
 8004d62:	2101      	movs	r1, #1
 8004d64:	f003 f870 	bl	8007e48 <USB_EP0_OutStart>
 8004d68:	e006      	b.n	8004d78 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	691a      	ldr	r2, [r3, #16]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	441a      	add	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f005 f99e 	bl	800a0c0 <HAL_PCD_DataOutStageCallback>
 8004d84:	e046      	b.n	8004e14 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	4a26      	ldr	r2, [pc, #152]	; (8004e24 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d124      	bne.n	8004dd8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00a      	beq.n	8004dae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da4:	461a      	mov	r2, r3
 8004da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004daa:	6093      	str	r3, [r2, #8]
 8004dac:	e032      	b.n	8004e14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f003 0320 	and.w	r3, r3, #32
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d008      	beq.n	8004dca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	2320      	movs	r3, #32
 8004dc8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	4619      	mov	r1, r3
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f005 f975 	bl	800a0c0 <HAL_PCD_DataOutStageCallback>
 8004dd6:	e01d      	b.n	8004e14 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d114      	bne.n	8004e08 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004dde:	6879      	ldr	r1, [r7, #4]
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	4613      	mov	r3, r2
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	4413      	add	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	440b      	add	r3, r1
 8004dec:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d108      	bne.n	8004e08 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e00:	461a      	mov	r2, r3
 8004e02:	2100      	movs	r1, #0
 8004e04:	f003 f820 	bl	8007e48 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f005 f956 	bl	800a0c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3720      	adds	r7, #32
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	4f54300a 	.word	0x4f54300a
 8004e24:	4f54310a 	.word	0x4f54310a

08004e28 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	333c      	adds	r3, #60	; 0x3c
 8004e40:	3304      	adds	r3, #4
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	4a15      	ldr	r2, [pc, #84]	; (8004eb0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d90e      	bls.n	8004e7c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d009      	beq.n	8004e7c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e74:	461a      	mov	r2, r3
 8004e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e7a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f005 f90d 	bl	800a09c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4a0a      	ldr	r2, [pc, #40]	; (8004eb0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d90c      	bls.n	8004ea4 <PCD_EP_OutSetupPacket_int+0x7c>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d108      	bne.n	8004ea4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6818      	ldr	r0, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	2101      	movs	r1, #1
 8004ea0:	f002 ffd2 	bl	8007e48 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	4f54300a 	.word	0x4f54300a

08004eb4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	70fb      	strb	r3, [r7, #3]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ecc:	78fb      	ldrb	r3, [r7, #3]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d107      	bne.n	8004ee2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004ed2:	883b      	ldrh	r3, [r7, #0]
 8004ed4:	0419      	lsls	r1, r3, #16
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	629a      	str	r2, [r3, #40]	; 0x28
 8004ee0:	e028      	b.n	8004f34 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	0c1b      	lsrs	r3, r3, #16
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	4413      	add	r3, r2
 8004eee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	73fb      	strb	r3, [r7, #15]
 8004ef4:	e00d      	b.n	8004f12 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
 8004efc:	3340      	adds	r3, #64	; 0x40
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	0c1b      	lsrs	r3, r3, #16
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	4413      	add	r3, r2
 8004f0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	73fb      	strb	r3, [r7, #15]
 8004f12:	7bfa      	ldrb	r2, [r7, #15]
 8004f14:	78fb      	ldrb	r3, [r7, #3]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d3ec      	bcc.n	8004ef6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004f1c:	883b      	ldrh	r3, [r7, #0]
 8004f1e:	0418      	lsls	r0, r3, #16
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6819      	ldr	r1, [r3, #0]
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	4302      	orrs	r2, r0
 8004f2c:	3340      	adds	r3, #64	; 0x40
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	887a      	ldrh	r2, [r7, #2]
 8004f54:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e267      	b.n	800545e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d075      	beq.n	8005086 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f9a:	4b88      	ldr	r3, [pc, #544]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 030c 	and.w	r3, r3, #12
 8004fa2:	2b04      	cmp	r3, #4
 8004fa4:	d00c      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fa6:	4b85      	ldr	r3, [pc, #532]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fae:	2b08      	cmp	r3, #8
 8004fb0:	d112      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fb2:	4b82      	ldr	r3, [pc, #520]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fbe:	d10b      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fc0:	4b7e      	ldr	r3, [pc, #504]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d05b      	beq.n	8005084 <HAL_RCC_OscConfig+0x108>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d157      	bne.n	8005084 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e242      	b.n	800545e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe0:	d106      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x74>
 8004fe2:	4b76      	ldr	r3, [pc, #472]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a75      	ldr	r2, [pc, #468]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 8004fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	e01d      	b.n	800502c <HAL_RCC_OscConfig+0xb0>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ff8:	d10c      	bne.n	8005014 <HAL_RCC_OscConfig+0x98>
 8004ffa:	4b70      	ldr	r3, [pc, #448]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a6f      	ldr	r2, [pc, #444]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 8005000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	4b6d      	ldr	r3, [pc, #436]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a6c      	ldr	r2, [pc, #432]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 800500c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	e00b      	b.n	800502c <HAL_RCC_OscConfig+0xb0>
 8005014:	4b69      	ldr	r3, [pc, #420]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a68      	ldr	r2, [pc, #416]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 800501a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800501e:	6013      	str	r3, [r2, #0]
 8005020:	4b66      	ldr	r3, [pc, #408]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a65      	ldr	r2, [pc, #404]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 8005026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800502a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d013      	beq.n	800505c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005034:	f7fd fa86 	bl	8002544 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800503c:	f7fd fa82 	bl	8002544 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b64      	cmp	r3, #100	; 0x64
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e207      	b.n	800545e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504e:	4b5b      	ldr	r3, [pc, #364]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f0      	beq.n	800503c <HAL_RCC_OscConfig+0xc0>
 800505a:	e014      	b.n	8005086 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505c:	f7fd fa72 	bl	8002544 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005064:	f7fd fa6e 	bl	8002544 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b64      	cmp	r3, #100	; 0x64
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e1f3      	b.n	800545e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005076:	4b51      	ldr	r3, [pc, #324]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f0      	bne.n	8005064 <HAL_RCC_OscConfig+0xe8>
 8005082:	e000      	b.n	8005086 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d063      	beq.n	800515a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005092:	4b4a      	ldr	r3, [pc, #296]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 030c 	and.w	r3, r3, #12
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00b      	beq.n	80050b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800509e:	4b47      	ldr	r3, [pc, #284]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050a6:	2b08      	cmp	r3, #8
 80050a8:	d11c      	bne.n	80050e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050aa:	4b44      	ldr	r3, [pc, #272]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d116      	bne.n	80050e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050b6:	4b41      	ldr	r3, [pc, #260]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d005      	beq.n	80050ce <HAL_RCC_OscConfig+0x152>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d001      	beq.n	80050ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e1c7      	b.n	800545e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ce:	4b3b      	ldr	r3, [pc, #236]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	4937      	ldr	r1, [pc, #220]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050e2:	e03a      	b.n	800515a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d020      	beq.n	800512e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050ec:	4b34      	ldr	r3, [pc, #208]	; (80051c0 <HAL_RCC_OscConfig+0x244>)
 80050ee:	2201      	movs	r2, #1
 80050f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050f2:	f7fd fa27 	bl	8002544 <HAL_GetTick>
 80050f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f8:	e008      	b.n	800510c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050fa:	f7fd fa23 	bl	8002544 <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b02      	cmp	r3, #2
 8005106:	d901      	bls.n	800510c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e1a8      	b.n	800545e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800510c:	4b2b      	ldr	r3, [pc, #172]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0f0      	beq.n	80050fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005118:	4b28      	ldr	r3, [pc, #160]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	4925      	ldr	r1, [pc, #148]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 8005128:	4313      	orrs	r3, r2
 800512a:	600b      	str	r3, [r1, #0]
 800512c:	e015      	b.n	800515a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800512e:	4b24      	ldr	r3, [pc, #144]	; (80051c0 <HAL_RCC_OscConfig+0x244>)
 8005130:	2200      	movs	r2, #0
 8005132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005134:	f7fd fa06 	bl	8002544 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800513c:	f7fd fa02 	bl	8002544 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e187      	b.n	800545e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800514e:	4b1b      	ldr	r3, [pc, #108]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f0      	bne.n	800513c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d036      	beq.n	80051d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d016      	beq.n	800519c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800516e:	4b15      	ldr	r3, [pc, #84]	; (80051c4 <HAL_RCC_OscConfig+0x248>)
 8005170:	2201      	movs	r2, #1
 8005172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005174:	f7fd f9e6 	bl	8002544 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800517c:	f7fd f9e2 	bl	8002544 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e167      	b.n	800545e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800518e:	4b0b      	ldr	r3, [pc, #44]	; (80051bc <HAL_RCC_OscConfig+0x240>)
 8005190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0f0      	beq.n	800517c <HAL_RCC_OscConfig+0x200>
 800519a:	e01b      	b.n	80051d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800519c:	4b09      	ldr	r3, [pc, #36]	; (80051c4 <HAL_RCC_OscConfig+0x248>)
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051a2:	f7fd f9cf 	bl	8002544 <HAL_GetTick>
 80051a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051a8:	e00e      	b.n	80051c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051aa:	f7fd f9cb 	bl	8002544 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d907      	bls.n	80051c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e150      	b.n	800545e <HAL_RCC_OscConfig+0x4e2>
 80051bc:	40023800 	.word	0x40023800
 80051c0:	42470000 	.word	0x42470000
 80051c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051c8:	4b88      	ldr	r3, [pc, #544]	; (80053ec <HAL_RCC_OscConfig+0x470>)
 80051ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1ea      	bne.n	80051aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 8097 	beq.w	8005310 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051e2:	2300      	movs	r3, #0
 80051e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051e6:	4b81      	ldr	r3, [pc, #516]	; (80053ec <HAL_RCC_OscConfig+0x470>)
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10f      	bne.n	8005212 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051f2:	2300      	movs	r3, #0
 80051f4:	60bb      	str	r3, [r7, #8]
 80051f6:	4b7d      	ldr	r3, [pc, #500]	; (80053ec <HAL_RCC_OscConfig+0x470>)
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	4a7c      	ldr	r2, [pc, #496]	; (80053ec <HAL_RCC_OscConfig+0x470>)
 80051fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005200:	6413      	str	r3, [r2, #64]	; 0x40
 8005202:	4b7a      	ldr	r3, [pc, #488]	; (80053ec <HAL_RCC_OscConfig+0x470>)
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800520a:	60bb      	str	r3, [r7, #8]
 800520c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800520e:	2301      	movs	r3, #1
 8005210:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005212:	4b77      	ldr	r3, [pc, #476]	; (80053f0 <HAL_RCC_OscConfig+0x474>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521a:	2b00      	cmp	r3, #0
 800521c:	d118      	bne.n	8005250 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800521e:	4b74      	ldr	r3, [pc, #464]	; (80053f0 <HAL_RCC_OscConfig+0x474>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a73      	ldr	r2, [pc, #460]	; (80053f0 <HAL_RCC_OscConfig+0x474>)
 8005224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800522a:	f7fd f98b 	bl	8002544 <HAL_GetTick>
 800522e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005230:	e008      	b.n	8005244 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005232:	f7fd f987 	bl	8002544 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d901      	bls.n	8005244 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e10c      	b.n	800545e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005244:	4b6a      	ldr	r3, [pc, #424]	; (80053f0 <HAL_RCC_OscConfig+0x474>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0f0      	beq.n	8005232 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d106      	bne.n	8005266 <HAL_RCC_OscConfig+0x2ea>
 8005258:	4b64      	ldr	r3, [pc, #400]	; (80053ec <HAL_RCC_OscConfig+0x470>)
 800525a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525c:	4a63      	ldr	r2, [pc, #396]	; (80053ec <HAL_RCC_OscConfig+0x470>)
 800525e:	f043 0301 	orr.w	r3, r3, #1
 8005262:	6713      	str	r3, [r2, #112]	; 0x70
 8005264:	e01c      	b.n	80052a0 <HAL_RCC_OscConfig+0x324>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	2b05      	cmp	r3, #5
 800526c:	d10c      	bne.n	8005288 <HAL_RCC_OscConfig+0x30c>
 800526e:	4b5f      	ldr	r3, [pc, #380]	; (80053ec <HAL_RCC_OscConfig+0x470>)
 8005270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005272:	4a5e      	ldr	r2, [pc, #376]	; (80053ec <HAL_RCC_OscConfig+0x470>)
 8005274:	f043 0304 	orr.w	r3, r3, #4
 8005278:	6713      	str	r3, [r2, #112]	; 0x70
 800527a:	4b5c      	ldr	r3, [pc, #368]	; (80053ec <HAL_RCC_OscConfig+0x470>)
 800527c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527e:	4a5b      	ldr	r2, [pc, #364]	; (80053ec <HAL_RCC_OscConfig+0x470>)
 8005280:	f043 0301 	orr.w	r3, r3, #1
 8005284:	6713      	str	r3, [r2, #112]	; 0x70
 8005286:	e00b      	b.n	80052a0 <HAL_RCC_OscConfig+0x324>
 8005288:	4b58      	ldr	r3, [pc, #352]	; (80053ec <HAL_RCC_OscConfig+0x470>)
 800528a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528c:	4a57      	ldr	r2, [pc, #348]	; (80053ec <HAL_RCC_OscConfig+0x470>)
 800528e:	f023 0301 	bic.w	r3, r3, #1
 8005292:	6713      	str	r3, [r2, #112]	; 0x70
 8005294:	4b55      	ldr	r3, [pc, #340]	; (80053ec <HAL_RCC_OscConfig+0x470>)
 8005296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005298:	4a54      	ldr	r2, [pc, #336]	; (80053ec <HAL_RCC_OscConfig+0x470>)
 800529a:	f023 0304 	bic.w	r3, r3, #4
 800529e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d015      	beq.n	80052d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a8:	f7fd f94c 	bl	8002544 <HAL_GetTick>
 80052ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ae:	e00a      	b.n	80052c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052b0:	f7fd f948 	bl	8002544 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80052be:	4293      	cmp	r3, r2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e0cb      	b.n	800545e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c6:	4b49      	ldr	r3, [pc, #292]	; (80053ec <HAL_RCC_OscConfig+0x470>)
 80052c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0ee      	beq.n	80052b0 <HAL_RCC_OscConfig+0x334>
 80052d2:	e014      	b.n	80052fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052d4:	f7fd f936 	bl	8002544 <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052da:	e00a      	b.n	80052f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052dc:	f7fd f932 	bl	8002544 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e0b5      	b.n	800545e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052f2:	4b3e      	ldr	r3, [pc, #248]	; (80053ec <HAL_RCC_OscConfig+0x470>)
 80052f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1ee      	bne.n	80052dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052fe:	7dfb      	ldrb	r3, [r7, #23]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d105      	bne.n	8005310 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005304:	4b39      	ldr	r3, [pc, #228]	; (80053ec <HAL_RCC_OscConfig+0x470>)
 8005306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005308:	4a38      	ldr	r2, [pc, #224]	; (80053ec <HAL_RCC_OscConfig+0x470>)
 800530a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800530e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 80a1 	beq.w	800545c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800531a:	4b34      	ldr	r3, [pc, #208]	; (80053ec <HAL_RCC_OscConfig+0x470>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 030c 	and.w	r3, r3, #12
 8005322:	2b08      	cmp	r3, #8
 8005324:	d05c      	beq.n	80053e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	2b02      	cmp	r3, #2
 800532c:	d141      	bne.n	80053b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800532e:	4b31      	ldr	r3, [pc, #196]	; (80053f4 <HAL_RCC_OscConfig+0x478>)
 8005330:	2200      	movs	r2, #0
 8005332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005334:	f7fd f906 	bl	8002544 <HAL_GetTick>
 8005338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800533a:	e008      	b.n	800534e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800533c:	f7fd f902 	bl	8002544 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b02      	cmp	r3, #2
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e087      	b.n	800545e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800534e:	4b27      	ldr	r3, [pc, #156]	; (80053ec <HAL_RCC_OscConfig+0x470>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1f0      	bne.n	800533c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	69da      	ldr	r2, [r3, #28]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	019b      	lsls	r3, r3, #6
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005370:	085b      	lsrs	r3, r3, #1
 8005372:	3b01      	subs	r3, #1
 8005374:	041b      	lsls	r3, r3, #16
 8005376:	431a      	orrs	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537c:	061b      	lsls	r3, r3, #24
 800537e:	491b      	ldr	r1, [pc, #108]	; (80053ec <HAL_RCC_OscConfig+0x470>)
 8005380:	4313      	orrs	r3, r2
 8005382:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005384:	4b1b      	ldr	r3, [pc, #108]	; (80053f4 <HAL_RCC_OscConfig+0x478>)
 8005386:	2201      	movs	r2, #1
 8005388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800538a:	f7fd f8db 	bl	8002544 <HAL_GetTick>
 800538e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005390:	e008      	b.n	80053a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005392:	f7fd f8d7 	bl	8002544 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d901      	bls.n	80053a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e05c      	b.n	800545e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053a4:	4b11      	ldr	r3, [pc, #68]	; (80053ec <HAL_RCC_OscConfig+0x470>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0f0      	beq.n	8005392 <HAL_RCC_OscConfig+0x416>
 80053b0:	e054      	b.n	800545c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053b2:	4b10      	ldr	r3, [pc, #64]	; (80053f4 <HAL_RCC_OscConfig+0x478>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b8:	f7fd f8c4 	bl	8002544 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053c0:	f7fd f8c0 	bl	8002544 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e045      	b.n	800545e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d2:	4b06      	ldr	r3, [pc, #24]	; (80053ec <HAL_RCC_OscConfig+0x470>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1f0      	bne.n	80053c0 <HAL_RCC_OscConfig+0x444>
 80053de:	e03d      	b.n	800545c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d107      	bne.n	80053f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e038      	b.n	800545e <HAL_RCC_OscConfig+0x4e2>
 80053ec:	40023800 	.word	0x40023800
 80053f0:	40007000 	.word	0x40007000
 80053f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053f8:	4b1b      	ldr	r3, [pc, #108]	; (8005468 <HAL_RCC_OscConfig+0x4ec>)
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d028      	beq.n	8005458 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005410:	429a      	cmp	r2, r3
 8005412:	d121      	bne.n	8005458 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800541e:	429a      	cmp	r2, r3
 8005420:	d11a      	bne.n	8005458 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005428:	4013      	ands	r3, r2
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800542e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005430:	4293      	cmp	r3, r2
 8005432:	d111      	bne.n	8005458 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543e:	085b      	lsrs	r3, r3, #1
 8005440:	3b01      	subs	r3, #1
 8005442:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005444:	429a      	cmp	r2, r3
 8005446:	d107      	bne.n	8005458 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005452:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005454:	429a      	cmp	r2, r3
 8005456:	d001      	beq.n	800545c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e000      	b.n	800545e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3718      	adds	r7, #24
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	40023800 	.word	0x40023800

0800546c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e0cc      	b.n	800561a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005480:	4b68      	ldr	r3, [pc, #416]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	429a      	cmp	r2, r3
 800548c:	d90c      	bls.n	80054a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800548e:	4b65      	ldr	r3, [pc, #404]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	b2d2      	uxtb	r2, r2
 8005494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005496:	4b63      	ldr	r3, [pc, #396]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0307 	and.w	r3, r3, #7
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d001      	beq.n	80054a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e0b8      	b.n	800561a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d020      	beq.n	80054f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054c0:	4b59      	ldr	r3, [pc, #356]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	4a58      	ldr	r2, [pc, #352]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 80054c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0308 	and.w	r3, r3, #8
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d005      	beq.n	80054e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054d8:	4b53      	ldr	r3, [pc, #332]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	4a52      	ldr	r2, [pc, #328]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 80054de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80054e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054e4:	4b50      	ldr	r3, [pc, #320]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	494d      	ldr	r1, [pc, #308]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d044      	beq.n	800558c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d107      	bne.n	800551a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800550a:	4b47      	ldr	r3, [pc, #284]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d119      	bne.n	800554a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e07f      	b.n	800561a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b02      	cmp	r3, #2
 8005520:	d003      	beq.n	800552a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005526:	2b03      	cmp	r3, #3
 8005528:	d107      	bne.n	800553a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800552a:	4b3f      	ldr	r3, [pc, #252]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d109      	bne.n	800554a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e06f      	b.n	800561a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800553a:	4b3b      	ldr	r3, [pc, #236]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e067      	b.n	800561a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800554a:	4b37      	ldr	r3, [pc, #220]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f023 0203 	bic.w	r2, r3, #3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	4934      	ldr	r1, [pc, #208]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 8005558:	4313      	orrs	r3, r2
 800555a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800555c:	f7fc fff2 	bl	8002544 <HAL_GetTick>
 8005560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005562:	e00a      	b.n	800557a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005564:	f7fc ffee 	bl	8002544 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005572:	4293      	cmp	r3, r2
 8005574:	d901      	bls.n	800557a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e04f      	b.n	800561a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800557a:	4b2b      	ldr	r3, [pc, #172]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 020c 	and.w	r2, r3, #12
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	429a      	cmp	r2, r3
 800558a:	d1eb      	bne.n	8005564 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800558c:	4b25      	ldr	r3, [pc, #148]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d20c      	bcs.n	80055b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800559a:	4b22      	ldr	r3, [pc, #136]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	b2d2      	uxtb	r2, r2
 80055a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055a2:	4b20      	ldr	r3, [pc, #128]	; (8005624 <HAL_RCC_ClockConfig+0x1b8>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d001      	beq.n	80055b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e032      	b.n	800561a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d008      	beq.n	80055d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055c0:	4b19      	ldr	r3, [pc, #100]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	4916      	ldr	r1, [pc, #88]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0308 	and.w	r3, r3, #8
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d009      	beq.n	80055f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055de:	4b12      	ldr	r3, [pc, #72]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	490e      	ldr	r1, [pc, #56]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055f2:	f000 f821 	bl	8005638 <HAL_RCC_GetSysClockFreq>
 80055f6:	4602      	mov	r2, r0
 80055f8:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <HAL_RCC_ClockConfig+0x1bc>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	091b      	lsrs	r3, r3, #4
 80055fe:	f003 030f 	and.w	r3, r3, #15
 8005602:	490a      	ldr	r1, [pc, #40]	; (800562c <HAL_RCC_ClockConfig+0x1c0>)
 8005604:	5ccb      	ldrb	r3, [r1, r3]
 8005606:	fa22 f303 	lsr.w	r3, r2, r3
 800560a:	4a09      	ldr	r2, [pc, #36]	; (8005630 <HAL_RCC_ClockConfig+0x1c4>)
 800560c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800560e:	4b09      	ldr	r3, [pc, #36]	; (8005634 <HAL_RCC_ClockConfig+0x1c8>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4618      	mov	r0, r3
 8005614:	f7fc ff52 	bl	80024bc <HAL_InitTick>

  return HAL_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	40023c00 	.word	0x40023c00
 8005628:	40023800 	.word	0x40023800
 800562c:	0800d7f8 	.word	0x0800d7f8
 8005630:	20000010 	.word	0x20000010
 8005634:	20000014 	.word	0x20000014

08005638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800563c:	b094      	sub	sp, #80	; 0x50
 800563e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	647b      	str	r3, [r7, #68]	; 0x44
 8005644:	2300      	movs	r3, #0
 8005646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005648:	2300      	movs	r3, #0
 800564a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005650:	4b79      	ldr	r3, [pc, #484]	; (8005838 <HAL_RCC_GetSysClockFreq+0x200>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f003 030c 	and.w	r3, r3, #12
 8005658:	2b08      	cmp	r3, #8
 800565a:	d00d      	beq.n	8005678 <HAL_RCC_GetSysClockFreq+0x40>
 800565c:	2b08      	cmp	r3, #8
 800565e:	f200 80e1 	bhi.w	8005824 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005662:	2b00      	cmp	r3, #0
 8005664:	d002      	beq.n	800566c <HAL_RCC_GetSysClockFreq+0x34>
 8005666:	2b04      	cmp	r3, #4
 8005668:	d003      	beq.n	8005672 <HAL_RCC_GetSysClockFreq+0x3a>
 800566a:	e0db      	b.n	8005824 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800566c:	4b73      	ldr	r3, [pc, #460]	; (800583c <HAL_RCC_GetSysClockFreq+0x204>)
 800566e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005670:	e0db      	b.n	800582a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005672:	4b73      	ldr	r3, [pc, #460]	; (8005840 <HAL_RCC_GetSysClockFreq+0x208>)
 8005674:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005676:	e0d8      	b.n	800582a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005678:	4b6f      	ldr	r3, [pc, #444]	; (8005838 <HAL_RCC_GetSysClockFreq+0x200>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005680:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005682:	4b6d      	ldr	r3, [pc, #436]	; (8005838 <HAL_RCC_GetSysClockFreq+0x200>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d063      	beq.n	8005756 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800568e:	4b6a      	ldr	r3, [pc, #424]	; (8005838 <HAL_RCC_GetSysClockFreq+0x200>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	099b      	lsrs	r3, r3, #6
 8005694:	2200      	movs	r2, #0
 8005696:	63bb      	str	r3, [r7, #56]	; 0x38
 8005698:	63fa      	str	r2, [r7, #60]	; 0x3c
 800569a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a0:	633b      	str	r3, [r7, #48]	; 0x30
 80056a2:	2300      	movs	r3, #0
 80056a4:	637b      	str	r3, [r7, #52]	; 0x34
 80056a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80056aa:	4622      	mov	r2, r4
 80056ac:	462b      	mov	r3, r5
 80056ae:	f04f 0000 	mov.w	r0, #0
 80056b2:	f04f 0100 	mov.w	r1, #0
 80056b6:	0159      	lsls	r1, r3, #5
 80056b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056bc:	0150      	lsls	r0, r2, #5
 80056be:	4602      	mov	r2, r0
 80056c0:	460b      	mov	r3, r1
 80056c2:	4621      	mov	r1, r4
 80056c4:	1a51      	subs	r1, r2, r1
 80056c6:	6139      	str	r1, [r7, #16]
 80056c8:	4629      	mov	r1, r5
 80056ca:	eb63 0301 	sbc.w	r3, r3, r1
 80056ce:	617b      	str	r3, [r7, #20]
 80056d0:	f04f 0200 	mov.w	r2, #0
 80056d4:	f04f 0300 	mov.w	r3, #0
 80056d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056dc:	4659      	mov	r1, fp
 80056de:	018b      	lsls	r3, r1, #6
 80056e0:	4651      	mov	r1, sl
 80056e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056e6:	4651      	mov	r1, sl
 80056e8:	018a      	lsls	r2, r1, #6
 80056ea:	4651      	mov	r1, sl
 80056ec:	ebb2 0801 	subs.w	r8, r2, r1
 80056f0:	4659      	mov	r1, fp
 80056f2:	eb63 0901 	sbc.w	r9, r3, r1
 80056f6:	f04f 0200 	mov.w	r2, #0
 80056fa:	f04f 0300 	mov.w	r3, #0
 80056fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005702:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005706:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800570a:	4690      	mov	r8, r2
 800570c:	4699      	mov	r9, r3
 800570e:	4623      	mov	r3, r4
 8005710:	eb18 0303 	adds.w	r3, r8, r3
 8005714:	60bb      	str	r3, [r7, #8]
 8005716:	462b      	mov	r3, r5
 8005718:	eb49 0303 	adc.w	r3, r9, r3
 800571c:	60fb      	str	r3, [r7, #12]
 800571e:	f04f 0200 	mov.w	r2, #0
 8005722:	f04f 0300 	mov.w	r3, #0
 8005726:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800572a:	4629      	mov	r1, r5
 800572c:	024b      	lsls	r3, r1, #9
 800572e:	4621      	mov	r1, r4
 8005730:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005734:	4621      	mov	r1, r4
 8005736:	024a      	lsls	r2, r1, #9
 8005738:	4610      	mov	r0, r2
 800573a:	4619      	mov	r1, r3
 800573c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800573e:	2200      	movs	r2, #0
 8005740:	62bb      	str	r3, [r7, #40]	; 0x28
 8005742:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005744:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005748:	f7fb fa86 	bl	8000c58 <__aeabi_uldivmod>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	4613      	mov	r3, r2
 8005752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005754:	e058      	b.n	8005808 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005756:	4b38      	ldr	r3, [pc, #224]	; (8005838 <HAL_RCC_GetSysClockFreq+0x200>)
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	099b      	lsrs	r3, r3, #6
 800575c:	2200      	movs	r2, #0
 800575e:	4618      	mov	r0, r3
 8005760:	4611      	mov	r1, r2
 8005762:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005766:	623b      	str	r3, [r7, #32]
 8005768:	2300      	movs	r3, #0
 800576a:	627b      	str	r3, [r7, #36]	; 0x24
 800576c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005770:	4642      	mov	r2, r8
 8005772:	464b      	mov	r3, r9
 8005774:	f04f 0000 	mov.w	r0, #0
 8005778:	f04f 0100 	mov.w	r1, #0
 800577c:	0159      	lsls	r1, r3, #5
 800577e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005782:	0150      	lsls	r0, r2, #5
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	4641      	mov	r1, r8
 800578a:	ebb2 0a01 	subs.w	sl, r2, r1
 800578e:	4649      	mov	r1, r9
 8005790:	eb63 0b01 	sbc.w	fp, r3, r1
 8005794:	f04f 0200 	mov.w	r2, #0
 8005798:	f04f 0300 	mov.w	r3, #0
 800579c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057a8:	ebb2 040a 	subs.w	r4, r2, sl
 80057ac:	eb63 050b 	sbc.w	r5, r3, fp
 80057b0:	f04f 0200 	mov.w	r2, #0
 80057b4:	f04f 0300 	mov.w	r3, #0
 80057b8:	00eb      	lsls	r3, r5, #3
 80057ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057be:	00e2      	lsls	r2, r4, #3
 80057c0:	4614      	mov	r4, r2
 80057c2:	461d      	mov	r5, r3
 80057c4:	4643      	mov	r3, r8
 80057c6:	18e3      	adds	r3, r4, r3
 80057c8:	603b      	str	r3, [r7, #0]
 80057ca:	464b      	mov	r3, r9
 80057cc:	eb45 0303 	adc.w	r3, r5, r3
 80057d0:	607b      	str	r3, [r7, #4]
 80057d2:	f04f 0200 	mov.w	r2, #0
 80057d6:	f04f 0300 	mov.w	r3, #0
 80057da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057de:	4629      	mov	r1, r5
 80057e0:	028b      	lsls	r3, r1, #10
 80057e2:	4621      	mov	r1, r4
 80057e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057e8:	4621      	mov	r1, r4
 80057ea:	028a      	lsls	r2, r1, #10
 80057ec:	4610      	mov	r0, r2
 80057ee:	4619      	mov	r1, r3
 80057f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057f2:	2200      	movs	r2, #0
 80057f4:	61bb      	str	r3, [r7, #24]
 80057f6:	61fa      	str	r2, [r7, #28]
 80057f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057fc:	f7fb fa2c 	bl	8000c58 <__aeabi_uldivmod>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4613      	mov	r3, r2
 8005806:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005808:	4b0b      	ldr	r3, [pc, #44]	; (8005838 <HAL_RCC_GetSysClockFreq+0x200>)
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	0c1b      	lsrs	r3, r3, #16
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	3301      	adds	r3, #1
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005818:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800581a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800581c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005820:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005822:	e002      	b.n	800582a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005824:	4b05      	ldr	r3, [pc, #20]	; (800583c <HAL_RCC_GetSysClockFreq+0x204>)
 8005826:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800582a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800582c:	4618      	mov	r0, r3
 800582e:	3750      	adds	r7, #80	; 0x50
 8005830:	46bd      	mov	sp, r7
 8005832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005836:	bf00      	nop
 8005838:	40023800 	.word	0x40023800
 800583c:	00f42400 	.word	0x00f42400
 8005840:	007a1200 	.word	0x007a1200

08005844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005844:	b480      	push	{r7}
 8005846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005848:	4b03      	ldr	r3, [pc, #12]	; (8005858 <HAL_RCC_GetHCLKFreq+0x14>)
 800584a:	681b      	ldr	r3, [r3, #0]
}
 800584c:	4618      	mov	r0, r3
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	20000010 	.word	0x20000010

0800585c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005860:	f7ff fff0 	bl	8005844 <HAL_RCC_GetHCLKFreq>
 8005864:	4602      	mov	r2, r0
 8005866:	4b05      	ldr	r3, [pc, #20]	; (800587c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	0a9b      	lsrs	r3, r3, #10
 800586c:	f003 0307 	and.w	r3, r3, #7
 8005870:	4903      	ldr	r1, [pc, #12]	; (8005880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005872:	5ccb      	ldrb	r3, [r1, r3]
 8005874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005878:	4618      	mov	r0, r3
 800587a:	bd80      	pop	{r7, pc}
 800587c:	40023800 	.word	0x40023800
 8005880:	0800d808 	.word	0x0800d808

08005884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005888:	f7ff ffdc 	bl	8005844 <HAL_RCC_GetHCLKFreq>
 800588c:	4602      	mov	r2, r0
 800588e:	4b05      	ldr	r3, [pc, #20]	; (80058a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	0b5b      	lsrs	r3, r3, #13
 8005894:	f003 0307 	and.w	r3, r3, #7
 8005898:	4903      	ldr	r1, [pc, #12]	; (80058a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800589a:	5ccb      	ldrb	r3, [r1, r3]
 800589c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	40023800 	.word	0x40023800
 80058a8:	0800d808 	.word	0x0800d808

080058ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e041      	b.n	8005942 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d106      	bne.n	80058d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7fc fbd6 	bl	8002084 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3304      	adds	r3, #4
 80058e8:	4619      	mov	r1, r3
 80058ea:	4610      	mov	r0, r2
 80058ec:	f000 fa92 	bl	8005e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3708      	adds	r7, #8
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b01      	cmp	r3, #1
 800595e:	d001      	beq.n	8005964 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e044      	b.n	80059ee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2202      	movs	r2, #2
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f042 0201 	orr.w	r2, r2, #1
 800597a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a1e      	ldr	r2, [pc, #120]	; (80059fc <HAL_TIM_Base_Start_IT+0xb0>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d018      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x6c>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800598e:	d013      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x6c>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a1a      	ldr	r2, [pc, #104]	; (8005a00 <HAL_TIM_Base_Start_IT+0xb4>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d00e      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x6c>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a19      	ldr	r2, [pc, #100]	; (8005a04 <HAL_TIM_Base_Start_IT+0xb8>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d009      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x6c>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a17      	ldr	r2, [pc, #92]	; (8005a08 <HAL_TIM_Base_Start_IT+0xbc>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d004      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0x6c>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a16      	ldr	r2, [pc, #88]	; (8005a0c <HAL_TIM_Base_Start_IT+0xc0>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d111      	bne.n	80059dc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b06      	cmp	r3, #6
 80059c8:	d010      	beq.n	80059ec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f042 0201 	orr.w	r2, r2, #1
 80059d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059da:	e007      	b.n	80059ec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0201 	orr.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3714      	adds	r7, #20
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	40010000 	.word	0x40010000
 8005a00:	40000400 	.word	0x40000400
 8005a04:	40000800 	.word	0x40000800
 8005a08:	40000c00 	.word	0x40000c00
 8005a0c:	40014000 	.word	0x40014000

08005a10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d122      	bne.n	8005a6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f003 0302 	and.w	r3, r3, #2
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d11b      	bne.n	8005a6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f06f 0202 	mvn.w	r2, #2
 8005a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f9bf 	bl	8005dd6 <HAL_TIM_IC_CaptureCallback>
 8005a58:	e005      	b.n	8005a66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f9b1 	bl	8005dc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f9c2 	bl	8005dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f003 0304 	and.w	r3, r3, #4
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	d122      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d11b      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f06f 0204 	mvn.w	r2, #4
 8005a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2202      	movs	r2, #2
 8005a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f995 	bl	8005dd6 <HAL_TIM_IC_CaptureCallback>
 8005aac:	e005      	b.n	8005aba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f987 	bl	8005dc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f998 	bl	8005dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f003 0308 	and.w	r3, r3, #8
 8005aca:	2b08      	cmp	r3, #8
 8005acc:	d122      	bne.n	8005b14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f003 0308 	and.w	r3, r3, #8
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d11b      	bne.n	8005b14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f06f 0208 	mvn.w	r2, #8
 8005ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2204      	movs	r2, #4
 8005aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	f003 0303 	and.w	r3, r3, #3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f96b 	bl	8005dd6 <HAL_TIM_IC_CaptureCallback>
 8005b00:	e005      	b.n	8005b0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f95d 	bl	8005dc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f96e 	bl	8005dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f003 0310 	and.w	r3, r3, #16
 8005b1e:	2b10      	cmp	r3, #16
 8005b20:	d122      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	f003 0310 	and.w	r3, r3, #16
 8005b2c:	2b10      	cmp	r3, #16
 8005b2e:	d11b      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f06f 0210 	mvn.w	r2, #16
 8005b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2208      	movs	r2, #8
 8005b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f941 	bl	8005dd6 <HAL_TIM_IC_CaptureCallback>
 8005b54:	e005      	b.n	8005b62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f933 	bl	8005dc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f944 	bl	8005dea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d10e      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d107      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f06f 0201 	mvn.w	r2, #1
 8005b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f90d 	bl	8005dae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9e:	2b80      	cmp	r3, #128	; 0x80
 8005ba0:	d10e      	bne.n	8005bc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bac:	2b80      	cmp	r3, #128	; 0x80
 8005bae:	d107      	bne.n	8005bc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fabc 	bl	8006138 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bca:	2b40      	cmp	r3, #64	; 0x40
 8005bcc:	d10e      	bne.n	8005bec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd8:	2b40      	cmp	r3, #64	; 0x40
 8005bda:	d107      	bne.n	8005bec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f909 	bl	8005dfe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f003 0320 	and.w	r3, r3, #32
 8005bf6:	2b20      	cmp	r3, #32
 8005bf8:	d10e      	bne.n	8005c18 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f003 0320 	and.w	r3, r3, #32
 8005c04:	2b20      	cmp	r3, #32
 8005c06:	d107      	bne.n	8005c18 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0220 	mvn.w	r2, #32
 8005c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fa86 	bl	8006124 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c18:	bf00      	nop
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d101      	bne.n	8005c3c <HAL_TIM_ConfigClockSource+0x1c>
 8005c38:	2302      	movs	r3, #2
 8005c3a:	e0b4      	b.n	8005da6 <HAL_TIM_ConfigClockSource+0x186>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c74:	d03e      	beq.n	8005cf4 <HAL_TIM_ConfigClockSource+0xd4>
 8005c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c7a:	f200 8087 	bhi.w	8005d8c <HAL_TIM_ConfigClockSource+0x16c>
 8005c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c82:	f000 8086 	beq.w	8005d92 <HAL_TIM_ConfigClockSource+0x172>
 8005c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c8a:	d87f      	bhi.n	8005d8c <HAL_TIM_ConfigClockSource+0x16c>
 8005c8c:	2b70      	cmp	r3, #112	; 0x70
 8005c8e:	d01a      	beq.n	8005cc6 <HAL_TIM_ConfigClockSource+0xa6>
 8005c90:	2b70      	cmp	r3, #112	; 0x70
 8005c92:	d87b      	bhi.n	8005d8c <HAL_TIM_ConfigClockSource+0x16c>
 8005c94:	2b60      	cmp	r3, #96	; 0x60
 8005c96:	d050      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x11a>
 8005c98:	2b60      	cmp	r3, #96	; 0x60
 8005c9a:	d877      	bhi.n	8005d8c <HAL_TIM_ConfigClockSource+0x16c>
 8005c9c:	2b50      	cmp	r3, #80	; 0x50
 8005c9e:	d03c      	beq.n	8005d1a <HAL_TIM_ConfigClockSource+0xfa>
 8005ca0:	2b50      	cmp	r3, #80	; 0x50
 8005ca2:	d873      	bhi.n	8005d8c <HAL_TIM_ConfigClockSource+0x16c>
 8005ca4:	2b40      	cmp	r3, #64	; 0x40
 8005ca6:	d058      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0x13a>
 8005ca8:	2b40      	cmp	r3, #64	; 0x40
 8005caa:	d86f      	bhi.n	8005d8c <HAL_TIM_ConfigClockSource+0x16c>
 8005cac:	2b30      	cmp	r3, #48	; 0x30
 8005cae:	d064      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0x15a>
 8005cb0:	2b30      	cmp	r3, #48	; 0x30
 8005cb2:	d86b      	bhi.n	8005d8c <HAL_TIM_ConfigClockSource+0x16c>
 8005cb4:	2b20      	cmp	r3, #32
 8005cb6:	d060      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0x15a>
 8005cb8:	2b20      	cmp	r3, #32
 8005cba:	d867      	bhi.n	8005d8c <HAL_TIM_ConfigClockSource+0x16c>
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d05c      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0x15a>
 8005cc0:	2b10      	cmp	r3, #16
 8005cc2:	d05a      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0x15a>
 8005cc4:	e062      	b.n	8005d8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6818      	ldr	r0, [r3, #0]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	6899      	ldr	r1, [r3, #8]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	f000 f997 	bl	8006008 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ce8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	609a      	str	r2, [r3, #8]
      break;
 8005cf2:	e04f      	b.n	8005d94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6818      	ldr	r0, [r3, #0]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	6899      	ldr	r1, [r3, #8]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f000 f980 	bl	8006008 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689a      	ldr	r2, [r3, #8]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d16:	609a      	str	r2, [r3, #8]
      break;
 8005d18:	e03c      	b.n	8005d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6818      	ldr	r0, [r3, #0]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	6859      	ldr	r1, [r3, #4]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	461a      	mov	r2, r3
 8005d28:	f000 f8f4 	bl	8005f14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2150      	movs	r1, #80	; 0x50
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 f94d 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 8005d38:	e02c      	b.n	8005d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6818      	ldr	r0, [r3, #0]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	6859      	ldr	r1, [r3, #4]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	461a      	mov	r2, r3
 8005d48:	f000 f913 	bl	8005f72 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2160      	movs	r1, #96	; 0x60
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 f93d 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 8005d58:	e01c      	b.n	8005d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6818      	ldr	r0, [r3, #0]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	6859      	ldr	r1, [r3, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	461a      	mov	r2, r3
 8005d68:	f000 f8d4 	bl	8005f14 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2140      	movs	r1, #64	; 0x40
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 f92d 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 8005d78:	e00c      	b.n	8005d94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4619      	mov	r1, r3
 8005d84:	4610      	mov	r0, r2
 8005d86:	f000 f924 	bl	8005fd2 <TIM_ITRx_SetConfig>
      break;
 8005d8a:	e003      	b.n	8005d94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d90:	e000      	b.n	8005d94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b083      	sub	sp, #12
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dc2:	b480      	push	{r7}
 8005dc4:	b083      	sub	sp, #12
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dca:	bf00      	nop
 8005dcc:	370c      	adds	r7, #12
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b083      	sub	sp, #12
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dde:	bf00      	nop
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b083      	sub	sp, #12
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005df2:	bf00      	nop
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e06:	bf00      	nop
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
	...

08005e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a34      	ldr	r2, [pc, #208]	; (8005ef8 <TIM_Base_SetConfig+0xe4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d00f      	beq.n	8005e4c <TIM_Base_SetConfig+0x38>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e32:	d00b      	beq.n	8005e4c <TIM_Base_SetConfig+0x38>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a31      	ldr	r2, [pc, #196]	; (8005efc <TIM_Base_SetConfig+0xe8>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d007      	beq.n	8005e4c <TIM_Base_SetConfig+0x38>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a30      	ldr	r2, [pc, #192]	; (8005f00 <TIM_Base_SetConfig+0xec>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d003      	beq.n	8005e4c <TIM_Base_SetConfig+0x38>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a2f      	ldr	r2, [pc, #188]	; (8005f04 <TIM_Base_SetConfig+0xf0>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d108      	bne.n	8005e5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a25      	ldr	r2, [pc, #148]	; (8005ef8 <TIM_Base_SetConfig+0xe4>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d01b      	beq.n	8005e9e <TIM_Base_SetConfig+0x8a>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e6c:	d017      	beq.n	8005e9e <TIM_Base_SetConfig+0x8a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a22      	ldr	r2, [pc, #136]	; (8005efc <TIM_Base_SetConfig+0xe8>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d013      	beq.n	8005e9e <TIM_Base_SetConfig+0x8a>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a21      	ldr	r2, [pc, #132]	; (8005f00 <TIM_Base_SetConfig+0xec>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d00f      	beq.n	8005e9e <TIM_Base_SetConfig+0x8a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a20      	ldr	r2, [pc, #128]	; (8005f04 <TIM_Base_SetConfig+0xf0>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d00b      	beq.n	8005e9e <TIM_Base_SetConfig+0x8a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a1f      	ldr	r2, [pc, #124]	; (8005f08 <TIM_Base_SetConfig+0xf4>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d007      	beq.n	8005e9e <TIM_Base_SetConfig+0x8a>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a1e      	ldr	r2, [pc, #120]	; (8005f0c <TIM_Base_SetConfig+0xf8>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d003      	beq.n	8005e9e <TIM_Base_SetConfig+0x8a>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a1d      	ldr	r2, [pc, #116]	; (8005f10 <TIM_Base_SetConfig+0xfc>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d108      	bne.n	8005eb0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	689a      	ldr	r2, [r3, #8]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a08      	ldr	r2, [pc, #32]	; (8005ef8 <TIM_Base_SetConfig+0xe4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d103      	bne.n	8005ee4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	691a      	ldr	r2, [r3, #16]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	615a      	str	r2, [r3, #20]
}
 8005eea:	bf00      	nop
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	40010000 	.word	0x40010000
 8005efc:	40000400 	.word	0x40000400
 8005f00:	40000800 	.word	0x40000800
 8005f04:	40000c00 	.word	0x40000c00
 8005f08:	40014000 	.word	0x40014000
 8005f0c:	40014400 	.word	0x40014400
 8005f10:	40014800 	.word	0x40014800

08005f14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	f023 0201 	bic.w	r2, r3, #1
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	011b      	lsls	r3, r3, #4
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f023 030a 	bic.w	r3, r3, #10
 8005f50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	693a      	ldr	r2, [r7, #16]
 8005f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	621a      	str	r2, [r3, #32]
}
 8005f66:	bf00      	nop
 8005f68:	371c      	adds	r7, #28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b087      	sub	sp, #28
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	60f8      	str	r0, [r7, #12]
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	f023 0210 	bic.w	r2, r3, #16
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	031b      	lsls	r3, r3, #12
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	621a      	str	r2, [r3, #32]
}
 8005fc6:	bf00      	nop
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b085      	sub	sp, #20
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f043 0307 	orr.w	r3, r3, #7
 8005ff4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	609a      	str	r2, [r3, #8]
}
 8005ffc:	bf00      	nop
 8005ffe:	3714      	adds	r7, #20
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006022:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	021a      	lsls	r2, r3, #8
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	431a      	orrs	r2, r3
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	4313      	orrs	r3, r2
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	609a      	str	r2, [r3, #8]
}
 800603c:	bf00      	nop
 800603e:	371c      	adds	r7, #28
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006058:	2b01      	cmp	r3, #1
 800605a:	d101      	bne.n	8006060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800605c:	2302      	movs	r3, #2
 800605e:	e050      	b.n	8006102 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2202      	movs	r2, #2
 800606c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006086:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a1c      	ldr	r2, [pc, #112]	; (8006110 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d018      	beq.n	80060d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ac:	d013      	beq.n	80060d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a18      	ldr	r2, [pc, #96]	; (8006114 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d00e      	beq.n	80060d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a16      	ldr	r2, [pc, #88]	; (8006118 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d009      	beq.n	80060d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a15      	ldr	r2, [pc, #84]	; (800611c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d004      	beq.n	80060d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a13      	ldr	r2, [pc, #76]	; (8006120 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d10c      	bne.n	80060f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	40010000 	.word	0x40010000
 8006114:	40000400 	.word	0x40000400
 8006118:	40000800 	.word	0x40000800
 800611c:	40000c00 	.word	0x40000c00
 8006120:	40014000 	.word	0x40014000

08006124 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e03f      	b.n	80061de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d106      	bne.n	8006178 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7fb ffae 	bl	80020d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2224      	movs	r2, #36	; 0x24
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800618e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f829 	bl	80061e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	695a      	ldr	r2, [r3, #20]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2220      	movs	r2, #32
 80061d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
	...

080061e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061ec:	b0c0      	sub	sp, #256	; 0x100
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006204:	68d9      	ldr	r1, [r3, #12]
 8006206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	ea40 0301 	orr.w	r3, r0, r1
 8006210:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	431a      	orrs	r2, r3
 8006220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	431a      	orrs	r2, r3
 8006228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	4313      	orrs	r3, r2
 8006230:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006240:	f021 010c 	bic.w	r1, r1, #12
 8006244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800624e:	430b      	orrs	r3, r1
 8006250:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800625e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006262:	6999      	ldr	r1, [r3, #24]
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	ea40 0301 	orr.w	r3, r0, r1
 800626e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	4b8f      	ldr	r3, [pc, #572]	; (80064b4 <UART_SetConfig+0x2cc>)
 8006278:	429a      	cmp	r2, r3
 800627a:	d005      	beq.n	8006288 <UART_SetConfig+0xa0>
 800627c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	4b8d      	ldr	r3, [pc, #564]	; (80064b8 <UART_SetConfig+0x2d0>)
 8006284:	429a      	cmp	r2, r3
 8006286:	d104      	bne.n	8006292 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006288:	f7ff fafc 	bl	8005884 <HAL_RCC_GetPCLK2Freq>
 800628c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006290:	e003      	b.n	800629a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006292:	f7ff fae3 	bl	800585c <HAL_RCC_GetPCLK1Freq>
 8006296:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800629a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062a4:	f040 810c 	bne.w	80064c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80062a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062ac:	2200      	movs	r2, #0
 80062ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80062b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80062b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80062ba:	4622      	mov	r2, r4
 80062bc:	462b      	mov	r3, r5
 80062be:	1891      	adds	r1, r2, r2
 80062c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80062c2:	415b      	adcs	r3, r3
 80062c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80062ca:	4621      	mov	r1, r4
 80062cc:	eb12 0801 	adds.w	r8, r2, r1
 80062d0:	4629      	mov	r1, r5
 80062d2:	eb43 0901 	adc.w	r9, r3, r1
 80062d6:	f04f 0200 	mov.w	r2, #0
 80062da:	f04f 0300 	mov.w	r3, #0
 80062de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80062e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80062e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80062ea:	4690      	mov	r8, r2
 80062ec:	4699      	mov	r9, r3
 80062ee:	4623      	mov	r3, r4
 80062f0:	eb18 0303 	adds.w	r3, r8, r3
 80062f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062f8:	462b      	mov	r3, r5
 80062fa:	eb49 0303 	adc.w	r3, r9, r3
 80062fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800630e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006312:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006316:	460b      	mov	r3, r1
 8006318:	18db      	adds	r3, r3, r3
 800631a:	653b      	str	r3, [r7, #80]	; 0x50
 800631c:	4613      	mov	r3, r2
 800631e:	eb42 0303 	adc.w	r3, r2, r3
 8006322:	657b      	str	r3, [r7, #84]	; 0x54
 8006324:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006328:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800632c:	f7fa fc94 	bl	8000c58 <__aeabi_uldivmod>
 8006330:	4602      	mov	r2, r0
 8006332:	460b      	mov	r3, r1
 8006334:	4b61      	ldr	r3, [pc, #388]	; (80064bc <UART_SetConfig+0x2d4>)
 8006336:	fba3 2302 	umull	r2, r3, r3, r2
 800633a:	095b      	lsrs	r3, r3, #5
 800633c:	011c      	lsls	r4, r3, #4
 800633e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006342:	2200      	movs	r2, #0
 8006344:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006348:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800634c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006350:	4642      	mov	r2, r8
 8006352:	464b      	mov	r3, r9
 8006354:	1891      	adds	r1, r2, r2
 8006356:	64b9      	str	r1, [r7, #72]	; 0x48
 8006358:	415b      	adcs	r3, r3
 800635a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800635c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006360:	4641      	mov	r1, r8
 8006362:	eb12 0a01 	adds.w	sl, r2, r1
 8006366:	4649      	mov	r1, r9
 8006368:	eb43 0b01 	adc.w	fp, r3, r1
 800636c:	f04f 0200 	mov.w	r2, #0
 8006370:	f04f 0300 	mov.w	r3, #0
 8006374:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006378:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800637c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006380:	4692      	mov	sl, r2
 8006382:	469b      	mov	fp, r3
 8006384:	4643      	mov	r3, r8
 8006386:	eb1a 0303 	adds.w	r3, sl, r3
 800638a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800638e:	464b      	mov	r3, r9
 8006390:	eb4b 0303 	adc.w	r3, fp, r3
 8006394:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80063a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063ac:	460b      	mov	r3, r1
 80063ae:	18db      	adds	r3, r3, r3
 80063b0:	643b      	str	r3, [r7, #64]	; 0x40
 80063b2:	4613      	mov	r3, r2
 80063b4:	eb42 0303 	adc.w	r3, r2, r3
 80063b8:	647b      	str	r3, [r7, #68]	; 0x44
 80063ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80063be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80063c2:	f7fa fc49 	bl	8000c58 <__aeabi_uldivmod>
 80063c6:	4602      	mov	r2, r0
 80063c8:	460b      	mov	r3, r1
 80063ca:	4611      	mov	r1, r2
 80063cc:	4b3b      	ldr	r3, [pc, #236]	; (80064bc <UART_SetConfig+0x2d4>)
 80063ce:	fba3 2301 	umull	r2, r3, r3, r1
 80063d2:	095b      	lsrs	r3, r3, #5
 80063d4:	2264      	movs	r2, #100	; 0x64
 80063d6:	fb02 f303 	mul.w	r3, r2, r3
 80063da:	1acb      	subs	r3, r1, r3
 80063dc:	00db      	lsls	r3, r3, #3
 80063de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80063e2:	4b36      	ldr	r3, [pc, #216]	; (80064bc <UART_SetConfig+0x2d4>)
 80063e4:	fba3 2302 	umull	r2, r3, r3, r2
 80063e8:	095b      	lsrs	r3, r3, #5
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063f0:	441c      	add	r4, r3
 80063f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063f6:	2200      	movs	r2, #0
 80063f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006400:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006404:	4642      	mov	r2, r8
 8006406:	464b      	mov	r3, r9
 8006408:	1891      	adds	r1, r2, r2
 800640a:	63b9      	str	r1, [r7, #56]	; 0x38
 800640c:	415b      	adcs	r3, r3
 800640e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006410:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006414:	4641      	mov	r1, r8
 8006416:	1851      	adds	r1, r2, r1
 8006418:	6339      	str	r1, [r7, #48]	; 0x30
 800641a:	4649      	mov	r1, r9
 800641c:	414b      	adcs	r3, r1
 800641e:	637b      	str	r3, [r7, #52]	; 0x34
 8006420:	f04f 0200 	mov.w	r2, #0
 8006424:	f04f 0300 	mov.w	r3, #0
 8006428:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800642c:	4659      	mov	r1, fp
 800642e:	00cb      	lsls	r3, r1, #3
 8006430:	4651      	mov	r1, sl
 8006432:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006436:	4651      	mov	r1, sl
 8006438:	00ca      	lsls	r2, r1, #3
 800643a:	4610      	mov	r0, r2
 800643c:	4619      	mov	r1, r3
 800643e:	4603      	mov	r3, r0
 8006440:	4642      	mov	r2, r8
 8006442:	189b      	adds	r3, r3, r2
 8006444:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006448:	464b      	mov	r3, r9
 800644a:	460a      	mov	r2, r1
 800644c:	eb42 0303 	adc.w	r3, r2, r3
 8006450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006460:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006464:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006468:	460b      	mov	r3, r1
 800646a:	18db      	adds	r3, r3, r3
 800646c:	62bb      	str	r3, [r7, #40]	; 0x28
 800646e:	4613      	mov	r3, r2
 8006470:	eb42 0303 	adc.w	r3, r2, r3
 8006474:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006476:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800647a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800647e:	f7fa fbeb 	bl	8000c58 <__aeabi_uldivmod>
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	4b0d      	ldr	r3, [pc, #52]	; (80064bc <UART_SetConfig+0x2d4>)
 8006488:	fba3 1302 	umull	r1, r3, r3, r2
 800648c:	095b      	lsrs	r3, r3, #5
 800648e:	2164      	movs	r1, #100	; 0x64
 8006490:	fb01 f303 	mul.w	r3, r1, r3
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	3332      	adds	r3, #50	; 0x32
 800649a:	4a08      	ldr	r2, [pc, #32]	; (80064bc <UART_SetConfig+0x2d4>)
 800649c:	fba2 2303 	umull	r2, r3, r2, r3
 80064a0:	095b      	lsrs	r3, r3, #5
 80064a2:	f003 0207 	and.w	r2, r3, #7
 80064a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4422      	add	r2, r4
 80064ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064b0:	e105      	b.n	80066be <UART_SetConfig+0x4d6>
 80064b2:	bf00      	nop
 80064b4:	40011000 	.word	0x40011000
 80064b8:	40011400 	.word	0x40011400
 80064bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064c4:	2200      	movs	r2, #0
 80064c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80064ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80064d2:	4642      	mov	r2, r8
 80064d4:	464b      	mov	r3, r9
 80064d6:	1891      	adds	r1, r2, r2
 80064d8:	6239      	str	r1, [r7, #32]
 80064da:	415b      	adcs	r3, r3
 80064dc:	627b      	str	r3, [r7, #36]	; 0x24
 80064de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80064e2:	4641      	mov	r1, r8
 80064e4:	1854      	adds	r4, r2, r1
 80064e6:	4649      	mov	r1, r9
 80064e8:	eb43 0501 	adc.w	r5, r3, r1
 80064ec:	f04f 0200 	mov.w	r2, #0
 80064f0:	f04f 0300 	mov.w	r3, #0
 80064f4:	00eb      	lsls	r3, r5, #3
 80064f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064fa:	00e2      	lsls	r2, r4, #3
 80064fc:	4614      	mov	r4, r2
 80064fe:	461d      	mov	r5, r3
 8006500:	4643      	mov	r3, r8
 8006502:	18e3      	adds	r3, r4, r3
 8006504:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006508:	464b      	mov	r3, r9
 800650a:	eb45 0303 	adc.w	r3, r5, r3
 800650e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800651e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006522:	f04f 0200 	mov.w	r2, #0
 8006526:	f04f 0300 	mov.w	r3, #0
 800652a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800652e:	4629      	mov	r1, r5
 8006530:	008b      	lsls	r3, r1, #2
 8006532:	4621      	mov	r1, r4
 8006534:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006538:	4621      	mov	r1, r4
 800653a:	008a      	lsls	r2, r1, #2
 800653c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006540:	f7fa fb8a 	bl	8000c58 <__aeabi_uldivmod>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	4b60      	ldr	r3, [pc, #384]	; (80066cc <UART_SetConfig+0x4e4>)
 800654a:	fba3 2302 	umull	r2, r3, r3, r2
 800654e:	095b      	lsrs	r3, r3, #5
 8006550:	011c      	lsls	r4, r3, #4
 8006552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006556:	2200      	movs	r2, #0
 8006558:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800655c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006560:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006564:	4642      	mov	r2, r8
 8006566:	464b      	mov	r3, r9
 8006568:	1891      	adds	r1, r2, r2
 800656a:	61b9      	str	r1, [r7, #24]
 800656c:	415b      	adcs	r3, r3
 800656e:	61fb      	str	r3, [r7, #28]
 8006570:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006574:	4641      	mov	r1, r8
 8006576:	1851      	adds	r1, r2, r1
 8006578:	6139      	str	r1, [r7, #16]
 800657a:	4649      	mov	r1, r9
 800657c:	414b      	adcs	r3, r1
 800657e:	617b      	str	r3, [r7, #20]
 8006580:	f04f 0200 	mov.w	r2, #0
 8006584:	f04f 0300 	mov.w	r3, #0
 8006588:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800658c:	4659      	mov	r1, fp
 800658e:	00cb      	lsls	r3, r1, #3
 8006590:	4651      	mov	r1, sl
 8006592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006596:	4651      	mov	r1, sl
 8006598:	00ca      	lsls	r2, r1, #3
 800659a:	4610      	mov	r0, r2
 800659c:	4619      	mov	r1, r3
 800659e:	4603      	mov	r3, r0
 80065a0:	4642      	mov	r2, r8
 80065a2:	189b      	adds	r3, r3, r2
 80065a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80065a8:	464b      	mov	r3, r9
 80065aa:	460a      	mov	r2, r1
 80065ac:	eb42 0303 	adc.w	r3, r2, r3
 80065b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80065be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80065c0:	f04f 0200 	mov.w	r2, #0
 80065c4:	f04f 0300 	mov.w	r3, #0
 80065c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80065cc:	4649      	mov	r1, r9
 80065ce:	008b      	lsls	r3, r1, #2
 80065d0:	4641      	mov	r1, r8
 80065d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065d6:	4641      	mov	r1, r8
 80065d8:	008a      	lsls	r2, r1, #2
 80065da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80065de:	f7fa fb3b 	bl	8000c58 <__aeabi_uldivmod>
 80065e2:	4602      	mov	r2, r0
 80065e4:	460b      	mov	r3, r1
 80065e6:	4b39      	ldr	r3, [pc, #228]	; (80066cc <UART_SetConfig+0x4e4>)
 80065e8:	fba3 1302 	umull	r1, r3, r3, r2
 80065ec:	095b      	lsrs	r3, r3, #5
 80065ee:	2164      	movs	r1, #100	; 0x64
 80065f0:	fb01 f303 	mul.w	r3, r1, r3
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	011b      	lsls	r3, r3, #4
 80065f8:	3332      	adds	r3, #50	; 0x32
 80065fa:	4a34      	ldr	r2, [pc, #208]	; (80066cc <UART_SetConfig+0x4e4>)
 80065fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006600:	095b      	lsrs	r3, r3, #5
 8006602:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006606:	441c      	add	r4, r3
 8006608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800660c:	2200      	movs	r2, #0
 800660e:	673b      	str	r3, [r7, #112]	; 0x70
 8006610:	677a      	str	r2, [r7, #116]	; 0x74
 8006612:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006616:	4642      	mov	r2, r8
 8006618:	464b      	mov	r3, r9
 800661a:	1891      	adds	r1, r2, r2
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	415b      	adcs	r3, r3
 8006620:	60fb      	str	r3, [r7, #12]
 8006622:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006626:	4641      	mov	r1, r8
 8006628:	1851      	adds	r1, r2, r1
 800662a:	6039      	str	r1, [r7, #0]
 800662c:	4649      	mov	r1, r9
 800662e:	414b      	adcs	r3, r1
 8006630:	607b      	str	r3, [r7, #4]
 8006632:	f04f 0200 	mov.w	r2, #0
 8006636:	f04f 0300 	mov.w	r3, #0
 800663a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800663e:	4659      	mov	r1, fp
 8006640:	00cb      	lsls	r3, r1, #3
 8006642:	4651      	mov	r1, sl
 8006644:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006648:	4651      	mov	r1, sl
 800664a:	00ca      	lsls	r2, r1, #3
 800664c:	4610      	mov	r0, r2
 800664e:	4619      	mov	r1, r3
 8006650:	4603      	mov	r3, r0
 8006652:	4642      	mov	r2, r8
 8006654:	189b      	adds	r3, r3, r2
 8006656:	66bb      	str	r3, [r7, #104]	; 0x68
 8006658:	464b      	mov	r3, r9
 800665a:	460a      	mov	r2, r1
 800665c:	eb42 0303 	adc.w	r3, r2, r3
 8006660:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	663b      	str	r3, [r7, #96]	; 0x60
 800666c:	667a      	str	r2, [r7, #100]	; 0x64
 800666e:	f04f 0200 	mov.w	r2, #0
 8006672:	f04f 0300 	mov.w	r3, #0
 8006676:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800667a:	4649      	mov	r1, r9
 800667c:	008b      	lsls	r3, r1, #2
 800667e:	4641      	mov	r1, r8
 8006680:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006684:	4641      	mov	r1, r8
 8006686:	008a      	lsls	r2, r1, #2
 8006688:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800668c:	f7fa fae4 	bl	8000c58 <__aeabi_uldivmod>
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	4b0d      	ldr	r3, [pc, #52]	; (80066cc <UART_SetConfig+0x4e4>)
 8006696:	fba3 1302 	umull	r1, r3, r3, r2
 800669a:	095b      	lsrs	r3, r3, #5
 800669c:	2164      	movs	r1, #100	; 0x64
 800669e:	fb01 f303 	mul.w	r3, r1, r3
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	011b      	lsls	r3, r3, #4
 80066a6:	3332      	adds	r3, #50	; 0x32
 80066a8:	4a08      	ldr	r2, [pc, #32]	; (80066cc <UART_SetConfig+0x4e4>)
 80066aa:	fba2 2303 	umull	r2, r3, r2, r3
 80066ae:	095b      	lsrs	r3, r3, #5
 80066b0:	f003 020f 	and.w	r2, r3, #15
 80066b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4422      	add	r2, r4
 80066bc:	609a      	str	r2, [r3, #8]
}
 80066be:	bf00      	nop
 80066c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80066c4:	46bd      	mov	sp, r7
 80066c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066ca:	bf00      	nop
 80066cc:	51eb851f 	.word	0x51eb851f

080066d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066d0:	b084      	sub	sp, #16
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b084      	sub	sp, #16
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	f107 001c 	add.w	r0, r7, #28
 80066de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d122      	bne.n	800672e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80066fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006712:	2b01      	cmp	r3, #1
 8006714:	d105      	bne.n	8006722 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f001 fbee 	bl	8007f04 <USB_CoreReset>
 8006728:	4603      	mov	r3, r0
 800672a:	73fb      	strb	r3, [r7, #15]
 800672c:	e01a      	b.n	8006764 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f001 fbe2 	bl	8007f04 <USB_CoreReset>
 8006740:	4603      	mov	r3, r0
 8006742:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006746:	2b00      	cmp	r3, #0
 8006748:	d106      	bne.n	8006758 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	639a      	str	r2, [r3, #56]	; 0x38
 8006756:	e005      	b.n	8006764 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006766:	2b01      	cmp	r3, #1
 8006768:	d10b      	bne.n	8006782 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f043 0206 	orr.w	r2, r3, #6
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f043 0220 	orr.w	r2, r3, #32
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006782:	7bfb      	ldrb	r3, [r7, #15]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800678e:	b004      	add	sp, #16
 8006790:	4770      	bx	lr
	...

08006794 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	4613      	mov	r3, r2
 80067a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80067a2:	79fb      	ldrb	r3, [r7, #7]
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d165      	bne.n	8006874 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	4a41      	ldr	r2, [pc, #260]	; (80068b0 <USB_SetTurnaroundTime+0x11c>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d906      	bls.n	80067be <USB_SetTurnaroundTime+0x2a>
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	4a40      	ldr	r2, [pc, #256]	; (80068b4 <USB_SetTurnaroundTime+0x120>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d202      	bcs.n	80067be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80067b8:	230f      	movs	r3, #15
 80067ba:	617b      	str	r3, [r7, #20]
 80067bc:	e062      	b.n	8006884 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	4a3c      	ldr	r2, [pc, #240]	; (80068b4 <USB_SetTurnaroundTime+0x120>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d306      	bcc.n	80067d4 <USB_SetTurnaroundTime+0x40>
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	4a3b      	ldr	r2, [pc, #236]	; (80068b8 <USB_SetTurnaroundTime+0x124>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d202      	bcs.n	80067d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80067ce:	230e      	movs	r3, #14
 80067d0:	617b      	str	r3, [r7, #20]
 80067d2:	e057      	b.n	8006884 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	4a38      	ldr	r2, [pc, #224]	; (80068b8 <USB_SetTurnaroundTime+0x124>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d306      	bcc.n	80067ea <USB_SetTurnaroundTime+0x56>
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	4a37      	ldr	r2, [pc, #220]	; (80068bc <USB_SetTurnaroundTime+0x128>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d202      	bcs.n	80067ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80067e4:	230d      	movs	r3, #13
 80067e6:	617b      	str	r3, [r7, #20]
 80067e8:	e04c      	b.n	8006884 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	4a33      	ldr	r2, [pc, #204]	; (80068bc <USB_SetTurnaroundTime+0x128>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d306      	bcc.n	8006800 <USB_SetTurnaroundTime+0x6c>
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	4a32      	ldr	r2, [pc, #200]	; (80068c0 <USB_SetTurnaroundTime+0x12c>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d802      	bhi.n	8006800 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80067fa:	230c      	movs	r3, #12
 80067fc:	617b      	str	r3, [r7, #20]
 80067fe:	e041      	b.n	8006884 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	4a2f      	ldr	r2, [pc, #188]	; (80068c0 <USB_SetTurnaroundTime+0x12c>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d906      	bls.n	8006816 <USB_SetTurnaroundTime+0x82>
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	4a2e      	ldr	r2, [pc, #184]	; (80068c4 <USB_SetTurnaroundTime+0x130>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d802      	bhi.n	8006816 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006810:	230b      	movs	r3, #11
 8006812:	617b      	str	r3, [r7, #20]
 8006814:	e036      	b.n	8006884 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	4a2a      	ldr	r2, [pc, #168]	; (80068c4 <USB_SetTurnaroundTime+0x130>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d906      	bls.n	800682c <USB_SetTurnaroundTime+0x98>
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	4a29      	ldr	r2, [pc, #164]	; (80068c8 <USB_SetTurnaroundTime+0x134>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d802      	bhi.n	800682c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006826:	230a      	movs	r3, #10
 8006828:	617b      	str	r3, [r7, #20]
 800682a:	e02b      	b.n	8006884 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	4a26      	ldr	r2, [pc, #152]	; (80068c8 <USB_SetTurnaroundTime+0x134>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d906      	bls.n	8006842 <USB_SetTurnaroundTime+0xae>
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	4a25      	ldr	r2, [pc, #148]	; (80068cc <USB_SetTurnaroundTime+0x138>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d202      	bcs.n	8006842 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800683c:	2309      	movs	r3, #9
 800683e:	617b      	str	r3, [r7, #20]
 8006840:	e020      	b.n	8006884 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	4a21      	ldr	r2, [pc, #132]	; (80068cc <USB_SetTurnaroundTime+0x138>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d306      	bcc.n	8006858 <USB_SetTurnaroundTime+0xc4>
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	4a20      	ldr	r2, [pc, #128]	; (80068d0 <USB_SetTurnaroundTime+0x13c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d802      	bhi.n	8006858 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006852:	2308      	movs	r3, #8
 8006854:	617b      	str	r3, [r7, #20]
 8006856:	e015      	b.n	8006884 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	4a1d      	ldr	r2, [pc, #116]	; (80068d0 <USB_SetTurnaroundTime+0x13c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d906      	bls.n	800686e <USB_SetTurnaroundTime+0xda>
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	4a1c      	ldr	r2, [pc, #112]	; (80068d4 <USB_SetTurnaroundTime+0x140>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d202      	bcs.n	800686e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006868:	2307      	movs	r3, #7
 800686a:	617b      	str	r3, [r7, #20]
 800686c:	e00a      	b.n	8006884 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800686e:	2306      	movs	r3, #6
 8006870:	617b      	str	r3, [r7, #20]
 8006872:	e007      	b.n	8006884 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006874:	79fb      	ldrb	r3, [r7, #7]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d102      	bne.n	8006880 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800687a:	2309      	movs	r3, #9
 800687c:	617b      	str	r3, [r7, #20]
 800687e:	e001      	b.n	8006884 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006880:	2309      	movs	r3, #9
 8006882:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	68da      	ldr	r2, [r3, #12]
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	029b      	lsls	r3, r3, #10
 8006898:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800689c:	431a      	orrs	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	371c      	adds	r7, #28
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	00d8acbf 	.word	0x00d8acbf
 80068b4:	00e4e1c0 	.word	0x00e4e1c0
 80068b8:	00f42400 	.word	0x00f42400
 80068bc:	01067380 	.word	0x01067380
 80068c0:	011a499f 	.word	0x011a499f
 80068c4:	01312cff 	.word	0x01312cff
 80068c8:	014ca43f 	.word	0x014ca43f
 80068cc:	016e3600 	.word	0x016e3600
 80068d0:	01a6ab1f 	.word	0x01a6ab1f
 80068d4:	01e84800 	.word	0x01e84800

080068d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f043 0201 	orr.w	r2, r3, #1
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b083      	sub	sp, #12
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f023 0201 	bic.w	r2, r3, #1
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	460b      	mov	r3, r1
 8006926:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006938:	78fb      	ldrb	r3, [r7, #3]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d115      	bne.n	800696a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800694a:	2001      	movs	r0, #1
 800694c:	f7fb fe06 	bl	800255c <HAL_Delay>
      ms++;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	3301      	adds	r3, #1
 8006954:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f001 fa45 	bl	8007de6 <USB_GetMode>
 800695c:	4603      	mov	r3, r0
 800695e:	2b01      	cmp	r3, #1
 8006960:	d01e      	beq.n	80069a0 <USB_SetCurrentMode+0x84>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2b31      	cmp	r3, #49	; 0x31
 8006966:	d9f0      	bls.n	800694a <USB_SetCurrentMode+0x2e>
 8006968:	e01a      	b.n	80069a0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800696a:	78fb      	ldrb	r3, [r7, #3]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d115      	bne.n	800699c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800697c:	2001      	movs	r0, #1
 800697e:	f7fb fded 	bl	800255c <HAL_Delay>
      ms++;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	3301      	adds	r3, #1
 8006986:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f001 fa2c 	bl	8007de6 <USB_GetMode>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d005      	beq.n	80069a0 <USB_SetCurrentMode+0x84>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2b31      	cmp	r3, #49	; 0x31
 8006998:	d9f0      	bls.n	800697c <USB_SetCurrentMode+0x60>
 800699a:	e001      	b.n	80069a0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e005      	b.n	80069ac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2b32      	cmp	r3, #50	; 0x32
 80069a4:	d101      	bne.n	80069aa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e000      	b.n	80069ac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069b4:	b084      	sub	sp, #16
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b086      	sub	sp, #24
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80069c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80069ce:	2300      	movs	r3, #0
 80069d0:	613b      	str	r3, [r7, #16]
 80069d2:	e009      	b.n	80069e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	3340      	adds	r3, #64	; 0x40
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	2200      	movs	r2, #0
 80069e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	3301      	adds	r3, #1
 80069e6:	613b      	str	r3, [r7, #16]
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	2b0e      	cmp	r3, #14
 80069ec:	d9f2      	bls.n	80069d4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80069ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d11c      	bne.n	8006a2e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a02:	f043 0302 	orr.w	r3, r3, #2
 8006a06:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a18:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a24:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	639a      	str	r2, [r3, #56]	; 0x38
 8006a2c:	e00b      	b.n	8006a46 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a32:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	2300      	movs	r3, #0
 8006a50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a58:	4619      	mov	r1, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a60:	461a      	mov	r2, r3
 8006a62:	680b      	ldr	r3, [r1, #0]
 8006a64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d10c      	bne.n	8006a86 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d104      	bne.n	8006a7c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006a72:	2100      	movs	r1, #0
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f965 	bl	8006d44 <USB_SetDevSpeed>
 8006a7a:	e008      	b.n	8006a8e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f960 	bl	8006d44 <USB_SetDevSpeed>
 8006a84:	e003      	b.n	8006a8e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006a86:	2103      	movs	r1, #3
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f95b 	bl	8006d44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a8e:	2110      	movs	r1, #16
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f8f3 	bl	8006c7c <USB_FlushTxFifo>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 f91f 	bl	8006ce4 <USB_FlushRxFifo>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	2300      	movs	r3, #0
 8006aba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ace:	461a      	mov	r2, r3
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	613b      	str	r3, [r7, #16]
 8006ad8:	e043      	b.n	8006b62 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006aec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006af0:	d118      	bne.n	8006b24 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10a      	bne.n	8006b0e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b04:	461a      	mov	r2, r3
 8006b06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b0a:	6013      	str	r3, [r2, #0]
 8006b0c:	e013      	b.n	8006b36 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	015a      	lsls	r2, r3, #5
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b20:	6013      	str	r3, [r2, #0]
 8006b22:	e008      	b.n	8006b36 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b30:	461a      	mov	r2, r3
 8006b32:	2300      	movs	r3, #0
 8006b34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b42:	461a      	mov	r2, r3
 8006b44:	2300      	movs	r3, #0
 8006b46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b54:	461a      	mov	r2, r3
 8006b56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	613b      	str	r3, [r7, #16]
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d3b7      	bcc.n	8006ada <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	613b      	str	r3, [r7, #16]
 8006b6e:	e043      	b.n	8006bf8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b86:	d118      	bne.n	8006bba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10a      	bne.n	8006ba4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	015a      	lsls	r2, r3, #5
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ba0:	6013      	str	r3, [r2, #0]
 8006ba2:	e013      	b.n	8006bcc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006bb6:	6013      	str	r3, [r2, #0]
 8006bb8:	e008      	b.n	8006bcc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	015a      	lsls	r2, r3, #5
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	2300      	movs	r3, #0
 8006bca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	015a      	lsls	r2, r3, #5
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd8:	461a      	mov	r2, r3
 8006bda:	2300      	movs	r3, #0
 8006bdc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bea:	461a      	mov	r2, r3
 8006bec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006bf0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	613b      	str	r3, [r7, #16]
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d3b7      	bcc.n	8006b70 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006c20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d105      	bne.n	8006c34 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	f043 0210 	orr.w	r2, r3, #16
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	699a      	ldr	r2, [r3, #24]
 8006c38:	4b0f      	ldr	r3, [pc, #60]	; (8006c78 <USB_DevInit+0x2c4>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d005      	beq.n	8006c52 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	f043 0208 	orr.w	r2, r3, #8
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d107      	bne.n	8006c68 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c60:	f043 0304 	orr.w	r3, r3, #4
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c74:	b004      	add	sp, #16
 8006c76:	4770      	bx	lr
 8006c78:	803c3800 	.word	0x803c3800

08006c7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c86:	2300      	movs	r3, #0
 8006c88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4a13      	ldr	r2, [pc, #76]	; (8006ce0 <USB_FlushTxFifo+0x64>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d901      	bls.n	8006c9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e01b      	b.n	8006cd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	daf2      	bge.n	8006c8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	019b      	lsls	r3, r3, #6
 8006cac:	f043 0220 	orr.w	r2, r3, #32
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	4a08      	ldr	r2, [pc, #32]	; (8006ce0 <USB_FlushTxFifo+0x64>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d901      	bls.n	8006cc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e006      	b.n	8006cd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	f003 0320 	and.w	r3, r3, #32
 8006cce:	2b20      	cmp	r3, #32
 8006cd0:	d0f0      	beq.n	8006cb4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	00030d40 	.word	0x00030d40

08006ce4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	4a11      	ldr	r2, [pc, #68]	; (8006d40 <USB_FlushRxFifo+0x5c>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d901      	bls.n	8006d02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e018      	b.n	8006d34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	daf2      	bge.n	8006cf0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2210      	movs	r2, #16
 8006d12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	3301      	adds	r3, #1
 8006d18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	4a08      	ldr	r2, [pc, #32]	; (8006d40 <USB_FlushRxFifo+0x5c>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d901      	bls.n	8006d26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e006      	b.n	8006d34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	f003 0310 	and.w	r3, r3, #16
 8006d2e:	2b10      	cmp	r3, #16
 8006d30:	d0f0      	beq.n	8006d14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	00030d40 	.word	0x00030d40

08006d44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	78fb      	ldrb	r3, [r7, #3]
 8006d5e:	68f9      	ldr	r1, [r7, #12]
 8006d60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d64:	4313      	orrs	r3, r2
 8006d66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b087      	sub	sp, #28
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f003 0306 	and.w	r3, r3, #6
 8006d8e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d102      	bne.n	8006d9c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006d96:	2300      	movs	r3, #0
 8006d98:	75fb      	strb	r3, [r7, #23]
 8006d9a:	e00a      	b.n	8006db2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d002      	beq.n	8006da8 <USB_GetDevSpeed+0x32>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2b06      	cmp	r3, #6
 8006da6:	d102      	bne.n	8006dae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006da8:	2302      	movs	r3, #2
 8006daa:	75fb      	strb	r3, [r7, #23]
 8006dac:	e001      	b.n	8006db2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006dae:	230f      	movs	r3, #15
 8006db0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	371c      	adds	r7, #28
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	785b      	ldrb	r3, [r3, #1]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d13a      	bne.n	8006e52 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de2:	69da      	ldr	r2, [r3, #28]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	f003 030f 	and.w	r3, r3, #15
 8006dec:	2101      	movs	r1, #1
 8006dee:	fa01 f303 	lsl.w	r3, r1, r3
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	68f9      	ldr	r1, [r7, #12]
 8006df6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	015a      	lsls	r2, r3, #5
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	4413      	add	r3, r2
 8006e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d155      	bne.n	8006ec0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	015a      	lsls	r2, r3, #5
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	791b      	ldrb	r3, [r3, #4]
 8006e2e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e30:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	059b      	lsls	r3, r3, #22
 8006e36:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	0151      	lsls	r1, r2, #5
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	440a      	add	r2, r1
 8006e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e4e:	6013      	str	r3, [r2, #0]
 8006e50:	e036      	b.n	8006ec0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e58:	69da      	ldr	r2, [r3, #28]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	f003 030f 	and.w	r3, r3, #15
 8006e62:	2101      	movs	r1, #1
 8006e64:	fa01 f303 	lsl.w	r3, r1, r3
 8006e68:	041b      	lsls	r3, r3, #16
 8006e6a:	68f9      	ldr	r1, [r7, #12]
 8006e6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e70:	4313      	orrs	r3, r2
 8006e72:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d11a      	bne.n	8006ec0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	791b      	ldrb	r3, [r3, #4]
 8006ea4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006ea6:	430b      	orrs	r3, r1
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	0151      	lsls	r1, r2, #5
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	440a      	add	r2, r1
 8006eb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ebe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
	...

08006ed0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	785b      	ldrb	r3, [r3, #1]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d161      	bne.n	8006fb0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006efe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f02:	d11f      	bne.n	8006f44 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	0151      	lsls	r1, r2, #5
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	440a      	add	r2, r1
 8006f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f22:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	0151      	lsls	r1, r2, #5
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	440a      	add	r2, r1
 8006f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	f003 030f 	and.w	r3, r3, #15
 8006f54:	2101      	movs	r1, #1
 8006f56:	fa01 f303 	lsl.w	r3, r1, r3
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	43db      	mvns	r3, r3
 8006f5e:	68f9      	ldr	r1, [r7, #12]
 8006f60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f64:	4013      	ands	r3, r2
 8006f66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f6e:	69da      	ldr	r2, [r3, #28]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	f003 030f 	and.w	r3, r3, #15
 8006f78:	2101      	movs	r1, #1
 8006f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	43db      	mvns	r3, r3
 8006f82:	68f9      	ldr	r1, [r7, #12]
 8006f84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f88:	4013      	ands	r3, r2
 8006f8a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	0159      	lsls	r1, r3, #5
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	440b      	add	r3, r1
 8006fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	4b35      	ldr	r3, [pc, #212]	; (8007080 <USB_DeactivateEndpoint+0x1b0>)
 8006faa:	4013      	ands	r3, r2
 8006fac:	600b      	str	r3, [r1, #0]
 8006fae:	e060      	b.n	8007072 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fc6:	d11f      	bne.n	8007008 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	015a      	lsls	r2, r3, #5
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	4413      	add	r3, r2
 8006fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	0151      	lsls	r1, r2, #5
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	440a      	add	r2, r1
 8006fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fe2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006fe6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	0151      	lsls	r1, r2, #5
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	440a      	add	r2, r1
 8006ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007002:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007006:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800700e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	f003 030f 	and.w	r3, r3, #15
 8007018:	2101      	movs	r1, #1
 800701a:	fa01 f303 	lsl.w	r3, r1, r3
 800701e:	041b      	lsls	r3, r3, #16
 8007020:	43db      	mvns	r3, r3
 8007022:	68f9      	ldr	r1, [r7, #12]
 8007024:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007028:	4013      	ands	r3, r2
 800702a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007032:	69da      	ldr	r2, [r3, #28]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	f003 030f 	and.w	r3, r3, #15
 800703c:	2101      	movs	r1, #1
 800703e:	fa01 f303 	lsl.w	r3, r1, r3
 8007042:	041b      	lsls	r3, r3, #16
 8007044:	43db      	mvns	r3, r3
 8007046:	68f9      	ldr	r1, [r7, #12]
 8007048:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800704c:	4013      	ands	r3, r2
 800704e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	0159      	lsls	r1, r3, #5
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	440b      	add	r3, r1
 8007066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706a:	4619      	mov	r1, r3
 800706c:	4b05      	ldr	r3, [pc, #20]	; (8007084 <USB_DeactivateEndpoint+0x1b4>)
 800706e:	4013      	ands	r3, r2
 8007070:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	ec337800 	.word	0xec337800
 8007084:	eff37800 	.word	0xeff37800

08007088 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b08a      	sub	sp, #40	; 0x28
 800708c:	af02      	add	r7, sp, #8
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	4613      	mov	r3, r2
 8007094:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	785b      	ldrb	r3, [r3, #1]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	f040 815c 	bne.w	8007362 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d132      	bne.n	8007118 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	015a      	lsls	r2, r3, #5
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	4413      	add	r3, r2
 80070ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	69ba      	ldr	r2, [r7, #24]
 80070c2:	0151      	lsls	r1, r2, #5
 80070c4:	69fa      	ldr	r2, [r7, #28]
 80070c6:	440a      	add	r2, r1
 80070c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	015a      	lsls	r2, r3, #5
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	4413      	add	r3, r2
 80070de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	69ba      	ldr	r2, [r7, #24]
 80070e6:	0151      	lsls	r1, r2, #5
 80070e8:	69fa      	ldr	r2, [r7, #28]
 80070ea:	440a      	add	r2, r1
 80070ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	69fb      	ldr	r3, [r7, #28]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	69ba      	ldr	r2, [r7, #24]
 8007106:	0151      	lsls	r1, r2, #5
 8007108:	69fa      	ldr	r2, [r7, #28]
 800710a:	440a      	add	r2, r1
 800710c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007110:	0cdb      	lsrs	r3, r3, #19
 8007112:	04db      	lsls	r3, r3, #19
 8007114:	6113      	str	r3, [r2, #16]
 8007116:	e074      	b.n	8007202 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	4413      	add	r3, r2
 8007120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	0151      	lsls	r1, r2, #5
 800712a:	69fa      	ldr	r2, [r7, #28]
 800712c:	440a      	add	r2, r1
 800712e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007132:	0cdb      	lsrs	r3, r3, #19
 8007134:	04db      	lsls	r3, r3, #19
 8007136:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	69ba      	ldr	r2, [r7, #24]
 8007148:	0151      	lsls	r1, r2, #5
 800714a:	69fa      	ldr	r2, [r7, #28]
 800714c:	440a      	add	r2, r1
 800714e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007152:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007156:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800715a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	4413      	add	r3, r2
 8007164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007168:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	6999      	ldr	r1, [r3, #24]
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	440b      	add	r3, r1
 8007174:	1e59      	subs	r1, r3, #1
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	fbb1 f3f3 	udiv	r3, r1, r3
 800717e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007180:	4b9d      	ldr	r3, [pc, #628]	; (80073f8 <USB_EPStartXfer+0x370>)
 8007182:	400b      	ands	r3, r1
 8007184:	69b9      	ldr	r1, [r7, #24]
 8007186:	0148      	lsls	r0, r1, #5
 8007188:	69f9      	ldr	r1, [r7, #28]
 800718a:	4401      	add	r1, r0
 800718c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007190:	4313      	orrs	r3, r2
 8007192:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	4413      	add	r3, r2
 800719c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a0:	691a      	ldr	r2, [r3, #16]
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071aa:	69b9      	ldr	r1, [r7, #24]
 80071ac:	0148      	lsls	r0, r1, #5
 80071ae:	69f9      	ldr	r1, [r7, #28]
 80071b0:	4401      	add	r1, r0
 80071b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80071b6:	4313      	orrs	r3, r2
 80071b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	791b      	ldrb	r3, [r3, #4]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d11f      	bne.n	8007202 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	69ba      	ldr	r2, [r7, #24]
 80071d2:	0151      	lsls	r1, r2, #5
 80071d4:	69fa      	ldr	r2, [r7, #28]
 80071d6:	440a      	add	r2, r1
 80071d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80071e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	0151      	lsls	r1, r2, #5
 80071f4:	69fa      	ldr	r2, [r7, #28]
 80071f6:	440a      	add	r2, r1
 80071f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007200:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007202:	79fb      	ldrb	r3, [r7, #7]
 8007204:	2b01      	cmp	r3, #1
 8007206:	d14b      	bne.n	80072a0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	695b      	ldr	r3, [r3, #20]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d009      	beq.n	8007224 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	015a      	lsls	r2, r3, #5
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	4413      	add	r3, r2
 8007218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800721c:	461a      	mov	r2, r3
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	791b      	ldrb	r3, [r3, #4]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d128      	bne.n	800727e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007238:	2b00      	cmp	r3, #0
 800723a:	d110      	bne.n	800725e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	4413      	add	r3, r2
 8007244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	69ba      	ldr	r2, [r7, #24]
 800724c:	0151      	lsls	r1, r2, #5
 800724e:	69fa      	ldr	r2, [r7, #28]
 8007250:	440a      	add	r2, r1
 8007252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007256:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800725a:	6013      	str	r3, [r2, #0]
 800725c:	e00f      	b.n	800727e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	015a      	lsls	r2, r3, #5
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	4413      	add	r3, r2
 8007266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	69ba      	ldr	r2, [r7, #24]
 800726e:	0151      	lsls	r1, r2, #5
 8007270:	69fa      	ldr	r2, [r7, #28]
 8007272:	440a      	add	r2, r1
 8007274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800727c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	4413      	add	r3, r2
 8007286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	0151      	lsls	r1, r2, #5
 8007290:	69fa      	ldr	r2, [r7, #28]
 8007292:	440a      	add	r2, r1
 8007294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007298:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800729c:	6013      	str	r3, [r2, #0]
 800729e:	e133      	b.n	8007508 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	69ba      	ldr	r2, [r7, #24]
 80072b0:	0151      	lsls	r1, r2, #5
 80072b2:	69fa      	ldr	r2, [r7, #28]
 80072b4:	440a      	add	r2, r1
 80072b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	791b      	ldrb	r3, [r3, #4]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d015      	beq.n	80072f4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 811b 	beq.w	8007508 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	f003 030f 	and.w	r3, r3, #15
 80072e2:	2101      	movs	r1, #1
 80072e4:	fa01 f303 	lsl.w	r3, r1, r3
 80072e8:	69f9      	ldr	r1, [r7, #28]
 80072ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072ee:	4313      	orrs	r3, r2
 80072f0:	634b      	str	r3, [r1, #52]	; 0x34
 80072f2:	e109      	b.n	8007508 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007300:	2b00      	cmp	r3, #0
 8007302:	d110      	bne.n	8007326 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	69ba      	ldr	r2, [r7, #24]
 8007314:	0151      	lsls	r1, r2, #5
 8007316:	69fa      	ldr	r2, [r7, #28]
 8007318:	440a      	add	r2, r1
 800731a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800731e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007322:	6013      	str	r3, [r2, #0]
 8007324:	e00f      	b.n	8007346 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	4413      	add	r3, r2
 800732e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	0151      	lsls	r1, r2, #5
 8007338:	69fa      	ldr	r2, [r7, #28]
 800733a:	440a      	add	r2, r1
 800733c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007344:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	6919      	ldr	r1, [r3, #16]
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	781a      	ldrb	r2, [r3, #0]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	b298      	uxth	r0, r3
 8007354:	79fb      	ldrb	r3, [r7, #7]
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	4603      	mov	r3, r0
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f000 fade 	bl	800791c <USB_WritePacket>
 8007360:	e0d2      	b.n	8007508 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	015a      	lsls	r2, r3, #5
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	4413      	add	r3, r2
 800736a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	0151      	lsls	r1, r2, #5
 8007374:	69fa      	ldr	r2, [r7, #28]
 8007376:	440a      	add	r2, r1
 8007378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800737c:	0cdb      	lsrs	r3, r3, #19
 800737e:	04db      	lsls	r3, r3, #19
 8007380:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	015a      	lsls	r2, r3, #5
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	4413      	add	r3, r2
 800738a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	69ba      	ldr	r2, [r7, #24]
 8007392:	0151      	lsls	r1, r2, #5
 8007394:	69fa      	ldr	r2, [r7, #28]
 8007396:	440a      	add	r2, r1
 8007398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800739c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d126      	bne.n	80073fc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ba:	691a      	ldr	r2, [r3, #16]
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073c4:	69b9      	ldr	r1, [r7, #24]
 80073c6:	0148      	lsls	r0, r1, #5
 80073c8:	69f9      	ldr	r1, [r7, #28]
 80073ca:	4401      	add	r1, r0
 80073cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80073d0:	4313      	orrs	r3, r2
 80073d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	69ba      	ldr	r2, [r7, #24]
 80073e4:	0151      	lsls	r1, r2, #5
 80073e6:	69fa      	ldr	r2, [r7, #28]
 80073e8:	440a      	add	r2, r1
 80073ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073f2:	6113      	str	r3, [r2, #16]
 80073f4:	e03a      	b.n	800746c <USB_EPStartXfer+0x3e4>
 80073f6:	bf00      	nop
 80073f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	699a      	ldr	r2, [r3, #24]
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	4413      	add	r3, r2
 8007406:	1e5a      	subs	r2, r3, #1
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007410:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	8afa      	ldrh	r2, [r7, #22]
 8007418:	fb03 f202 	mul.w	r2, r3, r2
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800742c:	691a      	ldr	r2, [r3, #16]
 800742e:	8afb      	ldrh	r3, [r7, #22]
 8007430:	04d9      	lsls	r1, r3, #19
 8007432:	4b38      	ldr	r3, [pc, #224]	; (8007514 <USB_EPStartXfer+0x48c>)
 8007434:	400b      	ands	r3, r1
 8007436:	69b9      	ldr	r1, [r7, #24]
 8007438:	0148      	lsls	r0, r1, #5
 800743a:	69f9      	ldr	r1, [r7, #28]
 800743c:	4401      	add	r1, r0
 800743e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007442:	4313      	orrs	r3, r2
 8007444:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	4413      	add	r3, r2
 800744e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007452:	691a      	ldr	r2, [r3, #16]
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	69db      	ldr	r3, [r3, #28]
 8007458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800745c:	69b9      	ldr	r1, [r7, #24]
 800745e:	0148      	lsls	r0, r1, #5
 8007460:	69f9      	ldr	r1, [r7, #28]
 8007462:	4401      	add	r1, r0
 8007464:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007468:	4313      	orrs	r3, r2
 800746a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800746c:	79fb      	ldrb	r3, [r7, #7]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d10d      	bne.n	800748e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d009      	beq.n	800748e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	6919      	ldr	r1, [r3, #16]
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	015a      	lsls	r2, r3, #5
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	4413      	add	r3, r2
 8007486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800748a:	460a      	mov	r2, r1
 800748c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	791b      	ldrb	r3, [r3, #4]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d128      	bne.n	80074e8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d110      	bne.n	80074c8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	015a      	lsls	r2, r3, #5
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	4413      	add	r3, r2
 80074ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	69ba      	ldr	r2, [r7, #24]
 80074b6:	0151      	lsls	r1, r2, #5
 80074b8:	69fa      	ldr	r2, [r7, #28]
 80074ba:	440a      	add	r2, r1
 80074bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074c4:	6013      	str	r3, [r2, #0]
 80074c6:	e00f      	b.n	80074e8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	015a      	lsls	r2, r3, #5
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	69ba      	ldr	r2, [r7, #24]
 80074d8:	0151      	lsls	r1, r2, #5
 80074da:	69fa      	ldr	r2, [r7, #28]
 80074dc:	440a      	add	r2, r1
 80074de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	69ba      	ldr	r2, [r7, #24]
 80074f8:	0151      	lsls	r1, r2, #5
 80074fa:	69fa      	ldr	r2, [r7, #28]
 80074fc:	440a      	add	r2, r1
 80074fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007502:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007506:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3720      	adds	r7, #32
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	1ff80000 	.word	0x1ff80000

08007518 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007518:	b480      	push	{r7}
 800751a:	b087      	sub	sp, #28
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	4613      	mov	r3, r2
 8007524:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	785b      	ldrb	r3, [r3, #1]
 8007534:	2b01      	cmp	r3, #1
 8007536:	f040 80ce 	bne.w	80076d6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d132      	bne.n	80075a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	015a      	lsls	r2, r3, #5
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	4413      	add	r3, r2
 800754a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	0151      	lsls	r1, r2, #5
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	440a      	add	r2, r1
 8007558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800755c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007560:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007564:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	015a      	lsls	r2, r3, #5
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	4413      	add	r3, r2
 800756e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	0151      	lsls	r1, r2, #5
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	440a      	add	r2, r1
 800757c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007580:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007584:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	4413      	add	r3, r2
 800758e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	0151      	lsls	r1, r2, #5
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	440a      	add	r2, r1
 800759c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075a0:	0cdb      	lsrs	r3, r3, #19
 80075a2:	04db      	lsls	r3, r3, #19
 80075a4:	6113      	str	r3, [r2, #16]
 80075a6:	e04e      	b.n	8007646 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	0151      	lsls	r1, r2, #5
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	440a      	add	r2, r1
 80075be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075c2:	0cdb      	lsrs	r3, r3, #19
 80075c4:	04db      	lsls	r3, r3, #19
 80075c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	693a      	ldr	r2, [r7, #16]
 80075d8:	0151      	lsls	r1, r2, #5
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	440a      	add	r2, r1
 80075de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80075e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80075ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	699a      	ldr	r2, [r3, #24]
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d903      	bls.n	8007600 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	68da      	ldr	r2, [r3, #12]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	015a      	lsls	r2, r3, #5
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	4413      	add	r3, r2
 8007608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	693a      	ldr	r2, [r7, #16]
 8007610:	0151      	lsls	r1, r2, #5
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	440a      	add	r2, r1
 8007616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800761a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800761e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	015a      	lsls	r2, r3, #5
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	4413      	add	r3, r2
 8007628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800762c:	691a      	ldr	r2, [r3, #16]
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007636:	6939      	ldr	r1, [r7, #16]
 8007638:	0148      	lsls	r0, r1, #5
 800763a:	6979      	ldr	r1, [r7, #20]
 800763c:	4401      	add	r1, r0
 800763e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007642:	4313      	orrs	r3, r2
 8007644:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007646:	79fb      	ldrb	r3, [r7, #7]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d11e      	bne.n	800768a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d009      	beq.n	8007668 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	4413      	add	r3, r2
 800765c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007660:	461a      	mov	r2, r3
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	015a      	lsls	r2, r3, #5
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	4413      	add	r3, r2
 8007670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	0151      	lsls	r1, r2, #5
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	440a      	add	r2, r1
 800767e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007682:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007686:	6013      	str	r3, [r2, #0]
 8007688:	e097      	b.n	80077ba <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	4413      	add	r3, r2
 8007692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	0151      	lsls	r1, r2, #5
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	440a      	add	r2, r1
 80076a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 8083 	beq.w	80077ba <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	f003 030f 	and.w	r3, r3, #15
 80076c4:	2101      	movs	r1, #1
 80076c6:	fa01 f303 	lsl.w	r3, r1, r3
 80076ca:	6979      	ldr	r1, [r7, #20]
 80076cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076d0:	4313      	orrs	r3, r2
 80076d2:	634b      	str	r3, [r1, #52]	; 0x34
 80076d4:	e071      	b.n	80077ba <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	015a      	lsls	r2, r3, #5
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	4413      	add	r3, r2
 80076de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	0151      	lsls	r1, r2, #5
 80076e8:	697a      	ldr	r2, [r7, #20]
 80076ea:	440a      	add	r2, r1
 80076ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076f0:	0cdb      	lsrs	r3, r3, #19
 80076f2:	04db      	lsls	r3, r3, #19
 80076f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	015a      	lsls	r2, r3, #5
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	4413      	add	r3, r2
 80076fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	0151      	lsls	r1, r2, #5
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	440a      	add	r2, r1
 800770c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007710:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007714:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007718:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d003      	beq.n	800772a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	68da      	ldr	r2, [r3, #12]
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	68da      	ldr	r2, [r3, #12]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	4413      	add	r3, r2
 800773a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	0151      	lsls	r1, r2, #5
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	440a      	add	r2, r1
 8007748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800774c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007750:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	015a      	lsls	r2, r3, #5
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	4413      	add	r3, r2
 800775a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800775e:	691a      	ldr	r2, [r3, #16]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	69db      	ldr	r3, [r3, #28]
 8007764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007768:	6939      	ldr	r1, [r7, #16]
 800776a:	0148      	lsls	r0, r1, #5
 800776c:	6979      	ldr	r1, [r7, #20]
 800776e:	4401      	add	r1, r0
 8007770:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007774:	4313      	orrs	r3, r2
 8007776:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007778:	79fb      	ldrb	r3, [r7, #7]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d10d      	bne.n	800779a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d009      	beq.n	800779a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	6919      	ldr	r1, [r3, #16]
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	015a      	lsls	r2, r3, #5
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	4413      	add	r3, r2
 8007792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007796:	460a      	mov	r2, r1
 8007798:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	0151      	lsls	r1, r2, #5
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	440a      	add	r2, r1
 80077b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	371c      	adds	r7, #28
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	785b      	ldrb	r3, [r3, #1]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d14a      	bne.n	800787c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077fe:	f040 8086 	bne.w	800790e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	4413      	add	r3, r2
 800780c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	683a      	ldr	r2, [r7, #0]
 8007814:	7812      	ldrb	r2, [r2, #0]
 8007816:	0151      	lsls	r1, r2, #5
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	440a      	add	r2, r1
 800781c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007820:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007824:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	4413      	add	r3, r2
 8007830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	7812      	ldrb	r2, [r2, #0]
 800783a:	0151      	lsls	r1, r2, #5
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	440a      	add	r2, r1
 8007840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007844:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007848:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3301      	adds	r3, #1
 800784e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f242 7210 	movw	r2, #10000	; 0x2710
 8007856:	4293      	cmp	r3, r2
 8007858:	d902      	bls.n	8007860 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	75fb      	strb	r3, [r7, #23]
          break;
 800785e:	e056      	b.n	800790e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	015a      	lsls	r2, r3, #5
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	4413      	add	r3, r2
 800786a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007874:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007878:	d0e7      	beq.n	800784a <USB_EPStopXfer+0x82>
 800787a:	e048      	b.n	800790e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007890:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007894:	d13b      	bne.n	800790e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	7812      	ldrb	r2, [r2, #0]
 80078aa:	0151      	lsls	r1, r2, #5
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	440a      	add	r2, r1
 80078b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	7812      	ldrb	r2, [r2, #0]
 80078ce:	0151      	lsls	r1, r2, #5
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	440a      	add	r2, r1
 80078d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	3301      	adds	r3, #1
 80078e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d902      	bls.n	80078f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	75fb      	strb	r3, [r7, #23]
          break;
 80078f2:	e00c      	b.n	800790e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	015a      	lsls	r2, r3, #5
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	4413      	add	r3, r2
 80078fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800790c:	d0e7      	beq.n	80078de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800790e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007910:	4618      	mov	r0, r3
 8007912:	371c      	adds	r7, #28
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800791c:	b480      	push	{r7}
 800791e:	b089      	sub	sp, #36	; 0x24
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	4611      	mov	r1, r2
 8007928:	461a      	mov	r2, r3
 800792a:	460b      	mov	r3, r1
 800792c:	71fb      	strb	r3, [r7, #7]
 800792e:	4613      	mov	r3, r2
 8007930:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800793a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800793e:	2b00      	cmp	r3, #0
 8007940:	d123      	bne.n	800798a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007942:	88bb      	ldrh	r3, [r7, #4]
 8007944:	3303      	adds	r3, #3
 8007946:	089b      	lsrs	r3, r3, #2
 8007948:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800794a:	2300      	movs	r3, #0
 800794c:	61bb      	str	r3, [r7, #24]
 800794e:	e018      	b.n	8007982 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007950:	79fb      	ldrb	r3, [r7, #7]
 8007952:	031a      	lsls	r2, r3, #12
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	4413      	add	r3, r2
 8007958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800795c:	461a      	mov	r2, r3
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	3301      	adds	r3, #1
 8007968:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	3301      	adds	r3, #1
 800796e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	3301      	adds	r3, #1
 8007974:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	3301      	adds	r3, #1
 800797a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	3301      	adds	r3, #1
 8007980:	61bb      	str	r3, [r7, #24]
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	429a      	cmp	r2, r3
 8007988:	d3e2      	bcc.n	8007950 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3724      	adds	r7, #36	; 0x24
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007998:	b480      	push	{r7}
 800799a:	b08b      	sub	sp, #44	; 0x2c
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	4613      	mov	r3, r2
 80079a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80079ae:	88fb      	ldrh	r3, [r7, #6]
 80079b0:	089b      	lsrs	r3, r3, #2
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80079b6:	88fb      	ldrh	r3, [r7, #6]
 80079b8:	f003 0303 	and.w	r3, r3, #3
 80079bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80079be:	2300      	movs	r3, #0
 80079c0:	623b      	str	r3, [r7, #32]
 80079c2:	e014      	b.n	80079ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80079d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d2:	3301      	adds	r3, #1
 80079d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d8:	3301      	adds	r3, #1
 80079da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079de:	3301      	adds	r3, #1
 80079e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80079e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e4:	3301      	adds	r3, #1
 80079e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80079e8:	6a3b      	ldr	r3, [r7, #32]
 80079ea:	3301      	adds	r3, #1
 80079ec:	623b      	str	r3, [r7, #32]
 80079ee:	6a3a      	ldr	r2, [r7, #32]
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d3e6      	bcc.n	80079c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80079f6:	8bfb      	ldrh	r3, [r7, #30]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d01e      	beq.n	8007a3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a06:	461a      	mov	r2, r3
 8007a08:	f107 0310 	add.w	r3, r7, #16
 8007a0c:	6812      	ldr	r2, [r2, #0]
 8007a0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	6a3b      	ldr	r3, [r7, #32]
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	00db      	lsls	r3, r3, #3
 8007a18:	fa22 f303 	lsr.w	r3, r2, r3
 8007a1c:	b2da      	uxtb	r2, r3
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a20:	701a      	strb	r2, [r3, #0]
      i++;
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	3301      	adds	r3, #1
 8007a26:	623b      	str	r3, [r7, #32]
      pDest++;
 8007a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007a2e:	8bfb      	ldrh	r3, [r7, #30]
 8007a30:	3b01      	subs	r3, #1
 8007a32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007a34:	8bfb      	ldrh	r3, [r7, #30]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1ea      	bne.n	8007a10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	372c      	adds	r7, #44	; 0x2c
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	785b      	ldrb	r3, [r3, #1]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d12c      	bne.n	8007abe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	db12      	blt.n	8007a9c <USB_EPSetStall+0x54>
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00f      	beq.n	8007a9c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	0151      	lsls	r1, r2, #5
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	440a      	add	r2, r1
 8007a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a9a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	0151      	lsls	r1, r2, #5
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	440a      	add	r2, r1
 8007ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ab6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007aba:	6013      	str	r3, [r2, #0]
 8007abc:	e02b      	b.n	8007b16 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	db12      	blt.n	8007af6 <USB_EPSetStall+0xae>
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00f      	beq.n	8007af6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	0151      	lsls	r1, r2, #5
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	440a      	add	r2, r1
 8007aec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007af0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007af4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	015a      	lsls	r2, r3, #5
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	4413      	add	r3, r2
 8007afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	0151      	lsls	r1, r2, #5
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	440a      	add	r2, r1
 8007b0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b085      	sub	sp, #20
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	785b      	ldrb	r3, [r3, #1]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d128      	bne.n	8007b92 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	0151      	lsls	r1, r2, #5
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	440a      	add	r2, r1
 8007b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	791b      	ldrb	r3, [r3, #4]
 8007b64:	2b03      	cmp	r3, #3
 8007b66:	d003      	beq.n	8007b70 <USB_EPClearStall+0x4c>
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	791b      	ldrb	r3, [r3, #4]
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d138      	bne.n	8007be2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	0151      	lsls	r1, r2, #5
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	440a      	add	r2, r1
 8007b86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b8e:	6013      	str	r3, [r2, #0]
 8007b90:	e027      	b.n	8007be2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	015a      	lsls	r2, r3, #5
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	4413      	add	r3, r2
 8007b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	0151      	lsls	r1, r2, #5
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	440a      	add	r2, r1
 8007ba8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bb0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	791b      	ldrb	r3, [r3, #4]
 8007bb6:	2b03      	cmp	r3, #3
 8007bb8:	d003      	beq.n	8007bc2 <USB_EPClearStall+0x9e>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	791b      	ldrb	r3, [r3, #4]
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d10f      	bne.n	8007be2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	015a      	lsls	r2, r3, #5
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	4413      	add	r3, r2
 8007bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	0151      	lsls	r1, r2, #5
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	440a      	add	r2, r1
 8007bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007be0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3714      	adds	r7, #20
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c0e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007c12:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	78fb      	ldrb	r3, [r7, #3]
 8007c1e:	011b      	lsls	r3, r3, #4
 8007c20:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007c24:	68f9      	ldr	r1, [r7, #12]
 8007c26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3714      	adds	r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c56:	f023 0303 	bic.w	r3, r3, #3
 8007c5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c6a:	f023 0302 	bic.w	r3, r3, #2
 8007c6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c7e:	b480      	push	{r7}
 8007c80:	b085      	sub	sp, #20
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c98:	f023 0303 	bic.w	r3, r3, #3
 8007c9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cac:	f043 0302 	orr.w	r3, r3, #2
 8007cb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	695b      	ldr	r3, [r3, #20]
 8007ccc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3714      	adds	r7, #20
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b085      	sub	sp, #20
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d02:	69db      	ldr	r3, [r3, #28]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	4013      	ands	r3, r2
 8007d08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	0c1b      	lsrs	r3, r3, #16
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b085      	sub	sp, #20
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d36:	69db      	ldr	r3, [r3, #28]
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	b29b      	uxth	r3, r3
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3714      	adds	r7, #20
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b085      	sub	sp, #20
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
 8007d56:	460b      	mov	r3, r1
 8007d58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007d5e:	78fb      	ldrb	r3, [r7, #3]
 8007d60:	015a      	lsls	r2, r3, #5
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	4413      	add	r3, r2
 8007d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	4013      	ands	r3, r2
 8007d7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b087      	sub	sp, #28
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	460b      	mov	r3, r1
 8007d94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007dae:	78fb      	ldrb	r3, [r7, #3]
 8007db0:	f003 030f 	and.w	r3, r3, #15
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	fa22 f303 	lsr.w	r3, r2, r3
 8007dba:	01db      	lsls	r3, r3, #7
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007dc4:	78fb      	ldrb	r3, [r7, #3]
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	693a      	ldr	r2, [r7, #16]
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007dd8:	68bb      	ldr	r3, [r7, #8]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	371c      	adds	r7, #28
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b083      	sub	sp, #12
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	f003 0301 	and.w	r3, r3, #1
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b085      	sub	sp, #20
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e1c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007e20:	f023 0307 	bic.w	r3, r3, #7
 8007e24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3714      	adds	r7, #20
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	460b      	mov	r3, r1
 8007e52:	607a      	str	r2, [r7, #4]
 8007e54:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	333c      	adds	r3, #60	; 0x3c
 8007e5e:	3304      	adds	r3, #4
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	4a26      	ldr	r2, [pc, #152]	; (8007f00 <USB_EP0_OutStart+0xb8>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d90a      	bls.n	8007e82 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e7c:	d101      	bne.n	8007e82 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	e037      	b.n	8007ef2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e88:	461a      	mov	r2, r3
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ea0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eb0:	f043 0318 	orr.w	r3, r3, #24
 8007eb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ec4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007ec8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007eca:	7afb      	ldrb	r3, [r7, #11]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d10f      	bne.n	8007ef0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	697a      	ldr	r2, [r7, #20]
 8007ee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007eee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	371c      	adds	r7, #28
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	4f54300a 	.word	0x4f54300a

08007f04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	3301      	adds	r3, #1
 8007f14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	4a13      	ldr	r2, [pc, #76]	; (8007f68 <USB_CoreReset+0x64>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d901      	bls.n	8007f22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f1e:	2303      	movs	r3, #3
 8007f20:	e01b      	b.n	8007f5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	daf2      	bge.n	8007f10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	f043 0201 	orr.w	r2, r3, #1
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3301      	adds	r3, #1
 8007f3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	4a09      	ldr	r2, [pc, #36]	; (8007f68 <USB_CoreReset+0x64>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d901      	bls.n	8007f4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e006      	b.n	8007f5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d0f0      	beq.n	8007f3a <USB_CoreReset+0x36>

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3714      	adds	r7, #20
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	00030d40 	.word	0x00030d40

08007f6c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8007f78:	2024      	movs	r0, #36	; 0x24
 8007f7a:	f002 faf9 	bl	800a570 <USBD_static_malloc>
 8007f7e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d109      	bne.n	8007f9a <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	32b0      	adds	r2, #176	; 0xb0
 8007f90:	2100      	movs	r1, #0
 8007f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007f96:	2302      	movs	r3, #2
 8007f98:	e08b      	b.n	80080b2 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	32b0      	adds	r2, #176	; 0xb0
 8007fa4:	68f9      	ldr	r1, [r7, #12]
 8007fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	32b0      	adds	r2, #176	; 0xb0
 8007fb4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	7c1b      	ldrb	r3, [r3, #16]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d11b      	bne.n	8007ffe <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007fc6:	4b3d      	ldr	r3, [pc, #244]	; (80080bc <USBD_CUSTOM_HID_Init+0x150>)
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	f003 020f 	and.w	r2, r3, #15
 8007fce:	6879      	ldr	r1, [r7, #4]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4413      	add	r3, r2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	440b      	add	r3, r1
 8007fda:	3326      	adds	r3, #38	; 0x26
 8007fdc:	2205      	movs	r2, #5
 8007fde:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8007fe0:	4b37      	ldr	r3, [pc, #220]	; (80080c0 <USBD_CUSTOM_HID_Init+0x154>)
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	f003 020f 	and.w	r2, r3, #15
 8007fe8:	6879      	ldr	r1, [r7, #4]
 8007fea:	4613      	mov	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4413      	add	r3, r2
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	440b      	add	r3, r1
 8007ff4:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8007ff8:	2205      	movs	r2, #5
 8007ffa:	801a      	strh	r2, [r3, #0]
 8007ffc:	e01a      	b.n	8008034 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8007ffe:	4b2f      	ldr	r3, [pc, #188]	; (80080bc <USBD_CUSTOM_HID_Init+0x150>)
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	f003 020f 	and.w	r2, r3, #15
 8008006:	6879      	ldr	r1, [r7, #4]
 8008008:	4613      	mov	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4413      	add	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	440b      	add	r3, r1
 8008012:	3326      	adds	r3, #38	; 0x26
 8008014:	2205      	movs	r2, #5
 8008016:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008018:	4b29      	ldr	r3, [pc, #164]	; (80080c0 <USBD_CUSTOM_HID_Init+0x154>)
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	f003 020f 	and.w	r2, r3, #15
 8008020:	6879      	ldr	r1, [r7, #4]
 8008022:	4613      	mov	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4413      	add	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	440b      	add	r3, r1
 800802c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8008030:	2205      	movs	r2, #5
 8008032:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8008034:	4b21      	ldr	r3, [pc, #132]	; (80080bc <USBD_CUSTOM_HID_Init+0x150>)
 8008036:	7819      	ldrb	r1, [r3, #0]
 8008038:	2310      	movs	r3, #16
 800803a:	2203      	movs	r2, #3
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f002 f986 	bl	800a34e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8008042:	4b1e      	ldr	r3, [pc, #120]	; (80080bc <USBD_CUSTOM_HID_Init+0x150>)
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	f003 020f 	and.w	r2, r3, #15
 800804a:	6879      	ldr	r1, [r7, #4]
 800804c:	4613      	mov	r3, r2
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	4413      	add	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	440b      	add	r3, r1
 8008056:	3324      	adds	r3, #36	; 0x24
 8008058:	2201      	movs	r2, #1
 800805a:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 800805c:	4b18      	ldr	r3, [pc, #96]	; (80080c0 <USBD_CUSTOM_HID_Init+0x154>)
 800805e:	7819      	ldrb	r1, [r3, #0]
 8008060:	2310      	movs	r3, #16
 8008062:	2203      	movs	r2, #3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f002 f972 	bl	800a34e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800806a:	4b15      	ldr	r3, [pc, #84]	; (80080c0 <USBD_CUSTOM_HID_Init+0x154>)
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	f003 020f 	and.w	r2, r3, #15
 8008072:	6879      	ldr	r1, [r7, #4]
 8008074:	4613      	mov	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	440b      	add	r3, r1
 800807e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008082:	2201      	movs	r2, #1
 8008084:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 2020 	strb.w	r2, [r3, #32]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	33b0      	adds	r3, #176	; 0xb0
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4413      	add	r3, r2
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80080a2:	4b07      	ldr	r3, [pc, #28]	; (80080c0 <USBD_CUSTOM_HID_Init+0x154>)
 80080a4:	7819      	ldrb	r1, [r3, #0]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	2310      	movs	r3, #16
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f002 fa3e 	bl	800a52c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	20000096 	.word	0x20000096
 80080c0:	20000097 	.word	0x20000097

080080c4 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	460b      	mov	r3, r1
 80080ce:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 80080d0:	4b37      	ldr	r3, [pc, #220]	; (80081b0 <USBD_CUSTOM_HID_DeInit+0xec>)
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	4619      	mov	r1, r3
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f002 f95f 	bl	800a39a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 80080dc:	4b34      	ldr	r3, [pc, #208]	; (80081b0 <USBD_CUSTOM_HID_DeInit+0xec>)
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	f003 020f 	and.w	r2, r3, #15
 80080e4:	6879      	ldr	r1, [r7, #4]
 80080e6:	4613      	mov	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	4413      	add	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	440b      	add	r3, r1
 80080f0:	3324      	adds	r3, #36	; 0x24
 80080f2:	2200      	movs	r2, #0
 80080f4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80080f6:	4b2e      	ldr	r3, [pc, #184]	; (80081b0 <USBD_CUSTOM_HID_DeInit+0xec>)
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	f003 020f 	and.w	r2, r3, #15
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	4613      	mov	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	440b      	add	r3, r1
 800810a:	3326      	adds	r3, #38	; 0x26
 800810c:	2200      	movs	r2, #0
 800810e:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8008110:	4b28      	ldr	r3, [pc, #160]	; (80081b4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f002 f93f 	bl	800a39a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 800811c:	4b25      	ldr	r3, [pc, #148]	; (80081b4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	f003 020f 	and.w	r2, r3, #15
 8008124:	6879      	ldr	r1, [r7, #4]
 8008126:	4613      	mov	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4413      	add	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	440b      	add	r3, r1
 8008130:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008134:	2200      	movs	r2, #0
 8008136:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8008138:	4b1e      	ldr	r3, [pc, #120]	; (80081b4 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	f003 020f 	and.w	r2, r3, #15
 8008140:	6879      	ldr	r1, [r7, #4]
 8008142:	4613      	mov	r3, r2
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	4413      	add	r3, r2
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	440b      	add	r3, r1
 800814c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8008150:	2200      	movs	r2, #0
 8008152:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	32b0      	adds	r2, #176	; 0xb0
 800815e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d01f      	beq.n	80081a6 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	33b0      	adds	r3, #176	; 0xb0
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4413      	add	r3, r2
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	32b0      	adds	r2, #176	; 0xb0
 8008184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008188:	4618      	mov	r0, r3
 800818a:	f002 f9ff 	bl	800a58c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	32b0      	adds	r2, #176	; 0xb0
 8008198:	2100      	movs	r1, #0
 800819a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	20000096 	.word	0x20000096
 80081b4:	20000097 	.word	0x20000097

080081b8 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b088      	sub	sp, #32
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	32b0      	adds	r2, #176	; 0xb0
 80081cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80081d2:	2300      	movs	r3, #0
 80081d4:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80081d6:	2300      	movs	r3, #0
 80081d8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80081da:	2300      	movs	r3, #0
 80081dc:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80081de:	2300      	movs	r3, #0
 80081e0:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d101      	bne.n	80081ec <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 80081e8:	2303      	movs	r3, #3
 80081ea:	e0f8      	b.n	80083de <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d056      	beq.n	80082a6 <USBD_CUSTOM_HID_Setup+0xee>
 80081f8:	2b20      	cmp	r3, #32
 80081fa:	f040 80e8 	bne.w	80083ce <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	785b      	ldrb	r3, [r3, #1]
 8008202:	3b02      	subs	r3, #2
 8008204:	2b09      	cmp	r3, #9
 8008206:	d846      	bhi.n	8008296 <USBD_CUSTOM_HID_Setup+0xde>
 8008208:	a201      	add	r2, pc, #4	; (adr r2, 8008210 <USBD_CUSTOM_HID_Setup+0x58>)
 800820a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820e:	bf00      	nop
 8008210:	08008269 	.word	0x08008269
 8008214:	08008247 	.word	0x08008247
 8008218:	08008297 	.word	0x08008297
 800821c:	08008297 	.word	0x08008297
 8008220:	08008297 	.word	0x08008297
 8008224:	08008297 	.word	0x08008297
 8008228:	08008297 	.word	0x08008297
 800822c:	08008279 	.word	0x08008279
 8008230:	08008257 	.word	0x08008257
 8008234:	08008239 	.word	0x08008239
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	885b      	ldrh	r3, [r3, #2]
 800823c:	b2db      	uxtb	r3, r3
 800823e:	461a      	mov	r2, r3
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	611a      	str	r2, [r3, #16]
          break;
 8008244:	e02e      	b.n	80082a4 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	3310      	adds	r3, #16
 800824a:	2201      	movs	r2, #1
 800824c:	4619      	mov	r1, r3
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f001 fcce 	bl	8009bf0 <USBD_CtlSendData>
          break;
 8008254:	e026      	b.n	80082a4 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	885b      	ldrh	r3, [r3, #2]
 800825a:	0a1b      	lsrs	r3, r3, #8
 800825c:	b29b      	uxth	r3, r3
 800825e:	b2db      	uxtb	r3, r3
 8008260:	461a      	mov	r2, r3
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	615a      	str	r2, [r3, #20]
          break;
 8008266:	e01d      	b.n	80082a4 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	3314      	adds	r3, #20
 800826c:	2201      	movs	r2, #1
 800826e:	4619      	mov	r1, r3
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f001 fcbd 	bl	8009bf0 <USBD_CtlSendData>
          break;
 8008276:	e015      	b.n	80082a4 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	2201      	movs	r2, #1
 800827c:	61da      	str	r2, [r3, #28]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800827e:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	88db      	ldrh	r3, [r3, #6]
 8008284:	2b10      	cmp	r3, #16
 8008286:	bf28      	it	cs
 8008288:	2310      	movcs	r3, #16
 800828a:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800828c:	461a      	mov	r2, r3
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f001 fcda 	bl	8009c48 <USBD_CtlPrepareRx>
          break;
 8008294:	e006      	b.n	80082a4 <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 8008296:	6839      	ldr	r1, [r7, #0]
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f001 fc38 	bl	8009b0e <USBD_CtlError>
          ret = USBD_FAIL;
 800829e:	2303      	movs	r3, #3
 80082a0:	75fb      	strb	r3, [r7, #23]
          break;
 80082a2:	bf00      	nop
      }
      break;
 80082a4:	e09a      	b.n	80083dc <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	785b      	ldrb	r3, [r3, #1]
 80082aa:	2b0b      	cmp	r3, #11
 80082ac:	f200 8086 	bhi.w	80083bc <USBD_CUSTOM_HID_Setup+0x204>
 80082b0:	a201      	add	r2, pc, #4	; (adr r2, 80082b8 <USBD_CUSTOM_HID_Setup+0x100>)
 80082b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b6:	bf00      	nop
 80082b8:	080082e9 	.word	0x080082e9
 80082bc:	080083cb 	.word	0x080083cb
 80082c0:	080083bd 	.word	0x080083bd
 80082c4:	080083bd 	.word	0x080083bd
 80082c8:	080083bd 	.word	0x080083bd
 80082cc:	080083bd 	.word	0x080083bd
 80082d0:	08008313 	.word	0x08008313
 80082d4:	080083bd 	.word	0x080083bd
 80082d8:	080083bd 	.word	0x080083bd
 80082dc:	080083bd 	.word	0x080083bd
 80082e0:	0800836b 	.word	0x0800836b
 80082e4:	08008395 	.word	0x08008395
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	2b03      	cmp	r3, #3
 80082f2:	d107      	bne.n	8008304 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80082f4:	f107 030e 	add.w	r3, r7, #14
 80082f8:	2202      	movs	r2, #2
 80082fa:	4619      	mov	r1, r3
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f001 fc77 	bl	8009bf0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008302:	e063      	b.n	80083cc <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008304:	6839      	ldr	r1, [r7, #0]
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f001 fc01 	bl	8009b0e <USBD_CtlError>
            ret = USBD_FAIL;
 800830c:	2303      	movs	r3, #3
 800830e:	75fb      	strb	r3, [r7, #23]
          break;
 8008310:	e05c      	b.n	80083cc <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	885b      	ldrh	r3, [r3, #2]
 8008316:	0a1b      	lsrs	r3, r3, #8
 8008318:	b29b      	uxth	r3, r3
 800831a:	2b22      	cmp	r3, #34	; 0x22
 800831c:	d110      	bne.n	8008340 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	88db      	ldrh	r3, [r3, #6]
 8008322:	2b2d      	cmp	r3, #45	; 0x2d
 8008324:	bf28      	it	cs
 8008326:	232d      	movcs	r3, #45	; 0x2d
 8008328:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	33b0      	adds	r3, #176	; 0xb0
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	61bb      	str	r3, [r7, #24]
 800833e:	e00d      	b.n	800835c <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	885b      	ldrh	r3, [r3, #2]
 8008344:	0a1b      	lsrs	r3, r3, #8
 8008346:	b29b      	uxth	r3, r3
 8008348:	2b21      	cmp	r3, #33	; 0x21
 800834a:	d107      	bne.n	800835c <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800834c:	4b26      	ldr	r3, [pc, #152]	; (80083e8 <USBD_CUSTOM_HID_Setup+0x230>)
 800834e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	88db      	ldrh	r3, [r3, #6]
 8008354:	2b09      	cmp	r3, #9
 8008356:	bf28      	it	cs
 8008358:	2309      	movcs	r3, #9
 800835a:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800835c:	8bfb      	ldrh	r3, [r7, #30]
 800835e:	461a      	mov	r2, r3
 8008360:	69b9      	ldr	r1, [r7, #24]
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f001 fc44 	bl	8009bf0 <USBD_CtlSendData>
          break;
 8008368:	e030      	b.n	80083cc <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b03      	cmp	r3, #3
 8008374:	d107      	bne.n	8008386 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	3318      	adds	r3, #24
 800837a:	2201      	movs	r2, #1
 800837c:	4619      	mov	r1, r3
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f001 fc36 	bl	8009bf0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008384:	e022      	b.n	80083cc <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f001 fbc0 	bl	8009b0e <USBD_CtlError>
            ret = USBD_FAIL;
 800838e:	2303      	movs	r3, #3
 8008390:	75fb      	strb	r3, [r7, #23]
          break;
 8008392:	e01b      	b.n	80083cc <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2b03      	cmp	r3, #3
 800839e:	d106      	bne.n	80083ae <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	885b      	ldrh	r3, [r3, #2]
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	461a      	mov	r2, r3
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	619a      	str	r2, [r3, #24]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083ac:	e00e      	b.n	80083cc <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80083ae:	6839      	ldr	r1, [r7, #0]
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f001 fbac 	bl	8009b0e <USBD_CtlError>
            ret = USBD_FAIL;
 80083b6:	2303      	movs	r3, #3
 80083b8:	75fb      	strb	r3, [r7, #23]
          break;
 80083ba:	e007      	b.n	80083cc <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80083bc:	6839      	ldr	r1, [r7, #0]
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f001 fba5 	bl	8009b0e <USBD_CtlError>
          ret = USBD_FAIL;
 80083c4:	2303      	movs	r3, #3
 80083c6:	75fb      	strb	r3, [r7, #23]
          break;
 80083c8:	e000      	b.n	80083cc <USBD_CUSTOM_HID_Setup+0x214>
          break;
 80083ca:	bf00      	nop
      }
      break;
 80083cc:	e006      	b.n	80083dc <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f001 fb9c 	bl	8009b0e <USBD_CtlError>
      ret = USBD_FAIL;
 80083d6:	2303      	movs	r3, #3
 80083d8:	75fb      	strb	r3, [r7, #23]
      break;
 80083da:	bf00      	nop
  }
  return (uint8_t)ret;
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3720      	adds	r7, #32
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	20000080 	.word	0x20000080

080083ec <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	4613      	mov	r3, r2
 80083f8:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	32b0      	adds	r2, #176	; 0xb0
 8008404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d101      	bne.n	8008410 <USBD_CUSTOM_HID_SendReport+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800840c:	2303      	movs	r3, #3
 800840e:	e021      	b.n	8008454 <USBD_CUSTOM_HID_SendReport+0x68>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	32b0      	adds	r2, #176	; 0xb0
 800841a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841e:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008426:	b2db      	uxtb	r3, r3
 8008428:	2b03      	cmp	r3, #3
 800842a:	d112      	bne.n	8008452 <USBD_CUSTOM_HID_SendReport+0x66>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10b      	bne.n	800844e <USBD_CUSTOM_HID_SendReport+0x62>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 2020 	strb.w	r2, [r3, #32]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 800843e:	4b07      	ldr	r3, [pc, #28]	; (800845c <USBD_CUSTOM_HID_SendReport+0x70>)
 8008440:	7819      	ldrb	r1, [r3, #0]
 8008442:	88fb      	ldrh	r3, [r7, #6]
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f002 f84f 	bl	800a4ea <USBD_LL_Transmit>
 800844c:	e001      	b.n	8008452 <USBD_CUSTOM_HID_SendReport+0x66>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800844e:	2301      	movs	r3, #1
 8008450:	e000      	b.n	8008454 <USBD_CUSTOM_HID_SendReport+0x68>
    }
  }
  return (uint8_t)USBD_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3718      	adds	r7, #24
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	20000096 	.word	0x20000096

08008460 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008468:	2181      	movs	r1, #129	; 0x81
 800846a:	4815      	ldr	r0, [pc, #84]	; (80084c0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 800846c:	f000 fd17 	bl	8008e9e <USBD_GetEpDesc>
 8008470:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008472:	2101      	movs	r1, #1
 8008474:	4812      	ldr	r0, [pc, #72]	; (80084c0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008476:	f000 fd12 	bl	8008e9e <USBD_GetEpDesc>
 800847a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d009      	beq.n	8008496 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	f042 0210 	orr.w	r2, r2, #16
 800848a:	711a      	strb	r2, [r3, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2205      	movs	r2, #5
 8008494:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d009      	beq.n	80084b0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2200      	movs	r2, #0
 80084a0:	f042 0210 	orr.w	r2, r2, #16
 80084a4:	711a      	strb	r2, [r3, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	2205      	movs	r2, #5
 80084ae:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2229      	movs	r2, #41	; 0x29
 80084b4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80084b6:	4b02      	ldr	r3, [pc, #8]	; (80084c0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	20000054 	.word	0x20000054

080084c4 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80084cc:	2181      	movs	r1, #129	; 0x81
 80084ce:	4815      	ldr	r0, [pc, #84]	; (8008524 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80084d0:	f000 fce5 	bl	8008e9e <USBD_GetEpDesc>
 80084d4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80084d6:	2101      	movs	r1, #1
 80084d8:	4812      	ldr	r0, [pc, #72]	; (8008524 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80084da:	f000 fce0 	bl	8008e9e <USBD_GetEpDesc>
 80084de:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d009      	beq.n	80084fa <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f042 0210 	orr.w	r2, r2, #16
 80084ee:	711a      	strb	r2, [r3, #4]
 80084f0:	2200      	movs	r2, #0
 80084f2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2205      	movs	r2, #5
 80084f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d009      	beq.n	8008514 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2200      	movs	r2, #0
 8008504:	f042 0210 	orr.w	r2, r2, #16
 8008508:	711a      	strb	r2, [r3, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	2205      	movs	r2, #5
 8008512:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2229      	movs	r2, #41	; 0x29
 8008518:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800851a:	4b02      	ldr	r3, [pc, #8]	; (8008524 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 800851c:	4618      	mov	r0, r3
 800851e:	3710      	adds	r7, #16
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}
 8008524:	20000054 	.word	0x20000054

08008528 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008530:	2181      	movs	r1, #129	; 0x81
 8008532:	4815      	ldr	r0, [pc, #84]	; (8008588 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008534:	f000 fcb3 	bl	8008e9e <USBD_GetEpDesc>
 8008538:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800853a:	2101      	movs	r1, #1
 800853c:	4812      	ldr	r0, [pc, #72]	; (8008588 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800853e:	f000 fcae 	bl	8008e9e <USBD_GetEpDesc>
 8008542:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d009      	beq.n	800855e <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	f042 0210 	orr.w	r2, r2, #16
 8008552:	711a      	strb	r2, [r3, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2205      	movs	r2, #5
 800855c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d009      	beq.n	8008578 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	2200      	movs	r2, #0
 8008568:	f042 0210 	orr.w	r2, r2, #16
 800856c:	711a      	strb	r2, [r3, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	2205      	movs	r2, #5
 8008576:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2229      	movs	r2, #41	; 0x29
 800857c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800857e:	4b02      	ldr	r3, [pc, #8]	; (8008588 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8008580:	4618      	mov	r0, r3
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	20000054 	.word	0x20000054

0800858c <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800858c:	b480      	push	{r7}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	460b      	mov	r3, r1
 8008596:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	32b0      	adds	r2, #176	; 0xb0
 80085a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 2020 	strb.w	r2, [r3, #32]

  return (uint8_t)USBD_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b084      	sub	sp, #16
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	460b      	mov	r3, r1
 80085c4:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	32b0      	adds	r2, #176	; 0xb0
 80085d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d101      	bne.n	80085dc <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80085d8:	2303      	movs	r3, #3
 80085da:	e017      	b.n	800860c <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	32b0      	adds	r2, #176	; 0xb0
 80085e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ea:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	33b0      	adds	r3, #176	; 0xb0
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	4413      	add	r3, r2
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	7810      	ldrb	r0, [r2, #0]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	7852      	ldrb	r2, [r2, #1]
 8008606:	4611      	mov	r1, r2
 8008608:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	32b0      	adds	r2, #176	; 0xb0
 8008626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d101      	bne.n	8008632 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800862e:	2303      	movs	r3, #3
 8008630:	e00f      	b.n	8008652 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	32b0      	adds	r2, #176	; 0xb0
 800863c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008640:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8008642:	4b06      	ldr	r3, [pc, #24]	; (800865c <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8008644:	7819      	ldrb	r1, [r3, #0]
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	2310      	movs	r3, #16
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f001 ff6e 	bl	800a52c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	20000097 	.word	0x20000097

08008660 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	32b0      	adds	r2, #176	; 0xb0
 8008672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008676:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800867e:	2303      	movs	r3, #3
 8008680:	e016      	b.n	80086b0 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	69db      	ldr	r3, [r3, #28]
 8008686:	2b01      	cmp	r3, #1
 8008688:	d111      	bne.n	80086ae <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	33b0      	adds	r3, #176	; 0xb0
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	4413      	add	r3, r2
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	7810      	ldrb	r0, [r2, #0]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	7852      	ldrb	r2, [r2, #1]
 80086a4:	4611      	mov	r1, r2
 80086a6:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2200      	movs	r2, #0
 80086ac:	61da      	str	r2, [r3, #28]
  }

  return (uint8_t)USBD_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b083      	sub	sp, #12
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	220a      	movs	r2, #10
 80086c4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80086c6:	4b03      	ldr	r3, [pc, #12]	; (80086d4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr
 80086d4:	2000008c 	.word	0x2000008c

080086d8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d101      	bne.n	80086ec <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80086e8:	2303      	movs	r3, #3
 80086ea:	e009      	b.n	8008700 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	33b0      	adds	r3, #176	; 0xb0
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4413      	add	r3, r2
 80086fa:	683a      	ldr	r2, [r7, #0]
 80086fc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	4613      	mov	r3, r2
 8008718:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d101      	bne.n	8008724 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008720:	2303      	movs	r3, #3
 8008722:	e01f      	b.n	8008764 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2200      	movs	r2, #0
 8008728:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2200      	movs	r2, #0
 8008730:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2200      	movs	r2, #0
 8008738:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d003      	beq.n	800874a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	68ba      	ldr	r2, [r7, #8]
 8008746:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	79fa      	ldrb	r2, [r7, #7]
 8008756:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f001 fd91 	bl	800a280 <USBD_LL_Init>
 800875e:	4603      	mov	r3, r0
 8008760:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008762:	7dfb      	ldrb	r3, [r7, #23]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3718      	adds	r7, #24
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008776:	2300      	movs	r3, #0
 8008778:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d101      	bne.n	8008784 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008780:	2303      	movs	r3, #3
 8008782:	e025      	b.n	80087d0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	683a      	ldr	r2, [r7, #0]
 8008788:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	32ae      	adds	r2, #174	; 0xae
 8008796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00f      	beq.n	80087c0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	32ae      	adds	r2, #174	; 0xae
 80087aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b0:	f107 020e 	add.w	r2, r7, #14
 80087b4:	4610      	mov	r0, r2
 80087b6:	4798      	blx	r3
 80087b8:	4602      	mov	r2, r0
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80087c6:	1c5a      	adds	r2, r3, #1
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3710      	adds	r7, #16
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f001 fd99 	bl	800a318 <USBD_LL_Start>
 80087e6:	4603      	mov	r3, r0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80087f8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b084      	sub	sp, #16
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	460b      	mov	r3, r1
 8008810:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008812:	2300      	movs	r3, #0
 8008814:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800881c:	2b00      	cmp	r3, #0
 800881e:	d009      	beq.n	8008834 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	78fa      	ldrb	r2, [r7, #3]
 800882a:	4611      	mov	r1, r2
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	4798      	blx	r3
 8008830:	4603      	mov	r3, r0
 8008832:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008834:	7bfb      	ldrb	r3, [r7, #15]
}
 8008836:	4618      	mov	r0, r3
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	460b      	mov	r3, r1
 8008848:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	78fa      	ldrb	r2, [r7, #3]
 8008858:	4611      	mov	r1, r2
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	4798      	blx	r3
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d001      	beq.n	8008868 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008864:	2303      	movs	r3, #3
 8008866:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008868:	7bfb      	ldrb	r3, [r7, #15]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	4618      	mov	r0, r3
 8008886:	f001 f908 	bl	8009a9a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2201      	movs	r2, #1
 800888e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008898:	461a      	mov	r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80088a6:	f003 031f 	and.w	r3, r3, #31
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d01a      	beq.n	80088e4 <USBD_LL_SetupStage+0x72>
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d822      	bhi.n	80088f8 <USBD_LL_SetupStage+0x86>
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d002      	beq.n	80088bc <USBD_LL_SetupStage+0x4a>
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d00a      	beq.n	80088d0 <USBD_LL_SetupStage+0x5e>
 80088ba:	e01d      	b.n	80088f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80088c2:	4619      	mov	r1, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 fb5f 	bl	8008f88 <USBD_StdDevReq>
 80088ca:	4603      	mov	r3, r0
 80088cc:	73fb      	strb	r3, [r7, #15]
      break;
 80088ce:	e020      	b.n	8008912 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80088d6:	4619      	mov	r1, r3
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fbc7 	bl	800906c <USBD_StdItfReq>
 80088de:	4603      	mov	r3, r0
 80088e0:	73fb      	strb	r3, [r7, #15]
      break;
 80088e2:	e016      	b.n	8008912 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80088ea:	4619      	mov	r1, r3
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f000 fc29 	bl	8009144 <USBD_StdEPReq>
 80088f2:	4603      	mov	r3, r0
 80088f4:	73fb      	strb	r3, [r7, #15]
      break;
 80088f6:	e00c      	b.n	8008912 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80088fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008902:	b2db      	uxtb	r3, r3
 8008904:	4619      	mov	r1, r3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f001 fd66 	bl	800a3d8 <USBD_LL_StallEP>
 800890c:	4603      	mov	r3, r0
 800890e:	73fb      	strb	r3, [r7, #15]
      break;
 8008910:	bf00      	nop
  }

  return ret;
 8008912:	7bfb      	ldrb	r3, [r7, #15]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	460b      	mov	r3, r1
 8008926:	607a      	str	r2, [r7, #4]
 8008928:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800892a:	2300      	movs	r3, #0
 800892c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800892e:	7afb      	ldrb	r3, [r7, #11]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d16e      	bne.n	8008a12 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800893a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008942:	2b03      	cmp	r3, #3
 8008944:	f040 8098 	bne.w	8008a78 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	689a      	ldr	r2, [r3, #8]
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	429a      	cmp	r2, r3
 8008952:	d913      	bls.n	800897c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	689a      	ldr	r2, [r3, #8]
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	1ad2      	subs	r2, r2, r3
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	68da      	ldr	r2, [r3, #12]
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	4293      	cmp	r3, r2
 800896c:	bf28      	it	cs
 800896e:	4613      	movcs	r3, r2
 8008970:	461a      	mov	r2, r3
 8008972:	6879      	ldr	r1, [r7, #4]
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f001 f984 	bl	8009c82 <USBD_CtlContinueRx>
 800897a:	e07d      	b.n	8008a78 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008982:	f003 031f 	and.w	r3, r3, #31
 8008986:	2b02      	cmp	r3, #2
 8008988:	d014      	beq.n	80089b4 <USBD_LL_DataOutStage+0x98>
 800898a:	2b02      	cmp	r3, #2
 800898c:	d81d      	bhi.n	80089ca <USBD_LL_DataOutStage+0xae>
 800898e:	2b00      	cmp	r3, #0
 8008990:	d002      	beq.n	8008998 <USBD_LL_DataOutStage+0x7c>
 8008992:	2b01      	cmp	r3, #1
 8008994:	d003      	beq.n	800899e <USBD_LL_DataOutStage+0x82>
 8008996:	e018      	b.n	80089ca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008998:	2300      	movs	r3, #0
 800899a:	75bb      	strb	r3, [r7, #22]
            break;
 800899c:	e018      	b.n	80089d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	4619      	mov	r1, r3
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f000 fa5e 	bl	8008e6a <USBD_CoreFindIF>
 80089ae:	4603      	mov	r3, r0
 80089b0:	75bb      	strb	r3, [r7, #22]
            break;
 80089b2:	e00d      	b.n	80089d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	4619      	mov	r1, r3
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f000 fa60 	bl	8008e84 <USBD_CoreFindEP>
 80089c4:	4603      	mov	r3, r0
 80089c6:	75bb      	strb	r3, [r7, #22]
            break;
 80089c8:	e002      	b.n	80089d0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80089ca:	2300      	movs	r3, #0
 80089cc:	75bb      	strb	r3, [r7, #22]
            break;
 80089ce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80089d0:	7dbb      	ldrb	r3, [r7, #22]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d119      	bne.n	8008a0a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b03      	cmp	r3, #3
 80089e0:	d113      	bne.n	8008a0a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80089e2:	7dba      	ldrb	r2, [r7, #22]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	32ae      	adds	r2, #174	; 0xae
 80089e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00b      	beq.n	8008a0a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80089f2:	7dba      	ldrb	r2, [r7, #22]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80089fa:	7dba      	ldrb	r2, [r7, #22]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	32ae      	adds	r2, #174	; 0xae
 8008a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f001 f94a 	bl	8009ca4 <USBD_CtlSendStatus>
 8008a10:	e032      	b.n	8008a78 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008a12:	7afb      	ldrb	r3, [r7, #11]
 8008a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f000 fa31 	bl	8008e84 <USBD_CoreFindEP>
 8008a22:	4603      	mov	r3, r0
 8008a24:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a26:	7dbb      	ldrb	r3, [r7, #22]
 8008a28:	2bff      	cmp	r3, #255	; 0xff
 8008a2a:	d025      	beq.n	8008a78 <USBD_LL_DataOutStage+0x15c>
 8008a2c:	7dbb      	ldrb	r3, [r7, #22]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d122      	bne.n	8008a78 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b03      	cmp	r3, #3
 8008a3c:	d117      	bne.n	8008a6e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008a3e:	7dba      	ldrb	r2, [r7, #22]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	32ae      	adds	r2, #174	; 0xae
 8008a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a48:	699b      	ldr	r3, [r3, #24]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00f      	beq.n	8008a6e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008a4e:	7dba      	ldrb	r2, [r7, #22]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008a56:	7dba      	ldrb	r2, [r7, #22]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	32ae      	adds	r2, #174	; 0xae
 8008a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a60:	699b      	ldr	r3, [r3, #24]
 8008a62:	7afa      	ldrb	r2, [r7, #11]
 8008a64:	4611      	mov	r1, r2
 8008a66:	68f8      	ldr	r0, [r7, #12]
 8008a68:	4798      	blx	r3
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008a6e:	7dfb      	ldrb	r3, [r7, #23]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d001      	beq.n	8008a78 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008a74:	7dfb      	ldrb	r3, [r7, #23]
 8008a76:	e000      	b.n	8008a7a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3718      	adds	r7, #24
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b086      	sub	sp, #24
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	60f8      	str	r0, [r7, #12]
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	607a      	str	r2, [r7, #4]
 8008a8e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008a90:	7afb      	ldrb	r3, [r7, #11]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d16f      	bne.n	8008b76 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	3314      	adds	r3, #20
 8008a9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	d15a      	bne.n	8008b5c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	689a      	ldr	r2, [r3, #8]
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d914      	bls.n	8008adc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	689a      	ldr	r2, [r3, #8]
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	1ad2      	subs	r2, r2, r3
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	6879      	ldr	r1, [r7, #4]
 8008ac8:	68f8      	ldr	r0, [r7, #12]
 8008aca:	f001 f8ac 	bl	8009c26 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ace:	2300      	movs	r3, #0
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f001 fd29 	bl	800a52c <USBD_LL_PrepareReceive>
 8008ada:	e03f      	b.n	8008b5c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	68da      	ldr	r2, [r3, #12]
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d11c      	bne.n	8008b22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d316      	bcc.n	8008b22 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	685a      	ldr	r2, [r3, #4]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d20f      	bcs.n	8008b22 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b02:	2200      	movs	r2, #0
 8008b04:	2100      	movs	r1, #0
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f001 f88d 	bl	8009c26 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b14:	2300      	movs	r3, #0
 8008b16:	2200      	movs	r2, #0
 8008b18:	2100      	movs	r1, #0
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f001 fd06 	bl	800a52c <USBD_LL_PrepareReceive>
 8008b20:	e01c      	b.n	8008b5c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	2b03      	cmp	r3, #3
 8008b2c:	d10f      	bne.n	8008b4e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d009      	beq.n	8008b4e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b4e:	2180      	movs	r1, #128	; 0x80
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f001 fc41 	bl	800a3d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008b56:	68f8      	ldr	r0, [r7, #12]
 8008b58:	f001 f8b7 	bl	8009cca <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d03a      	beq.n	8008bdc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	f7ff fe42 	bl	80087f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008b74:	e032      	b.n	8008bdc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008b76:	7afb      	ldrb	r3, [r7, #11]
 8008b78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	4619      	mov	r1, r3
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f000 f97f 	bl	8008e84 <USBD_CoreFindEP>
 8008b86:	4603      	mov	r3, r0
 8008b88:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b8a:	7dfb      	ldrb	r3, [r7, #23]
 8008b8c:	2bff      	cmp	r3, #255	; 0xff
 8008b8e:	d025      	beq.n	8008bdc <USBD_LL_DataInStage+0x15a>
 8008b90:	7dfb      	ldrb	r3, [r7, #23]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d122      	bne.n	8008bdc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b03      	cmp	r3, #3
 8008ba0:	d11c      	bne.n	8008bdc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008ba2:	7dfa      	ldrb	r2, [r7, #23]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	32ae      	adds	r2, #174	; 0xae
 8008ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bac:	695b      	ldr	r3, [r3, #20]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d014      	beq.n	8008bdc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008bb2:	7dfa      	ldrb	r2, [r7, #23]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008bba:	7dfa      	ldrb	r2, [r7, #23]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	32ae      	adds	r2, #174	; 0xae
 8008bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc4:	695b      	ldr	r3, [r3, #20]
 8008bc6:	7afa      	ldrb	r2, [r7, #11]
 8008bc8:	4611      	mov	r1, r2
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	4798      	blx	r3
 8008bce:	4603      	mov	r3, r0
 8008bd0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008bd2:	7dbb      	ldrb	r3, [r7, #22]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d001      	beq.n	8008bdc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008bd8:	7dbb      	ldrb	r3, [r7, #22]
 8008bda:	e000      	b.n	8008bde <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3718      	adds	r7, #24
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b084      	sub	sp, #16
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d014      	beq.n	8008c4c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00e      	beq.n	8008c4c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	6852      	ldr	r2, [r2, #4]
 8008c3a:	b2d2      	uxtb	r2, r2
 8008c3c:	4611      	mov	r1, r2
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	4798      	blx	r3
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d001      	beq.n	8008c4c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c4c:	2340      	movs	r3, #64	; 0x40
 8008c4e:	2200      	movs	r2, #0
 8008c50:	2100      	movs	r1, #0
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f001 fb7b 	bl	800a34e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2240      	movs	r2, #64	; 0x40
 8008c64:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c68:	2340      	movs	r3, #64	; 0x40
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	2180      	movs	r1, #128	; 0x80
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f001 fb6d 	bl	800a34e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2240      	movs	r2, #64	; 0x40
 8008c7e:	621a      	str	r2, [r3, #32]

  return ret;
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3710      	adds	r7, #16
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b083      	sub	sp, #12
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
 8008c92:	460b      	mov	r3, r1
 8008c94:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	78fa      	ldrb	r2, [r7, #3]
 8008c9a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	370c      	adds	r7, #12
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr

08008caa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008caa:	b480      	push	{r7}
 8008cac:	b083      	sub	sp, #12
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb8:	b2da      	uxtb	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2204      	movs	r2, #4
 8008cc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	370c      	adds	r7, #12
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b083      	sub	sp, #12
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	2b04      	cmp	r3, #4
 8008ce8:	d106      	bne.n	8008cf8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	370c      	adds	r7, #12
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr

08008d06 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b082      	sub	sp, #8
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	2b03      	cmp	r3, #3
 8008d18:	d110      	bne.n	8008d3c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00b      	beq.n	8008d3c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d2a:	69db      	ldr	r3, [r3, #28]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d005      	beq.n	8008d3c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d36:	69db      	ldr	r3, [r3, #28]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b082      	sub	sp, #8
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
 8008d4e:	460b      	mov	r3, r1
 8008d50:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	32ae      	adds	r2, #174	; 0xae
 8008d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d101      	bne.n	8008d68 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008d64:	2303      	movs	r3, #3
 8008d66:	e01c      	b.n	8008da2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	2b03      	cmp	r3, #3
 8008d72:	d115      	bne.n	8008da0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	32ae      	adds	r2, #174	; 0xae
 8008d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d82:	6a1b      	ldr	r3, [r3, #32]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00b      	beq.n	8008da0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	32ae      	adds	r2, #174	; 0xae
 8008d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d96:	6a1b      	ldr	r3, [r3, #32]
 8008d98:	78fa      	ldrb	r2, [r7, #3]
 8008d9a:	4611      	mov	r1, r2
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b082      	sub	sp, #8
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
 8008db2:	460b      	mov	r3, r1
 8008db4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	32ae      	adds	r2, #174	; 0xae
 8008dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d101      	bne.n	8008dcc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	e01c      	b.n	8008e06 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	2b03      	cmp	r3, #3
 8008dd6:	d115      	bne.n	8008e04 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	32ae      	adds	r2, #174	; 0xae
 8008de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00b      	beq.n	8008e04 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	32ae      	adds	r2, #174	; 0xae
 8008df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfc:	78fa      	ldrb	r2, [r7, #3]
 8008dfe:	4611      	mov	r1, r2
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3708      	adds	r7, #8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b083      	sub	sp, #12
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00e      	beq.n	8008e60 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	6852      	ldr	r2, [r2, #4]
 8008e4e:	b2d2      	uxtb	r2, r2
 8008e50:	4611      	mov	r1, r2
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	4798      	blx	r3
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d001      	beq.n	8008e60 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008e6a:	b480      	push	{r7}
 8008e6c:	b083      	sub	sp, #12
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
 8008e72:	460b      	mov	r3, r1
 8008e74:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008e76:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008e90:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	370c      	adds	r7, #12
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr

08008e9e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b086      	sub	sp, #24
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	885b      	ldrh	r3, [r3, #2]
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d920      	bls.n	8008f08 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008ece:	e013      	b.n	8008ef8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008ed0:	f107 030a 	add.w	r3, r7, #10
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	6978      	ldr	r0, [r7, #20]
 8008ed8:	f000 f81b 	bl	8008f12 <USBD_GetNextDesc>
 8008edc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	785b      	ldrb	r3, [r3, #1]
 8008ee2:	2b05      	cmp	r3, #5
 8008ee4:	d108      	bne.n	8008ef8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	789b      	ldrb	r3, [r3, #2]
 8008eee:	78fa      	ldrb	r2, [r7, #3]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d008      	beq.n	8008f06 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	885b      	ldrh	r3, [r3, #2]
 8008efc:	b29a      	uxth	r2, r3
 8008efe:	897b      	ldrh	r3, [r7, #10]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d8e5      	bhi.n	8008ed0 <USBD_GetEpDesc+0x32>
 8008f04:	e000      	b.n	8008f08 <USBD_GetEpDesc+0x6a>
          break;
 8008f06:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008f08:	693b      	ldr	r3, [r7, #16]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3718      	adds	r7, #24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008f12:	b480      	push	{r7}
 8008f14:	b085      	sub	sp, #20
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
 8008f1a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	881a      	ldrh	r2, [r3, #0]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	4413      	add	r3, r2
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	461a      	mov	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3714      	adds	r7, #20
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b087      	sub	sp, #28
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	3301      	adds	r3, #1
 8008f62:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008f6a:	8a3b      	ldrh	r3, [r7, #16]
 8008f6c:	021b      	lsls	r3, r3, #8
 8008f6e:	b21a      	sxth	r2, r3
 8008f70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008f74:	4313      	orrs	r3, r2
 8008f76:	b21b      	sxth	r3, r3
 8008f78:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008f7a:	89fb      	ldrh	r3, [r7, #14]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	371c      	adds	r7, #28
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f92:	2300      	movs	r3, #0
 8008f94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f9e:	2b40      	cmp	r3, #64	; 0x40
 8008fa0:	d005      	beq.n	8008fae <USBD_StdDevReq+0x26>
 8008fa2:	2b40      	cmp	r3, #64	; 0x40
 8008fa4:	d857      	bhi.n	8009056 <USBD_StdDevReq+0xce>
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00f      	beq.n	8008fca <USBD_StdDevReq+0x42>
 8008faa:	2b20      	cmp	r3, #32
 8008fac:	d153      	bne.n	8009056 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	32ae      	adds	r2, #174	; 0xae
 8008fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	6839      	ldr	r1, [r7, #0]
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	4798      	blx	r3
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8008fc8:	e04a      	b.n	8009060 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	785b      	ldrb	r3, [r3, #1]
 8008fce:	2b09      	cmp	r3, #9
 8008fd0:	d83b      	bhi.n	800904a <USBD_StdDevReq+0xc2>
 8008fd2:	a201      	add	r2, pc, #4	; (adr r2, 8008fd8 <USBD_StdDevReq+0x50>)
 8008fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd8:	0800902d 	.word	0x0800902d
 8008fdc:	08009041 	.word	0x08009041
 8008fe0:	0800904b 	.word	0x0800904b
 8008fe4:	08009037 	.word	0x08009037
 8008fe8:	0800904b 	.word	0x0800904b
 8008fec:	0800900b 	.word	0x0800900b
 8008ff0:	08009001 	.word	0x08009001
 8008ff4:	0800904b 	.word	0x0800904b
 8008ff8:	08009023 	.word	0x08009023
 8008ffc:	08009015 	.word	0x08009015
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009000:	6839      	ldr	r1, [r7, #0]
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 fa3c 	bl	8009480 <USBD_GetDescriptor>
          break;
 8009008:	e024      	b.n	8009054 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800900a:	6839      	ldr	r1, [r7, #0]
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 fba1 	bl	8009754 <USBD_SetAddress>
          break;
 8009012:	e01f      	b.n	8009054 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009014:	6839      	ldr	r1, [r7, #0]
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fbe0 	bl	80097dc <USBD_SetConfig>
 800901c:	4603      	mov	r3, r0
 800901e:	73fb      	strb	r3, [r7, #15]
          break;
 8009020:	e018      	b.n	8009054 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009022:	6839      	ldr	r1, [r7, #0]
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fc83 	bl	8009930 <USBD_GetConfig>
          break;
 800902a:	e013      	b.n	8009054 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800902c:	6839      	ldr	r1, [r7, #0]
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 fcb4 	bl	800999c <USBD_GetStatus>
          break;
 8009034:	e00e      	b.n	8009054 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009036:	6839      	ldr	r1, [r7, #0]
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f000 fce3 	bl	8009a04 <USBD_SetFeature>
          break;
 800903e:	e009      	b.n	8009054 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009040:	6839      	ldr	r1, [r7, #0]
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 fd07 	bl	8009a56 <USBD_ClrFeature>
          break;
 8009048:	e004      	b.n	8009054 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800904a:	6839      	ldr	r1, [r7, #0]
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fd5e 	bl	8009b0e <USBD_CtlError>
          break;
 8009052:	bf00      	nop
      }
      break;
 8009054:	e004      	b.n	8009060 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 fd58 	bl	8009b0e <USBD_CtlError>
      break;
 800905e:	bf00      	nop
  }

  return ret;
 8009060:	7bfb      	ldrb	r3, [r7, #15]
}
 8009062:	4618      	mov	r0, r3
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop

0800906c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009076:	2300      	movs	r3, #0
 8009078:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009082:	2b40      	cmp	r3, #64	; 0x40
 8009084:	d005      	beq.n	8009092 <USBD_StdItfReq+0x26>
 8009086:	2b40      	cmp	r3, #64	; 0x40
 8009088:	d852      	bhi.n	8009130 <USBD_StdItfReq+0xc4>
 800908a:	2b00      	cmp	r3, #0
 800908c:	d001      	beq.n	8009092 <USBD_StdItfReq+0x26>
 800908e:	2b20      	cmp	r3, #32
 8009090:	d14e      	bne.n	8009130 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009098:	b2db      	uxtb	r3, r3
 800909a:	3b01      	subs	r3, #1
 800909c:	2b02      	cmp	r3, #2
 800909e:	d840      	bhi.n	8009122 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	889b      	ldrh	r3, [r3, #4]
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d836      	bhi.n	8009118 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	889b      	ldrh	r3, [r3, #4]
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	4619      	mov	r1, r3
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7ff fed9 	bl	8008e6a <USBD_CoreFindIF>
 80090b8:	4603      	mov	r3, r0
 80090ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090bc:	7bbb      	ldrb	r3, [r7, #14]
 80090be:	2bff      	cmp	r3, #255	; 0xff
 80090c0:	d01d      	beq.n	80090fe <USBD_StdItfReq+0x92>
 80090c2:	7bbb      	ldrb	r3, [r7, #14]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d11a      	bne.n	80090fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80090c8:	7bba      	ldrb	r2, [r7, #14]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	32ae      	adds	r2, #174	; 0xae
 80090ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00f      	beq.n	80090f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80090d8:	7bba      	ldrb	r2, [r7, #14]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80090e0:	7bba      	ldrb	r2, [r7, #14]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	32ae      	adds	r2, #174	; 0xae
 80090e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	6839      	ldr	r1, [r7, #0]
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	4798      	blx	r3
 80090f2:	4603      	mov	r3, r0
 80090f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80090f6:	e004      	b.n	8009102 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80090f8:	2303      	movs	r3, #3
 80090fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80090fc:	e001      	b.n	8009102 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80090fe:	2303      	movs	r3, #3
 8009100:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	88db      	ldrh	r3, [r3, #6]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d110      	bne.n	800912c <USBD_StdItfReq+0xc0>
 800910a:	7bfb      	ldrb	r3, [r7, #15]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10d      	bne.n	800912c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fdc7 	bl	8009ca4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009116:	e009      	b.n	800912c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009118:	6839      	ldr	r1, [r7, #0]
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 fcf7 	bl	8009b0e <USBD_CtlError>
          break;
 8009120:	e004      	b.n	800912c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009122:	6839      	ldr	r1, [r7, #0]
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 fcf2 	bl	8009b0e <USBD_CtlError>
          break;
 800912a:	e000      	b.n	800912e <USBD_StdItfReq+0xc2>
          break;
 800912c:	bf00      	nop
      }
      break;
 800912e:	e004      	b.n	800913a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009130:	6839      	ldr	r1, [r7, #0]
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 fceb 	bl	8009b0e <USBD_CtlError>
      break;
 8009138:	bf00      	nop
  }

  return ret;
 800913a:	7bfb      	ldrb	r3, [r7, #15]
}
 800913c:	4618      	mov	r0, r3
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b084      	sub	sp, #16
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800914e:	2300      	movs	r3, #0
 8009150:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	889b      	ldrh	r3, [r3, #4]
 8009156:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009160:	2b40      	cmp	r3, #64	; 0x40
 8009162:	d007      	beq.n	8009174 <USBD_StdEPReq+0x30>
 8009164:	2b40      	cmp	r3, #64	; 0x40
 8009166:	f200 817f 	bhi.w	8009468 <USBD_StdEPReq+0x324>
 800916a:	2b00      	cmp	r3, #0
 800916c:	d02a      	beq.n	80091c4 <USBD_StdEPReq+0x80>
 800916e:	2b20      	cmp	r3, #32
 8009170:	f040 817a 	bne.w	8009468 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009174:	7bbb      	ldrb	r3, [r7, #14]
 8009176:	4619      	mov	r1, r3
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f7ff fe83 	bl	8008e84 <USBD_CoreFindEP>
 800917e:	4603      	mov	r3, r0
 8009180:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009182:	7b7b      	ldrb	r3, [r7, #13]
 8009184:	2bff      	cmp	r3, #255	; 0xff
 8009186:	f000 8174 	beq.w	8009472 <USBD_StdEPReq+0x32e>
 800918a:	7b7b      	ldrb	r3, [r7, #13]
 800918c:	2b00      	cmp	r3, #0
 800918e:	f040 8170 	bne.w	8009472 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009192:	7b7a      	ldrb	r2, [r7, #13]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800919a:	7b7a      	ldrb	r2, [r7, #13]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	32ae      	adds	r2, #174	; 0xae
 80091a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 8163 	beq.w	8009472 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80091ac:	7b7a      	ldrb	r2, [r7, #13]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	32ae      	adds	r2, #174	; 0xae
 80091b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	6839      	ldr	r1, [r7, #0]
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	4798      	blx	r3
 80091be:	4603      	mov	r3, r0
 80091c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80091c2:	e156      	b.n	8009472 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	785b      	ldrb	r3, [r3, #1]
 80091c8:	2b03      	cmp	r3, #3
 80091ca:	d008      	beq.n	80091de <USBD_StdEPReq+0x9a>
 80091cc:	2b03      	cmp	r3, #3
 80091ce:	f300 8145 	bgt.w	800945c <USBD_StdEPReq+0x318>
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f000 809b 	beq.w	800930e <USBD_StdEPReq+0x1ca>
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d03c      	beq.n	8009256 <USBD_StdEPReq+0x112>
 80091dc:	e13e      	b.n	800945c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d002      	beq.n	80091f0 <USBD_StdEPReq+0xac>
 80091ea:	2b03      	cmp	r3, #3
 80091ec:	d016      	beq.n	800921c <USBD_StdEPReq+0xd8>
 80091ee:	e02c      	b.n	800924a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091f0:	7bbb      	ldrb	r3, [r7, #14]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00d      	beq.n	8009212 <USBD_StdEPReq+0xce>
 80091f6:	7bbb      	ldrb	r3, [r7, #14]
 80091f8:	2b80      	cmp	r3, #128	; 0x80
 80091fa:	d00a      	beq.n	8009212 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80091fc:	7bbb      	ldrb	r3, [r7, #14]
 80091fe:	4619      	mov	r1, r3
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f001 f8e9 	bl	800a3d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009206:	2180      	movs	r1, #128	; 0x80
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f001 f8e5 	bl	800a3d8 <USBD_LL_StallEP>
 800920e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009210:	e020      	b.n	8009254 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009212:	6839      	ldr	r1, [r7, #0]
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 fc7a 	bl	8009b0e <USBD_CtlError>
              break;
 800921a:	e01b      	b.n	8009254 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	885b      	ldrh	r3, [r3, #2]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d10e      	bne.n	8009242 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009224:	7bbb      	ldrb	r3, [r7, #14]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00b      	beq.n	8009242 <USBD_StdEPReq+0xfe>
 800922a:	7bbb      	ldrb	r3, [r7, #14]
 800922c:	2b80      	cmp	r3, #128	; 0x80
 800922e:	d008      	beq.n	8009242 <USBD_StdEPReq+0xfe>
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	88db      	ldrh	r3, [r3, #6]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d104      	bne.n	8009242 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009238:	7bbb      	ldrb	r3, [r7, #14]
 800923a:	4619      	mov	r1, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f001 f8cb 	bl	800a3d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 fd2e 	bl	8009ca4 <USBD_CtlSendStatus>

              break;
 8009248:	e004      	b.n	8009254 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 fc5e 	bl	8009b0e <USBD_CtlError>
              break;
 8009252:	bf00      	nop
          }
          break;
 8009254:	e107      	b.n	8009466 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800925c:	b2db      	uxtb	r3, r3
 800925e:	2b02      	cmp	r3, #2
 8009260:	d002      	beq.n	8009268 <USBD_StdEPReq+0x124>
 8009262:	2b03      	cmp	r3, #3
 8009264:	d016      	beq.n	8009294 <USBD_StdEPReq+0x150>
 8009266:	e04b      	b.n	8009300 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009268:	7bbb      	ldrb	r3, [r7, #14]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00d      	beq.n	800928a <USBD_StdEPReq+0x146>
 800926e:	7bbb      	ldrb	r3, [r7, #14]
 8009270:	2b80      	cmp	r3, #128	; 0x80
 8009272:	d00a      	beq.n	800928a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009274:	7bbb      	ldrb	r3, [r7, #14]
 8009276:	4619      	mov	r1, r3
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f001 f8ad 	bl	800a3d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800927e:	2180      	movs	r1, #128	; 0x80
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f001 f8a9 	bl	800a3d8 <USBD_LL_StallEP>
 8009286:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009288:	e040      	b.n	800930c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fc3e 	bl	8009b0e <USBD_CtlError>
              break;
 8009292:	e03b      	b.n	800930c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	885b      	ldrh	r3, [r3, #2]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d136      	bne.n	800930a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800929c:	7bbb      	ldrb	r3, [r7, #14]
 800929e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d004      	beq.n	80092b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80092a6:	7bbb      	ldrb	r3, [r7, #14]
 80092a8:	4619      	mov	r1, r3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f001 f8b3 	bl	800a416 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f000 fcf7 	bl	8009ca4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80092b6:	7bbb      	ldrb	r3, [r7, #14]
 80092b8:	4619      	mov	r1, r3
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7ff fde2 	bl	8008e84 <USBD_CoreFindEP>
 80092c0:	4603      	mov	r3, r0
 80092c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092c4:	7b7b      	ldrb	r3, [r7, #13]
 80092c6:	2bff      	cmp	r3, #255	; 0xff
 80092c8:	d01f      	beq.n	800930a <USBD_StdEPReq+0x1c6>
 80092ca:	7b7b      	ldrb	r3, [r7, #13]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d11c      	bne.n	800930a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80092d0:	7b7a      	ldrb	r2, [r7, #13]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80092d8:	7b7a      	ldrb	r2, [r7, #13]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	32ae      	adds	r2, #174	; 0xae
 80092de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d010      	beq.n	800930a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80092e8:	7b7a      	ldrb	r2, [r7, #13]
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	32ae      	adds	r2, #174	; 0xae
 80092ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	4798      	blx	r3
 80092fa:	4603      	mov	r3, r0
 80092fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80092fe:	e004      	b.n	800930a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fc03 	bl	8009b0e <USBD_CtlError>
              break;
 8009308:	e000      	b.n	800930c <USBD_StdEPReq+0x1c8>
              break;
 800930a:	bf00      	nop
          }
          break;
 800930c:	e0ab      	b.n	8009466 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009314:	b2db      	uxtb	r3, r3
 8009316:	2b02      	cmp	r3, #2
 8009318:	d002      	beq.n	8009320 <USBD_StdEPReq+0x1dc>
 800931a:	2b03      	cmp	r3, #3
 800931c:	d032      	beq.n	8009384 <USBD_StdEPReq+0x240>
 800931e:	e097      	b.n	8009450 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009320:	7bbb      	ldrb	r3, [r7, #14]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d007      	beq.n	8009336 <USBD_StdEPReq+0x1f2>
 8009326:	7bbb      	ldrb	r3, [r7, #14]
 8009328:	2b80      	cmp	r3, #128	; 0x80
 800932a:	d004      	beq.n	8009336 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800932c:	6839      	ldr	r1, [r7, #0]
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 fbed 	bl	8009b0e <USBD_CtlError>
                break;
 8009334:	e091      	b.n	800945a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009336:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800933a:	2b00      	cmp	r3, #0
 800933c:	da0b      	bge.n	8009356 <USBD_StdEPReq+0x212>
 800933e:	7bbb      	ldrb	r3, [r7, #14]
 8009340:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009344:	4613      	mov	r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	4413      	add	r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	3310      	adds	r3, #16
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	4413      	add	r3, r2
 8009352:	3304      	adds	r3, #4
 8009354:	e00b      	b.n	800936e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009356:	7bbb      	ldrb	r3, [r7, #14]
 8009358:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800935c:	4613      	mov	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	4413      	add	r3, r2
 800936c:	3304      	adds	r3, #4
 800936e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	2200      	movs	r2, #0
 8009374:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	2202      	movs	r2, #2
 800937a:	4619      	mov	r1, r3
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 fc37 	bl	8009bf0 <USBD_CtlSendData>
              break;
 8009382:	e06a      	b.n	800945a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009384:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009388:	2b00      	cmp	r3, #0
 800938a:	da11      	bge.n	80093b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800938c:	7bbb      	ldrb	r3, [r7, #14]
 800938e:	f003 020f 	and.w	r2, r3, #15
 8009392:	6879      	ldr	r1, [r7, #4]
 8009394:	4613      	mov	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4413      	add	r3, r2
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	440b      	add	r3, r1
 800939e:	3324      	adds	r3, #36	; 0x24
 80093a0:	881b      	ldrh	r3, [r3, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d117      	bne.n	80093d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80093a6:	6839      	ldr	r1, [r7, #0]
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fbb0 	bl	8009b0e <USBD_CtlError>
                  break;
 80093ae:	e054      	b.n	800945a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80093b0:	7bbb      	ldrb	r3, [r7, #14]
 80093b2:	f003 020f 	and.w	r2, r3, #15
 80093b6:	6879      	ldr	r1, [r7, #4]
 80093b8:	4613      	mov	r3, r2
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	4413      	add	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	440b      	add	r3, r1
 80093c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80093c6:	881b      	ldrh	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d104      	bne.n	80093d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80093cc:	6839      	ldr	r1, [r7, #0]
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 fb9d 	bl	8009b0e <USBD_CtlError>
                  break;
 80093d4:	e041      	b.n	800945a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	da0b      	bge.n	80093f6 <USBD_StdEPReq+0x2b2>
 80093de:	7bbb      	ldrb	r3, [r7, #14]
 80093e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093e4:	4613      	mov	r3, r2
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	4413      	add	r3, r2
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	3310      	adds	r3, #16
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	4413      	add	r3, r2
 80093f2:	3304      	adds	r3, #4
 80093f4:	e00b      	b.n	800940e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80093f6:	7bbb      	ldrb	r3, [r7, #14]
 80093f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093fc:	4613      	mov	r3, r2
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	4413      	add	r3, r2
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	4413      	add	r3, r2
 800940c:	3304      	adds	r3, #4
 800940e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009410:	7bbb      	ldrb	r3, [r7, #14]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d002      	beq.n	800941c <USBD_StdEPReq+0x2d8>
 8009416:	7bbb      	ldrb	r3, [r7, #14]
 8009418:	2b80      	cmp	r3, #128	; 0x80
 800941a:	d103      	bne.n	8009424 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	2200      	movs	r2, #0
 8009420:	601a      	str	r2, [r3, #0]
 8009422:	e00e      	b.n	8009442 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009424:	7bbb      	ldrb	r3, [r7, #14]
 8009426:	4619      	mov	r1, r3
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f001 f813 	bl	800a454 <USBD_LL_IsStallEP>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d003      	beq.n	800943c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	2201      	movs	r2, #1
 8009438:	601a      	str	r2, [r3, #0]
 800943a:	e002      	b.n	8009442 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2200      	movs	r2, #0
 8009440:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	2202      	movs	r2, #2
 8009446:	4619      	mov	r1, r3
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 fbd1 	bl	8009bf0 <USBD_CtlSendData>
              break;
 800944e:	e004      	b.n	800945a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009450:	6839      	ldr	r1, [r7, #0]
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f000 fb5b 	bl	8009b0e <USBD_CtlError>
              break;
 8009458:	bf00      	nop
          }
          break;
 800945a:	e004      	b.n	8009466 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800945c:	6839      	ldr	r1, [r7, #0]
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 fb55 	bl	8009b0e <USBD_CtlError>
          break;
 8009464:	bf00      	nop
      }
      break;
 8009466:	e005      	b.n	8009474 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fb4f 	bl	8009b0e <USBD_CtlError>
      break;
 8009470:	e000      	b.n	8009474 <USBD_StdEPReq+0x330>
      break;
 8009472:	bf00      	nop
  }

  return ret;
 8009474:	7bfb      	ldrb	r3, [r7, #15]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
	...

08009480 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800948a:	2300      	movs	r3, #0
 800948c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800948e:	2300      	movs	r3, #0
 8009490:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009492:	2300      	movs	r3, #0
 8009494:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	885b      	ldrh	r3, [r3, #2]
 800949a:	0a1b      	lsrs	r3, r3, #8
 800949c:	b29b      	uxth	r3, r3
 800949e:	3b01      	subs	r3, #1
 80094a0:	2b06      	cmp	r3, #6
 80094a2:	f200 8128 	bhi.w	80096f6 <USBD_GetDescriptor+0x276>
 80094a6:	a201      	add	r2, pc, #4	; (adr r2, 80094ac <USBD_GetDescriptor+0x2c>)
 80094a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ac:	080094c9 	.word	0x080094c9
 80094b0:	080094e1 	.word	0x080094e1
 80094b4:	08009521 	.word	0x08009521
 80094b8:	080096f7 	.word	0x080096f7
 80094bc:	080096f7 	.word	0x080096f7
 80094c0:	08009697 	.word	0x08009697
 80094c4:	080096c3 	.word	0x080096c3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	7c12      	ldrb	r2, [r2, #16]
 80094d4:	f107 0108 	add.w	r1, r7, #8
 80094d8:	4610      	mov	r0, r2
 80094da:	4798      	blx	r3
 80094dc:	60f8      	str	r0, [r7, #12]
      break;
 80094de:	e112      	b.n	8009706 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	7c1b      	ldrb	r3, [r3, #16]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d10d      	bne.n	8009504 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f0:	f107 0208 	add.w	r2, r7, #8
 80094f4:	4610      	mov	r0, r2
 80094f6:	4798      	blx	r3
 80094f8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	3301      	adds	r3, #1
 80094fe:	2202      	movs	r2, #2
 8009500:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009502:	e100      	b.n	8009706 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800950a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950c:	f107 0208 	add.w	r2, r7, #8
 8009510:	4610      	mov	r0, r2
 8009512:	4798      	blx	r3
 8009514:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	3301      	adds	r3, #1
 800951a:	2202      	movs	r2, #2
 800951c:	701a      	strb	r2, [r3, #0]
      break;
 800951e:	e0f2      	b.n	8009706 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	885b      	ldrh	r3, [r3, #2]
 8009524:	b2db      	uxtb	r3, r3
 8009526:	2b05      	cmp	r3, #5
 8009528:	f200 80ac 	bhi.w	8009684 <USBD_GetDescriptor+0x204>
 800952c:	a201      	add	r2, pc, #4	; (adr r2, 8009534 <USBD_GetDescriptor+0xb4>)
 800952e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009532:	bf00      	nop
 8009534:	0800954d 	.word	0x0800954d
 8009538:	08009581 	.word	0x08009581
 800953c:	080095b5 	.word	0x080095b5
 8009540:	080095e9 	.word	0x080095e9
 8009544:	0800961d 	.word	0x0800961d
 8009548:	08009651 	.word	0x08009651
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00b      	beq.n	8009570 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	7c12      	ldrb	r2, [r2, #16]
 8009564:	f107 0108 	add.w	r1, r7, #8
 8009568:	4610      	mov	r0, r2
 800956a:	4798      	blx	r3
 800956c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800956e:	e091      	b.n	8009694 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 facb 	bl	8009b0e <USBD_CtlError>
            err++;
 8009578:	7afb      	ldrb	r3, [r7, #11]
 800957a:	3301      	adds	r3, #1
 800957c:	72fb      	strb	r3, [r7, #11]
          break;
 800957e:	e089      	b.n	8009694 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00b      	beq.n	80095a4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	7c12      	ldrb	r2, [r2, #16]
 8009598:	f107 0108 	add.w	r1, r7, #8
 800959c:	4610      	mov	r0, r2
 800959e:	4798      	blx	r3
 80095a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095a2:	e077      	b.n	8009694 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095a4:	6839      	ldr	r1, [r7, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fab1 	bl	8009b0e <USBD_CtlError>
            err++;
 80095ac:	7afb      	ldrb	r3, [r7, #11]
 80095ae:	3301      	adds	r3, #1
 80095b0:	72fb      	strb	r3, [r7, #11]
          break;
 80095b2:	e06f      	b.n	8009694 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00b      	beq.n	80095d8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	7c12      	ldrb	r2, [r2, #16]
 80095cc:	f107 0108 	add.w	r1, r7, #8
 80095d0:	4610      	mov	r0, r2
 80095d2:	4798      	blx	r3
 80095d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095d6:	e05d      	b.n	8009694 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095d8:	6839      	ldr	r1, [r7, #0]
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 fa97 	bl	8009b0e <USBD_CtlError>
            err++;
 80095e0:	7afb      	ldrb	r3, [r7, #11]
 80095e2:	3301      	adds	r3, #1
 80095e4:	72fb      	strb	r3, [r7, #11]
          break;
 80095e6:	e055      	b.n	8009694 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ee:	691b      	ldr	r3, [r3, #16]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00b      	beq.n	800960c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	7c12      	ldrb	r2, [r2, #16]
 8009600:	f107 0108 	add.w	r1, r7, #8
 8009604:	4610      	mov	r0, r2
 8009606:	4798      	blx	r3
 8009608:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800960a:	e043      	b.n	8009694 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800960c:	6839      	ldr	r1, [r7, #0]
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 fa7d 	bl	8009b0e <USBD_CtlError>
            err++;
 8009614:	7afb      	ldrb	r3, [r7, #11]
 8009616:	3301      	adds	r3, #1
 8009618:	72fb      	strb	r3, [r7, #11]
          break;
 800961a:	e03b      	b.n	8009694 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009622:	695b      	ldr	r3, [r3, #20]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00b      	beq.n	8009640 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800962e:	695b      	ldr	r3, [r3, #20]
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	7c12      	ldrb	r2, [r2, #16]
 8009634:	f107 0108 	add.w	r1, r7, #8
 8009638:	4610      	mov	r0, r2
 800963a:	4798      	blx	r3
 800963c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800963e:	e029      	b.n	8009694 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009640:	6839      	ldr	r1, [r7, #0]
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 fa63 	bl	8009b0e <USBD_CtlError>
            err++;
 8009648:	7afb      	ldrb	r3, [r7, #11]
 800964a:	3301      	adds	r3, #1
 800964c:	72fb      	strb	r3, [r7, #11]
          break;
 800964e:	e021      	b.n	8009694 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009656:	699b      	ldr	r3, [r3, #24]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d00b      	beq.n	8009674 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009662:	699b      	ldr	r3, [r3, #24]
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	7c12      	ldrb	r2, [r2, #16]
 8009668:	f107 0108 	add.w	r1, r7, #8
 800966c:	4610      	mov	r0, r2
 800966e:	4798      	blx	r3
 8009670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009672:	e00f      	b.n	8009694 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009674:	6839      	ldr	r1, [r7, #0]
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fa49 	bl	8009b0e <USBD_CtlError>
            err++;
 800967c:	7afb      	ldrb	r3, [r7, #11]
 800967e:	3301      	adds	r3, #1
 8009680:	72fb      	strb	r3, [r7, #11]
          break;
 8009682:	e007      	b.n	8009694 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009684:	6839      	ldr	r1, [r7, #0]
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f000 fa41 	bl	8009b0e <USBD_CtlError>
          err++;
 800968c:	7afb      	ldrb	r3, [r7, #11]
 800968e:	3301      	adds	r3, #1
 8009690:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009692:	bf00      	nop
      }
      break;
 8009694:	e037      	b.n	8009706 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	7c1b      	ldrb	r3, [r3, #16]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d109      	bne.n	80096b2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096a6:	f107 0208 	add.w	r2, r7, #8
 80096aa:	4610      	mov	r0, r2
 80096ac:	4798      	blx	r3
 80096ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80096b0:	e029      	b.n	8009706 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80096b2:	6839      	ldr	r1, [r7, #0]
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 fa2a 	bl	8009b0e <USBD_CtlError>
        err++;
 80096ba:	7afb      	ldrb	r3, [r7, #11]
 80096bc:	3301      	adds	r3, #1
 80096be:	72fb      	strb	r3, [r7, #11]
      break;
 80096c0:	e021      	b.n	8009706 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	7c1b      	ldrb	r3, [r3, #16]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d10d      	bne.n	80096e6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d2:	f107 0208 	add.w	r2, r7, #8
 80096d6:	4610      	mov	r0, r2
 80096d8:	4798      	blx	r3
 80096da:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	3301      	adds	r3, #1
 80096e0:	2207      	movs	r2, #7
 80096e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80096e4:	e00f      	b.n	8009706 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fa10 	bl	8009b0e <USBD_CtlError>
        err++;
 80096ee:	7afb      	ldrb	r3, [r7, #11]
 80096f0:	3301      	adds	r3, #1
 80096f2:	72fb      	strb	r3, [r7, #11]
      break;
 80096f4:	e007      	b.n	8009706 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80096f6:	6839      	ldr	r1, [r7, #0]
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fa08 	bl	8009b0e <USBD_CtlError>
      err++;
 80096fe:	7afb      	ldrb	r3, [r7, #11]
 8009700:	3301      	adds	r3, #1
 8009702:	72fb      	strb	r3, [r7, #11]
      break;
 8009704:	bf00      	nop
  }

  if (err != 0U)
 8009706:	7afb      	ldrb	r3, [r7, #11]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d11e      	bne.n	800974a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	88db      	ldrh	r3, [r3, #6]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d016      	beq.n	8009742 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009714:	893b      	ldrh	r3, [r7, #8]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00e      	beq.n	8009738 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	88da      	ldrh	r2, [r3, #6]
 800971e:	893b      	ldrh	r3, [r7, #8]
 8009720:	4293      	cmp	r3, r2
 8009722:	bf28      	it	cs
 8009724:	4613      	movcs	r3, r2
 8009726:	b29b      	uxth	r3, r3
 8009728:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800972a:	893b      	ldrh	r3, [r7, #8]
 800972c:	461a      	mov	r2, r3
 800972e:	68f9      	ldr	r1, [r7, #12]
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 fa5d 	bl	8009bf0 <USBD_CtlSendData>
 8009736:	e009      	b.n	800974c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009738:	6839      	ldr	r1, [r7, #0]
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 f9e7 	bl	8009b0e <USBD_CtlError>
 8009740:	e004      	b.n	800974c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 faae 	bl	8009ca4 <USBD_CtlSendStatus>
 8009748:	e000      	b.n	800974c <USBD_GetDescriptor+0x2cc>
    return;
 800974a:	bf00      	nop
  }
}
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop

08009754 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	889b      	ldrh	r3, [r3, #4]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d131      	bne.n	80097ca <USBD_SetAddress+0x76>
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	88db      	ldrh	r3, [r3, #6]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d12d      	bne.n	80097ca <USBD_SetAddress+0x76>
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	885b      	ldrh	r3, [r3, #2]
 8009772:	2b7f      	cmp	r3, #127	; 0x7f
 8009774:	d829      	bhi.n	80097ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	885b      	ldrh	r3, [r3, #2]
 800977a:	b2db      	uxtb	r3, r3
 800977c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009780:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009788:	b2db      	uxtb	r3, r3
 800978a:	2b03      	cmp	r3, #3
 800978c:	d104      	bne.n	8009798 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 f9bc 	bl	8009b0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009796:	e01d      	b.n	80097d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	7bfa      	ldrb	r2, [r7, #15]
 800979c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80097a0:	7bfb      	ldrb	r3, [r7, #15]
 80097a2:	4619      	mov	r1, r3
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 fe81 	bl	800a4ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 fa7a 	bl	8009ca4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d004      	beq.n	80097c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2202      	movs	r2, #2
 80097ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097be:	e009      	b.n	80097d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097c8:	e004      	b.n	80097d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80097ca:	6839      	ldr	r1, [r7, #0]
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f000 f99e 	bl	8009b0e <USBD_CtlError>
  }
}
 80097d2:	bf00      	nop
 80097d4:	bf00      	nop
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80097e6:	2300      	movs	r3, #0
 80097e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	885b      	ldrh	r3, [r3, #2]
 80097ee:	b2da      	uxtb	r2, r3
 80097f0:	4b4e      	ldr	r3, [pc, #312]	; (800992c <USBD_SetConfig+0x150>)
 80097f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80097f4:	4b4d      	ldr	r3, [pc, #308]	; (800992c <USBD_SetConfig+0x150>)
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d905      	bls.n	8009808 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80097fc:	6839      	ldr	r1, [r7, #0]
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 f985 	bl	8009b0e <USBD_CtlError>
    return USBD_FAIL;
 8009804:	2303      	movs	r3, #3
 8009806:	e08c      	b.n	8009922 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800980e:	b2db      	uxtb	r3, r3
 8009810:	2b02      	cmp	r3, #2
 8009812:	d002      	beq.n	800981a <USBD_SetConfig+0x3e>
 8009814:	2b03      	cmp	r3, #3
 8009816:	d029      	beq.n	800986c <USBD_SetConfig+0x90>
 8009818:	e075      	b.n	8009906 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800981a:	4b44      	ldr	r3, [pc, #272]	; (800992c <USBD_SetConfig+0x150>)
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d020      	beq.n	8009864 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009822:	4b42      	ldr	r3, [pc, #264]	; (800992c <USBD_SetConfig+0x150>)
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	461a      	mov	r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800982c:	4b3f      	ldr	r3, [pc, #252]	; (800992c <USBD_SetConfig+0x150>)
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	4619      	mov	r1, r3
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f7fe ffe7 	bl	8008806 <USBD_SetClassConfig>
 8009838:	4603      	mov	r3, r0
 800983a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800983c:	7bfb      	ldrb	r3, [r7, #15]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d008      	beq.n	8009854 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009842:	6839      	ldr	r1, [r7, #0]
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 f962 	bl	8009b0e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2202      	movs	r2, #2
 800984e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009852:	e065      	b.n	8009920 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fa25 	bl	8009ca4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2203      	movs	r2, #3
 800985e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009862:	e05d      	b.n	8009920 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 fa1d 	bl	8009ca4 <USBD_CtlSendStatus>
      break;
 800986a:	e059      	b.n	8009920 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800986c:	4b2f      	ldr	r3, [pc, #188]	; (800992c <USBD_SetConfig+0x150>)
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d112      	bne.n	800989a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2202      	movs	r2, #2
 8009878:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800987c:	4b2b      	ldr	r3, [pc, #172]	; (800992c <USBD_SetConfig+0x150>)
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	461a      	mov	r2, r3
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009886:	4b29      	ldr	r3, [pc, #164]	; (800992c <USBD_SetConfig+0x150>)
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	4619      	mov	r1, r3
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f7fe ffd6 	bl	800883e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fa06 	bl	8009ca4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009898:	e042      	b.n	8009920 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800989a:	4b24      	ldr	r3, [pc, #144]	; (800992c <USBD_SetConfig+0x150>)
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	461a      	mov	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d02a      	beq.n	80098fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	4619      	mov	r1, r3
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f7fe ffc4 	bl	800883e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80098b6:	4b1d      	ldr	r3, [pc, #116]	; (800992c <USBD_SetConfig+0x150>)
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	461a      	mov	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80098c0:	4b1a      	ldr	r3, [pc, #104]	; (800992c <USBD_SetConfig+0x150>)
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	4619      	mov	r1, r3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f7fe ff9d 	bl	8008806 <USBD_SetClassConfig>
 80098cc:	4603      	mov	r3, r0
 80098ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80098d0:	7bfb      	ldrb	r3, [r7, #15]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d00f      	beq.n	80098f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80098d6:	6839      	ldr	r1, [r7, #0]
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 f918 	bl	8009b0e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	4619      	mov	r1, r3
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f7fe ffa9 	bl	800883e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2202      	movs	r2, #2
 80098f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80098f4:	e014      	b.n	8009920 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f9d4 	bl	8009ca4 <USBD_CtlSendStatus>
      break;
 80098fc:	e010      	b.n	8009920 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f9d0 	bl	8009ca4 <USBD_CtlSendStatus>
      break;
 8009904:	e00c      	b.n	8009920 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009906:	6839      	ldr	r1, [r7, #0]
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 f900 	bl	8009b0e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800990e:	4b07      	ldr	r3, [pc, #28]	; (800992c <USBD_SetConfig+0x150>)
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	4619      	mov	r1, r3
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f7fe ff92 	bl	800883e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800991a:	2303      	movs	r3, #3
 800991c:	73fb      	strb	r3, [r7, #15]
      break;
 800991e:	bf00      	nop
  }

  return ret;
 8009920:	7bfb      	ldrb	r3, [r7, #15]
}
 8009922:	4618      	mov	r0, r3
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	200037d4 	.word	0x200037d4

08009930 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	88db      	ldrh	r3, [r3, #6]
 800993e:	2b01      	cmp	r3, #1
 8009940:	d004      	beq.n	800994c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009942:	6839      	ldr	r1, [r7, #0]
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 f8e2 	bl	8009b0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800994a:	e023      	b.n	8009994 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009952:	b2db      	uxtb	r3, r3
 8009954:	2b02      	cmp	r3, #2
 8009956:	dc02      	bgt.n	800995e <USBD_GetConfig+0x2e>
 8009958:	2b00      	cmp	r3, #0
 800995a:	dc03      	bgt.n	8009964 <USBD_GetConfig+0x34>
 800995c:	e015      	b.n	800998a <USBD_GetConfig+0x5a>
 800995e:	2b03      	cmp	r3, #3
 8009960:	d00b      	beq.n	800997a <USBD_GetConfig+0x4a>
 8009962:	e012      	b.n	800998a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	3308      	adds	r3, #8
 800996e:	2201      	movs	r2, #1
 8009970:	4619      	mov	r1, r3
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 f93c 	bl	8009bf0 <USBD_CtlSendData>
        break;
 8009978:	e00c      	b.n	8009994 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	3304      	adds	r3, #4
 800997e:	2201      	movs	r2, #1
 8009980:	4619      	mov	r1, r3
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 f934 	bl	8009bf0 <USBD_CtlSendData>
        break;
 8009988:	e004      	b.n	8009994 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800998a:	6839      	ldr	r1, [r7, #0]
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f8be 	bl	8009b0e <USBD_CtlError>
        break;
 8009992:	bf00      	nop
}
 8009994:	bf00      	nop
 8009996:	3708      	adds	r7, #8
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	3b01      	subs	r3, #1
 80099b0:	2b02      	cmp	r3, #2
 80099b2:	d81e      	bhi.n	80099f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	88db      	ldrh	r3, [r3, #6]
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d004      	beq.n	80099c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 f8a5 	bl	8009b0e <USBD_CtlError>
        break;
 80099c4:	e01a      	b.n	80099fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d005      	beq.n	80099e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	f043 0202 	orr.w	r2, r3, #2
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	330c      	adds	r3, #12
 80099e6:	2202      	movs	r2, #2
 80099e8:	4619      	mov	r1, r3
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 f900 	bl	8009bf0 <USBD_CtlSendData>
      break;
 80099f0:	e004      	b.n	80099fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80099f2:	6839      	ldr	r1, [r7, #0]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f88a 	bl	8009b0e <USBD_CtlError>
      break;
 80099fa:	bf00      	nop
  }
}
 80099fc:	bf00      	nop
 80099fe:	3708      	adds	r7, #8
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	885b      	ldrh	r3, [r3, #2]
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d107      	bne.n	8009a26 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2201      	movs	r2, #1
 8009a1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f940 	bl	8009ca4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009a24:	e013      	b.n	8009a4e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	885b      	ldrh	r3, [r3, #2]
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d10b      	bne.n	8009a46 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	889b      	ldrh	r3, [r3, #4]
 8009a32:	0a1b      	lsrs	r3, r3, #8
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	b2da      	uxtb	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 f930 	bl	8009ca4 <USBD_CtlSendStatus>
}
 8009a44:	e003      	b.n	8009a4e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009a46:	6839      	ldr	r1, [r7, #0]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 f860 	bl	8009b0e <USBD_CtlError>
}
 8009a4e:	bf00      	nop
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b082      	sub	sp, #8
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	2b02      	cmp	r3, #2
 8009a6c:	d80b      	bhi.n	8009a86 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	885b      	ldrh	r3, [r3, #2]
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d10c      	bne.n	8009a90 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 f910 	bl	8009ca4 <USBD_CtlSendStatus>
      }
      break;
 8009a84:	e004      	b.n	8009a90 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009a86:	6839      	ldr	r1, [r7, #0]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f840 	bl	8009b0e <USBD_CtlError>
      break;
 8009a8e:	e000      	b.n	8009a92 <USBD_ClrFeature+0x3c>
      break;
 8009a90:	bf00      	nop
  }
}
 8009a92:	bf00      	nop
 8009a94:	3708      	adds	r7, #8
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b084      	sub	sp, #16
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	781a      	ldrb	r2, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	781a      	ldrb	r2, [r3, #0]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	f7ff fa41 	bl	8008f4c <SWAPBYTE>
 8009aca:	4603      	mov	r3, r0
 8009acc:	461a      	mov	r2, r3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	3301      	adds	r3, #1
 8009adc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f7ff fa34 	bl	8008f4c <SWAPBYTE>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	3301      	adds	r3, #1
 8009af0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	3301      	adds	r3, #1
 8009af6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009af8:	68f8      	ldr	r0, [r7, #12]
 8009afa:	f7ff fa27 	bl	8008f4c <SWAPBYTE>
 8009afe:	4603      	mov	r3, r0
 8009b00:	461a      	mov	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	80da      	strh	r2, [r3, #6]
}
 8009b06:	bf00      	nop
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b082      	sub	sp, #8
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
 8009b16:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b18:	2180      	movs	r1, #128	; 0x80
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 fc5c 	bl	800a3d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009b20:	2100      	movs	r1, #0
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 fc58 	bl	800a3d8 <USBD_LL_StallEP>
}
 8009b28:	bf00      	nop
 8009b2a:	3708      	adds	r7, #8
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d036      	beq.n	8009bb4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009b4a:	6938      	ldr	r0, [r7, #16]
 8009b4c:	f000 f836 	bl	8009bbc <USBD_GetLen>
 8009b50:	4603      	mov	r3, r0
 8009b52:	3301      	adds	r3, #1
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	005b      	lsls	r3, r3, #1
 8009b58:	b29a      	uxth	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009b5e:	7dfb      	ldrb	r3, [r7, #23]
 8009b60:	68ba      	ldr	r2, [r7, #8]
 8009b62:	4413      	add	r3, r2
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	7812      	ldrb	r2, [r2, #0]
 8009b68:	701a      	strb	r2, [r3, #0]
  idx++;
 8009b6a:	7dfb      	ldrb	r3, [r7, #23]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009b70:	7dfb      	ldrb	r3, [r7, #23]
 8009b72:	68ba      	ldr	r2, [r7, #8]
 8009b74:	4413      	add	r3, r2
 8009b76:	2203      	movs	r2, #3
 8009b78:	701a      	strb	r2, [r3, #0]
  idx++;
 8009b7a:	7dfb      	ldrb	r3, [r7, #23]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009b80:	e013      	b.n	8009baa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009b82:	7dfb      	ldrb	r3, [r7, #23]
 8009b84:	68ba      	ldr	r2, [r7, #8]
 8009b86:	4413      	add	r3, r2
 8009b88:	693a      	ldr	r2, [r7, #16]
 8009b8a:	7812      	ldrb	r2, [r2, #0]
 8009b8c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009b8e:	693b      	ldr	r3, [r7, #16]
 8009b90:	3301      	adds	r3, #1
 8009b92:	613b      	str	r3, [r7, #16]
    idx++;
 8009b94:	7dfb      	ldrb	r3, [r7, #23]
 8009b96:	3301      	adds	r3, #1
 8009b98:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009b9a:	7dfb      	ldrb	r3, [r7, #23]
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	701a      	strb	r2, [r3, #0]
    idx++;
 8009ba4:	7dfb      	ldrb	r3, [r7, #23]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1e7      	bne.n	8009b82 <USBD_GetString+0x52>
 8009bb2:	e000      	b.n	8009bb6 <USBD_GetString+0x86>
    return;
 8009bb4:	bf00      	nop
  }
}
 8009bb6:	3718      	adds	r7, #24
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009bcc:	e005      	b.n	8009bda <USBD_GetLen+0x1e>
  {
    len++;
 8009bce:	7bfb      	ldrb	r3, [r7, #15]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d1f5      	bne.n	8009bce <USBD_GetLen+0x12>
  }

  return len;
 8009be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3714      	adds	r7, #20
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2202      	movs	r2, #2
 8009c00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	687a      	ldr	r2, [r7, #4]
 8009c08:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	68ba      	ldr	r2, [r7, #8]
 8009c14:	2100      	movs	r1, #0
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f000 fc67 	bl	800a4ea <USBD_LL_Transmit>

  return USBD_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b084      	sub	sp, #16
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	60f8      	str	r0, [r7, #12]
 8009c2e:	60b9      	str	r1, [r7, #8]
 8009c30:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	68ba      	ldr	r2, [r7, #8]
 8009c36:	2100      	movs	r1, #0
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 fc56 	bl	800a4ea <USBD_LL_Transmit>

  return USBD_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2203      	movs	r2, #3
 8009c58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	2100      	movs	r1, #0
 8009c72:	68f8      	ldr	r0, [r7, #12]
 8009c74:	f000 fc5a 	bl	800a52c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3710      	adds	r7, #16
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	b084      	sub	sp, #16
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	60f8      	str	r0, [r7, #12]
 8009c8a:	60b9      	str	r1, [r7, #8]
 8009c8c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	2100      	movs	r1, #0
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f000 fc49 	bl	800a52c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2204      	movs	r2, #4
 8009cb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	2100      	movs	r1, #0
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 fc15 	bl	800a4ea <USBD_LL_Transmit>

  return USBD_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3708      	adds	r7, #8
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}

08009cca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009cca:	b580      	push	{r7, lr}
 8009ccc:	b082      	sub	sp, #8
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2205      	movs	r2, #5
 8009cd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009cda:	2300      	movs	r3, #0
 8009cdc:	2200      	movs	r2, #0
 8009cde:	2100      	movs	r1, #0
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 fc23 	bl	800a52c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ce6:	2300      	movs	r3, #0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3708      	adds	r7, #8
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	4912      	ldr	r1, [pc, #72]	; (8009d40 <MX_USB_DEVICE_Init+0x50>)
 8009cf8:	4812      	ldr	r0, [pc, #72]	; (8009d44 <MX_USB_DEVICE_Init+0x54>)
 8009cfa:	f7fe fd07 	bl	800870c <USBD_Init>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d001      	beq.n	8009d08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009d04:	f7f8 f948 	bl	8001f98 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009d08:	490f      	ldr	r1, [pc, #60]	; (8009d48 <MX_USB_DEVICE_Init+0x58>)
 8009d0a:	480e      	ldr	r0, [pc, #56]	; (8009d44 <MX_USB_DEVICE_Init+0x54>)
 8009d0c:	f7fe fd2e 	bl	800876c <USBD_RegisterClass>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d001      	beq.n	8009d1a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009d16:	f7f8 f93f 	bl	8001f98 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8009d1a:	490c      	ldr	r1, [pc, #48]	; (8009d4c <MX_USB_DEVICE_Init+0x5c>)
 8009d1c:	4809      	ldr	r0, [pc, #36]	; (8009d44 <MX_USB_DEVICE_Init+0x54>)
 8009d1e:	f7fe fcdb 	bl	80086d8 <USBD_CUSTOM_HID_RegisterInterface>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d001      	beq.n	8009d2c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009d28:	f7f8 f936 	bl	8001f98 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009d2c:	4805      	ldr	r0, [pc, #20]	; (8009d44 <MX_USB_DEVICE_Init+0x54>)
 8009d2e:	f7fe fd53 	bl	80087d8 <USBD_Start>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d001      	beq.n	8009d3c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009d38:	f7f8 f92e 	bl	8001f98 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009d3c:	bf00      	nop
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	200000d8 	.word	0x200000d8
 8009d44:	200037d8 	.word	0x200037d8
 8009d48:	2000001c 	.word	0x2000001c
 8009d4c:	200000c8 	.word	0x200000c8

08009d50 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009d50:	b480      	push	{r7}
 8009d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009d54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009d60:	b480      	push	{r7}
 8009d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009d64:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6e:	4770      	bx	lr

08009d70 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8009d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	4603      	mov	r3, r0
 8009d78:	460a      	mov	r2, r1
 8009d7a:	71fb      	strb	r3, [r7, #7]
 8009d7c:	4613      	mov	r3, r2
 8009d7e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  memcpy(buffer, state, 64);
 8009d80:	79bb      	ldrb	r3, [r7, #6]
 8009d82:	461a      	mov	r2, r3
 8009d84:	4b11      	ldr	r3, [pc, #68]	; (8009dcc <CUSTOM_HID_OutEvent_FS+0x5c>)
 8009d86:	4614      	mov	r4, r2
 8009d88:	461e      	mov	r6, r3
 8009d8a:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8009d8e:	4635      	mov	r5, r6
 8009d90:	4623      	mov	r3, r4
 8009d92:	6818      	ldr	r0, [r3, #0]
 8009d94:	6859      	ldr	r1, [r3, #4]
 8009d96:	689a      	ldr	r2, [r3, #8]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009d9c:	3410      	adds	r4, #16
 8009d9e:	3610      	adds	r6, #16
 8009da0:	4564      	cmp	r4, ip
 8009da2:	d1f4      	bne.n	8009d8e <CUSTOM_HID_OutEvent_FS+0x1e>
  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, buffer, 64);
 8009da4:	2240      	movs	r2, #64	; 0x40
 8009da6:	4909      	ldr	r1, [pc, #36]	; (8009dcc <CUSTOM_HID_OutEvent_FS+0x5c>)
 8009da8:	4809      	ldr	r0, [pc, #36]	; (8009dd0 <CUSTOM_HID_OutEvent_FS+0x60>)
 8009daa:	f7fe fb1f 	bl	80083ec <USBD_CUSTOM_HID_SendReport>

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8009dae:	4808      	ldr	r0, [pc, #32]	; (8009dd0 <CUSTOM_HID_OutEvent_FS+0x60>)
 8009db0:	f7fe fc30 	bl	8008614 <USBD_CUSTOM_HID_ReceivePacket>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d002      	beq.n	8009dc0 <CUSTOM_HID_OutEvent_FS+0x50>
  {
    return -1;
 8009dba:	f04f 33ff 	mov.w	r3, #4294967295
 8009dbe:	e000      	b.n	8009dc2 <CUSTOM_HID_OutEvent_FS+0x52>
  }

  return (USBD_OK);
 8009dc0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	370c      	adds	r7, #12
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	20003ab4 	.word	0x20003ab4
 8009dd0:	200037d8 	.word	0x200037d8

08009dd4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	4603      	mov	r3, r0
 8009ddc:	6039      	str	r1, [r7, #0]
 8009dde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	2212      	movs	r2, #18
 8009de4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009de6:	4b03      	ldr	r3, [pc, #12]	; (8009df4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr
 8009df4:	200000f4 	.word	0x200000f4

08009df8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	4603      	mov	r3, r0
 8009e00:	6039      	str	r1, [r7, #0]
 8009e02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	2204      	movs	r2, #4
 8009e08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009e0a:	4b03      	ldr	r3, [pc, #12]	; (8009e18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr
 8009e18:	20000108 	.word	0x20000108

08009e1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	4603      	mov	r3, r0
 8009e24:	6039      	str	r1, [r7, #0]
 8009e26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009e28:	79fb      	ldrb	r3, [r7, #7]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d105      	bne.n	8009e3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e2e:	683a      	ldr	r2, [r7, #0]
 8009e30:	4907      	ldr	r1, [pc, #28]	; (8009e50 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e32:	4808      	ldr	r0, [pc, #32]	; (8009e54 <USBD_FS_ProductStrDescriptor+0x38>)
 8009e34:	f7ff fe7c 	bl	8009b30 <USBD_GetString>
 8009e38:	e004      	b.n	8009e44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009e3a:	683a      	ldr	r2, [r7, #0]
 8009e3c:	4904      	ldr	r1, [pc, #16]	; (8009e50 <USBD_FS_ProductStrDescriptor+0x34>)
 8009e3e:	4805      	ldr	r0, [pc, #20]	; (8009e54 <USBD_FS_ProductStrDescriptor+0x38>)
 8009e40:	f7ff fe76 	bl	8009b30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009e44:	4b02      	ldr	r3, [pc, #8]	; (8009e50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	20003af4 	.word	0x20003af4
 8009e54:	0800d7a8 	.word	0x0800d7a8

08009e58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	4603      	mov	r3, r0
 8009e60:	6039      	str	r1, [r7, #0]
 8009e62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009e64:	683a      	ldr	r2, [r7, #0]
 8009e66:	4904      	ldr	r1, [pc, #16]	; (8009e78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009e68:	4804      	ldr	r0, [pc, #16]	; (8009e7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009e6a:	f7ff fe61 	bl	8009b30 <USBD_GetString>
  return USBD_StrDesc;
 8009e6e:	4b02      	ldr	r3, [pc, #8]	; (8009e78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	20003af4 	.word	0x20003af4
 8009e7c:	0800d7b8 	.word	0x0800d7b8

08009e80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	4603      	mov	r3, r0
 8009e88:	6039      	str	r1, [r7, #0]
 8009e8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	221a      	movs	r2, #26
 8009e90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009e92:	f000 f843 	bl	8009f1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009e96:	4b02      	ldr	r3, [pc, #8]	; (8009ea0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	2000010c 	.word	0x2000010c

08009ea4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	4603      	mov	r3, r0
 8009eac:	6039      	str	r1, [r7, #0]
 8009eae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009eb0:	79fb      	ldrb	r3, [r7, #7]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d105      	bne.n	8009ec2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	4907      	ldr	r1, [pc, #28]	; (8009ed8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009eba:	4808      	ldr	r0, [pc, #32]	; (8009edc <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ebc:	f7ff fe38 	bl	8009b30 <USBD_GetString>
 8009ec0:	e004      	b.n	8009ecc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ec2:	683a      	ldr	r2, [r7, #0]
 8009ec4:	4904      	ldr	r1, [pc, #16]	; (8009ed8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ec6:	4805      	ldr	r0, [pc, #20]	; (8009edc <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ec8:	f7ff fe32 	bl	8009b30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009ecc:	4b02      	ldr	r3, [pc, #8]	; (8009ed8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	20003af4 	.word	0x20003af4
 8009edc:	0800d7cc 	.word	0x0800d7cc

08009ee0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	6039      	str	r1, [r7, #0]
 8009eea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009eec:	79fb      	ldrb	r3, [r7, #7]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d105      	bne.n	8009efe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ef2:	683a      	ldr	r2, [r7, #0]
 8009ef4:	4907      	ldr	r1, [pc, #28]	; (8009f14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009ef6:	4808      	ldr	r0, [pc, #32]	; (8009f18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009ef8:	f7ff fe1a 	bl	8009b30 <USBD_GetString>
 8009efc:	e004      	b.n	8009f08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009efe:	683a      	ldr	r2, [r7, #0]
 8009f00:	4904      	ldr	r1, [pc, #16]	; (8009f14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009f02:	4805      	ldr	r0, [pc, #20]	; (8009f18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009f04:	f7ff fe14 	bl	8009b30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009f08:	4b02      	ldr	r3, [pc, #8]	; (8009f14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3708      	adds	r7, #8
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	20003af4 	.word	0x20003af4
 8009f18:	0800d7e0 	.word	0x0800d7e0

08009f1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009f22:	4b0f      	ldr	r3, [pc, #60]	; (8009f60 <Get_SerialNum+0x44>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009f28:	4b0e      	ldr	r3, [pc, #56]	; (8009f64 <Get_SerialNum+0x48>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009f2e:	4b0e      	ldr	r3, [pc, #56]	; (8009f68 <Get_SerialNum+0x4c>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4413      	add	r3, r2
 8009f3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d009      	beq.n	8009f56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009f42:	2208      	movs	r2, #8
 8009f44:	4909      	ldr	r1, [pc, #36]	; (8009f6c <Get_SerialNum+0x50>)
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f000 f814 	bl	8009f74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009f4c:	2204      	movs	r2, #4
 8009f4e:	4908      	ldr	r1, [pc, #32]	; (8009f70 <Get_SerialNum+0x54>)
 8009f50:	68b8      	ldr	r0, [r7, #8]
 8009f52:	f000 f80f 	bl	8009f74 <IntToUnicode>
  }
}
 8009f56:	bf00      	nop
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	1fff7a10 	.word	0x1fff7a10
 8009f64:	1fff7a14 	.word	0x1fff7a14
 8009f68:	1fff7a18 	.word	0x1fff7a18
 8009f6c:	2000010e 	.word	0x2000010e
 8009f70:	2000011e 	.word	0x2000011e

08009f74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b087      	sub	sp, #28
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	4613      	mov	r3, r2
 8009f80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009f82:	2300      	movs	r3, #0
 8009f84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009f86:	2300      	movs	r3, #0
 8009f88:	75fb      	strb	r3, [r7, #23]
 8009f8a:	e027      	b.n	8009fdc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	0f1b      	lsrs	r3, r3, #28
 8009f90:	2b09      	cmp	r3, #9
 8009f92:	d80b      	bhi.n	8009fac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	0f1b      	lsrs	r3, r3, #28
 8009f98:	b2da      	uxtb	r2, r3
 8009f9a:	7dfb      	ldrb	r3, [r7, #23]
 8009f9c:	005b      	lsls	r3, r3, #1
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	440b      	add	r3, r1
 8009fa4:	3230      	adds	r2, #48	; 0x30
 8009fa6:	b2d2      	uxtb	r2, r2
 8009fa8:	701a      	strb	r2, [r3, #0]
 8009faa:	e00a      	b.n	8009fc2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	0f1b      	lsrs	r3, r3, #28
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	7dfb      	ldrb	r3, [r7, #23]
 8009fb4:	005b      	lsls	r3, r3, #1
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	440b      	add	r3, r1
 8009fbc:	3237      	adds	r2, #55	; 0x37
 8009fbe:	b2d2      	uxtb	r2, r2
 8009fc0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	011b      	lsls	r3, r3, #4
 8009fc6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009fc8:	7dfb      	ldrb	r3, [r7, #23]
 8009fca:	005b      	lsls	r3, r3, #1
 8009fcc:	3301      	adds	r3, #1
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009fd6:	7dfb      	ldrb	r3, [r7, #23]
 8009fd8:	3301      	adds	r3, #1
 8009fda:	75fb      	strb	r3, [r7, #23]
 8009fdc:	7dfa      	ldrb	r2, [r7, #23]
 8009fde:	79fb      	ldrb	r3, [r7, #7]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d3d3      	bcc.n	8009f8c <IntToUnicode+0x18>
  }
}
 8009fe4:	bf00      	nop
 8009fe6:	bf00      	nop
 8009fe8:	371c      	adds	r7, #28
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
	...

08009ff4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b08a      	sub	sp, #40	; 0x28
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ffc:	f107 0314 	add.w	r3, r7, #20
 800a000:	2200      	movs	r2, #0
 800a002:	601a      	str	r2, [r3, #0]
 800a004:	605a      	str	r2, [r3, #4]
 800a006:	609a      	str	r2, [r3, #8]
 800a008:	60da      	str	r2, [r3, #12]
 800a00a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a014:	d13a      	bne.n	800a08c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a016:	2300      	movs	r3, #0
 800a018:	613b      	str	r3, [r7, #16]
 800a01a:	4b1e      	ldr	r3, [pc, #120]	; (800a094 <HAL_PCD_MspInit+0xa0>)
 800a01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a01e:	4a1d      	ldr	r2, [pc, #116]	; (800a094 <HAL_PCD_MspInit+0xa0>)
 800a020:	f043 0301 	orr.w	r3, r3, #1
 800a024:	6313      	str	r3, [r2, #48]	; 0x30
 800a026:	4b1b      	ldr	r3, [pc, #108]	; (800a094 <HAL_PCD_MspInit+0xa0>)
 800a028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a02a:	f003 0301 	and.w	r3, r3, #1
 800a02e:	613b      	str	r3, [r7, #16]
 800a030:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a032:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a038:	2302      	movs	r3, #2
 800a03a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a03c:	2300      	movs	r3, #0
 800a03e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a040:	2303      	movs	r3, #3
 800a042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a044:	230a      	movs	r3, #10
 800a046:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a048:	f107 0314 	add.w	r3, r7, #20
 800a04c:	4619      	mov	r1, r3
 800a04e:	4812      	ldr	r0, [pc, #72]	; (800a098 <HAL_PCD_MspInit+0xa4>)
 800a050:	f7f8 fbba 	bl	80027c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a054:	4b0f      	ldr	r3, [pc, #60]	; (800a094 <HAL_PCD_MspInit+0xa0>)
 800a056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a058:	4a0e      	ldr	r2, [pc, #56]	; (800a094 <HAL_PCD_MspInit+0xa0>)
 800a05a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a05e:	6353      	str	r3, [r2, #52]	; 0x34
 800a060:	2300      	movs	r3, #0
 800a062:	60fb      	str	r3, [r7, #12]
 800a064:	4b0b      	ldr	r3, [pc, #44]	; (800a094 <HAL_PCD_MspInit+0xa0>)
 800a066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a068:	4a0a      	ldr	r2, [pc, #40]	; (800a094 <HAL_PCD_MspInit+0xa0>)
 800a06a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a06e:	6453      	str	r3, [r2, #68]	; 0x44
 800a070:	4b08      	ldr	r3, [pc, #32]	; (800a094 <HAL_PCD_MspInit+0xa0>)
 800a072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a078:	60fb      	str	r3, [r7, #12]
 800a07a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a07c:	2200      	movs	r2, #0
 800a07e:	2100      	movs	r1, #0
 800a080:	2043      	movs	r0, #67	; 0x43
 800a082:	f7f8 fb6a 	bl	800275a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a086:	2043      	movs	r0, #67	; 0x43
 800a088:	f7f8 fb83 	bl	8002792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a08c:	bf00      	nop
 800a08e:	3728      	adds	r7, #40	; 0x28
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	40023800 	.word	0x40023800
 800a098:	40020000 	.word	0x40020000

0800a09c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	f7fe fbdd 	bl	8008872 <USBD_LL_SetupStage>
}
 800a0b8:	bf00      	nop
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a0d2:	78fa      	ldrb	r2, [r7, #3]
 800a0d4:	6879      	ldr	r1, [r7, #4]
 800a0d6:	4613      	mov	r3, r2
 800a0d8:	00db      	lsls	r3, r3, #3
 800a0da:	4413      	add	r3, r2
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	440b      	add	r3, r1
 800a0e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	78fb      	ldrb	r3, [r7, #3]
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	f7fe fc17 	bl	800891c <USBD_LL_DataOutStage>
}
 800a0ee:	bf00      	nop
 800a0f0:	3708      	adds	r7, #8
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b082      	sub	sp, #8
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
 800a0fe:	460b      	mov	r3, r1
 800a100:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a108:	78fa      	ldrb	r2, [r7, #3]
 800a10a:	6879      	ldr	r1, [r7, #4]
 800a10c:	4613      	mov	r3, r2
 800a10e:	00db      	lsls	r3, r3, #3
 800a110:	4413      	add	r3, r2
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	440b      	add	r3, r1
 800a116:	334c      	adds	r3, #76	; 0x4c
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	78fb      	ldrb	r3, [r7, #3]
 800a11c:	4619      	mov	r1, r3
 800a11e:	f7fe fcb0 	bl	8008a82 <USBD_LL_DataInStage>
}
 800a122:	bf00      	nop
 800a124:	3708      	adds	r7, #8
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b082      	sub	sp, #8
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a138:	4618      	mov	r0, r3
 800a13a:	f7fe fde4 	bl	8008d06 <USBD_LL_SOF>
}
 800a13e:	bf00      	nop
 800a140:	3708      	adds	r7, #8
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b084      	sub	sp, #16
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a14e:	2301      	movs	r3, #1
 800a150:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d102      	bne.n	800a160 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a15a:	2300      	movs	r3, #0
 800a15c:	73fb      	strb	r3, [r7, #15]
 800a15e:	e008      	b.n	800a172 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	2b02      	cmp	r3, #2
 800a166:	d102      	bne.n	800a16e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a168:	2301      	movs	r3, #1
 800a16a:	73fb      	strb	r3, [r7, #15]
 800a16c:	e001      	b.n	800a172 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a16e:	f7f7 ff13 	bl	8001f98 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a178:	7bfa      	ldrb	r2, [r7, #15]
 800a17a:	4611      	mov	r1, r2
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7fe fd84 	bl	8008c8a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a188:	4618      	mov	r0, r3
 800a18a:	f7fe fd2c 	bl	8008be6 <USBD_LL_Reset>
}
 800a18e:	bf00      	nop
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
	...

0800a198 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7fe fd7f 	bl	8008caa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	6812      	ldr	r2, [r2, #0]
 800a1ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a1be:	f043 0301 	orr.w	r3, r3, #1
 800a1c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6a1b      	ldr	r3, [r3, #32]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d005      	beq.n	800a1d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a1cc:	4b04      	ldr	r3, [pc, #16]	; (800a1e0 <HAL_PCD_SuspendCallback+0x48>)
 800a1ce:	691b      	ldr	r3, [r3, #16]
 800a1d0:	4a03      	ldr	r2, [pc, #12]	; (800a1e0 <HAL_PCD_SuspendCallback+0x48>)
 800a1d2:	f043 0306 	orr.w	r3, r3, #6
 800a1d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a1d8:	bf00      	nop
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	e000ed00 	.word	0xe000ed00

0800a1e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7fe fd6f 	bl	8008cd6 <USBD_LL_Resume>
}
 800a1f8:	bf00      	nop
 800a1fa:	3708      	adds	r7, #8
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b082      	sub	sp, #8
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	460b      	mov	r3, r1
 800a20a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a212:	78fa      	ldrb	r2, [r7, #3]
 800a214:	4611      	mov	r1, r2
 800a216:	4618      	mov	r0, r3
 800a218:	f7fe fdc7 	bl	8008daa <USBD_LL_IsoOUTIncomplete>
}
 800a21c:	bf00      	nop
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	460b      	mov	r3, r1
 800a22e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a236:	78fa      	ldrb	r2, [r7, #3]
 800a238:	4611      	mov	r1, r2
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fe fd83 	bl	8008d46 <USBD_LL_IsoINIncomplete>
}
 800a240:	bf00      	nop
 800a242:	3708      	adds	r7, #8
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a256:	4618      	mov	r0, r3
 800a258:	f7fe fdd9 	bl	8008e0e <USBD_LL_DevConnected>
}
 800a25c:	bf00      	nop
 800a25e:	3708      	adds	r7, #8
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a272:	4618      	mov	r0, r3
 800a274:	f7fe fdd6 	bl	8008e24 <USBD_LL_DevDisconnected>
}
 800a278:	bf00      	nop
 800a27a:	3708      	adds	r7, #8
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d13c      	bne.n	800a30a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a290:	4a20      	ldr	r2, [pc, #128]	; (800a314 <USBD_LL_Init+0x94>)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	4a1e      	ldr	r2, [pc, #120]	; (800a314 <USBD_LL_Init+0x94>)
 800a29c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a2a0:	4b1c      	ldr	r3, [pc, #112]	; (800a314 <USBD_LL_Init+0x94>)
 800a2a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a2a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a2a8:	4b1a      	ldr	r3, [pc, #104]	; (800a314 <USBD_LL_Init+0x94>)
 800a2aa:	2204      	movs	r2, #4
 800a2ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a2ae:	4b19      	ldr	r3, [pc, #100]	; (800a314 <USBD_LL_Init+0x94>)
 800a2b0:	2202      	movs	r2, #2
 800a2b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a2b4:	4b17      	ldr	r3, [pc, #92]	; (800a314 <USBD_LL_Init+0x94>)
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a2ba:	4b16      	ldr	r3, [pc, #88]	; (800a314 <USBD_LL_Init+0x94>)
 800a2bc:	2202      	movs	r2, #2
 800a2be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a2c0:	4b14      	ldr	r3, [pc, #80]	; (800a314 <USBD_LL_Init+0x94>)
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a2c6:	4b13      	ldr	r3, [pc, #76]	; (800a314 <USBD_LL_Init+0x94>)
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a2cc:	4b11      	ldr	r3, [pc, #68]	; (800a314 <USBD_LL_Init+0x94>)
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a2d2:	4b10      	ldr	r3, [pc, #64]	; (800a314 <USBD_LL_Init+0x94>)
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a2d8:	4b0e      	ldr	r3, [pc, #56]	; (800a314 <USBD_LL_Init+0x94>)
 800a2da:	2200      	movs	r2, #0
 800a2dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a2de:	480d      	ldr	r0, [pc, #52]	; (800a314 <USBD_LL_Init+0x94>)
 800a2e0:	f7f9 fbe7 	bl	8003ab2 <HAL_PCD_Init>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d001      	beq.n	800a2ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a2ea:	f7f7 fe55 	bl	8001f98 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a2ee:	2180      	movs	r1, #128	; 0x80
 800a2f0:	4808      	ldr	r0, [pc, #32]	; (800a314 <USBD_LL_Init+0x94>)
 800a2f2:	f7fa fe26 	bl	8004f42 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a2f6:	2240      	movs	r2, #64	; 0x40
 800a2f8:	2100      	movs	r1, #0
 800a2fa:	4806      	ldr	r0, [pc, #24]	; (800a314 <USBD_LL_Init+0x94>)
 800a2fc:	f7fa fdda 	bl	8004eb4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a300:	2280      	movs	r2, #128	; 0x80
 800a302:	2101      	movs	r1, #1
 800a304:	4803      	ldr	r0, [pc, #12]	; (800a314 <USBD_LL_Init+0x94>)
 800a306:	f7fa fdd5 	bl	8004eb4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	20003cf4 	.word	0x20003cf4

0800a318 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a320:	2300      	movs	r3, #0
 800a322:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a324:	2300      	movs	r3, #0
 800a326:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a32e:	4618      	mov	r0, r3
 800a330:	f7f9 fcdc 	bl	8003cec <HAL_PCD_Start>
 800a334:	4603      	mov	r3, r0
 800a336:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a338:	7bfb      	ldrb	r3, [r7, #15]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f000 f930 	bl	800a5a0 <USBD_Get_USB_Status>
 800a340:	4603      	mov	r3, r0
 800a342:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a344:	7bbb      	ldrb	r3, [r7, #14]
}
 800a346:	4618      	mov	r0, r3
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b084      	sub	sp, #16
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
 800a356:	4608      	mov	r0, r1
 800a358:	4611      	mov	r1, r2
 800a35a:	461a      	mov	r2, r3
 800a35c:	4603      	mov	r3, r0
 800a35e:	70fb      	strb	r3, [r7, #3]
 800a360:	460b      	mov	r3, r1
 800a362:	70bb      	strb	r3, [r7, #2]
 800a364:	4613      	mov	r3, r2
 800a366:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a368:	2300      	movs	r3, #0
 800a36a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a36c:	2300      	movs	r3, #0
 800a36e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a376:	78bb      	ldrb	r3, [r7, #2]
 800a378:	883a      	ldrh	r2, [r7, #0]
 800a37a:	78f9      	ldrb	r1, [r7, #3]
 800a37c:	f7fa f9ad 	bl	80046da <HAL_PCD_EP_Open>
 800a380:	4603      	mov	r3, r0
 800a382:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a384:	7bfb      	ldrb	r3, [r7, #15]
 800a386:	4618      	mov	r0, r3
 800a388:	f000 f90a 	bl	800a5a0 <USBD_Get_USB_Status>
 800a38c:	4603      	mov	r3, r0
 800a38e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a390:	7bbb      	ldrb	r3, [r7, #14]
}
 800a392:	4618      	mov	r0, r3
 800a394:	3710      	adds	r7, #16
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}

0800a39a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b084      	sub	sp, #16
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a3b4:	78fa      	ldrb	r2, [r7, #3]
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7fa f9f6 	bl	80047aa <HAL_PCD_EP_Close>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a3c2:	7bfb      	ldrb	r3, [r7, #15]
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f000 f8eb 	bl	800a5a0 <USBD_Get_USB_Status>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3710      	adds	r7, #16
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a3f2:	78fa      	ldrb	r2, [r7, #3]
 800a3f4:	4611      	mov	r1, r2
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7fa fab6 	bl	8004968 <HAL_PCD_EP_SetStall>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a400:	7bfb      	ldrb	r3, [r7, #15]
 800a402:	4618      	mov	r0, r3
 800a404:	f000 f8cc 	bl	800a5a0 <USBD_Get_USB_Status>
 800a408:	4603      	mov	r3, r0
 800a40a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a40c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3710      	adds	r7, #16
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a416:	b580      	push	{r7, lr}
 800a418:	b084      	sub	sp, #16
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
 800a41e:	460b      	mov	r3, r1
 800a420:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a422:	2300      	movs	r3, #0
 800a424:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a426:	2300      	movs	r3, #0
 800a428:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a430:	78fa      	ldrb	r2, [r7, #3]
 800a432:	4611      	mov	r1, r2
 800a434:	4618      	mov	r0, r3
 800a436:	f7fa fafb 	bl	8004a30 <HAL_PCD_EP_ClrStall>
 800a43a:	4603      	mov	r3, r0
 800a43c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a43e:	7bfb      	ldrb	r3, [r7, #15]
 800a440:	4618      	mov	r0, r3
 800a442:	f000 f8ad 	bl	800a5a0 <USBD_Get_USB_Status>
 800a446:	4603      	mov	r3, r0
 800a448:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a44a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	460b      	mov	r3, r1
 800a45e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a466:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a468:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	da0b      	bge.n	800a488 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a470:	78fb      	ldrb	r3, [r7, #3]
 800a472:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a476:	68f9      	ldr	r1, [r7, #12]
 800a478:	4613      	mov	r3, r2
 800a47a:	00db      	lsls	r3, r3, #3
 800a47c:	4413      	add	r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	440b      	add	r3, r1
 800a482:	333e      	adds	r3, #62	; 0x3e
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	e00b      	b.n	800a4a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a488:	78fb      	ldrb	r3, [r7, #3]
 800a48a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a48e:	68f9      	ldr	r1, [r7, #12]
 800a490:	4613      	mov	r3, r2
 800a492:	00db      	lsls	r3, r3, #3
 800a494:	4413      	add	r3, r2
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	440b      	add	r3, r1
 800a49a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a49e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3714      	adds	r7, #20
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a4c6:	78fa      	ldrb	r2, [r7, #3]
 800a4c8:	4611      	mov	r1, r2
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7fa f8e0 	bl	8004690 <HAL_PCD_SetAddress>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4d4:	7bfb      	ldrb	r3, [r7, #15]
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f000 f862 	bl	800a5a0 <USBD_Get_USB_Status>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3710      	adds	r7, #16
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b086      	sub	sp, #24
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	60f8      	str	r0, [r7, #12]
 800a4f2:	607a      	str	r2, [r7, #4]
 800a4f4:	603b      	str	r3, [r7, #0]
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4fe:	2300      	movs	r3, #0
 800a500:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a508:	7af9      	ldrb	r1, [r7, #11]
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	f7fa f9e1 	bl	80048d4 <HAL_PCD_EP_Transmit>
 800a512:	4603      	mov	r3, r0
 800a514:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a516:	7dfb      	ldrb	r3, [r7, #23]
 800a518:	4618      	mov	r0, r3
 800a51a:	f000 f841 	bl	800a5a0 <USBD_Get_USB_Status>
 800a51e:	4603      	mov	r3, r0
 800a520:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a522:	7dbb      	ldrb	r3, [r7, #22]
}
 800a524:	4618      	mov	r0, r3
 800a526:	3718      	adds	r7, #24
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b086      	sub	sp, #24
 800a530:	af00      	add	r7, sp, #0
 800a532:	60f8      	str	r0, [r7, #12]
 800a534:	607a      	str	r2, [r7, #4]
 800a536:	603b      	str	r3, [r7, #0]
 800a538:	460b      	mov	r3, r1
 800a53a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a53c:	2300      	movs	r3, #0
 800a53e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a540:	2300      	movs	r3, #0
 800a542:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a54a:	7af9      	ldrb	r1, [r7, #11]
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	f7fa f975 	bl	800483e <HAL_PCD_EP_Receive>
 800a554:	4603      	mov	r3, r0
 800a556:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a558:	7dfb      	ldrb	r3, [r7, #23]
 800a55a:	4618      	mov	r0, r3
 800a55c:	f000 f820 	bl	800a5a0 <USBD_Get_USB_Status>
 800a560:	4603      	mov	r3, r0
 800a562:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a564:	7dbb      	ldrb	r3, [r7, #22]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3718      	adds	r7, #24
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
	...

0800a570 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800a578:	4b03      	ldr	r3, [pc, #12]	; (800a588 <USBD_static_malloc+0x18>)
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	370c      	adds	r7, #12
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	20004200 	.word	0x20004200

0800a58c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]

}
 800a594:	bf00      	nop
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b085      	sub	sp, #20
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a5ae:	79fb      	ldrb	r3, [r7, #7]
 800a5b0:	2b03      	cmp	r3, #3
 800a5b2:	d817      	bhi.n	800a5e4 <USBD_Get_USB_Status+0x44>
 800a5b4:	a201      	add	r2, pc, #4	; (adr r2, 800a5bc <USBD_Get_USB_Status+0x1c>)
 800a5b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ba:	bf00      	nop
 800a5bc:	0800a5cd 	.word	0x0800a5cd
 800a5c0:	0800a5d3 	.word	0x0800a5d3
 800a5c4:	0800a5d9 	.word	0x0800a5d9
 800a5c8:	0800a5df 	.word	0x0800a5df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	73fb      	strb	r3, [r7, #15]
    break;
 800a5d0:	e00b      	b.n	800a5ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a5d2:	2303      	movs	r3, #3
 800a5d4:	73fb      	strb	r3, [r7, #15]
    break;
 800a5d6:	e008      	b.n	800a5ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	73fb      	strb	r3, [r7, #15]
    break;
 800a5dc:	e005      	b.n	800a5ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a5e2:	e002      	b.n	800a5ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a5e4:	2303      	movs	r3, #3
 800a5e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a5e8:	bf00      	nop
  }
  return usb_status;
 800a5ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3714      	adds	r7, #20
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <arm_mean_f32>:
 800a5f8:	b430      	push	{r4, r5}
 800a5fa:	088d      	lsrs	r5, r1, #2
 800a5fc:	eddf 7a16 	vldr	s15, [pc, #88]	; 800a658 <arm_mean_f32+0x60>
 800a600:	d017      	beq.n	800a632 <arm_mean_f32+0x3a>
 800a602:	4603      	mov	r3, r0
 800a604:	462c      	mov	r4, r5
 800a606:	edd3 5a00 	vldr	s11, [r3]
 800a60a:	ed93 6a01 	vldr	s12, [r3, #4]
 800a60e:	edd3 6a02 	vldr	s13, [r3, #8]
 800a612:	ed93 7a03 	vldr	s14, [r3, #12]
 800a616:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a61a:	3c01      	subs	r4, #1
 800a61c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a620:	f103 0310 	add.w	r3, r3, #16
 800a624:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a628:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a62c:	d1eb      	bne.n	800a606 <arm_mean_f32+0xe>
 800a62e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800a632:	f011 0303 	ands.w	r3, r1, #3
 800a636:	d005      	beq.n	800a644 <arm_mean_f32+0x4c>
 800a638:	ecb0 7a01 	vldmia	r0!, {s14}
 800a63c:	3b01      	subs	r3, #1
 800a63e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a642:	d1f9      	bne.n	800a638 <arm_mean_f32+0x40>
 800a644:	ee06 1a90 	vmov	s13, r1
 800a648:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 800a64c:	bc30      	pop	{r4, r5}
 800a64e:	eec7 7a87 	vdiv.f32	s15, s15, s14
 800a652:	edc2 7a00 	vstr	s15, [r2]
 800a656:	4770      	bx	lr
 800a658:	00000000 	.word	0x00000000

0800a65c <arm_mat_trans_f32>:
 800a65c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a660:	b086      	sub	sp, #24
 800a662:	8802      	ldrh	r2, [r0, #0]
 800a664:	9201      	str	r2, [sp, #4]
 800a666:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800a66a:	8843      	ldrh	r3, [r0, #2]
 800a66c:	6848      	ldr	r0, [r1, #4]
 800a66e:	884a      	ldrh	r2, [r1, #2]
 800a670:	9002      	str	r0, [sp, #8]
 800a672:	9801      	ldr	r0, [sp, #4]
 800a674:	4282      	cmp	r2, r0
 800a676:	d15f      	bne.n	800a738 <arm_mat_trans_f32+0xdc>
 800a678:	f8b1 a000 	ldrh.w	sl, [r1]
 800a67c:	459a      	cmp	sl, r3
 800a67e:	d15b      	bne.n	800a738 <arm_mat_trans_f32+0xdc>
 800a680:	ea4f 0b9a 	mov.w	fp, sl, lsr #2
 800a684:	f00a 0a03 	and.w	sl, sl, #3
 800a688:	f10a 32ff 	add.w	r2, sl, #4294967295
 800a68c:	b292      	uxth	r2, r2
 800a68e:	0084      	lsls	r4, r0, #2
 800a690:	00c7      	lsls	r7, r0, #3
 800a692:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a696:	3201      	adds	r2, #1
 800a698:	0092      	lsls	r2, r2, #2
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	193e      	adds	r6, r7, r4
 800a69e:	3301      	adds	r3, #1
 800a6a0:	1931      	adds	r1, r6, r4
 800a6a2:	9203      	str	r2, [sp, #12]
 800a6a4:	9a01      	ldr	r2, [sp, #4]
 800a6a6:	0118      	lsls	r0, r3, #4
 800a6a8:	fb03 f101 	mul.w	r1, r3, r1
 800a6ac:	9005      	str	r0, [sp, #20]
 800a6ae:	9104      	str	r1, [sp, #16]
 800a6b0:	ea4f 1c02 	mov.w	ip, r2, lsl #4
 800a6b4:	f04f 0900 	mov.w	r9, #0
 800a6b8:	9b02      	ldr	r3, [sp, #8]
 800a6ba:	eb03 0189 	add.w	r1, r3, r9, lsl #2
 800a6be:	f1bb 0f00 	cmp.w	fp, #0
 800a6c2:	d01d      	beq.n	800a700 <arm_mat_trans_f32+0xa4>
 800a6c4:	4642      	mov	r2, r8
 800a6c6:	4658      	mov	r0, fp
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	6815      	ldr	r5, [r2, #0]
 800a6cc:	601d      	str	r5, [r3, #0]
 800a6ce:	edd2 7a01 	vldr	s15, [r2, #4]
 800a6d2:	191d      	adds	r5, r3, r4
 800a6d4:	edc5 7a00 	vstr	s15, [r5]
 800a6d8:	edd2 7a02 	vldr	s15, [r2, #8]
 800a6dc:	19dd      	adds	r5, r3, r7
 800a6de:	edc5 7a00 	vstr	s15, [r5]
 800a6e2:	edd2 7a03 	vldr	s15, [r2, #12]
 800a6e6:	3801      	subs	r0, #1
 800a6e8:	199d      	adds	r5, r3, r6
 800a6ea:	b280      	uxth	r0, r0
 800a6ec:	3210      	adds	r2, #16
 800a6ee:	edc5 7a00 	vstr	s15, [r5]
 800a6f2:	4463      	add	r3, ip
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d1e8      	bne.n	800a6ca <arm_mat_trans_f32+0x6e>
 800a6f8:	9805      	ldr	r0, [sp, #20]
 800a6fa:	9a04      	ldr	r2, [sp, #16]
 800a6fc:	4480      	add	r8, r0
 800a6fe:	4411      	add	r1, r2
 800a700:	f1ba 0f00 	cmp.w	sl, #0
 800a704:	d00b      	beq.n	800a71e <arm_mat_trans_f32+0xc2>
 800a706:	4653      	mov	r3, sl
 800a708:	4642      	mov	r2, r8
 800a70a:	3b01      	subs	r3, #1
 800a70c:	f852 0b04 	ldr.w	r0, [r2], #4
 800a710:	6008      	str	r0, [r1, #0]
 800a712:	b29b      	uxth	r3, r3
 800a714:	4421      	add	r1, r4
 800a716:	2b00      	cmp	r3, #0
 800a718:	d1f7      	bne.n	800a70a <arm_mat_trans_f32+0xae>
 800a71a:	9b03      	ldr	r3, [sp, #12]
 800a71c:	4498      	add	r8, r3
 800a71e:	f109 0901 	add.w	r9, r9, #1
 800a722:	9801      	ldr	r0, [sp, #4]
 800a724:	fa1f f989 	uxth.w	r9, r9
 800a728:	4581      	cmp	r9, r0
 800a72a:	d1c5      	bne.n	800a6b8 <arm_mat_trans_f32+0x5c>
 800a72c:	2000      	movs	r0, #0
 800a72e:	b240      	sxtb	r0, r0
 800a730:	b006      	add	sp, #24
 800a732:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a736:	4770      	bx	lr
 800a738:	20fd      	movs	r0, #253	; 0xfd
 800a73a:	b240      	sxtb	r0, r0
 800a73c:	b006      	add	sp, #24
 800a73e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a742:	4770      	bx	lr

0800a744 <arm_mat_mult_f32>:
 800a744:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a748:	b08a      	sub	sp, #40	; 0x28
 800a74a:	9102      	str	r1, [sp, #8]
 800a74c:	9c02      	ldr	r4, [sp, #8]
 800a74e:	8841      	ldrh	r1, [r0, #2]
 800a750:	8823      	ldrh	r3, [r4, #0]
 800a752:	6844      	ldr	r4, [r0, #4]
 800a754:	9400      	str	r4, [sp, #0]
 800a756:	9c02      	ldr	r4, [sp, #8]
 800a758:	8800      	ldrh	r0, [r0, #0]
 800a75a:	9005      	str	r0, [sp, #20]
 800a75c:	8864      	ldrh	r4, [r4, #2]
 800a75e:	6850      	ldr	r0, [r2, #4]
 800a760:	9007      	str	r0, [sp, #28]
 800a762:	428b      	cmp	r3, r1
 800a764:	9401      	str	r4, [sp, #4]
 800a766:	f040 809d 	bne.w	800a8a4 <arm_mat_mult_f32+0x160>
 800a76a:	8811      	ldrh	r1, [r2, #0]
 800a76c:	9805      	ldr	r0, [sp, #20]
 800a76e:	4281      	cmp	r1, r0
 800a770:	f040 8098 	bne.w	800a8a4 <arm_mat_mult_f32+0x160>
 800a774:	8852      	ldrh	r2, [r2, #2]
 800a776:	42a2      	cmp	r2, r4
 800a778:	f040 8094 	bne.w	800a8a4 <arm_mat_mult_f32+0x160>
 800a77c:	9901      	ldr	r1, [sp, #4]
 800a77e:	f8dd c008 	ldr.w	ip, [sp, #8]
 800a782:	ea4f 0a93 	mov.w	sl, r3, lsr #2
 800a786:	00a4      	lsls	r4, r4, #2
 800a788:	00cf      	lsls	r7, r1, #3
 800a78a:	f10a 30ff 	add.w	r0, sl, #4294967295
 800a78e:	193e      	adds	r6, r7, r4
 800a790:	b280      	uxth	r0, r0
 800a792:	1932      	adds	r2, r6, r4
 800a794:	fb00 2202 	mla	r2, r0, r2, r2
 800a798:	0105      	lsls	r5, r0, #4
 800a79a:	9801      	ldr	r0, [sp, #4]
 800a79c:	9204      	str	r2, [sp, #16]
 800a79e:	3510      	adds	r5, #16
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f003 0b03 	and.w	fp, r3, #3
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800a7ac:	9509      	str	r5, [sp, #36]	; 0x24
 800a7ae:	ea4f 1c00 	mov.w	ip, r0, lsl #4
 800a7b2:	9308      	str	r3, [sp, #32]
 800a7b4:	9206      	str	r2, [sp, #24]
 800a7b6:	4610      	mov	r0, r2
 800a7b8:	9b07      	ldr	r3, [sp, #28]
 800a7ba:	9a00      	ldr	r2, [sp, #0]
 800a7bc:	eb03 0980 	add.w	r9, r3, r0, lsl #2
 800a7c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7c2:	441a      	add	r2, r3
 800a7c4:	9203      	str	r2, [sp, #12]
 800a7c6:	f04f 0800 	mov.w	r8, #0
 800a7ca:	eddf 7a39 	vldr	s15, [pc, #228]	; 800a8b0 <arm_mat_mult_f32+0x16c>
 800a7ce:	f1ba 0f00 	cmp.w	sl, #0
 800a7d2:	d05f      	beq.n	800a894 <arm_mat_mult_f32+0x150>
 800a7d4:	9b00      	ldr	r3, [sp, #0]
 800a7d6:	4650      	mov	r0, sl
 800a7d8:	460a      	mov	r2, r1
 800a7da:	edd2 6a00 	vldr	s13, [r2]
 800a7de:	ed93 5a00 	vldr	s10, [r3]
 800a7e2:	edd3 5a01 	vldr	s11, [r3, #4]
 800a7e6:	ed93 7a02 	vldr	s14, [r3, #8]
 800a7ea:	ed93 6a03 	vldr	s12, [r3, #12]
 800a7ee:	1915      	adds	r5, r2, r4
 800a7f0:	ee25 5a26 	vmul.f32	s10, s10, s13
 800a7f4:	edd5 6a00 	vldr	s13, [r5]
 800a7f8:	18bd      	adds	r5, r7, r2
 800a7fa:	ee65 5aa6 	vmul.f32	s11, s11, s13
 800a7fe:	ee75 7a27 	vadd.f32	s15, s10, s15
 800a802:	edd5 6a00 	vldr	s13, [r5]
 800a806:	4615      	mov	r5, r2
 800a808:	4435      	add	r5, r6
 800a80a:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800a80e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a812:	edd5 6a00 	vldr	s13, [r5]
 800a816:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a81a:	3801      	subs	r0, #1
 800a81c:	ee66 7a26 	vmul.f32	s15, s12, s13
 800a820:	b280      	uxth	r0, r0
 800a822:	4462      	add	r2, ip
 800a824:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a828:	3310      	adds	r3, #16
 800a82a:	2800      	cmp	r0, #0
 800a82c:	d1d5      	bne.n	800a7da <arm_mat_mult_f32+0x96>
 800a82e:	9804      	ldr	r0, [sp, #16]
 800a830:	9a03      	ldr	r2, [sp, #12]
 800a832:	4401      	add	r1, r0
 800a834:	f1bb 0f00 	cmp.w	fp, #0
 800a838:	d00d      	beq.n	800a856 <arm_mat_mult_f32+0x112>
 800a83a:	465b      	mov	r3, fp
 800a83c:	ed91 7a00 	vldr	s14, [r1]
 800a840:	ecf2 6a01 	vldmia	r2!, {s13}
 800a844:	3b01      	subs	r3, #1
 800a846:	ee26 7a87 	vmul.f32	s14, s13, s14
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a850:	4421      	add	r1, r4
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1f2      	bne.n	800a83c <arm_mat_mult_f32+0xf8>
 800a856:	9902      	ldr	r1, [sp, #8]
 800a858:	ece9 7a01 	vstmia	r9!, {s15}
 800a85c:	f108 0801 	add.w	r8, r8, #1
 800a860:	9a01      	ldr	r2, [sp, #4]
 800a862:	684b      	ldr	r3, [r1, #4]
 800a864:	fa1f f888 	uxth.w	r8, r8
 800a868:	4590      	cmp	r8, r2
 800a86a:	eb03 0188 	add.w	r1, r3, r8, lsl #2
 800a86e:	d1ac      	bne.n	800a7ca <arm_mat_mult_f32+0x86>
 800a870:	9805      	ldr	r0, [sp, #20]
 800a872:	4611      	mov	r1, r2
 800a874:	1e42      	subs	r2, r0, #1
 800a876:	b292      	uxth	r2, r2
 800a878:	9205      	str	r2, [sp, #20]
 800a87a:	9a06      	ldr	r2, [sp, #24]
 800a87c:	9808      	ldr	r0, [sp, #32]
 800a87e:	440a      	add	r2, r1
 800a880:	b292      	uxth	r2, r2
 800a882:	9206      	str	r2, [sp, #24]
 800a884:	9a00      	ldr	r2, [sp, #0]
 800a886:	9905      	ldr	r1, [sp, #20]
 800a888:	4402      	add	r2, r0
 800a88a:	9200      	str	r2, [sp, #0]
 800a88c:	b121      	cbz	r1, 800a898 <arm_mat_mult_f32+0x154>
 800a88e:	4619      	mov	r1, r3
 800a890:	9806      	ldr	r0, [sp, #24]
 800a892:	e791      	b.n	800a7b8 <arm_mat_mult_f32+0x74>
 800a894:	9a00      	ldr	r2, [sp, #0]
 800a896:	e7cd      	b.n	800a834 <arm_mat_mult_f32+0xf0>
 800a898:	4608      	mov	r0, r1
 800a89a:	b240      	sxtb	r0, r0
 800a89c:	b00a      	add	sp, #40	; 0x28
 800a89e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a8a2:	4770      	bx	lr
 800a8a4:	20fd      	movs	r0, #253	; 0xfd
 800a8a6:	b240      	sxtb	r0, r0
 800a8a8:	b00a      	add	sp, #40	; 0x28
 800a8aa:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a8ae:	4770      	bx	lr
 800a8b0:	00000000 	.word	0x00000000

0800a8b4 <arm_mat_inverse_f32>:
 800a8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b8:	b089      	sub	sp, #36	; 0x24
 800a8ba:	8803      	ldrh	r3, [r0, #0]
 800a8bc:	8844      	ldrh	r4, [r0, #2]
 800a8be:	6842      	ldr	r2, [r0, #4]
 800a8c0:	9201      	str	r2, [sp, #4]
 800a8c2:	429c      	cmp	r4, r3
 800a8c4:	684a      	ldr	r2, [r1, #4]
 800a8c6:	9202      	str	r2, [sp, #8]
 800a8c8:	4680      	mov	r8, r0
 800a8ca:	d004      	beq.n	800a8d6 <arm_mat_inverse_f32+0x22>
 800a8cc:	20fd      	movs	r0, #253	; 0xfd
 800a8ce:	b240      	sxtb	r0, r0
 800a8d0:	b009      	add	sp, #36	; 0x24
 800a8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d6:	880a      	ldrh	r2, [r1, #0]
 800a8d8:	884b      	ldrh	r3, [r1, #2]
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d1f6      	bne.n	800a8cc <arm_mat_inverse_f32+0x18>
 800a8de:	429c      	cmp	r4, r3
 800a8e0:	d1f4      	bne.n	800a8cc <arm_mat_inverse_f32+0x18>
 800a8e2:	2c00      	cmp	r4, #0
 800a8e4:	f000 8105 	beq.w	800aaf2 <arm_mat_inverse_f32+0x23e>
 800a8e8:	f104 4580 	add.w	r5, r4, #1073741824	; 0x40000000
 800a8ec:	3d01      	subs	r5, #1
 800a8ee:	00ad      	lsls	r5, r5, #2
 800a8f0:	9e02      	ldr	r6, [sp, #8]
 800a8f2:	2701      	movs	r7, #1
 800a8f4:	f04f 0a04 	mov.w	sl, #4
 800a8f8:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
 800a8fc:	e014      	b.n	800a928 <arm_mat_inverse_f32+0x74>
 800a8fe:	2100      	movs	r1, #0
 800a900:	462a      	mov	r2, r5
 800a902:	4618      	mov	r0, r3
 800a904:	eb03 0905 	add.w	r9, r3, r5
 800a908:	f000 f96c 	bl	800abe4 <memset>
 800a90c:	1d28      	adds	r0, r5, #4
 800a90e:	4430      	add	r0, r6
 800a910:	4652      	mov	r2, sl
 800a912:	2100      	movs	r1, #0
 800a914:	464e      	mov	r6, r9
 800a916:	b11f      	cbz	r7, 800a920 <arm_mat_inverse_f32+0x6c>
 800a918:	f000 f964 	bl	800abe4 <memset>
 800a91c:	eb09 060a 	add.w	r6, r9, sl
 800a920:	f10a 0a04 	add.w	sl, sl, #4
 800a924:	3d04      	subs	r5, #4
 800a926:	3701      	adds	r7, #1
 800a928:	42bc      	cmp	r4, r7
 800a92a:	f8c6 b000 	str.w	fp, [r6]
 800a92e:	f106 0304 	add.w	r3, r6, #4
 800a932:	d1e4      	bne.n	800a8fe <arm_mat_inverse_f32+0x4a>
 800a934:	2c00      	cmp	r4, #0
 800a936:	f000 80dc 	beq.w	800aaf2 <arm_mat_inverse_f32+0x23e>
 800a93a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a93e:	2000      	movs	r0, #0
 800a940:	f10c 0304 	add.w	r3, ip, #4
 800a944:	1e62      	subs	r2, r4, #1
 800a946:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a94a:	f8dd a008 	ldr.w	sl, [sp, #8]
 800a94e:	9306      	str	r3, [sp, #24]
 800a950:	f8cd c000 	str.w	ip, [sp]
 800a954:	9005      	str	r0, [sp, #20]
 800a956:	9203      	str	r2, [sp, #12]
 800a958:	4627      	mov	r7, r4
 800a95a:	f8cd 801c 	str.w	r8, [sp, #28]
 800a95e:	4284      	cmp	r4, r0
 800a960:	edd9 7a00 	vldr	s15, [r9]
 800a964:	f240 80c5 	bls.w	800aaf2 <arm_mat_inverse_f32+0x23e>
 800a968:	eeb0 7a67 	vmov.f32	s14, s15
 800a96c:	eddf 6a75 	vldr	s13, [pc, #468]	; 800ab44 <arm_mat_inverse_f32+0x290>
 800a970:	4603      	mov	r3, r0
 800a972:	464a      	mov	r2, r9
 800a974:	e001      	b.n	800a97a <arm_mat_inverse_f32+0xc6>
 800a976:	ed92 7a00 	vldr	s14, [r2]
 800a97a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800a97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a982:	bfd8      	it	le
 800a984:	eeb1 7a47 	vnegle.f32	s14, s14
 800a988:	eeb4 7a66 	vcmp.f32	s14, s13
 800a98c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a990:	f103 0301 	add.w	r3, r3, #1
 800a994:	bfc8      	it	gt
 800a996:	eef0 6a47 	vmovgt.f32	s13, s14
 800a99a:	429c      	cmp	r4, r3
 800a99c:	4462      	add	r2, ip
 800a99e:	d8ea      	bhi.n	800a976 <arm_mat_inverse_f32+0xc2>
 800a9a0:	eef5 6a40 	vcmp.f32	s13, #0.0
 800a9a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9a8:	f000 80a3 	beq.w	800aaf2 <arm_mat_inverse_f32+0x23e>
 800a9ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9b4:	bfd4      	ite	le
 800a9b6:	eeb1 7a67 	vnegle.f32	s14, s15
 800a9ba:	eeb0 7a67 	vmovgt.f32	s14, s15
 800a9be:	eef4 6a47 	vcmp.f32	s13, s14
 800a9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9c6:	d010      	beq.n	800a9ea <arm_mat_inverse_f32+0x136>
 800a9c8:	9b03      	ldr	r3, [sp, #12]
 800a9ca:	b173      	cbz	r3, 800a9ea <arm_mat_inverse_f32+0x136>
 800a9cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9d4:	eeb1 7a67 	vneg.f32	s14, s15
 800a9d8:	bfc8      	it	gt
 800a9da:	eeb0 7a67 	vmovgt.f32	s14, s15
 800a9de:	eef4 6a47 	vcmp.f32	s13, s14
 800a9e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9e6:	f000 8086 	beq.w	800aaf6 <arm_mat_inverse_f32+0x242>
 800a9ea:	9b05      	ldr	r3, [sp, #20]
 800a9ec:	b933      	cbnz	r3, 800a9fc <arm_mat_inverse_f32+0x148>
 800a9ee:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a9f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9f6:	d07c      	beq.n	800aaf2 <arm_mat_inverse_f32+0x23e>
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	9305      	str	r3, [sp, #20]
 800a9fc:	eb0a 020c 	add.w	r2, sl, ip
 800aa00:	9204      	str	r2, [sp, #16]
 800aa02:	b14f      	cbz	r7, 800aa18 <arm_mat_inverse_f32+0x164>
 800aa04:	463a      	mov	r2, r7
 800aa06:	464b      	mov	r3, r9
 800aa08:	ed93 7a00 	vldr	s14, [r3]
 800aa0c:	ee87 7a27 	vdiv.f32	s14, s14, s15
 800aa10:	3a01      	subs	r2, #1
 800aa12:	eca3 7a01 	vstmia	r3!, {s14}
 800aa16:	d1f7      	bne.n	800aa08 <arm_mat_inverse_f32+0x154>
 800aa18:	4625      	mov	r5, r4
 800aa1a:	4653      	mov	r3, sl
 800aa1c:	ed93 7a00 	vldr	s14, [r3]
 800aa20:	ee87 7a27 	vdiv.f32	s14, s14, s15
 800aa24:	3d01      	subs	r5, #1
 800aa26:	eca3 7a01 	vstmia	r3!, {s14}
 800aa2a:	d1f7      	bne.n	800aa1c <arm_mat_inverse_f32+0x168>
 800aa2c:	9e02      	ldr	r6, [sp, #8]
 800aa2e:	9901      	ldr	r1, [sp, #4]
 800aa30:	ea4f 0880 	mov.w	r8, r0, lsl #2
 800aa34:	4285      	cmp	r5, r0
 800aa36:	f000 8081 	beq.w	800ab3c <arm_mat_inverse_f32+0x288>
 800aa3a:	edd1 7a00 	vldr	s15, [r1]
 800aa3e:	b187      	cbz	r7, 800aa62 <arm_mat_inverse_f32+0x1ae>
 800aa40:	463a      	mov	r2, r7
 800aa42:	46cb      	mov	fp, r9
 800aa44:	460b      	mov	r3, r1
 800aa46:	ecbb 7a01 	vldmia	fp!, {s14}
 800aa4a:	edd3 6a00 	vldr	s13, [r3]
 800aa4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800aa52:	3a01      	subs	r2, #1
 800aa54:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800aa58:	eca3 7a01 	vstmia	r3!, {s14}
 800aa5c:	d1f3      	bne.n	800aa46 <arm_mat_inverse_f32+0x192>
 800aa5e:	9a00      	ldr	r2, [sp, #0]
 800aa60:	4411      	add	r1, r2
 800aa62:	4622      	mov	r2, r4
 800aa64:	46d3      	mov	fp, sl
 800aa66:	4633      	mov	r3, r6
 800aa68:	ecbb 7a01 	vldmia	fp!, {s14}
 800aa6c:	edd3 6a00 	vldr	s13, [r3]
 800aa70:	ee27 7a87 	vmul.f32	s14, s15, s14
 800aa74:	3a01      	subs	r2, #1
 800aa76:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800aa7a:	eca3 7a01 	vstmia	r3!, {s14}
 800aa7e:	d1f3      	bne.n	800aa68 <arm_mat_inverse_f32+0x1b4>
 800aa80:	4466      	add	r6, ip
 800aa82:	3501      	adds	r5, #1
 800aa84:	42ac      	cmp	r4, r5
 800aa86:	4441      	add	r1, r8
 800aa88:	d1d4      	bne.n	800aa34 <arm_mat_inverse_f32+0x180>
 800aa8a:	9b01      	ldr	r3, [sp, #4]
 800aa8c:	9a06      	ldr	r2, [sp, #24]
 800aa8e:	f8dd a010 	ldr.w	sl, [sp, #16]
 800aa92:	3304      	adds	r3, #4
 800aa94:	9301      	str	r3, [sp, #4]
 800aa96:	4491      	add	r9, r2
 800aa98:	9b03      	ldr	r3, [sp, #12]
 800aa9a:	9a00      	ldr	r2, [sp, #0]
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	3a04      	subs	r2, #4
 800aaa0:	3f01      	subs	r7, #1
 800aaa2:	f100 0001 	add.w	r0, r0, #1
 800aaa6:	9303      	str	r3, [sp, #12]
 800aaa8:	9200      	str	r2, [sp, #0]
 800aaaa:	f47f af58 	bne.w	800a95e <arm_mat_inverse_f32+0xaa>
 800aaae:	9b05      	ldr	r3, [sp, #20]
 800aab0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d13f      	bne.n	800ab38 <arm_mat_inverse_f32+0x284>
 800aab8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800aabc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aac0:	d13a      	bne.n	800ab38 <arm_mat_inverse_f32+0x284>
 800aac2:	fb04 f404 	mul.w	r4, r4, r4
 800aac6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aaca:	b194      	cbz	r4, 800aaf2 <arm_mat_inverse_f32+0x23e>
 800aacc:	edd3 7a00 	vldr	s15, [r3]
 800aad0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800aad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aad8:	d12e      	bne.n	800ab38 <arm_mat_inverse_f32+0x284>
 800aada:	3304      	adds	r3, #4
 800aadc:	e006      	b.n	800aaec <arm_mat_inverse_f32+0x238>
 800aade:	ecf3 7a01 	vldmia	r3!, {s15}
 800aae2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800aae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaea:	d123      	bne.n	800ab34 <arm_mat_inverse_f32+0x280>
 800aaec:	3701      	adds	r7, #1
 800aaee:	42a7      	cmp	r7, r4
 800aaf0:	d1f5      	bne.n	800aade <arm_mat_inverse_f32+0x22a>
 800aaf2:	20fb      	movs	r0, #251	; 0xfb
 800aaf4:	e6eb      	b.n	800a8ce <arm_mat_inverse_f32+0x1a>
 800aaf6:	b157      	cbz	r7, 800ab0e <arm_mat_inverse_f32+0x25a>
 800aaf8:	9901      	ldr	r1, [sp, #4]
 800aafa:	463a      	mov	r2, r7
 800aafc:	464b      	mov	r3, r9
 800aafe:	681d      	ldr	r5, [r3, #0]
 800ab00:	680e      	ldr	r6, [r1, #0]
 800ab02:	f843 6b04 	str.w	r6, [r3], #4
 800ab06:	3a01      	subs	r2, #1
 800ab08:	f841 5b04 	str.w	r5, [r1], #4
 800ab0c:	d1f7      	bne.n	800aafe <arm_mat_inverse_f32+0x24a>
 800ab0e:	eb0a 020c 	add.w	r2, sl, ip
 800ab12:	9204      	str	r2, [sp, #16]
 800ab14:	4611      	mov	r1, r2
 800ab16:	4623      	mov	r3, r4
 800ab18:	4652      	mov	r2, sl
 800ab1a:	680d      	ldr	r5, [r1, #0]
 800ab1c:	6816      	ldr	r6, [r2, #0]
 800ab1e:	f841 6b04 	str.w	r6, [r1], #4
 800ab22:	3b01      	subs	r3, #1
 800ab24:	f842 5b04 	str.w	r5, [r2], #4
 800ab28:	d1f7      	bne.n	800ab1a <arm_mat_inverse_f32+0x266>
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	edd9 7a00 	vldr	s15, [r9]
 800ab30:	9205      	str	r2, [sp, #20]
 800ab32:	e766      	b.n	800aa02 <arm_mat_inverse_f32+0x14e>
 800ab34:	42bc      	cmp	r4, r7
 800ab36:	d0dc      	beq.n	800aaf2 <arm_mat_inverse_f32+0x23e>
 800ab38:	2000      	movs	r0, #0
 800ab3a:	e6c8      	b.n	800a8ce <arm_mat_inverse_f32+0x1a>
 800ab3c:	9b00      	ldr	r3, [sp, #0]
 800ab3e:	4466      	add	r6, ip
 800ab40:	4419      	add	r1, r3
 800ab42:	e79e      	b.n	800aa82 <arm_mat_inverse_f32+0x1ce>
 800ab44:	00000000 	.word	0x00000000

0800ab48 <arm_mat_init_f32>:
 800ab48:	8001      	strh	r1, [r0, #0]
 800ab4a:	8042      	strh	r2, [r0, #2]
 800ab4c:	6043      	str	r3, [r0, #4]
 800ab4e:	4770      	bx	lr

0800ab50 <arm_fir_init_f32>:
 800ab50:	b570      	push	{r4, r5, r6, lr}
 800ab52:	9d04      	ldr	r5, [sp, #16]
 800ab54:	6082      	str	r2, [r0, #8]
 800ab56:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800ab5a:	3d01      	subs	r5, #1
 800ab5c:	4604      	mov	r4, r0
 800ab5e:	440d      	add	r5, r1
 800ab60:	8001      	strh	r1, [r0, #0]
 800ab62:	461e      	mov	r6, r3
 800ab64:	00aa      	lsls	r2, r5, #2
 800ab66:	4618      	mov	r0, r3
 800ab68:	2100      	movs	r1, #0
 800ab6a:	f000 f83b 	bl	800abe4 <memset>
 800ab6e:	6066      	str	r6, [r4, #4]
 800ab70:	bd70      	pop	{r4, r5, r6, pc}
 800ab72:	bf00      	nop

0800ab74 <__errno>:
 800ab74:	4b01      	ldr	r3, [pc, #4]	; (800ab7c <__errno+0x8>)
 800ab76:	6818      	ldr	r0, [r3, #0]
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	20000128 	.word	0x20000128

0800ab80 <__libc_init_array>:
 800ab80:	b570      	push	{r4, r5, r6, lr}
 800ab82:	4d0d      	ldr	r5, [pc, #52]	; (800abb8 <__libc_init_array+0x38>)
 800ab84:	4c0d      	ldr	r4, [pc, #52]	; (800abbc <__libc_init_array+0x3c>)
 800ab86:	1b64      	subs	r4, r4, r5
 800ab88:	10a4      	asrs	r4, r4, #2
 800ab8a:	2600      	movs	r6, #0
 800ab8c:	42a6      	cmp	r6, r4
 800ab8e:	d109      	bne.n	800aba4 <__libc_init_array+0x24>
 800ab90:	4d0b      	ldr	r5, [pc, #44]	; (800abc0 <__libc_init_array+0x40>)
 800ab92:	4c0c      	ldr	r4, [pc, #48]	; (800abc4 <__libc_init_array+0x44>)
 800ab94:	f002 fdfa 	bl	800d78c <_init>
 800ab98:	1b64      	subs	r4, r4, r5
 800ab9a:	10a4      	asrs	r4, r4, #2
 800ab9c:	2600      	movs	r6, #0
 800ab9e:	42a6      	cmp	r6, r4
 800aba0:	d105      	bne.n	800abae <__libc_init_array+0x2e>
 800aba2:	bd70      	pop	{r4, r5, r6, pc}
 800aba4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aba8:	4798      	blx	r3
 800abaa:	3601      	adds	r6, #1
 800abac:	e7ee      	b.n	800ab8c <__libc_init_array+0xc>
 800abae:	f855 3b04 	ldr.w	r3, [r5], #4
 800abb2:	4798      	blx	r3
 800abb4:	3601      	adds	r6, #1
 800abb6:	e7f2      	b.n	800ab9e <__libc_init_array+0x1e>
 800abb8:	0800dbf4 	.word	0x0800dbf4
 800abbc:	0800dbf4 	.word	0x0800dbf4
 800abc0:	0800dbf4 	.word	0x0800dbf4
 800abc4:	0800dbf8 	.word	0x0800dbf8

0800abc8 <memcpy>:
 800abc8:	440a      	add	r2, r1
 800abca:	4291      	cmp	r1, r2
 800abcc:	f100 33ff 	add.w	r3, r0, #4294967295
 800abd0:	d100      	bne.n	800abd4 <memcpy+0xc>
 800abd2:	4770      	bx	lr
 800abd4:	b510      	push	{r4, lr}
 800abd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abda:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abde:	4291      	cmp	r1, r2
 800abe0:	d1f9      	bne.n	800abd6 <memcpy+0xe>
 800abe2:	bd10      	pop	{r4, pc}

0800abe4 <memset>:
 800abe4:	4402      	add	r2, r0
 800abe6:	4603      	mov	r3, r0
 800abe8:	4293      	cmp	r3, r2
 800abea:	d100      	bne.n	800abee <memset+0xa>
 800abec:	4770      	bx	lr
 800abee:	f803 1b01 	strb.w	r1, [r3], #1
 800abf2:	e7f9      	b.n	800abe8 <memset+0x4>

0800abf4 <__cvt>:
 800abf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abf8:	ec55 4b10 	vmov	r4, r5, d0
 800abfc:	2d00      	cmp	r5, #0
 800abfe:	460e      	mov	r6, r1
 800ac00:	4619      	mov	r1, r3
 800ac02:	462b      	mov	r3, r5
 800ac04:	bfbb      	ittet	lt
 800ac06:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ac0a:	461d      	movlt	r5, r3
 800ac0c:	2300      	movge	r3, #0
 800ac0e:	232d      	movlt	r3, #45	; 0x2d
 800ac10:	700b      	strb	r3, [r1, #0]
 800ac12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac14:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ac18:	4691      	mov	r9, r2
 800ac1a:	f023 0820 	bic.w	r8, r3, #32
 800ac1e:	bfbc      	itt	lt
 800ac20:	4622      	movlt	r2, r4
 800ac22:	4614      	movlt	r4, r2
 800ac24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ac28:	d005      	beq.n	800ac36 <__cvt+0x42>
 800ac2a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ac2e:	d100      	bne.n	800ac32 <__cvt+0x3e>
 800ac30:	3601      	adds	r6, #1
 800ac32:	2102      	movs	r1, #2
 800ac34:	e000      	b.n	800ac38 <__cvt+0x44>
 800ac36:	2103      	movs	r1, #3
 800ac38:	ab03      	add	r3, sp, #12
 800ac3a:	9301      	str	r3, [sp, #4]
 800ac3c:	ab02      	add	r3, sp, #8
 800ac3e:	9300      	str	r3, [sp, #0]
 800ac40:	ec45 4b10 	vmov	d0, r4, r5
 800ac44:	4653      	mov	r3, sl
 800ac46:	4632      	mov	r2, r6
 800ac48:	f000 fcca 	bl	800b5e0 <_dtoa_r>
 800ac4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ac50:	4607      	mov	r7, r0
 800ac52:	d102      	bne.n	800ac5a <__cvt+0x66>
 800ac54:	f019 0f01 	tst.w	r9, #1
 800ac58:	d022      	beq.n	800aca0 <__cvt+0xac>
 800ac5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ac5e:	eb07 0906 	add.w	r9, r7, r6
 800ac62:	d110      	bne.n	800ac86 <__cvt+0x92>
 800ac64:	783b      	ldrb	r3, [r7, #0]
 800ac66:	2b30      	cmp	r3, #48	; 0x30
 800ac68:	d10a      	bne.n	800ac80 <__cvt+0x8c>
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	4620      	mov	r0, r4
 800ac70:	4629      	mov	r1, r5
 800ac72:	f7f5 ff31 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac76:	b918      	cbnz	r0, 800ac80 <__cvt+0x8c>
 800ac78:	f1c6 0601 	rsb	r6, r6, #1
 800ac7c:	f8ca 6000 	str.w	r6, [sl]
 800ac80:	f8da 3000 	ldr.w	r3, [sl]
 800ac84:	4499      	add	r9, r3
 800ac86:	2200      	movs	r2, #0
 800ac88:	2300      	movs	r3, #0
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	4629      	mov	r1, r5
 800ac8e:	f7f5 ff23 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac92:	b108      	cbz	r0, 800ac98 <__cvt+0xa4>
 800ac94:	f8cd 900c 	str.w	r9, [sp, #12]
 800ac98:	2230      	movs	r2, #48	; 0x30
 800ac9a:	9b03      	ldr	r3, [sp, #12]
 800ac9c:	454b      	cmp	r3, r9
 800ac9e:	d307      	bcc.n	800acb0 <__cvt+0xbc>
 800aca0:	9b03      	ldr	r3, [sp, #12]
 800aca2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aca4:	1bdb      	subs	r3, r3, r7
 800aca6:	4638      	mov	r0, r7
 800aca8:	6013      	str	r3, [r2, #0]
 800acaa:	b004      	add	sp, #16
 800acac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acb0:	1c59      	adds	r1, r3, #1
 800acb2:	9103      	str	r1, [sp, #12]
 800acb4:	701a      	strb	r2, [r3, #0]
 800acb6:	e7f0      	b.n	800ac9a <__cvt+0xa6>

0800acb8 <__exponent>:
 800acb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acba:	4603      	mov	r3, r0
 800acbc:	2900      	cmp	r1, #0
 800acbe:	bfb8      	it	lt
 800acc0:	4249      	neglt	r1, r1
 800acc2:	f803 2b02 	strb.w	r2, [r3], #2
 800acc6:	bfb4      	ite	lt
 800acc8:	222d      	movlt	r2, #45	; 0x2d
 800acca:	222b      	movge	r2, #43	; 0x2b
 800accc:	2909      	cmp	r1, #9
 800acce:	7042      	strb	r2, [r0, #1]
 800acd0:	dd2a      	ble.n	800ad28 <__exponent+0x70>
 800acd2:	f10d 0407 	add.w	r4, sp, #7
 800acd6:	46a4      	mov	ip, r4
 800acd8:	270a      	movs	r7, #10
 800acda:	46a6      	mov	lr, r4
 800acdc:	460a      	mov	r2, r1
 800acde:	fb91 f6f7 	sdiv	r6, r1, r7
 800ace2:	fb07 1516 	mls	r5, r7, r6, r1
 800ace6:	3530      	adds	r5, #48	; 0x30
 800ace8:	2a63      	cmp	r2, #99	; 0x63
 800acea:	f104 34ff 	add.w	r4, r4, #4294967295
 800acee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800acf2:	4631      	mov	r1, r6
 800acf4:	dcf1      	bgt.n	800acda <__exponent+0x22>
 800acf6:	3130      	adds	r1, #48	; 0x30
 800acf8:	f1ae 0502 	sub.w	r5, lr, #2
 800acfc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ad00:	1c44      	adds	r4, r0, #1
 800ad02:	4629      	mov	r1, r5
 800ad04:	4561      	cmp	r1, ip
 800ad06:	d30a      	bcc.n	800ad1e <__exponent+0x66>
 800ad08:	f10d 0209 	add.w	r2, sp, #9
 800ad0c:	eba2 020e 	sub.w	r2, r2, lr
 800ad10:	4565      	cmp	r5, ip
 800ad12:	bf88      	it	hi
 800ad14:	2200      	movhi	r2, #0
 800ad16:	4413      	add	r3, r2
 800ad18:	1a18      	subs	r0, r3, r0
 800ad1a:	b003      	add	sp, #12
 800ad1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad22:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ad26:	e7ed      	b.n	800ad04 <__exponent+0x4c>
 800ad28:	2330      	movs	r3, #48	; 0x30
 800ad2a:	3130      	adds	r1, #48	; 0x30
 800ad2c:	7083      	strb	r3, [r0, #2]
 800ad2e:	70c1      	strb	r1, [r0, #3]
 800ad30:	1d03      	adds	r3, r0, #4
 800ad32:	e7f1      	b.n	800ad18 <__exponent+0x60>

0800ad34 <_printf_float>:
 800ad34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad38:	ed2d 8b02 	vpush	{d8}
 800ad3c:	b08d      	sub	sp, #52	; 0x34
 800ad3e:	460c      	mov	r4, r1
 800ad40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ad44:	4616      	mov	r6, r2
 800ad46:	461f      	mov	r7, r3
 800ad48:	4605      	mov	r5, r0
 800ad4a:	f001 fa37 	bl	800c1bc <_localeconv_r>
 800ad4e:	f8d0 a000 	ldr.w	sl, [r0]
 800ad52:	4650      	mov	r0, sl
 800ad54:	f7f5 fa44 	bl	80001e0 <strlen>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	930a      	str	r3, [sp, #40]	; 0x28
 800ad5c:	6823      	ldr	r3, [r4, #0]
 800ad5e:	9305      	str	r3, [sp, #20]
 800ad60:	f8d8 3000 	ldr.w	r3, [r8]
 800ad64:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ad68:	3307      	adds	r3, #7
 800ad6a:	f023 0307 	bic.w	r3, r3, #7
 800ad6e:	f103 0208 	add.w	r2, r3, #8
 800ad72:	f8c8 2000 	str.w	r2, [r8]
 800ad76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad7a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ad7e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ad82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ad86:	9307      	str	r3, [sp, #28]
 800ad88:	f8cd 8018 	str.w	r8, [sp, #24]
 800ad8c:	ee08 0a10 	vmov	s16, r0
 800ad90:	4b9f      	ldr	r3, [pc, #636]	; (800b010 <_printf_float+0x2dc>)
 800ad92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad96:	f04f 32ff 	mov.w	r2, #4294967295
 800ad9a:	f7f5 fecf 	bl	8000b3c <__aeabi_dcmpun>
 800ad9e:	bb88      	cbnz	r0, 800ae04 <_printf_float+0xd0>
 800ada0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ada4:	4b9a      	ldr	r3, [pc, #616]	; (800b010 <_printf_float+0x2dc>)
 800ada6:	f04f 32ff 	mov.w	r2, #4294967295
 800adaa:	f7f5 fea9 	bl	8000b00 <__aeabi_dcmple>
 800adae:	bb48      	cbnz	r0, 800ae04 <_printf_float+0xd0>
 800adb0:	2200      	movs	r2, #0
 800adb2:	2300      	movs	r3, #0
 800adb4:	4640      	mov	r0, r8
 800adb6:	4649      	mov	r1, r9
 800adb8:	f7f5 fe98 	bl	8000aec <__aeabi_dcmplt>
 800adbc:	b110      	cbz	r0, 800adc4 <_printf_float+0x90>
 800adbe:	232d      	movs	r3, #45	; 0x2d
 800adc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adc4:	4b93      	ldr	r3, [pc, #588]	; (800b014 <_printf_float+0x2e0>)
 800adc6:	4894      	ldr	r0, [pc, #592]	; (800b018 <_printf_float+0x2e4>)
 800adc8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800adcc:	bf94      	ite	ls
 800adce:	4698      	movls	r8, r3
 800add0:	4680      	movhi	r8, r0
 800add2:	2303      	movs	r3, #3
 800add4:	6123      	str	r3, [r4, #16]
 800add6:	9b05      	ldr	r3, [sp, #20]
 800add8:	f023 0204 	bic.w	r2, r3, #4
 800addc:	6022      	str	r2, [r4, #0]
 800adde:	f04f 0900 	mov.w	r9, #0
 800ade2:	9700      	str	r7, [sp, #0]
 800ade4:	4633      	mov	r3, r6
 800ade6:	aa0b      	add	r2, sp, #44	; 0x2c
 800ade8:	4621      	mov	r1, r4
 800adea:	4628      	mov	r0, r5
 800adec:	f000 f9d8 	bl	800b1a0 <_printf_common>
 800adf0:	3001      	adds	r0, #1
 800adf2:	f040 8090 	bne.w	800af16 <_printf_float+0x1e2>
 800adf6:	f04f 30ff 	mov.w	r0, #4294967295
 800adfa:	b00d      	add	sp, #52	; 0x34
 800adfc:	ecbd 8b02 	vpop	{d8}
 800ae00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae04:	4642      	mov	r2, r8
 800ae06:	464b      	mov	r3, r9
 800ae08:	4640      	mov	r0, r8
 800ae0a:	4649      	mov	r1, r9
 800ae0c:	f7f5 fe96 	bl	8000b3c <__aeabi_dcmpun>
 800ae10:	b140      	cbz	r0, 800ae24 <_printf_float+0xf0>
 800ae12:	464b      	mov	r3, r9
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	bfbc      	itt	lt
 800ae18:	232d      	movlt	r3, #45	; 0x2d
 800ae1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ae1e:	487f      	ldr	r0, [pc, #508]	; (800b01c <_printf_float+0x2e8>)
 800ae20:	4b7f      	ldr	r3, [pc, #508]	; (800b020 <_printf_float+0x2ec>)
 800ae22:	e7d1      	b.n	800adc8 <_printf_float+0x94>
 800ae24:	6863      	ldr	r3, [r4, #4]
 800ae26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ae2a:	9206      	str	r2, [sp, #24]
 800ae2c:	1c5a      	adds	r2, r3, #1
 800ae2e:	d13f      	bne.n	800aeb0 <_printf_float+0x17c>
 800ae30:	2306      	movs	r3, #6
 800ae32:	6063      	str	r3, [r4, #4]
 800ae34:	9b05      	ldr	r3, [sp, #20]
 800ae36:	6861      	ldr	r1, [r4, #4]
 800ae38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	9303      	str	r3, [sp, #12]
 800ae40:	ab0a      	add	r3, sp, #40	; 0x28
 800ae42:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ae46:	ab09      	add	r3, sp, #36	; 0x24
 800ae48:	ec49 8b10 	vmov	d0, r8, r9
 800ae4c:	9300      	str	r3, [sp, #0]
 800ae4e:	6022      	str	r2, [r4, #0]
 800ae50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ae54:	4628      	mov	r0, r5
 800ae56:	f7ff fecd 	bl	800abf4 <__cvt>
 800ae5a:	9b06      	ldr	r3, [sp, #24]
 800ae5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae5e:	2b47      	cmp	r3, #71	; 0x47
 800ae60:	4680      	mov	r8, r0
 800ae62:	d108      	bne.n	800ae76 <_printf_float+0x142>
 800ae64:	1cc8      	adds	r0, r1, #3
 800ae66:	db02      	blt.n	800ae6e <_printf_float+0x13a>
 800ae68:	6863      	ldr	r3, [r4, #4]
 800ae6a:	4299      	cmp	r1, r3
 800ae6c:	dd41      	ble.n	800aef2 <_printf_float+0x1be>
 800ae6e:	f1ab 0b02 	sub.w	fp, fp, #2
 800ae72:	fa5f fb8b 	uxtb.w	fp, fp
 800ae76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ae7a:	d820      	bhi.n	800aebe <_printf_float+0x18a>
 800ae7c:	3901      	subs	r1, #1
 800ae7e:	465a      	mov	r2, fp
 800ae80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ae84:	9109      	str	r1, [sp, #36]	; 0x24
 800ae86:	f7ff ff17 	bl	800acb8 <__exponent>
 800ae8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae8c:	1813      	adds	r3, r2, r0
 800ae8e:	2a01      	cmp	r2, #1
 800ae90:	4681      	mov	r9, r0
 800ae92:	6123      	str	r3, [r4, #16]
 800ae94:	dc02      	bgt.n	800ae9c <_printf_float+0x168>
 800ae96:	6822      	ldr	r2, [r4, #0]
 800ae98:	07d2      	lsls	r2, r2, #31
 800ae9a:	d501      	bpl.n	800aea0 <_printf_float+0x16c>
 800ae9c:	3301      	adds	r3, #1
 800ae9e:	6123      	str	r3, [r4, #16]
 800aea0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d09c      	beq.n	800ade2 <_printf_float+0xae>
 800aea8:	232d      	movs	r3, #45	; 0x2d
 800aeaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aeae:	e798      	b.n	800ade2 <_printf_float+0xae>
 800aeb0:	9a06      	ldr	r2, [sp, #24]
 800aeb2:	2a47      	cmp	r2, #71	; 0x47
 800aeb4:	d1be      	bne.n	800ae34 <_printf_float+0x100>
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d1bc      	bne.n	800ae34 <_printf_float+0x100>
 800aeba:	2301      	movs	r3, #1
 800aebc:	e7b9      	b.n	800ae32 <_printf_float+0xfe>
 800aebe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800aec2:	d118      	bne.n	800aef6 <_printf_float+0x1c2>
 800aec4:	2900      	cmp	r1, #0
 800aec6:	6863      	ldr	r3, [r4, #4]
 800aec8:	dd0b      	ble.n	800aee2 <_printf_float+0x1ae>
 800aeca:	6121      	str	r1, [r4, #16]
 800aecc:	b913      	cbnz	r3, 800aed4 <_printf_float+0x1a0>
 800aece:	6822      	ldr	r2, [r4, #0]
 800aed0:	07d0      	lsls	r0, r2, #31
 800aed2:	d502      	bpl.n	800aeda <_printf_float+0x1a6>
 800aed4:	3301      	adds	r3, #1
 800aed6:	440b      	add	r3, r1
 800aed8:	6123      	str	r3, [r4, #16]
 800aeda:	65a1      	str	r1, [r4, #88]	; 0x58
 800aedc:	f04f 0900 	mov.w	r9, #0
 800aee0:	e7de      	b.n	800aea0 <_printf_float+0x16c>
 800aee2:	b913      	cbnz	r3, 800aeea <_printf_float+0x1b6>
 800aee4:	6822      	ldr	r2, [r4, #0]
 800aee6:	07d2      	lsls	r2, r2, #31
 800aee8:	d501      	bpl.n	800aeee <_printf_float+0x1ba>
 800aeea:	3302      	adds	r3, #2
 800aeec:	e7f4      	b.n	800aed8 <_printf_float+0x1a4>
 800aeee:	2301      	movs	r3, #1
 800aef0:	e7f2      	b.n	800aed8 <_printf_float+0x1a4>
 800aef2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800aef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aef8:	4299      	cmp	r1, r3
 800aefa:	db05      	blt.n	800af08 <_printf_float+0x1d4>
 800aefc:	6823      	ldr	r3, [r4, #0]
 800aefe:	6121      	str	r1, [r4, #16]
 800af00:	07d8      	lsls	r0, r3, #31
 800af02:	d5ea      	bpl.n	800aeda <_printf_float+0x1a6>
 800af04:	1c4b      	adds	r3, r1, #1
 800af06:	e7e7      	b.n	800aed8 <_printf_float+0x1a4>
 800af08:	2900      	cmp	r1, #0
 800af0a:	bfd4      	ite	le
 800af0c:	f1c1 0202 	rsble	r2, r1, #2
 800af10:	2201      	movgt	r2, #1
 800af12:	4413      	add	r3, r2
 800af14:	e7e0      	b.n	800aed8 <_printf_float+0x1a4>
 800af16:	6823      	ldr	r3, [r4, #0]
 800af18:	055a      	lsls	r2, r3, #21
 800af1a:	d407      	bmi.n	800af2c <_printf_float+0x1f8>
 800af1c:	6923      	ldr	r3, [r4, #16]
 800af1e:	4642      	mov	r2, r8
 800af20:	4631      	mov	r1, r6
 800af22:	4628      	mov	r0, r5
 800af24:	47b8      	blx	r7
 800af26:	3001      	adds	r0, #1
 800af28:	d12c      	bne.n	800af84 <_printf_float+0x250>
 800af2a:	e764      	b.n	800adf6 <_printf_float+0xc2>
 800af2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800af30:	f240 80e0 	bls.w	800b0f4 <_printf_float+0x3c0>
 800af34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800af38:	2200      	movs	r2, #0
 800af3a:	2300      	movs	r3, #0
 800af3c:	f7f5 fdcc 	bl	8000ad8 <__aeabi_dcmpeq>
 800af40:	2800      	cmp	r0, #0
 800af42:	d034      	beq.n	800afae <_printf_float+0x27a>
 800af44:	4a37      	ldr	r2, [pc, #220]	; (800b024 <_printf_float+0x2f0>)
 800af46:	2301      	movs	r3, #1
 800af48:	4631      	mov	r1, r6
 800af4a:	4628      	mov	r0, r5
 800af4c:	47b8      	blx	r7
 800af4e:	3001      	adds	r0, #1
 800af50:	f43f af51 	beq.w	800adf6 <_printf_float+0xc2>
 800af54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af58:	429a      	cmp	r2, r3
 800af5a:	db02      	blt.n	800af62 <_printf_float+0x22e>
 800af5c:	6823      	ldr	r3, [r4, #0]
 800af5e:	07d8      	lsls	r0, r3, #31
 800af60:	d510      	bpl.n	800af84 <_printf_float+0x250>
 800af62:	ee18 3a10 	vmov	r3, s16
 800af66:	4652      	mov	r2, sl
 800af68:	4631      	mov	r1, r6
 800af6a:	4628      	mov	r0, r5
 800af6c:	47b8      	blx	r7
 800af6e:	3001      	adds	r0, #1
 800af70:	f43f af41 	beq.w	800adf6 <_printf_float+0xc2>
 800af74:	f04f 0800 	mov.w	r8, #0
 800af78:	f104 091a 	add.w	r9, r4, #26
 800af7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af7e:	3b01      	subs	r3, #1
 800af80:	4543      	cmp	r3, r8
 800af82:	dc09      	bgt.n	800af98 <_printf_float+0x264>
 800af84:	6823      	ldr	r3, [r4, #0]
 800af86:	079b      	lsls	r3, r3, #30
 800af88:	f100 8105 	bmi.w	800b196 <_printf_float+0x462>
 800af8c:	68e0      	ldr	r0, [r4, #12]
 800af8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af90:	4298      	cmp	r0, r3
 800af92:	bfb8      	it	lt
 800af94:	4618      	movlt	r0, r3
 800af96:	e730      	b.n	800adfa <_printf_float+0xc6>
 800af98:	2301      	movs	r3, #1
 800af9a:	464a      	mov	r2, r9
 800af9c:	4631      	mov	r1, r6
 800af9e:	4628      	mov	r0, r5
 800afa0:	47b8      	blx	r7
 800afa2:	3001      	adds	r0, #1
 800afa4:	f43f af27 	beq.w	800adf6 <_printf_float+0xc2>
 800afa8:	f108 0801 	add.w	r8, r8, #1
 800afac:	e7e6      	b.n	800af7c <_printf_float+0x248>
 800afae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	dc39      	bgt.n	800b028 <_printf_float+0x2f4>
 800afb4:	4a1b      	ldr	r2, [pc, #108]	; (800b024 <_printf_float+0x2f0>)
 800afb6:	2301      	movs	r3, #1
 800afb8:	4631      	mov	r1, r6
 800afba:	4628      	mov	r0, r5
 800afbc:	47b8      	blx	r7
 800afbe:	3001      	adds	r0, #1
 800afc0:	f43f af19 	beq.w	800adf6 <_printf_float+0xc2>
 800afc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800afc8:	4313      	orrs	r3, r2
 800afca:	d102      	bne.n	800afd2 <_printf_float+0x29e>
 800afcc:	6823      	ldr	r3, [r4, #0]
 800afce:	07d9      	lsls	r1, r3, #31
 800afd0:	d5d8      	bpl.n	800af84 <_printf_float+0x250>
 800afd2:	ee18 3a10 	vmov	r3, s16
 800afd6:	4652      	mov	r2, sl
 800afd8:	4631      	mov	r1, r6
 800afda:	4628      	mov	r0, r5
 800afdc:	47b8      	blx	r7
 800afde:	3001      	adds	r0, #1
 800afe0:	f43f af09 	beq.w	800adf6 <_printf_float+0xc2>
 800afe4:	f04f 0900 	mov.w	r9, #0
 800afe8:	f104 0a1a 	add.w	sl, r4, #26
 800afec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afee:	425b      	negs	r3, r3
 800aff0:	454b      	cmp	r3, r9
 800aff2:	dc01      	bgt.n	800aff8 <_printf_float+0x2c4>
 800aff4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aff6:	e792      	b.n	800af1e <_printf_float+0x1ea>
 800aff8:	2301      	movs	r3, #1
 800affa:	4652      	mov	r2, sl
 800affc:	4631      	mov	r1, r6
 800affe:	4628      	mov	r0, r5
 800b000:	47b8      	blx	r7
 800b002:	3001      	adds	r0, #1
 800b004:	f43f aef7 	beq.w	800adf6 <_printf_float+0xc2>
 800b008:	f109 0901 	add.w	r9, r9, #1
 800b00c:	e7ee      	b.n	800afec <_printf_float+0x2b8>
 800b00e:	bf00      	nop
 800b010:	7fefffff 	.word	0x7fefffff
 800b014:	0800d814 	.word	0x0800d814
 800b018:	0800d818 	.word	0x0800d818
 800b01c:	0800d820 	.word	0x0800d820
 800b020:	0800d81c 	.word	0x0800d81c
 800b024:	0800d824 	.word	0x0800d824
 800b028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b02a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b02c:	429a      	cmp	r2, r3
 800b02e:	bfa8      	it	ge
 800b030:	461a      	movge	r2, r3
 800b032:	2a00      	cmp	r2, #0
 800b034:	4691      	mov	r9, r2
 800b036:	dc37      	bgt.n	800b0a8 <_printf_float+0x374>
 800b038:	f04f 0b00 	mov.w	fp, #0
 800b03c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b040:	f104 021a 	add.w	r2, r4, #26
 800b044:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b046:	9305      	str	r3, [sp, #20]
 800b048:	eba3 0309 	sub.w	r3, r3, r9
 800b04c:	455b      	cmp	r3, fp
 800b04e:	dc33      	bgt.n	800b0b8 <_printf_float+0x384>
 800b050:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b054:	429a      	cmp	r2, r3
 800b056:	db3b      	blt.n	800b0d0 <_printf_float+0x39c>
 800b058:	6823      	ldr	r3, [r4, #0]
 800b05a:	07da      	lsls	r2, r3, #31
 800b05c:	d438      	bmi.n	800b0d0 <_printf_float+0x39c>
 800b05e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b060:	9a05      	ldr	r2, [sp, #20]
 800b062:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b064:	1a9a      	subs	r2, r3, r2
 800b066:	eba3 0901 	sub.w	r9, r3, r1
 800b06a:	4591      	cmp	r9, r2
 800b06c:	bfa8      	it	ge
 800b06e:	4691      	movge	r9, r2
 800b070:	f1b9 0f00 	cmp.w	r9, #0
 800b074:	dc35      	bgt.n	800b0e2 <_printf_float+0x3ae>
 800b076:	f04f 0800 	mov.w	r8, #0
 800b07a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b07e:	f104 0a1a 	add.w	sl, r4, #26
 800b082:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b086:	1a9b      	subs	r3, r3, r2
 800b088:	eba3 0309 	sub.w	r3, r3, r9
 800b08c:	4543      	cmp	r3, r8
 800b08e:	f77f af79 	ble.w	800af84 <_printf_float+0x250>
 800b092:	2301      	movs	r3, #1
 800b094:	4652      	mov	r2, sl
 800b096:	4631      	mov	r1, r6
 800b098:	4628      	mov	r0, r5
 800b09a:	47b8      	blx	r7
 800b09c:	3001      	adds	r0, #1
 800b09e:	f43f aeaa 	beq.w	800adf6 <_printf_float+0xc2>
 800b0a2:	f108 0801 	add.w	r8, r8, #1
 800b0a6:	e7ec      	b.n	800b082 <_printf_float+0x34e>
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	4631      	mov	r1, r6
 800b0ac:	4642      	mov	r2, r8
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	47b8      	blx	r7
 800b0b2:	3001      	adds	r0, #1
 800b0b4:	d1c0      	bne.n	800b038 <_printf_float+0x304>
 800b0b6:	e69e      	b.n	800adf6 <_printf_float+0xc2>
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	4631      	mov	r1, r6
 800b0bc:	4628      	mov	r0, r5
 800b0be:	9205      	str	r2, [sp, #20]
 800b0c0:	47b8      	blx	r7
 800b0c2:	3001      	adds	r0, #1
 800b0c4:	f43f ae97 	beq.w	800adf6 <_printf_float+0xc2>
 800b0c8:	9a05      	ldr	r2, [sp, #20]
 800b0ca:	f10b 0b01 	add.w	fp, fp, #1
 800b0ce:	e7b9      	b.n	800b044 <_printf_float+0x310>
 800b0d0:	ee18 3a10 	vmov	r3, s16
 800b0d4:	4652      	mov	r2, sl
 800b0d6:	4631      	mov	r1, r6
 800b0d8:	4628      	mov	r0, r5
 800b0da:	47b8      	blx	r7
 800b0dc:	3001      	adds	r0, #1
 800b0de:	d1be      	bne.n	800b05e <_printf_float+0x32a>
 800b0e0:	e689      	b.n	800adf6 <_printf_float+0xc2>
 800b0e2:	9a05      	ldr	r2, [sp, #20]
 800b0e4:	464b      	mov	r3, r9
 800b0e6:	4442      	add	r2, r8
 800b0e8:	4631      	mov	r1, r6
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	47b8      	blx	r7
 800b0ee:	3001      	adds	r0, #1
 800b0f0:	d1c1      	bne.n	800b076 <_printf_float+0x342>
 800b0f2:	e680      	b.n	800adf6 <_printf_float+0xc2>
 800b0f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0f6:	2a01      	cmp	r2, #1
 800b0f8:	dc01      	bgt.n	800b0fe <_printf_float+0x3ca>
 800b0fa:	07db      	lsls	r3, r3, #31
 800b0fc:	d538      	bpl.n	800b170 <_printf_float+0x43c>
 800b0fe:	2301      	movs	r3, #1
 800b100:	4642      	mov	r2, r8
 800b102:	4631      	mov	r1, r6
 800b104:	4628      	mov	r0, r5
 800b106:	47b8      	blx	r7
 800b108:	3001      	adds	r0, #1
 800b10a:	f43f ae74 	beq.w	800adf6 <_printf_float+0xc2>
 800b10e:	ee18 3a10 	vmov	r3, s16
 800b112:	4652      	mov	r2, sl
 800b114:	4631      	mov	r1, r6
 800b116:	4628      	mov	r0, r5
 800b118:	47b8      	blx	r7
 800b11a:	3001      	adds	r0, #1
 800b11c:	f43f ae6b 	beq.w	800adf6 <_printf_float+0xc2>
 800b120:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b124:	2200      	movs	r2, #0
 800b126:	2300      	movs	r3, #0
 800b128:	f7f5 fcd6 	bl	8000ad8 <__aeabi_dcmpeq>
 800b12c:	b9d8      	cbnz	r0, 800b166 <_printf_float+0x432>
 800b12e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b130:	f108 0201 	add.w	r2, r8, #1
 800b134:	3b01      	subs	r3, #1
 800b136:	4631      	mov	r1, r6
 800b138:	4628      	mov	r0, r5
 800b13a:	47b8      	blx	r7
 800b13c:	3001      	adds	r0, #1
 800b13e:	d10e      	bne.n	800b15e <_printf_float+0x42a>
 800b140:	e659      	b.n	800adf6 <_printf_float+0xc2>
 800b142:	2301      	movs	r3, #1
 800b144:	4652      	mov	r2, sl
 800b146:	4631      	mov	r1, r6
 800b148:	4628      	mov	r0, r5
 800b14a:	47b8      	blx	r7
 800b14c:	3001      	adds	r0, #1
 800b14e:	f43f ae52 	beq.w	800adf6 <_printf_float+0xc2>
 800b152:	f108 0801 	add.w	r8, r8, #1
 800b156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b158:	3b01      	subs	r3, #1
 800b15a:	4543      	cmp	r3, r8
 800b15c:	dcf1      	bgt.n	800b142 <_printf_float+0x40e>
 800b15e:	464b      	mov	r3, r9
 800b160:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b164:	e6dc      	b.n	800af20 <_printf_float+0x1ec>
 800b166:	f04f 0800 	mov.w	r8, #0
 800b16a:	f104 0a1a 	add.w	sl, r4, #26
 800b16e:	e7f2      	b.n	800b156 <_printf_float+0x422>
 800b170:	2301      	movs	r3, #1
 800b172:	4642      	mov	r2, r8
 800b174:	e7df      	b.n	800b136 <_printf_float+0x402>
 800b176:	2301      	movs	r3, #1
 800b178:	464a      	mov	r2, r9
 800b17a:	4631      	mov	r1, r6
 800b17c:	4628      	mov	r0, r5
 800b17e:	47b8      	blx	r7
 800b180:	3001      	adds	r0, #1
 800b182:	f43f ae38 	beq.w	800adf6 <_printf_float+0xc2>
 800b186:	f108 0801 	add.w	r8, r8, #1
 800b18a:	68e3      	ldr	r3, [r4, #12]
 800b18c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b18e:	1a5b      	subs	r3, r3, r1
 800b190:	4543      	cmp	r3, r8
 800b192:	dcf0      	bgt.n	800b176 <_printf_float+0x442>
 800b194:	e6fa      	b.n	800af8c <_printf_float+0x258>
 800b196:	f04f 0800 	mov.w	r8, #0
 800b19a:	f104 0919 	add.w	r9, r4, #25
 800b19e:	e7f4      	b.n	800b18a <_printf_float+0x456>

0800b1a0 <_printf_common>:
 800b1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1a4:	4616      	mov	r6, r2
 800b1a6:	4699      	mov	r9, r3
 800b1a8:	688a      	ldr	r2, [r1, #8]
 800b1aa:	690b      	ldr	r3, [r1, #16]
 800b1ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	bfb8      	it	lt
 800b1b4:	4613      	movlt	r3, r2
 800b1b6:	6033      	str	r3, [r6, #0]
 800b1b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b1bc:	4607      	mov	r7, r0
 800b1be:	460c      	mov	r4, r1
 800b1c0:	b10a      	cbz	r2, 800b1c6 <_printf_common+0x26>
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	6033      	str	r3, [r6, #0]
 800b1c6:	6823      	ldr	r3, [r4, #0]
 800b1c8:	0699      	lsls	r1, r3, #26
 800b1ca:	bf42      	ittt	mi
 800b1cc:	6833      	ldrmi	r3, [r6, #0]
 800b1ce:	3302      	addmi	r3, #2
 800b1d0:	6033      	strmi	r3, [r6, #0]
 800b1d2:	6825      	ldr	r5, [r4, #0]
 800b1d4:	f015 0506 	ands.w	r5, r5, #6
 800b1d8:	d106      	bne.n	800b1e8 <_printf_common+0x48>
 800b1da:	f104 0a19 	add.w	sl, r4, #25
 800b1de:	68e3      	ldr	r3, [r4, #12]
 800b1e0:	6832      	ldr	r2, [r6, #0]
 800b1e2:	1a9b      	subs	r3, r3, r2
 800b1e4:	42ab      	cmp	r3, r5
 800b1e6:	dc26      	bgt.n	800b236 <_printf_common+0x96>
 800b1e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b1ec:	1e13      	subs	r3, r2, #0
 800b1ee:	6822      	ldr	r2, [r4, #0]
 800b1f0:	bf18      	it	ne
 800b1f2:	2301      	movne	r3, #1
 800b1f4:	0692      	lsls	r2, r2, #26
 800b1f6:	d42b      	bmi.n	800b250 <_printf_common+0xb0>
 800b1f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b1fc:	4649      	mov	r1, r9
 800b1fe:	4638      	mov	r0, r7
 800b200:	47c0      	blx	r8
 800b202:	3001      	adds	r0, #1
 800b204:	d01e      	beq.n	800b244 <_printf_common+0xa4>
 800b206:	6823      	ldr	r3, [r4, #0]
 800b208:	68e5      	ldr	r5, [r4, #12]
 800b20a:	6832      	ldr	r2, [r6, #0]
 800b20c:	f003 0306 	and.w	r3, r3, #6
 800b210:	2b04      	cmp	r3, #4
 800b212:	bf08      	it	eq
 800b214:	1aad      	subeq	r5, r5, r2
 800b216:	68a3      	ldr	r3, [r4, #8]
 800b218:	6922      	ldr	r2, [r4, #16]
 800b21a:	bf0c      	ite	eq
 800b21c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b220:	2500      	movne	r5, #0
 800b222:	4293      	cmp	r3, r2
 800b224:	bfc4      	itt	gt
 800b226:	1a9b      	subgt	r3, r3, r2
 800b228:	18ed      	addgt	r5, r5, r3
 800b22a:	2600      	movs	r6, #0
 800b22c:	341a      	adds	r4, #26
 800b22e:	42b5      	cmp	r5, r6
 800b230:	d11a      	bne.n	800b268 <_printf_common+0xc8>
 800b232:	2000      	movs	r0, #0
 800b234:	e008      	b.n	800b248 <_printf_common+0xa8>
 800b236:	2301      	movs	r3, #1
 800b238:	4652      	mov	r2, sl
 800b23a:	4649      	mov	r1, r9
 800b23c:	4638      	mov	r0, r7
 800b23e:	47c0      	blx	r8
 800b240:	3001      	adds	r0, #1
 800b242:	d103      	bne.n	800b24c <_printf_common+0xac>
 800b244:	f04f 30ff 	mov.w	r0, #4294967295
 800b248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b24c:	3501      	adds	r5, #1
 800b24e:	e7c6      	b.n	800b1de <_printf_common+0x3e>
 800b250:	18e1      	adds	r1, r4, r3
 800b252:	1c5a      	adds	r2, r3, #1
 800b254:	2030      	movs	r0, #48	; 0x30
 800b256:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b25a:	4422      	add	r2, r4
 800b25c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b260:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b264:	3302      	adds	r3, #2
 800b266:	e7c7      	b.n	800b1f8 <_printf_common+0x58>
 800b268:	2301      	movs	r3, #1
 800b26a:	4622      	mov	r2, r4
 800b26c:	4649      	mov	r1, r9
 800b26e:	4638      	mov	r0, r7
 800b270:	47c0      	blx	r8
 800b272:	3001      	adds	r0, #1
 800b274:	d0e6      	beq.n	800b244 <_printf_common+0xa4>
 800b276:	3601      	adds	r6, #1
 800b278:	e7d9      	b.n	800b22e <_printf_common+0x8e>
	...

0800b27c <_printf_i>:
 800b27c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b280:	7e0f      	ldrb	r7, [r1, #24]
 800b282:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b284:	2f78      	cmp	r7, #120	; 0x78
 800b286:	4691      	mov	r9, r2
 800b288:	4680      	mov	r8, r0
 800b28a:	460c      	mov	r4, r1
 800b28c:	469a      	mov	sl, r3
 800b28e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b292:	d807      	bhi.n	800b2a4 <_printf_i+0x28>
 800b294:	2f62      	cmp	r7, #98	; 0x62
 800b296:	d80a      	bhi.n	800b2ae <_printf_i+0x32>
 800b298:	2f00      	cmp	r7, #0
 800b29a:	f000 80d8 	beq.w	800b44e <_printf_i+0x1d2>
 800b29e:	2f58      	cmp	r7, #88	; 0x58
 800b2a0:	f000 80a3 	beq.w	800b3ea <_printf_i+0x16e>
 800b2a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b2ac:	e03a      	b.n	800b324 <_printf_i+0xa8>
 800b2ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b2b2:	2b15      	cmp	r3, #21
 800b2b4:	d8f6      	bhi.n	800b2a4 <_printf_i+0x28>
 800b2b6:	a101      	add	r1, pc, #4	; (adr r1, 800b2bc <_printf_i+0x40>)
 800b2b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b2bc:	0800b315 	.word	0x0800b315
 800b2c0:	0800b329 	.word	0x0800b329
 800b2c4:	0800b2a5 	.word	0x0800b2a5
 800b2c8:	0800b2a5 	.word	0x0800b2a5
 800b2cc:	0800b2a5 	.word	0x0800b2a5
 800b2d0:	0800b2a5 	.word	0x0800b2a5
 800b2d4:	0800b329 	.word	0x0800b329
 800b2d8:	0800b2a5 	.word	0x0800b2a5
 800b2dc:	0800b2a5 	.word	0x0800b2a5
 800b2e0:	0800b2a5 	.word	0x0800b2a5
 800b2e4:	0800b2a5 	.word	0x0800b2a5
 800b2e8:	0800b435 	.word	0x0800b435
 800b2ec:	0800b359 	.word	0x0800b359
 800b2f0:	0800b417 	.word	0x0800b417
 800b2f4:	0800b2a5 	.word	0x0800b2a5
 800b2f8:	0800b2a5 	.word	0x0800b2a5
 800b2fc:	0800b457 	.word	0x0800b457
 800b300:	0800b2a5 	.word	0x0800b2a5
 800b304:	0800b359 	.word	0x0800b359
 800b308:	0800b2a5 	.word	0x0800b2a5
 800b30c:	0800b2a5 	.word	0x0800b2a5
 800b310:	0800b41f 	.word	0x0800b41f
 800b314:	682b      	ldr	r3, [r5, #0]
 800b316:	1d1a      	adds	r2, r3, #4
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	602a      	str	r2, [r5, #0]
 800b31c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b320:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b324:	2301      	movs	r3, #1
 800b326:	e0a3      	b.n	800b470 <_printf_i+0x1f4>
 800b328:	6820      	ldr	r0, [r4, #0]
 800b32a:	6829      	ldr	r1, [r5, #0]
 800b32c:	0606      	lsls	r6, r0, #24
 800b32e:	f101 0304 	add.w	r3, r1, #4
 800b332:	d50a      	bpl.n	800b34a <_printf_i+0xce>
 800b334:	680e      	ldr	r6, [r1, #0]
 800b336:	602b      	str	r3, [r5, #0]
 800b338:	2e00      	cmp	r6, #0
 800b33a:	da03      	bge.n	800b344 <_printf_i+0xc8>
 800b33c:	232d      	movs	r3, #45	; 0x2d
 800b33e:	4276      	negs	r6, r6
 800b340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b344:	485e      	ldr	r0, [pc, #376]	; (800b4c0 <_printf_i+0x244>)
 800b346:	230a      	movs	r3, #10
 800b348:	e019      	b.n	800b37e <_printf_i+0x102>
 800b34a:	680e      	ldr	r6, [r1, #0]
 800b34c:	602b      	str	r3, [r5, #0]
 800b34e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b352:	bf18      	it	ne
 800b354:	b236      	sxthne	r6, r6
 800b356:	e7ef      	b.n	800b338 <_printf_i+0xbc>
 800b358:	682b      	ldr	r3, [r5, #0]
 800b35a:	6820      	ldr	r0, [r4, #0]
 800b35c:	1d19      	adds	r1, r3, #4
 800b35e:	6029      	str	r1, [r5, #0]
 800b360:	0601      	lsls	r1, r0, #24
 800b362:	d501      	bpl.n	800b368 <_printf_i+0xec>
 800b364:	681e      	ldr	r6, [r3, #0]
 800b366:	e002      	b.n	800b36e <_printf_i+0xf2>
 800b368:	0646      	lsls	r6, r0, #25
 800b36a:	d5fb      	bpl.n	800b364 <_printf_i+0xe8>
 800b36c:	881e      	ldrh	r6, [r3, #0]
 800b36e:	4854      	ldr	r0, [pc, #336]	; (800b4c0 <_printf_i+0x244>)
 800b370:	2f6f      	cmp	r7, #111	; 0x6f
 800b372:	bf0c      	ite	eq
 800b374:	2308      	moveq	r3, #8
 800b376:	230a      	movne	r3, #10
 800b378:	2100      	movs	r1, #0
 800b37a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b37e:	6865      	ldr	r5, [r4, #4]
 800b380:	60a5      	str	r5, [r4, #8]
 800b382:	2d00      	cmp	r5, #0
 800b384:	bfa2      	ittt	ge
 800b386:	6821      	ldrge	r1, [r4, #0]
 800b388:	f021 0104 	bicge.w	r1, r1, #4
 800b38c:	6021      	strge	r1, [r4, #0]
 800b38e:	b90e      	cbnz	r6, 800b394 <_printf_i+0x118>
 800b390:	2d00      	cmp	r5, #0
 800b392:	d04d      	beq.n	800b430 <_printf_i+0x1b4>
 800b394:	4615      	mov	r5, r2
 800b396:	fbb6 f1f3 	udiv	r1, r6, r3
 800b39a:	fb03 6711 	mls	r7, r3, r1, r6
 800b39e:	5dc7      	ldrb	r7, [r0, r7]
 800b3a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b3a4:	4637      	mov	r7, r6
 800b3a6:	42bb      	cmp	r3, r7
 800b3a8:	460e      	mov	r6, r1
 800b3aa:	d9f4      	bls.n	800b396 <_printf_i+0x11a>
 800b3ac:	2b08      	cmp	r3, #8
 800b3ae:	d10b      	bne.n	800b3c8 <_printf_i+0x14c>
 800b3b0:	6823      	ldr	r3, [r4, #0]
 800b3b2:	07de      	lsls	r6, r3, #31
 800b3b4:	d508      	bpl.n	800b3c8 <_printf_i+0x14c>
 800b3b6:	6923      	ldr	r3, [r4, #16]
 800b3b8:	6861      	ldr	r1, [r4, #4]
 800b3ba:	4299      	cmp	r1, r3
 800b3bc:	bfde      	ittt	le
 800b3be:	2330      	movle	r3, #48	; 0x30
 800b3c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b3c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b3c8:	1b52      	subs	r2, r2, r5
 800b3ca:	6122      	str	r2, [r4, #16]
 800b3cc:	f8cd a000 	str.w	sl, [sp]
 800b3d0:	464b      	mov	r3, r9
 800b3d2:	aa03      	add	r2, sp, #12
 800b3d4:	4621      	mov	r1, r4
 800b3d6:	4640      	mov	r0, r8
 800b3d8:	f7ff fee2 	bl	800b1a0 <_printf_common>
 800b3dc:	3001      	adds	r0, #1
 800b3de:	d14c      	bne.n	800b47a <_printf_i+0x1fe>
 800b3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e4:	b004      	add	sp, #16
 800b3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ea:	4835      	ldr	r0, [pc, #212]	; (800b4c0 <_printf_i+0x244>)
 800b3ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b3f0:	6829      	ldr	r1, [r5, #0]
 800b3f2:	6823      	ldr	r3, [r4, #0]
 800b3f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b3f8:	6029      	str	r1, [r5, #0]
 800b3fa:	061d      	lsls	r5, r3, #24
 800b3fc:	d514      	bpl.n	800b428 <_printf_i+0x1ac>
 800b3fe:	07df      	lsls	r7, r3, #31
 800b400:	bf44      	itt	mi
 800b402:	f043 0320 	orrmi.w	r3, r3, #32
 800b406:	6023      	strmi	r3, [r4, #0]
 800b408:	b91e      	cbnz	r6, 800b412 <_printf_i+0x196>
 800b40a:	6823      	ldr	r3, [r4, #0]
 800b40c:	f023 0320 	bic.w	r3, r3, #32
 800b410:	6023      	str	r3, [r4, #0]
 800b412:	2310      	movs	r3, #16
 800b414:	e7b0      	b.n	800b378 <_printf_i+0xfc>
 800b416:	6823      	ldr	r3, [r4, #0]
 800b418:	f043 0320 	orr.w	r3, r3, #32
 800b41c:	6023      	str	r3, [r4, #0]
 800b41e:	2378      	movs	r3, #120	; 0x78
 800b420:	4828      	ldr	r0, [pc, #160]	; (800b4c4 <_printf_i+0x248>)
 800b422:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b426:	e7e3      	b.n	800b3f0 <_printf_i+0x174>
 800b428:	0659      	lsls	r1, r3, #25
 800b42a:	bf48      	it	mi
 800b42c:	b2b6      	uxthmi	r6, r6
 800b42e:	e7e6      	b.n	800b3fe <_printf_i+0x182>
 800b430:	4615      	mov	r5, r2
 800b432:	e7bb      	b.n	800b3ac <_printf_i+0x130>
 800b434:	682b      	ldr	r3, [r5, #0]
 800b436:	6826      	ldr	r6, [r4, #0]
 800b438:	6961      	ldr	r1, [r4, #20]
 800b43a:	1d18      	adds	r0, r3, #4
 800b43c:	6028      	str	r0, [r5, #0]
 800b43e:	0635      	lsls	r5, r6, #24
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	d501      	bpl.n	800b448 <_printf_i+0x1cc>
 800b444:	6019      	str	r1, [r3, #0]
 800b446:	e002      	b.n	800b44e <_printf_i+0x1d2>
 800b448:	0670      	lsls	r0, r6, #25
 800b44a:	d5fb      	bpl.n	800b444 <_printf_i+0x1c8>
 800b44c:	8019      	strh	r1, [r3, #0]
 800b44e:	2300      	movs	r3, #0
 800b450:	6123      	str	r3, [r4, #16]
 800b452:	4615      	mov	r5, r2
 800b454:	e7ba      	b.n	800b3cc <_printf_i+0x150>
 800b456:	682b      	ldr	r3, [r5, #0]
 800b458:	1d1a      	adds	r2, r3, #4
 800b45a:	602a      	str	r2, [r5, #0]
 800b45c:	681d      	ldr	r5, [r3, #0]
 800b45e:	6862      	ldr	r2, [r4, #4]
 800b460:	2100      	movs	r1, #0
 800b462:	4628      	mov	r0, r5
 800b464:	f7f4 fec4 	bl	80001f0 <memchr>
 800b468:	b108      	cbz	r0, 800b46e <_printf_i+0x1f2>
 800b46a:	1b40      	subs	r0, r0, r5
 800b46c:	6060      	str	r0, [r4, #4]
 800b46e:	6863      	ldr	r3, [r4, #4]
 800b470:	6123      	str	r3, [r4, #16]
 800b472:	2300      	movs	r3, #0
 800b474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b478:	e7a8      	b.n	800b3cc <_printf_i+0x150>
 800b47a:	6923      	ldr	r3, [r4, #16]
 800b47c:	462a      	mov	r2, r5
 800b47e:	4649      	mov	r1, r9
 800b480:	4640      	mov	r0, r8
 800b482:	47d0      	blx	sl
 800b484:	3001      	adds	r0, #1
 800b486:	d0ab      	beq.n	800b3e0 <_printf_i+0x164>
 800b488:	6823      	ldr	r3, [r4, #0]
 800b48a:	079b      	lsls	r3, r3, #30
 800b48c:	d413      	bmi.n	800b4b6 <_printf_i+0x23a>
 800b48e:	68e0      	ldr	r0, [r4, #12]
 800b490:	9b03      	ldr	r3, [sp, #12]
 800b492:	4298      	cmp	r0, r3
 800b494:	bfb8      	it	lt
 800b496:	4618      	movlt	r0, r3
 800b498:	e7a4      	b.n	800b3e4 <_printf_i+0x168>
 800b49a:	2301      	movs	r3, #1
 800b49c:	4632      	mov	r2, r6
 800b49e:	4649      	mov	r1, r9
 800b4a0:	4640      	mov	r0, r8
 800b4a2:	47d0      	blx	sl
 800b4a4:	3001      	adds	r0, #1
 800b4a6:	d09b      	beq.n	800b3e0 <_printf_i+0x164>
 800b4a8:	3501      	adds	r5, #1
 800b4aa:	68e3      	ldr	r3, [r4, #12]
 800b4ac:	9903      	ldr	r1, [sp, #12]
 800b4ae:	1a5b      	subs	r3, r3, r1
 800b4b0:	42ab      	cmp	r3, r5
 800b4b2:	dcf2      	bgt.n	800b49a <_printf_i+0x21e>
 800b4b4:	e7eb      	b.n	800b48e <_printf_i+0x212>
 800b4b6:	2500      	movs	r5, #0
 800b4b8:	f104 0619 	add.w	r6, r4, #25
 800b4bc:	e7f5      	b.n	800b4aa <_printf_i+0x22e>
 800b4be:	bf00      	nop
 800b4c0:	0800d826 	.word	0x0800d826
 800b4c4:	0800d837 	.word	0x0800d837

0800b4c8 <quorem>:
 800b4c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4cc:	6903      	ldr	r3, [r0, #16]
 800b4ce:	690c      	ldr	r4, [r1, #16]
 800b4d0:	42a3      	cmp	r3, r4
 800b4d2:	4607      	mov	r7, r0
 800b4d4:	f2c0 8081 	blt.w	800b5da <quorem+0x112>
 800b4d8:	3c01      	subs	r4, #1
 800b4da:	f101 0814 	add.w	r8, r1, #20
 800b4de:	f100 0514 	add.w	r5, r0, #20
 800b4e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b4e6:	9301      	str	r3, [sp, #4]
 800b4e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b4ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b4f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b4fc:	fbb2 f6f3 	udiv	r6, r2, r3
 800b500:	d331      	bcc.n	800b566 <quorem+0x9e>
 800b502:	f04f 0e00 	mov.w	lr, #0
 800b506:	4640      	mov	r0, r8
 800b508:	46ac      	mov	ip, r5
 800b50a:	46f2      	mov	sl, lr
 800b50c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b510:	b293      	uxth	r3, r2
 800b512:	fb06 e303 	mla	r3, r6, r3, lr
 800b516:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	ebaa 0303 	sub.w	r3, sl, r3
 800b520:	f8dc a000 	ldr.w	sl, [ip]
 800b524:	0c12      	lsrs	r2, r2, #16
 800b526:	fa13 f38a 	uxtah	r3, r3, sl
 800b52a:	fb06 e202 	mla	r2, r6, r2, lr
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	9b00      	ldr	r3, [sp, #0]
 800b532:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b536:	b292      	uxth	r2, r2
 800b538:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b53c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b540:	f8bd 3000 	ldrh.w	r3, [sp]
 800b544:	4581      	cmp	r9, r0
 800b546:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b54a:	f84c 3b04 	str.w	r3, [ip], #4
 800b54e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b552:	d2db      	bcs.n	800b50c <quorem+0x44>
 800b554:	f855 300b 	ldr.w	r3, [r5, fp]
 800b558:	b92b      	cbnz	r3, 800b566 <quorem+0x9e>
 800b55a:	9b01      	ldr	r3, [sp, #4]
 800b55c:	3b04      	subs	r3, #4
 800b55e:	429d      	cmp	r5, r3
 800b560:	461a      	mov	r2, r3
 800b562:	d32e      	bcc.n	800b5c2 <quorem+0xfa>
 800b564:	613c      	str	r4, [r7, #16]
 800b566:	4638      	mov	r0, r7
 800b568:	f001 f8b6 	bl	800c6d8 <__mcmp>
 800b56c:	2800      	cmp	r0, #0
 800b56e:	db24      	blt.n	800b5ba <quorem+0xf2>
 800b570:	3601      	adds	r6, #1
 800b572:	4628      	mov	r0, r5
 800b574:	f04f 0c00 	mov.w	ip, #0
 800b578:	f858 2b04 	ldr.w	r2, [r8], #4
 800b57c:	f8d0 e000 	ldr.w	lr, [r0]
 800b580:	b293      	uxth	r3, r2
 800b582:	ebac 0303 	sub.w	r3, ip, r3
 800b586:	0c12      	lsrs	r2, r2, #16
 800b588:	fa13 f38e 	uxtah	r3, r3, lr
 800b58c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b590:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b594:	b29b      	uxth	r3, r3
 800b596:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b59a:	45c1      	cmp	r9, r8
 800b59c:	f840 3b04 	str.w	r3, [r0], #4
 800b5a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b5a4:	d2e8      	bcs.n	800b578 <quorem+0xb0>
 800b5a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b5aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5ae:	b922      	cbnz	r2, 800b5ba <quorem+0xf2>
 800b5b0:	3b04      	subs	r3, #4
 800b5b2:	429d      	cmp	r5, r3
 800b5b4:	461a      	mov	r2, r3
 800b5b6:	d30a      	bcc.n	800b5ce <quorem+0x106>
 800b5b8:	613c      	str	r4, [r7, #16]
 800b5ba:	4630      	mov	r0, r6
 800b5bc:	b003      	add	sp, #12
 800b5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c2:	6812      	ldr	r2, [r2, #0]
 800b5c4:	3b04      	subs	r3, #4
 800b5c6:	2a00      	cmp	r2, #0
 800b5c8:	d1cc      	bne.n	800b564 <quorem+0x9c>
 800b5ca:	3c01      	subs	r4, #1
 800b5cc:	e7c7      	b.n	800b55e <quorem+0x96>
 800b5ce:	6812      	ldr	r2, [r2, #0]
 800b5d0:	3b04      	subs	r3, #4
 800b5d2:	2a00      	cmp	r2, #0
 800b5d4:	d1f0      	bne.n	800b5b8 <quorem+0xf0>
 800b5d6:	3c01      	subs	r4, #1
 800b5d8:	e7eb      	b.n	800b5b2 <quorem+0xea>
 800b5da:	2000      	movs	r0, #0
 800b5dc:	e7ee      	b.n	800b5bc <quorem+0xf4>
	...

0800b5e0 <_dtoa_r>:
 800b5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e4:	ed2d 8b04 	vpush	{d8-d9}
 800b5e8:	ec57 6b10 	vmov	r6, r7, d0
 800b5ec:	b093      	sub	sp, #76	; 0x4c
 800b5ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b5f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b5f4:	9106      	str	r1, [sp, #24]
 800b5f6:	ee10 aa10 	vmov	sl, s0
 800b5fa:	4604      	mov	r4, r0
 800b5fc:	9209      	str	r2, [sp, #36]	; 0x24
 800b5fe:	930c      	str	r3, [sp, #48]	; 0x30
 800b600:	46bb      	mov	fp, r7
 800b602:	b975      	cbnz	r5, 800b622 <_dtoa_r+0x42>
 800b604:	2010      	movs	r0, #16
 800b606:	f000 fddd 	bl	800c1c4 <malloc>
 800b60a:	4602      	mov	r2, r0
 800b60c:	6260      	str	r0, [r4, #36]	; 0x24
 800b60e:	b920      	cbnz	r0, 800b61a <_dtoa_r+0x3a>
 800b610:	4ba7      	ldr	r3, [pc, #668]	; (800b8b0 <_dtoa_r+0x2d0>)
 800b612:	21ea      	movs	r1, #234	; 0xea
 800b614:	48a7      	ldr	r0, [pc, #668]	; (800b8b4 <_dtoa_r+0x2d4>)
 800b616:	f001 fa67 	bl	800cae8 <__assert_func>
 800b61a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b61e:	6005      	str	r5, [r0, #0]
 800b620:	60c5      	str	r5, [r0, #12]
 800b622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b624:	6819      	ldr	r1, [r3, #0]
 800b626:	b151      	cbz	r1, 800b63e <_dtoa_r+0x5e>
 800b628:	685a      	ldr	r2, [r3, #4]
 800b62a:	604a      	str	r2, [r1, #4]
 800b62c:	2301      	movs	r3, #1
 800b62e:	4093      	lsls	r3, r2
 800b630:	608b      	str	r3, [r1, #8]
 800b632:	4620      	mov	r0, r4
 800b634:	f000 fe0e 	bl	800c254 <_Bfree>
 800b638:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b63a:	2200      	movs	r2, #0
 800b63c:	601a      	str	r2, [r3, #0]
 800b63e:	1e3b      	subs	r3, r7, #0
 800b640:	bfaa      	itet	ge
 800b642:	2300      	movge	r3, #0
 800b644:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b648:	f8c8 3000 	strge.w	r3, [r8]
 800b64c:	4b9a      	ldr	r3, [pc, #616]	; (800b8b8 <_dtoa_r+0x2d8>)
 800b64e:	bfbc      	itt	lt
 800b650:	2201      	movlt	r2, #1
 800b652:	f8c8 2000 	strlt.w	r2, [r8]
 800b656:	ea33 030b 	bics.w	r3, r3, fp
 800b65a:	d11b      	bne.n	800b694 <_dtoa_r+0xb4>
 800b65c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b65e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b662:	6013      	str	r3, [r2, #0]
 800b664:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b668:	4333      	orrs	r3, r6
 800b66a:	f000 8592 	beq.w	800c192 <_dtoa_r+0xbb2>
 800b66e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b670:	b963      	cbnz	r3, 800b68c <_dtoa_r+0xac>
 800b672:	4b92      	ldr	r3, [pc, #584]	; (800b8bc <_dtoa_r+0x2dc>)
 800b674:	e022      	b.n	800b6bc <_dtoa_r+0xdc>
 800b676:	4b92      	ldr	r3, [pc, #584]	; (800b8c0 <_dtoa_r+0x2e0>)
 800b678:	9301      	str	r3, [sp, #4]
 800b67a:	3308      	adds	r3, #8
 800b67c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b67e:	6013      	str	r3, [r2, #0]
 800b680:	9801      	ldr	r0, [sp, #4]
 800b682:	b013      	add	sp, #76	; 0x4c
 800b684:	ecbd 8b04 	vpop	{d8-d9}
 800b688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b68c:	4b8b      	ldr	r3, [pc, #556]	; (800b8bc <_dtoa_r+0x2dc>)
 800b68e:	9301      	str	r3, [sp, #4]
 800b690:	3303      	adds	r3, #3
 800b692:	e7f3      	b.n	800b67c <_dtoa_r+0x9c>
 800b694:	2200      	movs	r2, #0
 800b696:	2300      	movs	r3, #0
 800b698:	4650      	mov	r0, sl
 800b69a:	4659      	mov	r1, fp
 800b69c:	f7f5 fa1c 	bl	8000ad8 <__aeabi_dcmpeq>
 800b6a0:	ec4b ab19 	vmov	d9, sl, fp
 800b6a4:	4680      	mov	r8, r0
 800b6a6:	b158      	cbz	r0, 800b6c0 <_dtoa_r+0xe0>
 800b6a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	6013      	str	r3, [r2, #0]
 800b6ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	f000 856b 	beq.w	800c18c <_dtoa_r+0xbac>
 800b6b6:	4883      	ldr	r0, [pc, #524]	; (800b8c4 <_dtoa_r+0x2e4>)
 800b6b8:	6018      	str	r0, [r3, #0]
 800b6ba:	1e43      	subs	r3, r0, #1
 800b6bc:	9301      	str	r3, [sp, #4]
 800b6be:	e7df      	b.n	800b680 <_dtoa_r+0xa0>
 800b6c0:	ec4b ab10 	vmov	d0, sl, fp
 800b6c4:	aa10      	add	r2, sp, #64	; 0x40
 800b6c6:	a911      	add	r1, sp, #68	; 0x44
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	f001 f8ab 	bl	800c824 <__d2b>
 800b6ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b6d2:	ee08 0a10 	vmov	s16, r0
 800b6d6:	2d00      	cmp	r5, #0
 800b6d8:	f000 8084 	beq.w	800b7e4 <_dtoa_r+0x204>
 800b6dc:	ee19 3a90 	vmov	r3, s19
 800b6e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b6e8:	4656      	mov	r6, sl
 800b6ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b6ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b6f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b6f6:	4b74      	ldr	r3, [pc, #464]	; (800b8c8 <_dtoa_r+0x2e8>)
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	4639      	mov	r1, r7
 800b6fe:	f7f4 fdcb 	bl	8000298 <__aeabi_dsub>
 800b702:	a365      	add	r3, pc, #404	; (adr r3, 800b898 <_dtoa_r+0x2b8>)
 800b704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b708:	f7f4 ff7e 	bl	8000608 <__aeabi_dmul>
 800b70c:	a364      	add	r3, pc, #400	; (adr r3, 800b8a0 <_dtoa_r+0x2c0>)
 800b70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b712:	f7f4 fdc3 	bl	800029c <__adddf3>
 800b716:	4606      	mov	r6, r0
 800b718:	4628      	mov	r0, r5
 800b71a:	460f      	mov	r7, r1
 800b71c:	f7f4 ff0a 	bl	8000534 <__aeabi_i2d>
 800b720:	a361      	add	r3, pc, #388	; (adr r3, 800b8a8 <_dtoa_r+0x2c8>)
 800b722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b726:	f7f4 ff6f 	bl	8000608 <__aeabi_dmul>
 800b72a:	4602      	mov	r2, r0
 800b72c:	460b      	mov	r3, r1
 800b72e:	4630      	mov	r0, r6
 800b730:	4639      	mov	r1, r7
 800b732:	f7f4 fdb3 	bl	800029c <__adddf3>
 800b736:	4606      	mov	r6, r0
 800b738:	460f      	mov	r7, r1
 800b73a:	f7f5 fa15 	bl	8000b68 <__aeabi_d2iz>
 800b73e:	2200      	movs	r2, #0
 800b740:	9000      	str	r0, [sp, #0]
 800b742:	2300      	movs	r3, #0
 800b744:	4630      	mov	r0, r6
 800b746:	4639      	mov	r1, r7
 800b748:	f7f5 f9d0 	bl	8000aec <__aeabi_dcmplt>
 800b74c:	b150      	cbz	r0, 800b764 <_dtoa_r+0x184>
 800b74e:	9800      	ldr	r0, [sp, #0]
 800b750:	f7f4 fef0 	bl	8000534 <__aeabi_i2d>
 800b754:	4632      	mov	r2, r6
 800b756:	463b      	mov	r3, r7
 800b758:	f7f5 f9be 	bl	8000ad8 <__aeabi_dcmpeq>
 800b75c:	b910      	cbnz	r0, 800b764 <_dtoa_r+0x184>
 800b75e:	9b00      	ldr	r3, [sp, #0]
 800b760:	3b01      	subs	r3, #1
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	9b00      	ldr	r3, [sp, #0]
 800b766:	2b16      	cmp	r3, #22
 800b768:	d85a      	bhi.n	800b820 <_dtoa_r+0x240>
 800b76a:	9a00      	ldr	r2, [sp, #0]
 800b76c:	4b57      	ldr	r3, [pc, #348]	; (800b8cc <_dtoa_r+0x2ec>)
 800b76e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b776:	ec51 0b19 	vmov	r0, r1, d9
 800b77a:	f7f5 f9b7 	bl	8000aec <__aeabi_dcmplt>
 800b77e:	2800      	cmp	r0, #0
 800b780:	d050      	beq.n	800b824 <_dtoa_r+0x244>
 800b782:	9b00      	ldr	r3, [sp, #0]
 800b784:	3b01      	subs	r3, #1
 800b786:	9300      	str	r3, [sp, #0]
 800b788:	2300      	movs	r3, #0
 800b78a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b78c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b78e:	1b5d      	subs	r5, r3, r5
 800b790:	1e6b      	subs	r3, r5, #1
 800b792:	9305      	str	r3, [sp, #20]
 800b794:	bf45      	ittet	mi
 800b796:	f1c5 0301 	rsbmi	r3, r5, #1
 800b79a:	9304      	strmi	r3, [sp, #16]
 800b79c:	2300      	movpl	r3, #0
 800b79e:	2300      	movmi	r3, #0
 800b7a0:	bf4c      	ite	mi
 800b7a2:	9305      	strmi	r3, [sp, #20]
 800b7a4:	9304      	strpl	r3, [sp, #16]
 800b7a6:	9b00      	ldr	r3, [sp, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	db3d      	blt.n	800b828 <_dtoa_r+0x248>
 800b7ac:	9b05      	ldr	r3, [sp, #20]
 800b7ae:	9a00      	ldr	r2, [sp, #0]
 800b7b0:	920a      	str	r2, [sp, #40]	; 0x28
 800b7b2:	4413      	add	r3, r2
 800b7b4:	9305      	str	r3, [sp, #20]
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	9307      	str	r3, [sp, #28]
 800b7ba:	9b06      	ldr	r3, [sp, #24]
 800b7bc:	2b09      	cmp	r3, #9
 800b7be:	f200 8089 	bhi.w	800b8d4 <_dtoa_r+0x2f4>
 800b7c2:	2b05      	cmp	r3, #5
 800b7c4:	bfc4      	itt	gt
 800b7c6:	3b04      	subgt	r3, #4
 800b7c8:	9306      	strgt	r3, [sp, #24]
 800b7ca:	9b06      	ldr	r3, [sp, #24]
 800b7cc:	f1a3 0302 	sub.w	r3, r3, #2
 800b7d0:	bfcc      	ite	gt
 800b7d2:	2500      	movgt	r5, #0
 800b7d4:	2501      	movle	r5, #1
 800b7d6:	2b03      	cmp	r3, #3
 800b7d8:	f200 8087 	bhi.w	800b8ea <_dtoa_r+0x30a>
 800b7dc:	e8df f003 	tbb	[pc, r3]
 800b7e0:	59383a2d 	.word	0x59383a2d
 800b7e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b7e8:	441d      	add	r5, r3
 800b7ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b7ee:	2b20      	cmp	r3, #32
 800b7f0:	bfc1      	itttt	gt
 800b7f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b7f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b7fa:	fa0b f303 	lslgt.w	r3, fp, r3
 800b7fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b802:	bfda      	itte	le
 800b804:	f1c3 0320 	rsble	r3, r3, #32
 800b808:	fa06 f003 	lslle.w	r0, r6, r3
 800b80c:	4318      	orrgt	r0, r3
 800b80e:	f7f4 fe81 	bl	8000514 <__aeabi_ui2d>
 800b812:	2301      	movs	r3, #1
 800b814:	4606      	mov	r6, r0
 800b816:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b81a:	3d01      	subs	r5, #1
 800b81c:	930e      	str	r3, [sp, #56]	; 0x38
 800b81e:	e76a      	b.n	800b6f6 <_dtoa_r+0x116>
 800b820:	2301      	movs	r3, #1
 800b822:	e7b2      	b.n	800b78a <_dtoa_r+0x1aa>
 800b824:	900b      	str	r0, [sp, #44]	; 0x2c
 800b826:	e7b1      	b.n	800b78c <_dtoa_r+0x1ac>
 800b828:	9b04      	ldr	r3, [sp, #16]
 800b82a:	9a00      	ldr	r2, [sp, #0]
 800b82c:	1a9b      	subs	r3, r3, r2
 800b82e:	9304      	str	r3, [sp, #16]
 800b830:	4253      	negs	r3, r2
 800b832:	9307      	str	r3, [sp, #28]
 800b834:	2300      	movs	r3, #0
 800b836:	930a      	str	r3, [sp, #40]	; 0x28
 800b838:	e7bf      	b.n	800b7ba <_dtoa_r+0x1da>
 800b83a:	2300      	movs	r3, #0
 800b83c:	9308      	str	r3, [sp, #32]
 800b83e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b840:	2b00      	cmp	r3, #0
 800b842:	dc55      	bgt.n	800b8f0 <_dtoa_r+0x310>
 800b844:	2301      	movs	r3, #1
 800b846:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b84a:	461a      	mov	r2, r3
 800b84c:	9209      	str	r2, [sp, #36]	; 0x24
 800b84e:	e00c      	b.n	800b86a <_dtoa_r+0x28a>
 800b850:	2301      	movs	r3, #1
 800b852:	e7f3      	b.n	800b83c <_dtoa_r+0x25c>
 800b854:	2300      	movs	r3, #0
 800b856:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b858:	9308      	str	r3, [sp, #32]
 800b85a:	9b00      	ldr	r3, [sp, #0]
 800b85c:	4413      	add	r3, r2
 800b85e:	9302      	str	r3, [sp, #8]
 800b860:	3301      	adds	r3, #1
 800b862:	2b01      	cmp	r3, #1
 800b864:	9303      	str	r3, [sp, #12]
 800b866:	bfb8      	it	lt
 800b868:	2301      	movlt	r3, #1
 800b86a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b86c:	2200      	movs	r2, #0
 800b86e:	6042      	str	r2, [r0, #4]
 800b870:	2204      	movs	r2, #4
 800b872:	f102 0614 	add.w	r6, r2, #20
 800b876:	429e      	cmp	r6, r3
 800b878:	6841      	ldr	r1, [r0, #4]
 800b87a:	d93d      	bls.n	800b8f8 <_dtoa_r+0x318>
 800b87c:	4620      	mov	r0, r4
 800b87e:	f000 fca9 	bl	800c1d4 <_Balloc>
 800b882:	9001      	str	r0, [sp, #4]
 800b884:	2800      	cmp	r0, #0
 800b886:	d13b      	bne.n	800b900 <_dtoa_r+0x320>
 800b888:	4b11      	ldr	r3, [pc, #68]	; (800b8d0 <_dtoa_r+0x2f0>)
 800b88a:	4602      	mov	r2, r0
 800b88c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b890:	e6c0      	b.n	800b614 <_dtoa_r+0x34>
 800b892:	2301      	movs	r3, #1
 800b894:	e7df      	b.n	800b856 <_dtoa_r+0x276>
 800b896:	bf00      	nop
 800b898:	636f4361 	.word	0x636f4361
 800b89c:	3fd287a7 	.word	0x3fd287a7
 800b8a0:	8b60c8b3 	.word	0x8b60c8b3
 800b8a4:	3fc68a28 	.word	0x3fc68a28
 800b8a8:	509f79fb 	.word	0x509f79fb
 800b8ac:	3fd34413 	.word	0x3fd34413
 800b8b0:	0800d855 	.word	0x0800d855
 800b8b4:	0800d86c 	.word	0x0800d86c
 800b8b8:	7ff00000 	.word	0x7ff00000
 800b8bc:	0800d851 	.word	0x0800d851
 800b8c0:	0800d848 	.word	0x0800d848
 800b8c4:	0800d825 	.word	0x0800d825
 800b8c8:	3ff80000 	.word	0x3ff80000
 800b8cc:	0800d960 	.word	0x0800d960
 800b8d0:	0800d8c7 	.word	0x0800d8c7
 800b8d4:	2501      	movs	r5, #1
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	9306      	str	r3, [sp, #24]
 800b8da:	9508      	str	r5, [sp, #32]
 800b8dc:	f04f 33ff 	mov.w	r3, #4294967295
 800b8e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	2312      	movs	r3, #18
 800b8e8:	e7b0      	b.n	800b84c <_dtoa_r+0x26c>
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	9308      	str	r3, [sp, #32]
 800b8ee:	e7f5      	b.n	800b8dc <_dtoa_r+0x2fc>
 800b8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b8f6:	e7b8      	b.n	800b86a <_dtoa_r+0x28a>
 800b8f8:	3101      	adds	r1, #1
 800b8fa:	6041      	str	r1, [r0, #4]
 800b8fc:	0052      	lsls	r2, r2, #1
 800b8fe:	e7b8      	b.n	800b872 <_dtoa_r+0x292>
 800b900:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b902:	9a01      	ldr	r2, [sp, #4]
 800b904:	601a      	str	r2, [r3, #0]
 800b906:	9b03      	ldr	r3, [sp, #12]
 800b908:	2b0e      	cmp	r3, #14
 800b90a:	f200 809d 	bhi.w	800ba48 <_dtoa_r+0x468>
 800b90e:	2d00      	cmp	r5, #0
 800b910:	f000 809a 	beq.w	800ba48 <_dtoa_r+0x468>
 800b914:	9b00      	ldr	r3, [sp, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	dd32      	ble.n	800b980 <_dtoa_r+0x3a0>
 800b91a:	4ab7      	ldr	r2, [pc, #732]	; (800bbf8 <_dtoa_r+0x618>)
 800b91c:	f003 030f 	and.w	r3, r3, #15
 800b920:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b924:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b928:	9b00      	ldr	r3, [sp, #0]
 800b92a:	05d8      	lsls	r0, r3, #23
 800b92c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b930:	d516      	bpl.n	800b960 <_dtoa_r+0x380>
 800b932:	4bb2      	ldr	r3, [pc, #712]	; (800bbfc <_dtoa_r+0x61c>)
 800b934:	ec51 0b19 	vmov	r0, r1, d9
 800b938:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b93c:	f7f4 ff8e 	bl	800085c <__aeabi_ddiv>
 800b940:	f007 070f 	and.w	r7, r7, #15
 800b944:	4682      	mov	sl, r0
 800b946:	468b      	mov	fp, r1
 800b948:	2503      	movs	r5, #3
 800b94a:	4eac      	ldr	r6, [pc, #688]	; (800bbfc <_dtoa_r+0x61c>)
 800b94c:	b957      	cbnz	r7, 800b964 <_dtoa_r+0x384>
 800b94e:	4642      	mov	r2, r8
 800b950:	464b      	mov	r3, r9
 800b952:	4650      	mov	r0, sl
 800b954:	4659      	mov	r1, fp
 800b956:	f7f4 ff81 	bl	800085c <__aeabi_ddiv>
 800b95a:	4682      	mov	sl, r0
 800b95c:	468b      	mov	fp, r1
 800b95e:	e028      	b.n	800b9b2 <_dtoa_r+0x3d2>
 800b960:	2502      	movs	r5, #2
 800b962:	e7f2      	b.n	800b94a <_dtoa_r+0x36a>
 800b964:	07f9      	lsls	r1, r7, #31
 800b966:	d508      	bpl.n	800b97a <_dtoa_r+0x39a>
 800b968:	4640      	mov	r0, r8
 800b96a:	4649      	mov	r1, r9
 800b96c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b970:	f7f4 fe4a 	bl	8000608 <__aeabi_dmul>
 800b974:	3501      	adds	r5, #1
 800b976:	4680      	mov	r8, r0
 800b978:	4689      	mov	r9, r1
 800b97a:	107f      	asrs	r7, r7, #1
 800b97c:	3608      	adds	r6, #8
 800b97e:	e7e5      	b.n	800b94c <_dtoa_r+0x36c>
 800b980:	f000 809b 	beq.w	800baba <_dtoa_r+0x4da>
 800b984:	9b00      	ldr	r3, [sp, #0]
 800b986:	4f9d      	ldr	r7, [pc, #628]	; (800bbfc <_dtoa_r+0x61c>)
 800b988:	425e      	negs	r6, r3
 800b98a:	4b9b      	ldr	r3, [pc, #620]	; (800bbf8 <_dtoa_r+0x618>)
 800b98c:	f006 020f 	and.w	r2, r6, #15
 800b990:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b998:	ec51 0b19 	vmov	r0, r1, d9
 800b99c:	f7f4 fe34 	bl	8000608 <__aeabi_dmul>
 800b9a0:	1136      	asrs	r6, r6, #4
 800b9a2:	4682      	mov	sl, r0
 800b9a4:	468b      	mov	fp, r1
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	2502      	movs	r5, #2
 800b9aa:	2e00      	cmp	r6, #0
 800b9ac:	d17a      	bne.n	800baa4 <_dtoa_r+0x4c4>
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d1d3      	bne.n	800b95a <_dtoa_r+0x37a>
 800b9b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f000 8082 	beq.w	800babe <_dtoa_r+0x4de>
 800b9ba:	4b91      	ldr	r3, [pc, #580]	; (800bc00 <_dtoa_r+0x620>)
 800b9bc:	2200      	movs	r2, #0
 800b9be:	4650      	mov	r0, sl
 800b9c0:	4659      	mov	r1, fp
 800b9c2:	f7f5 f893 	bl	8000aec <__aeabi_dcmplt>
 800b9c6:	2800      	cmp	r0, #0
 800b9c8:	d079      	beq.n	800babe <_dtoa_r+0x4de>
 800b9ca:	9b03      	ldr	r3, [sp, #12]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d076      	beq.n	800babe <_dtoa_r+0x4de>
 800b9d0:	9b02      	ldr	r3, [sp, #8]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	dd36      	ble.n	800ba44 <_dtoa_r+0x464>
 800b9d6:	9b00      	ldr	r3, [sp, #0]
 800b9d8:	4650      	mov	r0, sl
 800b9da:	4659      	mov	r1, fp
 800b9dc:	1e5f      	subs	r7, r3, #1
 800b9de:	2200      	movs	r2, #0
 800b9e0:	4b88      	ldr	r3, [pc, #544]	; (800bc04 <_dtoa_r+0x624>)
 800b9e2:	f7f4 fe11 	bl	8000608 <__aeabi_dmul>
 800b9e6:	9e02      	ldr	r6, [sp, #8]
 800b9e8:	4682      	mov	sl, r0
 800b9ea:	468b      	mov	fp, r1
 800b9ec:	3501      	adds	r5, #1
 800b9ee:	4628      	mov	r0, r5
 800b9f0:	f7f4 fda0 	bl	8000534 <__aeabi_i2d>
 800b9f4:	4652      	mov	r2, sl
 800b9f6:	465b      	mov	r3, fp
 800b9f8:	f7f4 fe06 	bl	8000608 <__aeabi_dmul>
 800b9fc:	4b82      	ldr	r3, [pc, #520]	; (800bc08 <_dtoa_r+0x628>)
 800b9fe:	2200      	movs	r2, #0
 800ba00:	f7f4 fc4c 	bl	800029c <__adddf3>
 800ba04:	46d0      	mov	r8, sl
 800ba06:	46d9      	mov	r9, fp
 800ba08:	4682      	mov	sl, r0
 800ba0a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ba0e:	2e00      	cmp	r6, #0
 800ba10:	d158      	bne.n	800bac4 <_dtoa_r+0x4e4>
 800ba12:	4b7e      	ldr	r3, [pc, #504]	; (800bc0c <_dtoa_r+0x62c>)
 800ba14:	2200      	movs	r2, #0
 800ba16:	4640      	mov	r0, r8
 800ba18:	4649      	mov	r1, r9
 800ba1a:	f7f4 fc3d 	bl	8000298 <__aeabi_dsub>
 800ba1e:	4652      	mov	r2, sl
 800ba20:	465b      	mov	r3, fp
 800ba22:	4680      	mov	r8, r0
 800ba24:	4689      	mov	r9, r1
 800ba26:	f7f5 f87f 	bl	8000b28 <__aeabi_dcmpgt>
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	f040 8295 	bne.w	800bf5a <_dtoa_r+0x97a>
 800ba30:	4652      	mov	r2, sl
 800ba32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ba36:	4640      	mov	r0, r8
 800ba38:	4649      	mov	r1, r9
 800ba3a:	f7f5 f857 	bl	8000aec <__aeabi_dcmplt>
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	f040 8289 	bne.w	800bf56 <_dtoa_r+0x976>
 800ba44:	ec5b ab19 	vmov	sl, fp, d9
 800ba48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	f2c0 8148 	blt.w	800bce0 <_dtoa_r+0x700>
 800ba50:	9a00      	ldr	r2, [sp, #0]
 800ba52:	2a0e      	cmp	r2, #14
 800ba54:	f300 8144 	bgt.w	800bce0 <_dtoa_r+0x700>
 800ba58:	4b67      	ldr	r3, [pc, #412]	; (800bbf8 <_dtoa_r+0x618>)
 800ba5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	f280 80d5 	bge.w	800bc14 <_dtoa_r+0x634>
 800ba6a:	9b03      	ldr	r3, [sp, #12]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f300 80d1 	bgt.w	800bc14 <_dtoa_r+0x634>
 800ba72:	f040 826f 	bne.w	800bf54 <_dtoa_r+0x974>
 800ba76:	4b65      	ldr	r3, [pc, #404]	; (800bc0c <_dtoa_r+0x62c>)
 800ba78:	2200      	movs	r2, #0
 800ba7a:	4640      	mov	r0, r8
 800ba7c:	4649      	mov	r1, r9
 800ba7e:	f7f4 fdc3 	bl	8000608 <__aeabi_dmul>
 800ba82:	4652      	mov	r2, sl
 800ba84:	465b      	mov	r3, fp
 800ba86:	f7f5 f845 	bl	8000b14 <__aeabi_dcmpge>
 800ba8a:	9e03      	ldr	r6, [sp, #12]
 800ba8c:	4637      	mov	r7, r6
 800ba8e:	2800      	cmp	r0, #0
 800ba90:	f040 8245 	bne.w	800bf1e <_dtoa_r+0x93e>
 800ba94:	9d01      	ldr	r5, [sp, #4]
 800ba96:	2331      	movs	r3, #49	; 0x31
 800ba98:	f805 3b01 	strb.w	r3, [r5], #1
 800ba9c:	9b00      	ldr	r3, [sp, #0]
 800ba9e:	3301      	adds	r3, #1
 800baa0:	9300      	str	r3, [sp, #0]
 800baa2:	e240      	b.n	800bf26 <_dtoa_r+0x946>
 800baa4:	07f2      	lsls	r2, r6, #31
 800baa6:	d505      	bpl.n	800bab4 <_dtoa_r+0x4d4>
 800baa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800baac:	f7f4 fdac 	bl	8000608 <__aeabi_dmul>
 800bab0:	3501      	adds	r5, #1
 800bab2:	2301      	movs	r3, #1
 800bab4:	1076      	asrs	r6, r6, #1
 800bab6:	3708      	adds	r7, #8
 800bab8:	e777      	b.n	800b9aa <_dtoa_r+0x3ca>
 800baba:	2502      	movs	r5, #2
 800babc:	e779      	b.n	800b9b2 <_dtoa_r+0x3d2>
 800babe:	9f00      	ldr	r7, [sp, #0]
 800bac0:	9e03      	ldr	r6, [sp, #12]
 800bac2:	e794      	b.n	800b9ee <_dtoa_r+0x40e>
 800bac4:	9901      	ldr	r1, [sp, #4]
 800bac6:	4b4c      	ldr	r3, [pc, #304]	; (800bbf8 <_dtoa_r+0x618>)
 800bac8:	4431      	add	r1, r6
 800baca:	910d      	str	r1, [sp, #52]	; 0x34
 800bacc:	9908      	ldr	r1, [sp, #32]
 800bace:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bad2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bad6:	2900      	cmp	r1, #0
 800bad8:	d043      	beq.n	800bb62 <_dtoa_r+0x582>
 800bada:	494d      	ldr	r1, [pc, #308]	; (800bc10 <_dtoa_r+0x630>)
 800badc:	2000      	movs	r0, #0
 800bade:	f7f4 febd 	bl	800085c <__aeabi_ddiv>
 800bae2:	4652      	mov	r2, sl
 800bae4:	465b      	mov	r3, fp
 800bae6:	f7f4 fbd7 	bl	8000298 <__aeabi_dsub>
 800baea:	9d01      	ldr	r5, [sp, #4]
 800baec:	4682      	mov	sl, r0
 800baee:	468b      	mov	fp, r1
 800baf0:	4649      	mov	r1, r9
 800baf2:	4640      	mov	r0, r8
 800baf4:	f7f5 f838 	bl	8000b68 <__aeabi_d2iz>
 800baf8:	4606      	mov	r6, r0
 800bafa:	f7f4 fd1b 	bl	8000534 <__aeabi_i2d>
 800bafe:	4602      	mov	r2, r0
 800bb00:	460b      	mov	r3, r1
 800bb02:	4640      	mov	r0, r8
 800bb04:	4649      	mov	r1, r9
 800bb06:	f7f4 fbc7 	bl	8000298 <__aeabi_dsub>
 800bb0a:	3630      	adds	r6, #48	; 0x30
 800bb0c:	f805 6b01 	strb.w	r6, [r5], #1
 800bb10:	4652      	mov	r2, sl
 800bb12:	465b      	mov	r3, fp
 800bb14:	4680      	mov	r8, r0
 800bb16:	4689      	mov	r9, r1
 800bb18:	f7f4 ffe8 	bl	8000aec <__aeabi_dcmplt>
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	d163      	bne.n	800bbe8 <_dtoa_r+0x608>
 800bb20:	4642      	mov	r2, r8
 800bb22:	464b      	mov	r3, r9
 800bb24:	4936      	ldr	r1, [pc, #216]	; (800bc00 <_dtoa_r+0x620>)
 800bb26:	2000      	movs	r0, #0
 800bb28:	f7f4 fbb6 	bl	8000298 <__aeabi_dsub>
 800bb2c:	4652      	mov	r2, sl
 800bb2e:	465b      	mov	r3, fp
 800bb30:	f7f4 ffdc 	bl	8000aec <__aeabi_dcmplt>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	f040 80b5 	bne.w	800bca4 <_dtoa_r+0x6c4>
 800bb3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb3c:	429d      	cmp	r5, r3
 800bb3e:	d081      	beq.n	800ba44 <_dtoa_r+0x464>
 800bb40:	4b30      	ldr	r3, [pc, #192]	; (800bc04 <_dtoa_r+0x624>)
 800bb42:	2200      	movs	r2, #0
 800bb44:	4650      	mov	r0, sl
 800bb46:	4659      	mov	r1, fp
 800bb48:	f7f4 fd5e 	bl	8000608 <__aeabi_dmul>
 800bb4c:	4b2d      	ldr	r3, [pc, #180]	; (800bc04 <_dtoa_r+0x624>)
 800bb4e:	4682      	mov	sl, r0
 800bb50:	468b      	mov	fp, r1
 800bb52:	4640      	mov	r0, r8
 800bb54:	4649      	mov	r1, r9
 800bb56:	2200      	movs	r2, #0
 800bb58:	f7f4 fd56 	bl	8000608 <__aeabi_dmul>
 800bb5c:	4680      	mov	r8, r0
 800bb5e:	4689      	mov	r9, r1
 800bb60:	e7c6      	b.n	800baf0 <_dtoa_r+0x510>
 800bb62:	4650      	mov	r0, sl
 800bb64:	4659      	mov	r1, fp
 800bb66:	f7f4 fd4f 	bl	8000608 <__aeabi_dmul>
 800bb6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb6c:	9d01      	ldr	r5, [sp, #4]
 800bb6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb70:	4682      	mov	sl, r0
 800bb72:	468b      	mov	fp, r1
 800bb74:	4649      	mov	r1, r9
 800bb76:	4640      	mov	r0, r8
 800bb78:	f7f4 fff6 	bl	8000b68 <__aeabi_d2iz>
 800bb7c:	4606      	mov	r6, r0
 800bb7e:	f7f4 fcd9 	bl	8000534 <__aeabi_i2d>
 800bb82:	3630      	adds	r6, #48	; 0x30
 800bb84:	4602      	mov	r2, r0
 800bb86:	460b      	mov	r3, r1
 800bb88:	4640      	mov	r0, r8
 800bb8a:	4649      	mov	r1, r9
 800bb8c:	f7f4 fb84 	bl	8000298 <__aeabi_dsub>
 800bb90:	f805 6b01 	strb.w	r6, [r5], #1
 800bb94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb96:	429d      	cmp	r5, r3
 800bb98:	4680      	mov	r8, r0
 800bb9a:	4689      	mov	r9, r1
 800bb9c:	f04f 0200 	mov.w	r2, #0
 800bba0:	d124      	bne.n	800bbec <_dtoa_r+0x60c>
 800bba2:	4b1b      	ldr	r3, [pc, #108]	; (800bc10 <_dtoa_r+0x630>)
 800bba4:	4650      	mov	r0, sl
 800bba6:	4659      	mov	r1, fp
 800bba8:	f7f4 fb78 	bl	800029c <__adddf3>
 800bbac:	4602      	mov	r2, r0
 800bbae:	460b      	mov	r3, r1
 800bbb0:	4640      	mov	r0, r8
 800bbb2:	4649      	mov	r1, r9
 800bbb4:	f7f4 ffb8 	bl	8000b28 <__aeabi_dcmpgt>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	d173      	bne.n	800bca4 <_dtoa_r+0x6c4>
 800bbbc:	4652      	mov	r2, sl
 800bbbe:	465b      	mov	r3, fp
 800bbc0:	4913      	ldr	r1, [pc, #76]	; (800bc10 <_dtoa_r+0x630>)
 800bbc2:	2000      	movs	r0, #0
 800bbc4:	f7f4 fb68 	bl	8000298 <__aeabi_dsub>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	460b      	mov	r3, r1
 800bbcc:	4640      	mov	r0, r8
 800bbce:	4649      	mov	r1, r9
 800bbd0:	f7f4 ff8c 	bl	8000aec <__aeabi_dcmplt>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	f43f af35 	beq.w	800ba44 <_dtoa_r+0x464>
 800bbda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bbdc:	1e6b      	subs	r3, r5, #1
 800bbde:	930f      	str	r3, [sp, #60]	; 0x3c
 800bbe0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bbe4:	2b30      	cmp	r3, #48	; 0x30
 800bbe6:	d0f8      	beq.n	800bbda <_dtoa_r+0x5fa>
 800bbe8:	9700      	str	r7, [sp, #0]
 800bbea:	e049      	b.n	800bc80 <_dtoa_r+0x6a0>
 800bbec:	4b05      	ldr	r3, [pc, #20]	; (800bc04 <_dtoa_r+0x624>)
 800bbee:	f7f4 fd0b 	bl	8000608 <__aeabi_dmul>
 800bbf2:	4680      	mov	r8, r0
 800bbf4:	4689      	mov	r9, r1
 800bbf6:	e7bd      	b.n	800bb74 <_dtoa_r+0x594>
 800bbf8:	0800d960 	.word	0x0800d960
 800bbfc:	0800d938 	.word	0x0800d938
 800bc00:	3ff00000 	.word	0x3ff00000
 800bc04:	40240000 	.word	0x40240000
 800bc08:	401c0000 	.word	0x401c0000
 800bc0c:	40140000 	.word	0x40140000
 800bc10:	3fe00000 	.word	0x3fe00000
 800bc14:	9d01      	ldr	r5, [sp, #4]
 800bc16:	4656      	mov	r6, sl
 800bc18:	465f      	mov	r7, fp
 800bc1a:	4642      	mov	r2, r8
 800bc1c:	464b      	mov	r3, r9
 800bc1e:	4630      	mov	r0, r6
 800bc20:	4639      	mov	r1, r7
 800bc22:	f7f4 fe1b 	bl	800085c <__aeabi_ddiv>
 800bc26:	f7f4 ff9f 	bl	8000b68 <__aeabi_d2iz>
 800bc2a:	4682      	mov	sl, r0
 800bc2c:	f7f4 fc82 	bl	8000534 <__aeabi_i2d>
 800bc30:	4642      	mov	r2, r8
 800bc32:	464b      	mov	r3, r9
 800bc34:	f7f4 fce8 	bl	8000608 <__aeabi_dmul>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	4639      	mov	r1, r7
 800bc40:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bc44:	f7f4 fb28 	bl	8000298 <__aeabi_dsub>
 800bc48:	f805 6b01 	strb.w	r6, [r5], #1
 800bc4c:	9e01      	ldr	r6, [sp, #4]
 800bc4e:	9f03      	ldr	r7, [sp, #12]
 800bc50:	1bae      	subs	r6, r5, r6
 800bc52:	42b7      	cmp	r7, r6
 800bc54:	4602      	mov	r2, r0
 800bc56:	460b      	mov	r3, r1
 800bc58:	d135      	bne.n	800bcc6 <_dtoa_r+0x6e6>
 800bc5a:	f7f4 fb1f 	bl	800029c <__adddf3>
 800bc5e:	4642      	mov	r2, r8
 800bc60:	464b      	mov	r3, r9
 800bc62:	4606      	mov	r6, r0
 800bc64:	460f      	mov	r7, r1
 800bc66:	f7f4 ff5f 	bl	8000b28 <__aeabi_dcmpgt>
 800bc6a:	b9d0      	cbnz	r0, 800bca2 <_dtoa_r+0x6c2>
 800bc6c:	4642      	mov	r2, r8
 800bc6e:	464b      	mov	r3, r9
 800bc70:	4630      	mov	r0, r6
 800bc72:	4639      	mov	r1, r7
 800bc74:	f7f4 ff30 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc78:	b110      	cbz	r0, 800bc80 <_dtoa_r+0x6a0>
 800bc7a:	f01a 0f01 	tst.w	sl, #1
 800bc7e:	d110      	bne.n	800bca2 <_dtoa_r+0x6c2>
 800bc80:	4620      	mov	r0, r4
 800bc82:	ee18 1a10 	vmov	r1, s16
 800bc86:	f000 fae5 	bl	800c254 <_Bfree>
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	9800      	ldr	r0, [sp, #0]
 800bc8e:	702b      	strb	r3, [r5, #0]
 800bc90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc92:	3001      	adds	r0, #1
 800bc94:	6018      	str	r0, [r3, #0]
 800bc96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	f43f acf1 	beq.w	800b680 <_dtoa_r+0xa0>
 800bc9e:	601d      	str	r5, [r3, #0]
 800bca0:	e4ee      	b.n	800b680 <_dtoa_r+0xa0>
 800bca2:	9f00      	ldr	r7, [sp, #0]
 800bca4:	462b      	mov	r3, r5
 800bca6:	461d      	mov	r5, r3
 800bca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcac:	2a39      	cmp	r2, #57	; 0x39
 800bcae:	d106      	bne.n	800bcbe <_dtoa_r+0x6de>
 800bcb0:	9a01      	ldr	r2, [sp, #4]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d1f7      	bne.n	800bca6 <_dtoa_r+0x6c6>
 800bcb6:	9901      	ldr	r1, [sp, #4]
 800bcb8:	2230      	movs	r2, #48	; 0x30
 800bcba:	3701      	adds	r7, #1
 800bcbc:	700a      	strb	r2, [r1, #0]
 800bcbe:	781a      	ldrb	r2, [r3, #0]
 800bcc0:	3201      	adds	r2, #1
 800bcc2:	701a      	strb	r2, [r3, #0]
 800bcc4:	e790      	b.n	800bbe8 <_dtoa_r+0x608>
 800bcc6:	4ba6      	ldr	r3, [pc, #664]	; (800bf60 <_dtoa_r+0x980>)
 800bcc8:	2200      	movs	r2, #0
 800bcca:	f7f4 fc9d 	bl	8000608 <__aeabi_dmul>
 800bcce:	2200      	movs	r2, #0
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	4606      	mov	r6, r0
 800bcd4:	460f      	mov	r7, r1
 800bcd6:	f7f4 feff 	bl	8000ad8 <__aeabi_dcmpeq>
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	d09d      	beq.n	800bc1a <_dtoa_r+0x63a>
 800bcde:	e7cf      	b.n	800bc80 <_dtoa_r+0x6a0>
 800bce0:	9a08      	ldr	r2, [sp, #32]
 800bce2:	2a00      	cmp	r2, #0
 800bce4:	f000 80d7 	beq.w	800be96 <_dtoa_r+0x8b6>
 800bce8:	9a06      	ldr	r2, [sp, #24]
 800bcea:	2a01      	cmp	r2, #1
 800bcec:	f300 80ba 	bgt.w	800be64 <_dtoa_r+0x884>
 800bcf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bcf2:	2a00      	cmp	r2, #0
 800bcf4:	f000 80b2 	beq.w	800be5c <_dtoa_r+0x87c>
 800bcf8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bcfc:	9e07      	ldr	r6, [sp, #28]
 800bcfe:	9d04      	ldr	r5, [sp, #16]
 800bd00:	9a04      	ldr	r2, [sp, #16]
 800bd02:	441a      	add	r2, r3
 800bd04:	9204      	str	r2, [sp, #16]
 800bd06:	9a05      	ldr	r2, [sp, #20]
 800bd08:	2101      	movs	r1, #1
 800bd0a:	441a      	add	r2, r3
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	9205      	str	r2, [sp, #20]
 800bd10:	f000 fb58 	bl	800c3c4 <__i2b>
 800bd14:	4607      	mov	r7, r0
 800bd16:	2d00      	cmp	r5, #0
 800bd18:	dd0c      	ble.n	800bd34 <_dtoa_r+0x754>
 800bd1a:	9b05      	ldr	r3, [sp, #20]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	dd09      	ble.n	800bd34 <_dtoa_r+0x754>
 800bd20:	42ab      	cmp	r3, r5
 800bd22:	9a04      	ldr	r2, [sp, #16]
 800bd24:	bfa8      	it	ge
 800bd26:	462b      	movge	r3, r5
 800bd28:	1ad2      	subs	r2, r2, r3
 800bd2a:	9204      	str	r2, [sp, #16]
 800bd2c:	9a05      	ldr	r2, [sp, #20]
 800bd2e:	1aed      	subs	r5, r5, r3
 800bd30:	1ad3      	subs	r3, r2, r3
 800bd32:	9305      	str	r3, [sp, #20]
 800bd34:	9b07      	ldr	r3, [sp, #28]
 800bd36:	b31b      	cbz	r3, 800bd80 <_dtoa_r+0x7a0>
 800bd38:	9b08      	ldr	r3, [sp, #32]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f000 80af 	beq.w	800be9e <_dtoa_r+0x8be>
 800bd40:	2e00      	cmp	r6, #0
 800bd42:	dd13      	ble.n	800bd6c <_dtoa_r+0x78c>
 800bd44:	4639      	mov	r1, r7
 800bd46:	4632      	mov	r2, r6
 800bd48:	4620      	mov	r0, r4
 800bd4a:	f000 fbfb 	bl	800c544 <__pow5mult>
 800bd4e:	ee18 2a10 	vmov	r2, s16
 800bd52:	4601      	mov	r1, r0
 800bd54:	4607      	mov	r7, r0
 800bd56:	4620      	mov	r0, r4
 800bd58:	f000 fb4a 	bl	800c3f0 <__multiply>
 800bd5c:	ee18 1a10 	vmov	r1, s16
 800bd60:	4680      	mov	r8, r0
 800bd62:	4620      	mov	r0, r4
 800bd64:	f000 fa76 	bl	800c254 <_Bfree>
 800bd68:	ee08 8a10 	vmov	s16, r8
 800bd6c:	9b07      	ldr	r3, [sp, #28]
 800bd6e:	1b9a      	subs	r2, r3, r6
 800bd70:	d006      	beq.n	800bd80 <_dtoa_r+0x7a0>
 800bd72:	ee18 1a10 	vmov	r1, s16
 800bd76:	4620      	mov	r0, r4
 800bd78:	f000 fbe4 	bl	800c544 <__pow5mult>
 800bd7c:	ee08 0a10 	vmov	s16, r0
 800bd80:	2101      	movs	r1, #1
 800bd82:	4620      	mov	r0, r4
 800bd84:	f000 fb1e 	bl	800c3c4 <__i2b>
 800bd88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	4606      	mov	r6, r0
 800bd8e:	f340 8088 	ble.w	800bea2 <_dtoa_r+0x8c2>
 800bd92:	461a      	mov	r2, r3
 800bd94:	4601      	mov	r1, r0
 800bd96:	4620      	mov	r0, r4
 800bd98:	f000 fbd4 	bl	800c544 <__pow5mult>
 800bd9c:	9b06      	ldr	r3, [sp, #24]
 800bd9e:	2b01      	cmp	r3, #1
 800bda0:	4606      	mov	r6, r0
 800bda2:	f340 8081 	ble.w	800bea8 <_dtoa_r+0x8c8>
 800bda6:	f04f 0800 	mov.w	r8, #0
 800bdaa:	6933      	ldr	r3, [r6, #16]
 800bdac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bdb0:	6918      	ldr	r0, [r3, #16]
 800bdb2:	f000 fab7 	bl	800c324 <__hi0bits>
 800bdb6:	f1c0 0020 	rsb	r0, r0, #32
 800bdba:	9b05      	ldr	r3, [sp, #20]
 800bdbc:	4418      	add	r0, r3
 800bdbe:	f010 001f 	ands.w	r0, r0, #31
 800bdc2:	f000 8092 	beq.w	800beea <_dtoa_r+0x90a>
 800bdc6:	f1c0 0320 	rsb	r3, r0, #32
 800bdca:	2b04      	cmp	r3, #4
 800bdcc:	f340 808a 	ble.w	800bee4 <_dtoa_r+0x904>
 800bdd0:	f1c0 001c 	rsb	r0, r0, #28
 800bdd4:	9b04      	ldr	r3, [sp, #16]
 800bdd6:	4403      	add	r3, r0
 800bdd8:	9304      	str	r3, [sp, #16]
 800bdda:	9b05      	ldr	r3, [sp, #20]
 800bddc:	4403      	add	r3, r0
 800bdde:	4405      	add	r5, r0
 800bde0:	9305      	str	r3, [sp, #20]
 800bde2:	9b04      	ldr	r3, [sp, #16]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	dd07      	ble.n	800bdf8 <_dtoa_r+0x818>
 800bde8:	ee18 1a10 	vmov	r1, s16
 800bdec:	461a      	mov	r2, r3
 800bdee:	4620      	mov	r0, r4
 800bdf0:	f000 fc02 	bl	800c5f8 <__lshift>
 800bdf4:	ee08 0a10 	vmov	s16, r0
 800bdf8:	9b05      	ldr	r3, [sp, #20]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	dd05      	ble.n	800be0a <_dtoa_r+0x82a>
 800bdfe:	4631      	mov	r1, r6
 800be00:	461a      	mov	r2, r3
 800be02:	4620      	mov	r0, r4
 800be04:	f000 fbf8 	bl	800c5f8 <__lshift>
 800be08:	4606      	mov	r6, r0
 800be0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d06e      	beq.n	800beee <_dtoa_r+0x90e>
 800be10:	ee18 0a10 	vmov	r0, s16
 800be14:	4631      	mov	r1, r6
 800be16:	f000 fc5f 	bl	800c6d8 <__mcmp>
 800be1a:	2800      	cmp	r0, #0
 800be1c:	da67      	bge.n	800beee <_dtoa_r+0x90e>
 800be1e:	9b00      	ldr	r3, [sp, #0]
 800be20:	3b01      	subs	r3, #1
 800be22:	ee18 1a10 	vmov	r1, s16
 800be26:	9300      	str	r3, [sp, #0]
 800be28:	220a      	movs	r2, #10
 800be2a:	2300      	movs	r3, #0
 800be2c:	4620      	mov	r0, r4
 800be2e:	f000 fa33 	bl	800c298 <__multadd>
 800be32:	9b08      	ldr	r3, [sp, #32]
 800be34:	ee08 0a10 	vmov	s16, r0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	f000 81b1 	beq.w	800c1a0 <_dtoa_r+0xbc0>
 800be3e:	2300      	movs	r3, #0
 800be40:	4639      	mov	r1, r7
 800be42:	220a      	movs	r2, #10
 800be44:	4620      	mov	r0, r4
 800be46:	f000 fa27 	bl	800c298 <__multadd>
 800be4a:	9b02      	ldr	r3, [sp, #8]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	4607      	mov	r7, r0
 800be50:	f300 808e 	bgt.w	800bf70 <_dtoa_r+0x990>
 800be54:	9b06      	ldr	r3, [sp, #24]
 800be56:	2b02      	cmp	r3, #2
 800be58:	dc51      	bgt.n	800befe <_dtoa_r+0x91e>
 800be5a:	e089      	b.n	800bf70 <_dtoa_r+0x990>
 800be5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800be62:	e74b      	b.n	800bcfc <_dtoa_r+0x71c>
 800be64:	9b03      	ldr	r3, [sp, #12]
 800be66:	1e5e      	subs	r6, r3, #1
 800be68:	9b07      	ldr	r3, [sp, #28]
 800be6a:	42b3      	cmp	r3, r6
 800be6c:	bfbf      	itttt	lt
 800be6e:	9b07      	ldrlt	r3, [sp, #28]
 800be70:	9607      	strlt	r6, [sp, #28]
 800be72:	1af2      	sublt	r2, r6, r3
 800be74:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800be76:	bfb6      	itet	lt
 800be78:	189b      	addlt	r3, r3, r2
 800be7a:	1b9e      	subge	r6, r3, r6
 800be7c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800be7e:	9b03      	ldr	r3, [sp, #12]
 800be80:	bfb8      	it	lt
 800be82:	2600      	movlt	r6, #0
 800be84:	2b00      	cmp	r3, #0
 800be86:	bfb7      	itett	lt
 800be88:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800be8c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800be90:	1a9d      	sublt	r5, r3, r2
 800be92:	2300      	movlt	r3, #0
 800be94:	e734      	b.n	800bd00 <_dtoa_r+0x720>
 800be96:	9e07      	ldr	r6, [sp, #28]
 800be98:	9d04      	ldr	r5, [sp, #16]
 800be9a:	9f08      	ldr	r7, [sp, #32]
 800be9c:	e73b      	b.n	800bd16 <_dtoa_r+0x736>
 800be9e:	9a07      	ldr	r2, [sp, #28]
 800bea0:	e767      	b.n	800bd72 <_dtoa_r+0x792>
 800bea2:	9b06      	ldr	r3, [sp, #24]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	dc18      	bgt.n	800beda <_dtoa_r+0x8fa>
 800bea8:	f1ba 0f00 	cmp.w	sl, #0
 800beac:	d115      	bne.n	800beda <_dtoa_r+0x8fa>
 800beae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800beb2:	b993      	cbnz	r3, 800beda <_dtoa_r+0x8fa>
 800beb4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800beb8:	0d1b      	lsrs	r3, r3, #20
 800beba:	051b      	lsls	r3, r3, #20
 800bebc:	b183      	cbz	r3, 800bee0 <_dtoa_r+0x900>
 800bebe:	9b04      	ldr	r3, [sp, #16]
 800bec0:	3301      	adds	r3, #1
 800bec2:	9304      	str	r3, [sp, #16]
 800bec4:	9b05      	ldr	r3, [sp, #20]
 800bec6:	3301      	adds	r3, #1
 800bec8:	9305      	str	r3, [sp, #20]
 800beca:	f04f 0801 	mov.w	r8, #1
 800bece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	f47f af6a 	bne.w	800bdaa <_dtoa_r+0x7ca>
 800bed6:	2001      	movs	r0, #1
 800bed8:	e76f      	b.n	800bdba <_dtoa_r+0x7da>
 800beda:	f04f 0800 	mov.w	r8, #0
 800bede:	e7f6      	b.n	800bece <_dtoa_r+0x8ee>
 800bee0:	4698      	mov	r8, r3
 800bee2:	e7f4      	b.n	800bece <_dtoa_r+0x8ee>
 800bee4:	f43f af7d 	beq.w	800bde2 <_dtoa_r+0x802>
 800bee8:	4618      	mov	r0, r3
 800beea:	301c      	adds	r0, #28
 800beec:	e772      	b.n	800bdd4 <_dtoa_r+0x7f4>
 800beee:	9b03      	ldr	r3, [sp, #12]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	dc37      	bgt.n	800bf64 <_dtoa_r+0x984>
 800bef4:	9b06      	ldr	r3, [sp, #24]
 800bef6:	2b02      	cmp	r3, #2
 800bef8:	dd34      	ble.n	800bf64 <_dtoa_r+0x984>
 800befa:	9b03      	ldr	r3, [sp, #12]
 800befc:	9302      	str	r3, [sp, #8]
 800befe:	9b02      	ldr	r3, [sp, #8]
 800bf00:	b96b      	cbnz	r3, 800bf1e <_dtoa_r+0x93e>
 800bf02:	4631      	mov	r1, r6
 800bf04:	2205      	movs	r2, #5
 800bf06:	4620      	mov	r0, r4
 800bf08:	f000 f9c6 	bl	800c298 <__multadd>
 800bf0c:	4601      	mov	r1, r0
 800bf0e:	4606      	mov	r6, r0
 800bf10:	ee18 0a10 	vmov	r0, s16
 800bf14:	f000 fbe0 	bl	800c6d8 <__mcmp>
 800bf18:	2800      	cmp	r0, #0
 800bf1a:	f73f adbb 	bgt.w	800ba94 <_dtoa_r+0x4b4>
 800bf1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf20:	9d01      	ldr	r5, [sp, #4]
 800bf22:	43db      	mvns	r3, r3
 800bf24:	9300      	str	r3, [sp, #0]
 800bf26:	f04f 0800 	mov.w	r8, #0
 800bf2a:	4631      	mov	r1, r6
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f000 f991 	bl	800c254 <_Bfree>
 800bf32:	2f00      	cmp	r7, #0
 800bf34:	f43f aea4 	beq.w	800bc80 <_dtoa_r+0x6a0>
 800bf38:	f1b8 0f00 	cmp.w	r8, #0
 800bf3c:	d005      	beq.n	800bf4a <_dtoa_r+0x96a>
 800bf3e:	45b8      	cmp	r8, r7
 800bf40:	d003      	beq.n	800bf4a <_dtoa_r+0x96a>
 800bf42:	4641      	mov	r1, r8
 800bf44:	4620      	mov	r0, r4
 800bf46:	f000 f985 	bl	800c254 <_Bfree>
 800bf4a:	4639      	mov	r1, r7
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	f000 f981 	bl	800c254 <_Bfree>
 800bf52:	e695      	b.n	800bc80 <_dtoa_r+0x6a0>
 800bf54:	2600      	movs	r6, #0
 800bf56:	4637      	mov	r7, r6
 800bf58:	e7e1      	b.n	800bf1e <_dtoa_r+0x93e>
 800bf5a:	9700      	str	r7, [sp, #0]
 800bf5c:	4637      	mov	r7, r6
 800bf5e:	e599      	b.n	800ba94 <_dtoa_r+0x4b4>
 800bf60:	40240000 	.word	0x40240000
 800bf64:	9b08      	ldr	r3, [sp, #32]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	f000 80ca 	beq.w	800c100 <_dtoa_r+0xb20>
 800bf6c:	9b03      	ldr	r3, [sp, #12]
 800bf6e:	9302      	str	r3, [sp, #8]
 800bf70:	2d00      	cmp	r5, #0
 800bf72:	dd05      	ble.n	800bf80 <_dtoa_r+0x9a0>
 800bf74:	4639      	mov	r1, r7
 800bf76:	462a      	mov	r2, r5
 800bf78:	4620      	mov	r0, r4
 800bf7a:	f000 fb3d 	bl	800c5f8 <__lshift>
 800bf7e:	4607      	mov	r7, r0
 800bf80:	f1b8 0f00 	cmp.w	r8, #0
 800bf84:	d05b      	beq.n	800c03e <_dtoa_r+0xa5e>
 800bf86:	6879      	ldr	r1, [r7, #4]
 800bf88:	4620      	mov	r0, r4
 800bf8a:	f000 f923 	bl	800c1d4 <_Balloc>
 800bf8e:	4605      	mov	r5, r0
 800bf90:	b928      	cbnz	r0, 800bf9e <_dtoa_r+0x9be>
 800bf92:	4b87      	ldr	r3, [pc, #540]	; (800c1b0 <_dtoa_r+0xbd0>)
 800bf94:	4602      	mov	r2, r0
 800bf96:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bf9a:	f7ff bb3b 	b.w	800b614 <_dtoa_r+0x34>
 800bf9e:	693a      	ldr	r2, [r7, #16]
 800bfa0:	3202      	adds	r2, #2
 800bfa2:	0092      	lsls	r2, r2, #2
 800bfa4:	f107 010c 	add.w	r1, r7, #12
 800bfa8:	300c      	adds	r0, #12
 800bfaa:	f7fe fe0d 	bl	800abc8 <memcpy>
 800bfae:	2201      	movs	r2, #1
 800bfb0:	4629      	mov	r1, r5
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	f000 fb20 	bl	800c5f8 <__lshift>
 800bfb8:	9b01      	ldr	r3, [sp, #4]
 800bfba:	f103 0901 	add.w	r9, r3, #1
 800bfbe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bfc2:	4413      	add	r3, r2
 800bfc4:	9305      	str	r3, [sp, #20]
 800bfc6:	f00a 0301 	and.w	r3, sl, #1
 800bfca:	46b8      	mov	r8, r7
 800bfcc:	9304      	str	r3, [sp, #16]
 800bfce:	4607      	mov	r7, r0
 800bfd0:	4631      	mov	r1, r6
 800bfd2:	ee18 0a10 	vmov	r0, s16
 800bfd6:	f7ff fa77 	bl	800b4c8 <quorem>
 800bfda:	4641      	mov	r1, r8
 800bfdc:	9002      	str	r0, [sp, #8]
 800bfde:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bfe2:	ee18 0a10 	vmov	r0, s16
 800bfe6:	f000 fb77 	bl	800c6d8 <__mcmp>
 800bfea:	463a      	mov	r2, r7
 800bfec:	9003      	str	r0, [sp, #12]
 800bfee:	4631      	mov	r1, r6
 800bff0:	4620      	mov	r0, r4
 800bff2:	f000 fb8d 	bl	800c710 <__mdiff>
 800bff6:	68c2      	ldr	r2, [r0, #12]
 800bff8:	f109 3bff 	add.w	fp, r9, #4294967295
 800bffc:	4605      	mov	r5, r0
 800bffe:	bb02      	cbnz	r2, 800c042 <_dtoa_r+0xa62>
 800c000:	4601      	mov	r1, r0
 800c002:	ee18 0a10 	vmov	r0, s16
 800c006:	f000 fb67 	bl	800c6d8 <__mcmp>
 800c00a:	4602      	mov	r2, r0
 800c00c:	4629      	mov	r1, r5
 800c00e:	4620      	mov	r0, r4
 800c010:	9207      	str	r2, [sp, #28]
 800c012:	f000 f91f 	bl	800c254 <_Bfree>
 800c016:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c01a:	ea43 0102 	orr.w	r1, r3, r2
 800c01e:	9b04      	ldr	r3, [sp, #16]
 800c020:	430b      	orrs	r3, r1
 800c022:	464d      	mov	r5, r9
 800c024:	d10f      	bne.n	800c046 <_dtoa_r+0xa66>
 800c026:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c02a:	d02a      	beq.n	800c082 <_dtoa_r+0xaa2>
 800c02c:	9b03      	ldr	r3, [sp, #12]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	dd02      	ble.n	800c038 <_dtoa_r+0xa58>
 800c032:	9b02      	ldr	r3, [sp, #8]
 800c034:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c038:	f88b a000 	strb.w	sl, [fp]
 800c03c:	e775      	b.n	800bf2a <_dtoa_r+0x94a>
 800c03e:	4638      	mov	r0, r7
 800c040:	e7ba      	b.n	800bfb8 <_dtoa_r+0x9d8>
 800c042:	2201      	movs	r2, #1
 800c044:	e7e2      	b.n	800c00c <_dtoa_r+0xa2c>
 800c046:	9b03      	ldr	r3, [sp, #12]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	db04      	blt.n	800c056 <_dtoa_r+0xa76>
 800c04c:	9906      	ldr	r1, [sp, #24]
 800c04e:	430b      	orrs	r3, r1
 800c050:	9904      	ldr	r1, [sp, #16]
 800c052:	430b      	orrs	r3, r1
 800c054:	d122      	bne.n	800c09c <_dtoa_r+0xabc>
 800c056:	2a00      	cmp	r2, #0
 800c058:	ddee      	ble.n	800c038 <_dtoa_r+0xa58>
 800c05a:	ee18 1a10 	vmov	r1, s16
 800c05e:	2201      	movs	r2, #1
 800c060:	4620      	mov	r0, r4
 800c062:	f000 fac9 	bl	800c5f8 <__lshift>
 800c066:	4631      	mov	r1, r6
 800c068:	ee08 0a10 	vmov	s16, r0
 800c06c:	f000 fb34 	bl	800c6d8 <__mcmp>
 800c070:	2800      	cmp	r0, #0
 800c072:	dc03      	bgt.n	800c07c <_dtoa_r+0xa9c>
 800c074:	d1e0      	bne.n	800c038 <_dtoa_r+0xa58>
 800c076:	f01a 0f01 	tst.w	sl, #1
 800c07a:	d0dd      	beq.n	800c038 <_dtoa_r+0xa58>
 800c07c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c080:	d1d7      	bne.n	800c032 <_dtoa_r+0xa52>
 800c082:	2339      	movs	r3, #57	; 0x39
 800c084:	f88b 3000 	strb.w	r3, [fp]
 800c088:	462b      	mov	r3, r5
 800c08a:	461d      	mov	r5, r3
 800c08c:	3b01      	subs	r3, #1
 800c08e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c092:	2a39      	cmp	r2, #57	; 0x39
 800c094:	d071      	beq.n	800c17a <_dtoa_r+0xb9a>
 800c096:	3201      	adds	r2, #1
 800c098:	701a      	strb	r2, [r3, #0]
 800c09a:	e746      	b.n	800bf2a <_dtoa_r+0x94a>
 800c09c:	2a00      	cmp	r2, #0
 800c09e:	dd07      	ble.n	800c0b0 <_dtoa_r+0xad0>
 800c0a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c0a4:	d0ed      	beq.n	800c082 <_dtoa_r+0xaa2>
 800c0a6:	f10a 0301 	add.w	r3, sl, #1
 800c0aa:	f88b 3000 	strb.w	r3, [fp]
 800c0ae:	e73c      	b.n	800bf2a <_dtoa_r+0x94a>
 800c0b0:	9b05      	ldr	r3, [sp, #20]
 800c0b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c0b6:	4599      	cmp	r9, r3
 800c0b8:	d047      	beq.n	800c14a <_dtoa_r+0xb6a>
 800c0ba:	ee18 1a10 	vmov	r1, s16
 800c0be:	2300      	movs	r3, #0
 800c0c0:	220a      	movs	r2, #10
 800c0c2:	4620      	mov	r0, r4
 800c0c4:	f000 f8e8 	bl	800c298 <__multadd>
 800c0c8:	45b8      	cmp	r8, r7
 800c0ca:	ee08 0a10 	vmov	s16, r0
 800c0ce:	f04f 0300 	mov.w	r3, #0
 800c0d2:	f04f 020a 	mov.w	r2, #10
 800c0d6:	4641      	mov	r1, r8
 800c0d8:	4620      	mov	r0, r4
 800c0da:	d106      	bne.n	800c0ea <_dtoa_r+0xb0a>
 800c0dc:	f000 f8dc 	bl	800c298 <__multadd>
 800c0e0:	4680      	mov	r8, r0
 800c0e2:	4607      	mov	r7, r0
 800c0e4:	f109 0901 	add.w	r9, r9, #1
 800c0e8:	e772      	b.n	800bfd0 <_dtoa_r+0x9f0>
 800c0ea:	f000 f8d5 	bl	800c298 <__multadd>
 800c0ee:	4639      	mov	r1, r7
 800c0f0:	4680      	mov	r8, r0
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	220a      	movs	r2, #10
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	f000 f8ce 	bl	800c298 <__multadd>
 800c0fc:	4607      	mov	r7, r0
 800c0fe:	e7f1      	b.n	800c0e4 <_dtoa_r+0xb04>
 800c100:	9b03      	ldr	r3, [sp, #12]
 800c102:	9302      	str	r3, [sp, #8]
 800c104:	9d01      	ldr	r5, [sp, #4]
 800c106:	ee18 0a10 	vmov	r0, s16
 800c10a:	4631      	mov	r1, r6
 800c10c:	f7ff f9dc 	bl	800b4c8 <quorem>
 800c110:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c114:	9b01      	ldr	r3, [sp, #4]
 800c116:	f805 ab01 	strb.w	sl, [r5], #1
 800c11a:	1aea      	subs	r2, r5, r3
 800c11c:	9b02      	ldr	r3, [sp, #8]
 800c11e:	4293      	cmp	r3, r2
 800c120:	dd09      	ble.n	800c136 <_dtoa_r+0xb56>
 800c122:	ee18 1a10 	vmov	r1, s16
 800c126:	2300      	movs	r3, #0
 800c128:	220a      	movs	r2, #10
 800c12a:	4620      	mov	r0, r4
 800c12c:	f000 f8b4 	bl	800c298 <__multadd>
 800c130:	ee08 0a10 	vmov	s16, r0
 800c134:	e7e7      	b.n	800c106 <_dtoa_r+0xb26>
 800c136:	9b02      	ldr	r3, [sp, #8]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	bfc8      	it	gt
 800c13c:	461d      	movgt	r5, r3
 800c13e:	9b01      	ldr	r3, [sp, #4]
 800c140:	bfd8      	it	le
 800c142:	2501      	movle	r5, #1
 800c144:	441d      	add	r5, r3
 800c146:	f04f 0800 	mov.w	r8, #0
 800c14a:	ee18 1a10 	vmov	r1, s16
 800c14e:	2201      	movs	r2, #1
 800c150:	4620      	mov	r0, r4
 800c152:	f000 fa51 	bl	800c5f8 <__lshift>
 800c156:	4631      	mov	r1, r6
 800c158:	ee08 0a10 	vmov	s16, r0
 800c15c:	f000 fabc 	bl	800c6d8 <__mcmp>
 800c160:	2800      	cmp	r0, #0
 800c162:	dc91      	bgt.n	800c088 <_dtoa_r+0xaa8>
 800c164:	d102      	bne.n	800c16c <_dtoa_r+0xb8c>
 800c166:	f01a 0f01 	tst.w	sl, #1
 800c16a:	d18d      	bne.n	800c088 <_dtoa_r+0xaa8>
 800c16c:	462b      	mov	r3, r5
 800c16e:	461d      	mov	r5, r3
 800c170:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c174:	2a30      	cmp	r2, #48	; 0x30
 800c176:	d0fa      	beq.n	800c16e <_dtoa_r+0xb8e>
 800c178:	e6d7      	b.n	800bf2a <_dtoa_r+0x94a>
 800c17a:	9a01      	ldr	r2, [sp, #4]
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d184      	bne.n	800c08a <_dtoa_r+0xaaa>
 800c180:	9b00      	ldr	r3, [sp, #0]
 800c182:	3301      	adds	r3, #1
 800c184:	9300      	str	r3, [sp, #0]
 800c186:	2331      	movs	r3, #49	; 0x31
 800c188:	7013      	strb	r3, [r2, #0]
 800c18a:	e6ce      	b.n	800bf2a <_dtoa_r+0x94a>
 800c18c:	4b09      	ldr	r3, [pc, #36]	; (800c1b4 <_dtoa_r+0xbd4>)
 800c18e:	f7ff ba95 	b.w	800b6bc <_dtoa_r+0xdc>
 800c192:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c194:	2b00      	cmp	r3, #0
 800c196:	f47f aa6e 	bne.w	800b676 <_dtoa_r+0x96>
 800c19a:	4b07      	ldr	r3, [pc, #28]	; (800c1b8 <_dtoa_r+0xbd8>)
 800c19c:	f7ff ba8e 	b.w	800b6bc <_dtoa_r+0xdc>
 800c1a0:	9b02      	ldr	r3, [sp, #8]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	dcae      	bgt.n	800c104 <_dtoa_r+0xb24>
 800c1a6:	9b06      	ldr	r3, [sp, #24]
 800c1a8:	2b02      	cmp	r3, #2
 800c1aa:	f73f aea8 	bgt.w	800befe <_dtoa_r+0x91e>
 800c1ae:	e7a9      	b.n	800c104 <_dtoa_r+0xb24>
 800c1b0:	0800d8c7 	.word	0x0800d8c7
 800c1b4:	0800d824 	.word	0x0800d824
 800c1b8:	0800d848 	.word	0x0800d848

0800c1bc <_localeconv_r>:
 800c1bc:	4800      	ldr	r0, [pc, #0]	; (800c1c0 <_localeconv_r+0x4>)
 800c1be:	4770      	bx	lr
 800c1c0:	2000027c 	.word	0x2000027c

0800c1c4 <malloc>:
 800c1c4:	4b02      	ldr	r3, [pc, #8]	; (800c1d0 <malloc+0xc>)
 800c1c6:	4601      	mov	r1, r0
 800c1c8:	6818      	ldr	r0, [r3, #0]
 800c1ca:	f000 bc09 	b.w	800c9e0 <_malloc_r>
 800c1ce:	bf00      	nop
 800c1d0:	20000128 	.word	0x20000128

0800c1d4 <_Balloc>:
 800c1d4:	b570      	push	{r4, r5, r6, lr}
 800c1d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c1d8:	4604      	mov	r4, r0
 800c1da:	460d      	mov	r5, r1
 800c1dc:	b976      	cbnz	r6, 800c1fc <_Balloc+0x28>
 800c1de:	2010      	movs	r0, #16
 800c1e0:	f7ff fff0 	bl	800c1c4 <malloc>
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	6260      	str	r0, [r4, #36]	; 0x24
 800c1e8:	b920      	cbnz	r0, 800c1f4 <_Balloc+0x20>
 800c1ea:	4b18      	ldr	r3, [pc, #96]	; (800c24c <_Balloc+0x78>)
 800c1ec:	4818      	ldr	r0, [pc, #96]	; (800c250 <_Balloc+0x7c>)
 800c1ee:	2166      	movs	r1, #102	; 0x66
 800c1f0:	f000 fc7a 	bl	800cae8 <__assert_func>
 800c1f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1f8:	6006      	str	r6, [r0, #0]
 800c1fa:	60c6      	str	r6, [r0, #12]
 800c1fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c1fe:	68f3      	ldr	r3, [r6, #12]
 800c200:	b183      	cbz	r3, 800c224 <_Balloc+0x50>
 800c202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c204:	68db      	ldr	r3, [r3, #12]
 800c206:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c20a:	b9b8      	cbnz	r0, 800c23c <_Balloc+0x68>
 800c20c:	2101      	movs	r1, #1
 800c20e:	fa01 f605 	lsl.w	r6, r1, r5
 800c212:	1d72      	adds	r2, r6, #5
 800c214:	0092      	lsls	r2, r2, #2
 800c216:	4620      	mov	r0, r4
 800c218:	f000 fb60 	bl	800c8dc <_calloc_r>
 800c21c:	b160      	cbz	r0, 800c238 <_Balloc+0x64>
 800c21e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c222:	e00e      	b.n	800c242 <_Balloc+0x6e>
 800c224:	2221      	movs	r2, #33	; 0x21
 800c226:	2104      	movs	r1, #4
 800c228:	4620      	mov	r0, r4
 800c22a:	f000 fb57 	bl	800c8dc <_calloc_r>
 800c22e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c230:	60f0      	str	r0, [r6, #12]
 800c232:	68db      	ldr	r3, [r3, #12]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d1e4      	bne.n	800c202 <_Balloc+0x2e>
 800c238:	2000      	movs	r0, #0
 800c23a:	bd70      	pop	{r4, r5, r6, pc}
 800c23c:	6802      	ldr	r2, [r0, #0]
 800c23e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c242:	2300      	movs	r3, #0
 800c244:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c248:	e7f7      	b.n	800c23a <_Balloc+0x66>
 800c24a:	bf00      	nop
 800c24c:	0800d855 	.word	0x0800d855
 800c250:	0800d8d8 	.word	0x0800d8d8

0800c254 <_Bfree>:
 800c254:	b570      	push	{r4, r5, r6, lr}
 800c256:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c258:	4605      	mov	r5, r0
 800c25a:	460c      	mov	r4, r1
 800c25c:	b976      	cbnz	r6, 800c27c <_Bfree+0x28>
 800c25e:	2010      	movs	r0, #16
 800c260:	f7ff ffb0 	bl	800c1c4 <malloc>
 800c264:	4602      	mov	r2, r0
 800c266:	6268      	str	r0, [r5, #36]	; 0x24
 800c268:	b920      	cbnz	r0, 800c274 <_Bfree+0x20>
 800c26a:	4b09      	ldr	r3, [pc, #36]	; (800c290 <_Bfree+0x3c>)
 800c26c:	4809      	ldr	r0, [pc, #36]	; (800c294 <_Bfree+0x40>)
 800c26e:	218a      	movs	r1, #138	; 0x8a
 800c270:	f000 fc3a 	bl	800cae8 <__assert_func>
 800c274:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c278:	6006      	str	r6, [r0, #0]
 800c27a:	60c6      	str	r6, [r0, #12]
 800c27c:	b13c      	cbz	r4, 800c28e <_Bfree+0x3a>
 800c27e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c280:	6862      	ldr	r2, [r4, #4]
 800c282:	68db      	ldr	r3, [r3, #12]
 800c284:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c288:	6021      	str	r1, [r4, #0]
 800c28a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c28e:	bd70      	pop	{r4, r5, r6, pc}
 800c290:	0800d855 	.word	0x0800d855
 800c294:	0800d8d8 	.word	0x0800d8d8

0800c298 <__multadd>:
 800c298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c29c:	690d      	ldr	r5, [r1, #16]
 800c29e:	4607      	mov	r7, r0
 800c2a0:	460c      	mov	r4, r1
 800c2a2:	461e      	mov	r6, r3
 800c2a4:	f101 0c14 	add.w	ip, r1, #20
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	f8dc 3000 	ldr.w	r3, [ip]
 800c2ae:	b299      	uxth	r1, r3
 800c2b0:	fb02 6101 	mla	r1, r2, r1, r6
 800c2b4:	0c1e      	lsrs	r6, r3, #16
 800c2b6:	0c0b      	lsrs	r3, r1, #16
 800c2b8:	fb02 3306 	mla	r3, r2, r6, r3
 800c2bc:	b289      	uxth	r1, r1
 800c2be:	3001      	adds	r0, #1
 800c2c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c2c4:	4285      	cmp	r5, r0
 800c2c6:	f84c 1b04 	str.w	r1, [ip], #4
 800c2ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c2ce:	dcec      	bgt.n	800c2aa <__multadd+0x12>
 800c2d0:	b30e      	cbz	r6, 800c316 <__multadd+0x7e>
 800c2d2:	68a3      	ldr	r3, [r4, #8]
 800c2d4:	42ab      	cmp	r3, r5
 800c2d6:	dc19      	bgt.n	800c30c <__multadd+0x74>
 800c2d8:	6861      	ldr	r1, [r4, #4]
 800c2da:	4638      	mov	r0, r7
 800c2dc:	3101      	adds	r1, #1
 800c2de:	f7ff ff79 	bl	800c1d4 <_Balloc>
 800c2e2:	4680      	mov	r8, r0
 800c2e4:	b928      	cbnz	r0, 800c2f2 <__multadd+0x5a>
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	4b0c      	ldr	r3, [pc, #48]	; (800c31c <__multadd+0x84>)
 800c2ea:	480d      	ldr	r0, [pc, #52]	; (800c320 <__multadd+0x88>)
 800c2ec:	21b5      	movs	r1, #181	; 0xb5
 800c2ee:	f000 fbfb 	bl	800cae8 <__assert_func>
 800c2f2:	6922      	ldr	r2, [r4, #16]
 800c2f4:	3202      	adds	r2, #2
 800c2f6:	f104 010c 	add.w	r1, r4, #12
 800c2fa:	0092      	lsls	r2, r2, #2
 800c2fc:	300c      	adds	r0, #12
 800c2fe:	f7fe fc63 	bl	800abc8 <memcpy>
 800c302:	4621      	mov	r1, r4
 800c304:	4638      	mov	r0, r7
 800c306:	f7ff ffa5 	bl	800c254 <_Bfree>
 800c30a:	4644      	mov	r4, r8
 800c30c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c310:	3501      	adds	r5, #1
 800c312:	615e      	str	r6, [r3, #20]
 800c314:	6125      	str	r5, [r4, #16]
 800c316:	4620      	mov	r0, r4
 800c318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c31c:	0800d8c7 	.word	0x0800d8c7
 800c320:	0800d8d8 	.word	0x0800d8d8

0800c324 <__hi0bits>:
 800c324:	0c03      	lsrs	r3, r0, #16
 800c326:	041b      	lsls	r3, r3, #16
 800c328:	b9d3      	cbnz	r3, 800c360 <__hi0bits+0x3c>
 800c32a:	0400      	lsls	r0, r0, #16
 800c32c:	2310      	movs	r3, #16
 800c32e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c332:	bf04      	itt	eq
 800c334:	0200      	lsleq	r0, r0, #8
 800c336:	3308      	addeq	r3, #8
 800c338:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c33c:	bf04      	itt	eq
 800c33e:	0100      	lsleq	r0, r0, #4
 800c340:	3304      	addeq	r3, #4
 800c342:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c346:	bf04      	itt	eq
 800c348:	0080      	lsleq	r0, r0, #2
 800c34a:	3302      	addeq	r3, #2
 800c34c:	2800      	cmp	r0, #0
 800c34e:	db05      	blt.n	800c35c <__hi0bits+0x38>
 800c350:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c354:	f103 0301 	add.w	r3, r3, #1
 800c358:	bf08      	it	eq
 800c35a:	2320      	moveq	r3, #32
 800c35c:	4618      	mov	r0, r3
 800c35e:	4770      	bx	lr
 800c360:	2300      	movs	r3, #0
 800c362:	e7e4      	b.n	800c32e <__hi0bits+0xa>

0800c364 <__lo0bits>:
 800c364:	6803      	ldr	r3, [r0, #0]
 800c366:	f013 0207 	ands.w	r2, r3, #7
 800c36a:	4601      	mov	r1, r0
 800c36c:	d00b      	beq.n	800c386 <__lo0bits+0x22>
 800c36e:	07da      	lsls	r2, r3, #31
 800c370:	d423      	bmi.n	800c3ba <__lo0bits+0x56>
 800c372:	0798      	lsls	r0, r3, #30
 800c374:	bf49      	itett	mi
 800c376:	085b      	lsrmi	r3, r3, #1
 800c378:	089b      	lsrpl	r3, r3, #2
 800c37a:	2001      	movmi	r0, #1
 800c37c:	600b      	strmi	r3, [r1, #0]
 800c37e:	bf5c      	itt	pl
 800c380:	600b      	strpl	r3, [r1, #0]
 800c382:	2002      	movpl	r0, #2
 800c384:	4770      	bx	lr
 800c386:	b298      	uxth	r0, r3
 800c388:	b9a8      	cbnz	r0, 800c3b6 <__lo0bits+0x52>
 800c38a:	0c1b      	lsrs	r3, r3, #16
 800c38c:	2010      	movs	r0, #16
 800c38e:	b2da      	uxtb	r2, r3
 800c390:	b90a      	cbnz	r2, 800c396 <__lo0bits+0x32>
 800c392:	3008      	adds	r0, #8
 800c394:	0a1b      	lsrs	r3, r3, #8
 800c396:	071a      	lsls	r2, r3, #28
 800c398:	bf04      	itt	eq
 800c39a:	091b      	lsreq	r3, r3, #4
 800c39c:	3004      	addeq	r0, #4
 800c39e:	079a      	lsls	r2, r3, #30
 800c3a0:	bf04      	itt	eq
 800c3a2:	089b      	lsreq	r3, r3, #2
 800c3a4:	3002      	addeq	r0, #2
 800c3a6:	07da      	lsls	r2, r3, #31
 800c3a8:	d403      	bmi.n	800c3b2 <__lo0bits+0x4e>
 800c3aa:	085b      	lsrs	r3, r3, #1
 800c3ac:	f100 0001 	add.w	r0, r0, #1
 800c3b0:	d005      	beq.n	800c3be <__lo0bits+0x5a>
 800c3b2:	600b      	str	r3, [r1, #0]
 800c3b4:	4770      	bx	lr
 800c3b6:	4610      	mov	r0, r2
 800c3b8:	e7e9      	b.n	800c38e <__lo0bits+0x2a>
 800c3ba:	2000      	movs	r0, #0
 800c3bc:	4770      	bx	lr
 800c3be:	2020      	movs	r0, #32
 800c3c0:	4770      	bx	lr
	...

0800c3c4 <__i2b>:
 800c3c4:	b510      	push	{r4, lr}
 800c3c6:	460c      	mov	r4, r1
 800c3c8:	2101      	movs	r1, #1
 800c3ca:	f7ff ff03 	bl	800c1d4 <_Balloc>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	b928      	cbnz	r0, 800c3de <__i2b+0x1a>
 800c3d2:	4b05      	ldr	r3, [pc, #20]	; (800c3e8 <__i2b+0x24>)
 800c3d4:	4805      	ldr	r0, [pc, #20]	; (800c3ec <__i2b+0x28>)
 800c3d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c3da:	f000 fb85 	bl	800cae8 <__assert_func>
 800c3de:	2301      	movs	r3, #1
 800c3e0:	6144      	str	r4, [r0, #20]
 800c3e2:	6103      	str	r3, [r0, #16]
 800c3e4:	bd10      	pop	{r4, pc}
 800c3e6:	bf00      	nop
 800c3e8:	0800d8c7 	.word	0x0800d8c7
 800c3ec:	0800d8d8 	.word	0x0800d8d8

0800c3f0 <__multiply>:
 800c3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f4:	4691      	mov	r9, r2
 800c3f6:	690a      	ldr	r2, [r1, #16]
 800c3f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	bfb8      	it	lt
 800c400:	460b      	movlt	r3, r1
 800c402:	460c      	mov	r4, r1
 800c404:	bfbc      	itt	lt
 800c406:	464c      	movlt	r4, r9
 800c408:	4699      	movlt	r9, r3
 800c40a:	6927      	ldr	r7, [r4, #16]
 800c40c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c410:	68a3      	ldr	r3, [r4, #8]
 800c412:	6861      	ldr	r1, [r4, #4]
 800c414:	eb07 060a 	add.w	r6, r7, sl
 800c418:	42b3      	cmp	r3, r6
 800c41a:	b085      	sub	sp, #20
 800c41c:	bfb8      	it	lt
 800c41e:	3101      	addlt	r1, #1
 800c420:	f7ff fed8 	bl	800c1d4 <_Balloc>
 800c424:	b930      	cbnz	r0, 800c434 <__multiply+0x44>
 800c426:	4602      	mov	r2, r0
 800c428:	4b44      	ldr	r3, [pc, #272]	; (800c53c <__multiply+0x14c>)
 800c42a:	4845      	ldr	r0, [pc, #276]	; (800c540 <__multiply+0x150>)
 800c42c:	f240 115d 	movw	r1, #349	; 0x15d
 800c430:	f000 fb5a 	bl	800cae8 <__assert_func>
 800c434:	f100 0514 	add.w	r5, r0, #20
 800c438:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c43c:	462b      	mov	r3, r5
 800c43e:	2200      	movs	r2, #0
 800c440:	4543      	cmp	r3, r8
 800c442:	d321      	bcc.n	800c488 <__multiply+0x98>
 800c444:	f104 0314 	add.w	r3, r4, #20
 800c448:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c44c:	f109 0314 	add.w	r3, r9, #20
 800c450:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c454:	9202      	str	r2, [sp, #8]
 800c456:	1b3a      	subs	r2, r7, r4
 800c458:	3a15      	subs	r2, #21
 800c45a:	f022 0203 	bic.w	r2, r2, #3
 800c45e:	3204      	adds	r2, #4
 800c460:	f104 0115 	add.w	r1, r4, #21
 800c464:	428f      	cmp	r7, r1
 800c466:	bf38      	it	cc
 800c468:	2204      	movcc	r2, #4
 800c46a:	9201      	str	r2, [sp, #4]
 800c46c:	9a02      	ldr	r2, [sp, #8]
 800c46e:	9303      	str	r3, [sp, #12]
 800c470:	429a      	cmp	r2, r3
 800c472:	d80c      	bhi.n	800c48e <__multiply+0x9e>
 800c474:	2e00      	cmp	r6, #0
 800c476:	dd03      	ble.n	800c480 <__multiply+0x90>
 800c478:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d05a      	beq.n	800c536 <__multiply+0x146>
 800c480:	6106      	str	r6, [r0, #16]
 800c482:	b005      	add	sp, #20
 800c484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c488:	f843 2b04 	str.w	r2, [r3], #4
 800c48c:	e7d8      	b.n	800c440 <__multiply+0x50>
 800c48e:	f8b3 a000 	ldrh.w	sl, [r3]
 800c492:	f1ba 0f00 	cmp.w	sl, #0
 800c496:	d024      	beq.n	800c4e2 <__multiply+0xf2>
 800c498:	f104 0e14 	add.w	lr, r4, #20
 800c49c:	46a9      	mov	r9, r5
 800c49e:	f04f 0c00 	mov.w	ip, #0
 800c4a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c4a6:	f8d9 1000 	ldr.w	r1, [r9]
 800c4aa:	fa1f fb82 	uxth.w	fp, r2
 800c4ae:	b289      	uxth	r1, r1
 800c4b0:	fb0a 110b 	mla	r1, sl, fp, r1
 800c4b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c4b8:	f8d9 2000 	ldr.w	r2, [r9]
 800c4bc:	4461      	add	r1, ip
 800c4be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c4c2:	fb0a c20b 	mla	r2, sl, fp, ip
 800c4c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c4ca:	b289      	uxth	r1, r1
 800c4cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c4d0:	4577      	cmp	r7, lr
 800c4d2:	f849 1b04 	str.w	r1, [r9], #4
 800c4d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c4da:	d8e2      	bhi.n	800c4a2 <__multiply+0xb2>
 800c4dc:	9a01      	ldr	r2, [sp, #4]
 800c4de:	f845 c002 	str.w	ip, [r5, r2]
 800c4e2:	9a03      	ldr	r2, [sp, #12]
 800c4e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c4e8:	3304      	adds	r3, #4
 800c4ea:	f1b9 0f00 	cmp.w	r9, #0
 800c4ee:	d020      	beq.n	800c532 <__multiply+0x142>
 800c4f0:	6829      	ldr	r1, [r5, #0]
 800c4f2:	f104 0c14 	add.w	ip, r4, #20
 800c4f6:	46ae      	mov	lr, r5
 800c4f8:	f04f 0a00 	mov.w	sl, #0
 800c4fc:	f8bc b000 	ldrh.w	fp, [ip]
 800c500:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c504:	fb09 220b 	mla	r2, r9, fp, r2
 800c508:	4492      	add	sl, r2
 800c50a:	b289      	uxth	r1, r1
 800c50c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c510:	f84e 1b04 	str.w	r1, [lr], #4
 800c514:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c518:	f8be 1000 	ldrh.w	r1, [lr]
 800c51c:	0c12      	lsrs	r2, r2, #16
 800c51e:	fb09 1102 	mla	r1, r9, r2, r1
 800c522:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c526:	4567      	cmp	r7, ip
 800c528:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c52c:	d8e6      	bhi.n	800c4fc <__multiply+0x10c>
 800c52e:	9a01      	ldr	r2, [sp, #4]
 800c530:	50a9      	str	r1, [r5, r2]
 800c532:	3504      	adds	r5, #4
 800c534:	e79a      	b.n	800c46c <__multiply+0x7c>
 800c536:	3e01      	subs	r6, #1
 800c538:	e79c      	b.n	800c474 <__multiply+0x84>
 800c53a:	bf00      	nop
 800c53c:	0800d8c7 	.word	0x0800d8c7
 800c540:	0800d8d8 	.word	0x0800d8d8

0800c544 <__pow5mult>:
 800c544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c548:	4615      	mov	r5, r2
 800c54a:	f012 0203 	ands.w	r2, r2, #3
 800c54e:	4606      	mov	r6, r0
 800c550:	460f      	mov	r7, r1
 800c552:	d007      	beq.n	800c564 <__pow5mult+0x20>
 800c554:	4c25      	ldr	r4, [pc, #148]	; (800c5ec <__pow5mult+0xa8>)
 800c556:	3a01      	subs	r2, #1
 800c558:	2300      	movs	r3, #0
 800c55a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c55e:	f7ff fe9b 	bl	800c298 <__multadd>
 800c562:	4607      	mov	r7, r0
 800c564:	10ad      	asrs	r5, r5, #2
 800c566:	d03d      	beq.n	800c5e4 <__pow5mult+0xa0>
 800c568:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c56a:	b97c      	cbnz	r4, 800c58c <__pow5mult+0x48>
 800c56c:	2010      	movs	r0, #16
 800c56e:	f7ff fe29 	bl	800c1c4 <malloc>
 800c572:	4602      	mov	r2, r0
 800c574:	6270      	str	r0, [r6, #36]	; 0x24
 800c576:	b928      	cbnz	r0, 800c584 <__pow5mult+0x40>
 800c578:	4b1d      	ldr	r3, [pc, #116]	; (800c5f0 <__pow5mult+0xac>)
 800c57a:	481e      	ldr	r0, [pc, #120]	; (800c5f4 <__pow5mult+0xb0>)
 800c57c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c580:	f000 fab2 	bl	800cae8 <__assert_func>
 800c584:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c588:	6004      	str	r4, [r0, #0]
 800c58a:	60c4      	str	r4, [r0, #12]
 800c58c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c590:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c594:	b94c      	cbnz	r4, 800c5aa <__pow5mult+0x66>
 800c596:	f240 2171 	movw	r1, #625	; 0x271
 800c59a:	4630      	mov	r0, r6
 800c59c:	f7ff ff12 	bl	800c3c4 <__i2b>
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c5a6:	4604      	mov	r4, r0
 800c5a8:	6003      	str	r3, [r0, #0]
 800c5aa:	f04f 0900 	mov.w	r9, #0
 800c5ae:	07eb      	lsls	r3, r5, #31
 800c5b0:	d50a      	bpl.n	800c5c8 <__pow5mult+0x84>
 800c5b2:	4639      	mov	r1, r7
 800c5b4:	4622      	mov	r2, r4
 800c5b6:	4630      	mov	r0, r6
 800c5b8:	f7ff ff1a 	bl	800c3f0 <__multiply>
 800c5bc:	4639      	mov	r1, r7
 800c5be:	4680      	mov	r8, r0
 800c5c0:	4630      	mov	r0, r6
 800c5c2:	f7ff fe47 	bl	800c254 <_Bfree>
 800c5c6:	4647      	mov	r7, r8
 800c5c8:	106d      	asrs	r5, r5, #1
 800c5ca:	d00b      	beq.n	800c5e4 <__pow5mult+0xa0>
 800c5cc:	6820      	ldr	r0, [r4, #0]
 800c5ce:	b938      	cbnz	r0, 800c5e0 <__pow5mult+0x9c>
 800c5d0:	4622      	mov	r2, r4
 800c5d2:	4621      	mov	r1, r4
 800c5d4:	4630      	mov	r0, r6
 800c5d6:	f7ff ff0b 	bl	800c3f0 <__multiply>
 800c5da:	6020      	str	r0, [r4, #0]
 800c5dc:	f8c0 9000 	str.w	r9, [r0]
 800c5e0:	4604      	mov	r4, r0
 800c5e2:	e7e4      	b.n	800c5ae <__pow5mult+0x6a>
 800c5e4:	4638      	mov	r0, r7
 800c5e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5ea:	bf00      	nop
 800c5ec:	0800da28 	.word	0x0800da28
 800c5f0:	0800d855 	.word	0x0800d855
 800c5f4:	0800d8d8 	.word	0x0800d8d8

0800c5f8 <__lshift>:
 800c5f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5fc:	460c      	mov	r4, r1
 800c5fe:	6849      	ldr	r1, [r1, #4]
 800c600:	6923      	ldr	r3, [r4, #16]
 800c602:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c606:	68a3      	ldr	r3, [r4, #8]
 800c608:	4607      	mov	r7, r0
 800c60a:	4691      	mov	r9, r2
 800c60c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c610:	f108 0601 	add.w	r6, r8, #1
 800c614:	42b3      	cmp	r3, r6
 800c616:	db0b      	blt.n	800c630 <__lshift+0x38>
 800c618:	4638      	mov	r0, r7
 800c61a:	f7ff fddb 	bl	800c1d4 <_Balloc>
 800c61e:	4605      	mov	r5, r0
 800c620:	b948      	cbnz	r0, 800c636 <__lshift+0x3e>
 800c622:	4602      	mov	r2, r0
 800c624:	4b2a      	ldr	r3, [pc, #168]	; (800c6d0 <__lshift+0xd8>)
 800c626:	482b      	ldr	r0, [pc, #172]	; (800c6d4 <__lshift+0xdc>)
 800c628:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c62c:	f000 fa5c 	bl	800cae8 <__assert_func>
 800c630:	3101      	adds	r1, #1
 800c632:	005b      	lsls	r3, r3, #1
 800c634:	e7ee      	b.n	800c614 <__lshift+0x1c>
 800c636:	2300      	movs	r3, #0
 800c638:	f100 0114 	add.w	r1, r0, #20
 800c63c:	f100 0210 	add.w	r2, r0, #16
 800c640:	4618      	mov	r0, r3
 800c642:	4553      	cmp	r3, sl
 800c644:	db37      	blt.n	800c6b6 <__lshift+0xbe>
 800c646:	6920      	ldr	r0, [r4, #16]
 800c648:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c64c:	f104 0314 	add.w	r3, r4, #20
 800c650:	f019 091f 	ands.w	r9, r9, #31
 800c654:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c658:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c65c:	d02f      	beq.n	800c6be <__lshift+0xc6>
 800c65e:	f1c9 0e20 	rsb	lr, r9, #32
 800c662:	468a      	mov	sl, r1
 800c664:	f04f 0c00 	mov.w	ip, #0
 800c668:	681a      	ldr	r2, [r3, #0]
 800c66a:	fa02 f209 	lsl.w	r2, r2, r9
 800c66e:	ea42 020c 	orr.w	r2, r2, ip
 800c672:	f84a 2b04 	str.w	r2, [sl], #4
 800c676:	f853 2b04 	ldr.w	r2, [r3], #4
 800c67a:	4298      	cmp	r0, r3
 800c67c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c680:	d8f2      	bhi.n	800c668 <__lshift+0x70>
 800c682:	1b03      	subs	r3, r0, r4
 800c684:	3b15      	subs	r3, #21
 800c686:	f023 0303 	bic.w	r3, r3, #3
 800c68a:	3304      	adds	r3, #4
 800c68c:	f104 0215 	add.w	r2, r4, #21
 800c690:	4290      	cmp	r0, r2
 800c692:	bf38      	it	cc
 800c694:	2304      	movcc	r3, #4
 800c696:	f841 c003 	str.w	ip, [r1, r3]
 800c69a:	f1bc 0f00 	cmp.w	ip, #0
 800c69e:	d001      	beq.n	800c6a4 <__lshift+0xac>
 800c6a0:	f108 0602 	add.w	r6, r8, #2
 800c6a4:	3e01      	subs	r6, #1
 800c6a6:	4638      	mov	r0, r7
 800c6a8:	612e      	str	r6, [r5, #16]
 800c6aa:	4621      	mov	r1, r4
 800c6ac:	f7ff fdd2 	bl	800c254 <_Bfree>
 800c6b0:	4628      	mov	r0, r5
 800c6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	e7c1      	b.n	800c642 <__lshift+0x4a>
 800c6be:	3904      	subs	r1, #4
 800c6c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c6c8:	4298      	cmp	r0, r3
 800c6ca:	d8f9      	bhi.n	800c6c0 <__lshift+0xc8>
 800c6cc:	e7ea      	b.n	800c6a4 <__lshift+0xac>
 800c6ce:	bf00      	nop
 800c6d0:	0800d8c7 	.word	0x0800d8c7
 800c6d4:	0800d8d8 	.word	0x0800d8d8

0800c6d8 <__mcmp>:
 800c6d8:	b530      	push	{r4, r5, lr}
 800c6da:	6902      	ldr	r2, [r0, #16]
 800c6dc:	690c      	ldr	r4, [r1, #16]
 800c6de:	1b12      	subs	r2, r2, r4
 800c6e0:	d10e      	bne.n	800c700 <__mcmp+0x28>
 800c6e2:	f100 0314 	add.w	r3, r0, #20
 800c6e6:	3114      	adds	r1, #20
 800c6e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c6ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c6f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c6f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c6f8:	42a5      	cmp	r5, r4
 800c6fa:	d003      	beq.n	800c704 <__mcmp+0x2c>
 800c6fc:	d305      	bcc.n	800c70a <__mcmp+0x32>
 800c6fe:	2201      	movs	r2, #1
 800c700:	4610      	mov	r0, r2
 800c702:	bd30      	pop	{r4, r5, pc}
 800c704:	4283      	cmp	r3, r0
 800c706:	d3f3      	bcc.n	800c6f0 <__mcmp+0x18>
 800c708:	e7fa      	b.n	800c700 <__mcmp+0x28>
 800c70a:	f04f 32ff 	mov.w	r2, #4294967295
 800c70e:	e7f7      	b.n	800c700 <__mcmp+0x28>

0800c710 <__mdiff>:
 800c710:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c714:	460c      	mov	r4, r1
 800c716:	4606      	mov	r6, r0
 800c718:	4611      	mov	r1, r2
 800c71a:	4620      	mov	r0, r4
 800c71c:	4690      	mov	r8, r2
 800c71e:	f7ff ffdb 	bl	800c6d8 <__mcmp>
 800c722:	1e05      	subs	r5, r0, #0
 800c724:	d110      	bne.n	800c748 <__mdiff+0x38>
 800c726:	4629      	mov	r1, r5
 800c728:	4630      	mov	r0, r6
 800c72a:	f7ff fd53 	bl	800c1d4 <_Balloc>
 800c72e:	b930      	cbnz	r0, 800c73e <__mdiff+0x2e>
 800c730:	4b3a      	ldr	r3, [pc, #232]	; (800c81c <__mdiff+0x10c>)
 800c732:	4602      	mov	r2, r0
 800c734:	f240 2132 	movw	r1, #562	; 0x232
 800c738:	4839      	ldr	r0, [pc, #228]	; (800c820 <__mdiff+0x110>)
 800c73a:	f000 f9d5 	bl	800cae8 <__assert_func>
 800c73e:	2301      	movs	r3, #1
 800c740:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c744:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c748:	bfa4      	itt	ge
 800c74a:	4643      	movge	r3, r8
 800c74c:	46a0      	movge	r8, r4
 800c74e:	4630      	mov	r0, r6
 800c750:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c754:	bfa6      	itte	ge
 800c756:	461c      	movge	r4, r3
 800c758:	2500      	movge	r5, #0
 800c75a:	2501      	movlt	r5, #1
 800c75c:	f7ff fd3a 	bl	800c1d4 <_Balloc>
 800c760:	b920      	cbnz	r0, 800c76c <__mdiff+0x5c>
 800c762:	4b2e      	ldr	r3, [pc, #184]	; (800c81c <__mdiff+0x10c>)
 800c764:	4602      	mov	r2, r0
 800c766:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c76a:	e7e5      	b.n	800c738 <__mdiff+0x28>
 800c76c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c770:	6926      	ldr	r6, [r4, #16]
 800c772:	60c5      	str	r5, [r0, #12]
 800c774:	f104 0914 	add.w	r9, r4, #20
 800c778:	f108 0514 	add.w	r5, r8, #20
 800c77c:	f100 0e14 	add.w	lr, r0, #20
 800c780:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c784:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c788:	f108 0210 	add.w	r2, r8, #16
 800c78c:	46f2      	mov	sl, lr
 800c78e:	2100      	movs	r1, #0
 800c790:	f859 3b04 	ldr.w	r3, [r9], #4
 800c794:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c798:	fa1f f883 	uxth.w	r8, r3
 800c79c:	fa11 f18b 	uxtah	r1, r1, fp
 800c7a0:	0c1b      	lsrs	r3, r3, #16
 800c7a2:	eba1 0808 	sub.w	r8, r1, r8
 800c7a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c7aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c7ae:	fa1f f888 	uxth.w	r8, r8
 800c7b2:	1419      	asrs	r1, r3, #16
 800c7b4:	454e      	cmp	r6, r9
 800c7b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c7ba:	f84a 3b04 	str.w	r3, [sl], #4
 800c7be:	d8e7      	bhi.n	800c790 <__mdiff+0x80>
 800c7c0:	1b33      	subs	r3, r6, r4
 800c7c2:	3b15      	subs	r3, #21
 800c7c4:	f023 0303 	bic.w	r3, r3, #3
 800c7c8:	3304      	adds	r3, #4
 800c7ca:	3415      	adds	r4, #21
 800c7cc:	42a6      	cmp	r6, r4
 800c7ce:	bf38      	it	cc
 800c7d0:	2304      	movcc	r3, #4
 800c7d2:	441d      	add	r5, r3
 800c7d4:	4473      	add	r3, lr
 800c7d6:	469e      	mov	lr, r3
 800c7d8:	462e      	mov	r6, r5
 800c7da:	4566      	cmp	r6, ip
 800c7dc:	d30e      	bcc.n	800c7fc <__mdiff+0xec>
 800c7de:	f10c 0203 	add.w	r2, ip, #3
 800c7e2:	1b52      	subs	r2, r2, r5
 800c7e4:	f022 0203 	bic.w	r2, r2, #3
 800c7e8:	3d03      	subs	r5, #3
 800c7ea:	45ac      	cmp	ip, r5
 800c7ec:	bf38      	it	cc
 800c7ee:	2200      	movcc	r2, #0
 800c7f0:	441a      	add	r2, r3
 800c7f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c7f6:	b17b      	cbz	r3, 800c818 <__mdiff+0x108>
 800c7f8:	6107      	str	r7, [r0, #16]
 800c7fa:	e7a3      	b.n	800c744 <__mdiff+0x34>
 800c7fc:	f856 8b04 	ldr.w	r8, [r6], #4
 800c800:	fa11 f288 	uxtah	r2, r1, r8
 800c804:	1414      	asrs	r4, r2, #16
 800c806:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c80a:	b292      	uxth	r2, r2
 800c80c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c810:	f84e 2b04 	str.w	r2, [lr], #4
 800c814:	1421      	asrs	r1, r4, #16
 800c816:	e7e0      	b.n	800c7da <__mdiff+0xca>
 800c818:	3f01      	subs	r7, #1
 800c81a:	e7ea      	b.n	800c7f2 <__mdiff+0xe2>
 800c81c:	0800d8c7 	.word	0x0800d8c7
 800c820:	0800d8d8 	.word	0x0800d8d8

0800c824 <__d2b>:
 800c824:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c828:	4689      	mov	r9, r1
 800c82a:	2101      	movs	r1, #1
 800c82c:	ec57 6b10 	vmov	r6, r7, d0
 800c830:	4690      	mov	r8, r2
 800c832:	f7ff fccf 	bl	800c1d4 <_Balloc>
 800c836:	4604      	mov	r4, r0
 800c838:	b930      	cbnz	r0, 800c848 <__d2b+0x24>
 800c83a:	4602      	mov	r2, r0
 800c83c:	4b25      	ldr	r3, [pc, #148]	; (800c8d4 <__d2b+0xb0>)
 800c83e:	4826      	ldr	r0, [pc, #152]	; (800c8d8 <__d2b+0xb4>)
 800c840:	f240 310a 	movw	r1, #778	; 0x30a
 800c844:	f000 f950 	bl	800cae8 <__assert_func>
 800c848:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c84c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c850:	bb35      	cbnz	r5, 800c8a0 <__d2b+0x7c>
 800c852:	2e00      	cmp	r6, #0
 800c854:	9301      	str	r3, [sp, #4]
 800c856:	d028      	beq.n	800c8aa <__d2b+0x86>
 800c858:	4668      	mov	r0, sp
 800c85a:	9600      	str	r6, [sp, #0]
 800c85c:	f7ff fd82 	bl	800c364 <__lo0bits>
 800c860:	9900      	ldr	r1, [sp, #0]
 800c862:	b300      	cbz	r0, 800c8a6 <__d2b+0x82>
 800c864:	9a01      	ldr	r2, [sp, #4]
 800c866:	f1c0 0320 	rsb	r3, r0, #32
 800c86a:	fa02 f303 	lsl.w	r3, r2, r3
 800c86e:	430b      	orrs	r3, r1
 800c870:	40c2      	lsrs	r2, r0
 800c872:	6163      	str	r3, [r4, #20]
 800c874:	9201      	str	r2, [sp, #4]
 800c876:	9b01      	ldr	r3, [sp, #4]
 800c878:	61a3      	str	r3, [r4, #24]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	bf14      	ite	ne
 800c87e:	2202      	movne	r2, #2
 800c880:	2201      	moveq	r2, #1
 800c882:	6122      	str	r2, [r4, #16]
 800c884:	b1d5      	cbz	r5, 800c8bc <__d2b+0x98>
 800c886:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c88a:	4405      	add	r5, r0
 800c88c:	f8c9 5000 	str.w	r5, [r9]
 800c890:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c894:	f8c8 0000 	str.w	r0, [r8]
 800c898:	4620      	mov	r0, r4
 800c89a:	b003      	add	sp, #12
 800c89c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c8a4:	e7d5      	b.n	800c852 <__d2b+0x2e>
 800c8a6:	6161      	str	r1, [r4, #20]
 800c8a8:	e7e5      	b.n	800c876 <__d2b+0x52>
 800c8aa:	a801      	add	r0, sp, #4
 800c8ac:	f7ff fd5a 	bl	800c364 <__lo0bits>
 800c8b0:	9b01      	ldr	r3, [sp, #4]
 800c8b2:	6163      	str	r3, [r4, #20]
 800c8b4:	2201      	movs	r2, #1
 800c8b6:	6122      	str	r2, [r4, #16]
 800c8b8:	3020      	adds	r0, #32
 800c8ba:	e7e3      	b.n	800c884 <__d2b+0x60>
 800c8bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c8c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c8c4:	f8c9 0000 	str.w	r0, [r9]
 800c8c8:	6918      	ldr	r0, [r3, #16]
 800c8ca:	f7ff fd2b 	bl	800c324 <__hi0bits>
 800c8ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c8d2:	e7df      	b.n	800c894 <__d2b+0x70>
 800c8d4:	0800d8c7 	.word	0x0800d8c7
 800c8d8:	0800d8d8 	.word	0x0800d8d8

0800c8dc <_calloc_r>:
 800c8dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c8de:	fba1 2402 	umull	r2, r4, r1, r2
 800c8e2:	b94c      	cbnz	r4, 800c8f8 <_calloc_r+0x1c>
 800c8e4:	4611      	mov	r1, r2
 800c8e6:	9201      	str	r2, [sp, #4]
 800c8e8:	f000 f87a 	bl	800c9e0 <_malloc_r>
 800c8ec:	9a01      	ldr	r2, [sp, #4]
 800c8ee:	4605      	mov	r5, r0
 800c8f0:	b930      	cbnz	r0, 800c900 <_calloc_r+0x24>
 800c8f2:	4628      	mov	r0, r5
 800c8f4:	b003      	add	sp, #12
 800c8f6:	bd30      	pop	{r4, r5, pc}
 800c8f8:	220c      	movs	r2, #12
 800c8fa:	6002      	str	r2, [r0, #0]
 800c8fc:	2500      	movs	r5, #0
 800c8fe:	e7f8      	b.n	800c8f2 <_calloc_r+0x16>
 800c900:	4621      	mov	r1, r4
 800c902:	f7fe f96f 	bl	800abe4 <memset>
 800c906:	e7f4      	b.n	800c8f2 <_calloc_r+0x16>

0800c908 <_free_r>:
 800c908:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c90a:	2900      	cmp	r1, #0
 800c90c:	d044      	beq.n	800c998 <_free_r+0x90>
 800c90e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c912:	9001      	str	r0, [sp, #4]
 800c914:	2b00      	cmp	r3, #0
 800c916:	f1a1 0404 	sub.w	r4, r1, #4
 800c91a:	bfb8      	it	lt
 800c91c:	18e4      	addlt	r4, r4, r3
 800c91e:	f000 f925 	bl	800cb6c <__malloc_lock>
 800c922:	4a1e      	ldr	r2, [pc, #120]	; (800c99c <_free_r+0x94>)
 800c924:	9801      	ldr	r0, [sp, #4]
 800c926:	6813      	ldr	r3, [r2, #0]
 800c928:	b933      	cbnz	r3, 800c938 <_free_r+0x30>
 800c92a:	6063      	str	r3, [r4, #4]
 800c92c:	6014      	str	r4, [r2, #0]
 800c92e:	b003      	add	sp, #12
 800c930:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c934:	f000 b920 	b.w	800cb78 <__malloc_unlock>
 800c938:	42a3      	cmp	r3, r4
 800c93a:	d908      	bls.n	800c94e <_free_r+0x46>
 800c93c:	6825      	ldr	r5, [r4, #0]
 800c93e:	1961      	adds	r1, r4, r5
 800c940:	428b      	cmp	r3, r1
 800c942:	bf01      	itttt	eq
 800c944:	6819      	ldreq	r1, [r3, #0]
 800c946:	685b      	ldreq	r3, [r3, #4]
 800c948:	1949      	addeq	r1, r1, r5
 800c94a:	6021      	streq	r1, [r4, #0]
 800c94c:	e7ed      	b.n	800c92a <_free_r+0x22>
 800c94e:	461a      	mov	r2, r3
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	b10b      	cbz	r3, 800c958 <_free_r+0x50>
 800c954:	42a3      	cmp	r3, r4
 800c956:	d9fa      	bls.n	800c94e <_free_r+0x46>
 800c958:	6811      	ldr	r1, [r2, #0]
 800c95a:	1855      	adds	r5, r2, r1
 800c95c:	42a5      	cmp	r5, r4
 800c95e:	d10b      	bne.n	800c978 <_free_r+0x70>
 800c960:	6824      	ldr	r4, [r4, #0]
 800c962:	4421      	add	r1, r4
 800c964:	1854      	adds	r4, r2, r1
 800c966:	42a3      	cmp	r3, r4
 800c968:	6011      	str	r1, [r2, #0]
 800c96a:	d1e0      	bne.n	800c92e <_free_r+0x26>
 800c96c:	681c      	ldr	r4, [r3, #0]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	6053      	str	r3, [r2, #4]
 800c972:	4421      	add	r1, r4
 800c974:	6011      	str	r1, [r2, #0]
 800c976:	e7da      	b.n	800c92e <_free_r+0x26>
 800c978:	d902      	bls.n	800c980 <_free_r+0x78>
 800c97a:	230c      	movs	r3, #12
 800c97c:	6003      	str	r3, [r0, #0]
 800c97e:	e7d6      	b.n	800c92e <_free_r+0x26>
 800c980:	6825      	ldr	r5, [r4, #0]
 800c982:	1961      	adds	r1, r4, r5
 800c984:	428b      	cmp	r3, r1
 800c986:	bf04      	itt	eq
 800c988:	6819      	ldreq	r1, [r3, #0]
 800c98a:	685b      	ldreq	r3, [r3, #4]
 800c98c:	6063      	str	r3, [r4, #4]
 800c98e:	bf04      	itt	eq
 800c990:	1949      	addeq	r1, r1, r5
 800c992:	6021      	streq	r1, [r4, #0]
 800c994:	6054      	str	r4, [r2, #4]
 800c996:	e7ca      	b.n	800c92e <_free_r+0x26>
 800c998:	b003      	add	sp, #12
 800c99a:	bd30      	pop	{r4, r5, pc}
 800c99c:	20004228 	.word	0x20004228

0800c9a0 <sbrk_aligned>:
 800c9a0:	b570      	push	{r4, r5, r6, lr}
 800c9a2:	4e0e      	ldr	r6, [pc, #56]	; (800c9dc <sbrk_aligned+0x3c>)
 800c9a4:	460c      	mov	r4, r1
 800c9a6:	6831      	ldr	r1, [r6, #0]
 800c9a8:	4605      	mov	r5, r0
 800c9aa:	b911      	cbnz	r1, 800c9b2 <sbrk_aligned+0x12>
 800c9ac:	f000 f88c 	bl	800cac8 <_sbrk_r>
 800c9b0:	6030      	str	r0, [r6, #0]
 800c9b2:	4621      	mov	r1, r4
 800c9b4:	4628      	mov	r0, r5
 800c9b6:	f000 f887 	bl	800cac8 <_sbrk_r>
 800c9ba:	1c43      	adds	r3, r0, #1
 800c9bc:	d00a      	beq.n	800c9d4 <sbrk_aligned+0x34>
 800c9be:	1cc4      	adds	r4, r0, #3
 800c9c0:	f024 0403 	bic.w	r4, r4, #3
 800c9c4:	42a0      	cmp	r0, r4
 800c9c6:	d007      	beq.n	800c9d8 <sbrk_aligned+0x38>
 800c9c8:	1a21      	subs	r1, r4, r0
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	f000 f87c 	bl	800cac8 <_sbrk_r>
 800c9d0:	3001      	adds	r0, #1
 800c9d2:	d101      	bne.n	800c9d8 <sbrk_aligned+0x38>
 800c9d4:	f04f 34ff 	mov.w	r4, #4294967295
 800c9d8:	4620      	mov	r0, r4
 800c9da:	bd70      	pop	{r4, r5, r6, pc}
 800c9dc:	2000422c 	.word	0x2000422c

0800c9e0 <_malloc_r>:
 800c9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9e4:	1ccd      	adds	r5, r1, #3
 800c9e6:	f025 0503 	bic.w	r5, r5, #3
 800c9ea:	3508      	adds	r5, #8
 800c9ec:	2d0c      	cmp	r5, #12
 800c9ee:	bf38      	it	cc
 800c9f0:	250c      	movcc	r5, #12
 800c9f2:	2d00      	cmp	r5, #0
 800c9f4:	4607      	mov	r7, r0
 800c9f6:	db01      	blt.n	800c9fc <_malloc_r+0x1c>
 800c9f8:	42a9      	cmp	r1, r5
 800c9fa:	d905      	bls.n	800ca08 <_malloc_r+0x28>
 800c9fc:	230c      	movs	r3, #12
 800c9fe:	603b      	str	r3, [r7, #0]
 800ca00:	2600      	movs	r6, #0
 800ca02:	4630      	mov	r0, r6
 800ca04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca08:	4e2e      	ldr	r6, [pc, #184]	; (800cac4 <_malloc_r+0xe4>)
 800ca0a:	f000 f8af 	bl	800cb6c <__malloc_lock>
 800ca0e:	6833      	ldr	r3, [r6, #0]
 800ca10:	461c      	mov	r4, r3
 800ca12:	bb34      	cbnz	r4, 800ca62 <_malloc_r+0x82>
 800ca14:	4629      	mov	r1, r5
 800ca16:	4638      	mov	r0, r7
 800ca18:	f7ff ffc2 	bl	800c9a0 <sbrk_aligned>
 800ca1c:	1c43      	adds	r3, r0, #1
 800ca1e:	4604      	mov	r4, r0
 800ca20:	d14d      	bne.n	800cabe <_malloc_r+0xde>
 800ca22:	6834      	ldr	r4, [r6, #0]
 800ca24:	4626      	mov	r6, r4
 800ca26:	2e00      	cmp	r6, #0
 800ca28:	d140      	bne.n	800caac <_malloc_r+0xcc>
 800ca2a:	6823      	ldr	r3, [r4, #0]
 800ca2c:	4631      	mov	r1, r6
 800ca2e:	4638      	mov	r0, r7
 800ca30:	eb04 0803 	add.w	r8, r4, r3
 800ca34:	f000 f848 	bl	800cac8 <_sbrk_r>
 800ca38:	4580      	cmp	r8, r0
 800ca3a:	d13a      	bne.n	800cab2 <_malloc_r+0xd2>
 800ca3c:	6821      	ldr	r1, [r4, #0]
 800ca3e:	3503      	adds	r5, #3
 800ca40:	1a6d      	subs	r5, r5, r1
 800ca42:	f025 0503 	bic.w	r5, r5, #3
 800ca46:	3508      	adds	r5, #8
 800ca48:	2d0c      	cmp	r5, #12
 800ca4a:	bf38      	it	cc
 800ca4c:	250c      	movcc	r5, #12
 800ca4e:	4629      	mov	r1, r5
 800ca50:	4638      	mov	r0, r7
 800ca52:	f7ff ffa5 	bl	800c9a0 <sbrk_aligned>
 800ca56:	3001      	adds	r0, #1
 800ca58:	d02b      	beq.n	800cab2 <_malloc_r+0xd2>
 800ca5a:	6823      	ldr	r3, [r4, #0]
 800ca5c:	442b      	add	r3, r5
 800ca5e:	6023      	str	r3, [r4, #0]
 800ca60:	e00e      	b.n	800ca80 <_malloc_r+0xa0>
 800ca62:	6822      	ldr	r2, [r4, #0]
 800ca64:	1b52      	subs	r2, r2, r5
 800ca66:	d41e      	bmi.n	800caa6 <_malloc_r+0xc6>
 800ca68:	2a0b      	cmp	r2, #11
 800ca6a:	d916      	bls.n	800ca9a <_malloc_r+0xba>
 800ca6c:	1961      	adds	r1, r4, r5
 800ca6e:	42a3      	cmp	r3, r4
 800ca70:	6025      	str	r5, [r4, #0]
 800ca72:	bf18      	it	ne
 800ca74:	6059      	strne	r1, [r3, #4]
 800ca76:	6863      	ldr	r3, [r4, #4]
 800ca78:	bf08      	it	eq
 800ca7a:	6031      	streq	r1, [r6, #0]
 800ca7c:	5162      	str	r2, [r4, r5]
 800ca7e:	604b      	str	r3, [r1, #4]
 800ca80:	4638      	mov	r0, r7
 800ca82:	f104 060b 	add.w	r6, r4, #11
 800ca86:	f000 f877 	bl	800cb78 <__malloc_unlock>
 800ca8a:	f026 0607 	bic.w	r6, r6, #7
 800ca8e:	1d23      	adds	r3, r4, #4
 800ca90:	1af2      	subs	r2, r6, r3
 800ca92:	d0b6      	beq.n	800ca02 <_malloc_r+0x22>
 800ca94:	1b9b      	subs	r3, r3, r6
 800ca96:	50a3      	str	r3, [r4, r2]
 800ca98:	e7b3      	b.n	800ca02 <_malloc_r+0x22>
 800ca9a:	6862      	ldr	r2, [r4, #4]
 800ca9c:	42a3      	cmp	r3, r4
 800ca9e:	bf0c      	ite	eq
 800caa0:	6032      	streq	r2, [r6, #0]
 800caa2:	605a      	strne	r2, [r3, #4]
 800caa4:	e7ec      	b.n	800ca80 <_malloc_r+0xa0>
 800caa6:	4623      	mov	r3, r4
 800caa8:	6864      	ldr	r4, [r4, #4]
 800caaa:	e7b2      	b.n	800ca12 <_malloc_r+0x32>
 800caac:	4634      	mov	r4, r6
 800caae:	6876      	ldr	r6, [r6, #4]
 800cab0:	e7b9      	b.n	800ca26 <_malloc_r+0x46>
 800cab2:	230c      	movs	r3, #12
 800cab4:	603b      	str	r3, [r7, #0]
 800cab6:	4638      	mov	r0, r7
 800cab8:	f000 f85e 	bl	800cb78 <__malloc_unlock>
 800cabc:	e7a1      	b.n	800ca02 <_malloc_r+0x22>
 800cabe:	6025      	str	r5, [r4, #0]
 800cac0:	e7de      	b.n	800ca80 <_malloc_r+0xa0>
 800cac2:	bf00      	nop
 800cac4:	20004228 	.word	0x20004228

0800cac8 <_sbrk_r>:
 800cac8:	b538      	push	{r3, r4, r5, lr}
 800caca:	4d06      	ldr	r5, [pc, #24]	; (800cae4 <_sbrk_r+0x1c>)
 800cacc:	2300      	movs	r3, #0
 800cace:	4604      	mov	r4, r0
 800cad0:	4608      	mov	r0, r1
 800cad2:	602b      	str	r3, [r5, #0]
 800cad4:	f7f5 fc1e 	bl	8002314 <_sbrk>
 800cad8:	1c43      	adds	r3, r0, #1
 800cada:	d102      	bne.n	800cae2 <_sbrk_r+0x1a>
 800cadc:	682b      	ldr	r3, [r5, #0]
 800cade:	b103      	cbz	r3, 800cae2 <_sbrk_r+0x1a>
 800cae0:	6023      	str	r3, [r4, #0]
 800cae2:	bd38      	pop	{r3, r4, r5, pc}
 800cae4:	20004230 	.word	0x20004230

0800cae8 <__assert_func>:
 800cae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800caea:	4614      	mov	r4, r2
 800caec:	461a      	mov	r2, r3
 800caee:	4b09      	ldr	r3, [pc, #36]	; (800cb14 <__assert_func+0x2c>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4605      	mov	r5, r0
 800caf4:	68d8      	ldr	r0, [r3, #12]
 800caf6:	b14c      	cbz	r4, 800cb0c <__assert_func+0x24>
 800caf8:	4b07      	ldr	r3, [pc, #28]	; (800cb18 <__assert_func+0x30>)
 800cafa:	9100      	str	r1, [sp, #0]
 800cafc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb00:	4906      	ldr	r1, [pc, #24]	; (800cb1c <__assert_func+0x34>)
 800cb02:	462b      	mov	r3, r5
 800cb04:	f000 f80e 	bl	800cb24 <fiprintf>
 800cb08:	f000 fa64 	bl	800cfd4 <abort>
 800cb0c:	4b04      	ldr	r3, [pc, #16]	; (800cb20 <__assert_func+0x38>)
 800cb0e:	461c      	mov	r4, r3
 800cb10:	e7f3      	b.n	800cafa <__assert_func+0x12>
 800cb12:	bf00      	nop
 800cb14:	20000128 	.word	0x20000128
 800cb18:	0800da34 	.word	0x0800da34
 800cb1c:	0800da41 	.word	0x0800da41
 800cb20:	0800da6f 	.word	0x0800da6f

0800cb24 <fiprintf>:
 800cb24:	b40e      	push	{r1, r2, r3}
 800cb26:	b503      	push	{r0, r1, lr}
 800cb28:	4601      	mov	r1, r0
 800cb2a:	ab03      	add	r3, sp, #12
 800cb2c:	4805      	ldr	r0, [pc, #20]	; (800cb44 <fiprintf+0x20>)
 800cb2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb32:	6800      	ldr	r0, [r0, #0]
 800cb34:	9301      	str	r3, [sp, #4]
 800cb36:	f000 f84f 	bl	800cbd8 <_vfiprintf_r>
 800cb3a:	b002      	add	sp, #8
 800cb3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb40:	b003      	add	sp, #12
 800cb42:	4770      	bx	lr
 800cb44:	20000128 	.word	0x20000128

0800cb48 <__ascii_mbtowc>:
 800cb48:	b082      	sub	sp, #8
 800cb4a:	b901      	cbnz	r1, 800cb4e <__ascii_mbtowc+0x6>
 800cb4c:	a901      	add	r1, sp, #4
 800cb4e:	b142      	cbz	r2, 800cb62 <__ascii_mbtowc+0x1a>
 800cb50:	b14b      	cbz	r3, 800cb66 <__ascii_mbtowc+0x1e>
 800cb52:	7813      	ldrb	r3, [r2, #0]
 800cb54:	600b      	str	r3, [r1, #0]
 800cb56:	7812      	ldrb	r2, [r2, #0]
 800cb58:	1e10      	subs	r0, r2, #0
 800cb5a:	bf18      	it	ne
 800cb5c:	2001      	movne	r0, #1
 800cb5e:	b002      	add	sp, #8
 800cb60:	4770      	bx	lr
 800cb62:	4610      	mov	r0, r2
 800cb64:	e7fb      	b.n	800cb5e <__ascii_mbtowc+0x16>
 800cb66:	f06f 0001 	mvn.w	r0, #1
 800cb6a:	e7f8      	b.n	800cb5e <__ascii_mbtowc+0x16>

0800cb6c <__malloc_lock>:
 800cb6c:	4801      	ldr	r0, [pc, #4]	; (800cb74 <__malloc_lock+0x8>)
 800cb6e:	f000 bbf1 	b.w	800d354 <__retarget_lock_acquire_recursive>
 800cb72:	bf00      	nop
 800cb74:	20004234 	.word	0x20004234

0800cb78 <__malloc_unlock>:
 800cb78:	4801      	ldr	r0, [pc, #4]	; (800cb80 <__malloc_unlock+0x8>)
 800cb7a:	f000 bbec 	b.w	800d356 <__retarget_lock_release_recursive>
 800cb7e:	bf00      	nop
 800cb80:	20004234 	.word	0x20004234

0800cb84 <__sfputc_r>:
 800cb84:	6893      	ldr	r3, [r2, #8]
 800cb86:	3b01      	subs	r3, #1
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	b410      	push	{r4}
 800cb8c:	6093      	str	r3, [r2, #8]
 800cb8e:	da08      	bge.n	800cba2 <__sfputc_r+0x1e>
 800cb90:	6994      	ldr	r4, [r2, #24]
 800cb92:	42a3      	cmp	r3, r4
 800cb94:	db01      	blt.n	800cb9a <__sfputc_r+0x16>
 800cb96:	290a      	cmp	r1, #10
 800cb98:	d103      	bne.n	800cba2 <__sfputc_r+0x1e>
 800cb9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cb9e:	f000 b94b 	b.w	800ce38 <__swbuf_r>
 800cba2:	6813      	ldr	r3, [r2, #0]
 800cba4:	1c58      	adds	r0, r3, #1
 800cba6:	6010      	str	r0, [r2, #0]
 800cba8:	7019      	strb	r1, [r3, #0]
 800cbaa:	4608      	mov	r0, r1
 800cbac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbb0:	4770      	bx	lr

0800cbb2 <__sfputs_r>:
 800cbb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbb4:	4606      	mov	r6, r0
 800cbb6:	460f      	mov	r7, r1
 800cbb8:	4614      	mov	r4, r2
 800cbba:	18d5      	adds	r5, r2, r3
 800cbbc:	42ac      	cmp	r4, r5
 800cbbe:	d101      	bne.n	800cbc4 <__sfputs_r+0x12>
 800cbc0:	2000      	movs	r0, #0
 800cbc2:	e007      	b.n	800cbd4 <__sfputs_r+0x22>
 800cbc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbc8:	463a      	mov	r2, r7
 800cbca:	4630      	mov	r0, r6
 800cbcc:	f7ff ffda 	bl	800cb84 <__sfputc_r>
 800cbd0:	1c43      	adds	r3, r0, #1
 800cbd2:	d1f3      	bne.n	800cbbc <__sfputs_r+0xa>
 800cbd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cbd8 <_vfiprintf_r>:
 800cbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbdc:	460d      	mov	r5, r1
 800cbde:	b09d      	sub	sp, #116	; 0x74
 800cbe0:	4614      	mov	r4, r2
 800cbe2:	4698      	mov	r8, r3
 800cbe4:	4606      	mov	r6, r0
 800cbe6:	b118      	cbz	r0, 800cbf0 <_vfiprintf_r+0x18>
 800cbe8:	6983      	ldr	r3, [r0, #24]
 800cbea:	b90b      	cbnz	r3, 800cbf0 <_vfiprintf_r+0x18>
 800cbec:	f000 fb14 	bl	800d218 <__sinit>
 800cbf0:	4b89      	ldr	r3, [pc, #548]	; (800ce18 <_vfiprintf_r+0x240>)
 800cbf2:	429d      	cmp	r5, r3
 800cbf4:	d11b      	bne.n	800cc2e <_vfiprintf_r+0x56>
 800cbf6:	6875      	ldr	r5, [r6, #4]
 800cbf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbfa:	07d9      	lsls	r1, r3, #31
 800cbfc:	d405      	bmi.n	800cc0a <_vfiprintf_r+0x32>
 800cbfe:	89ab      	ldrh	r3, [r5, #12]
 800cc00:	059a      	lsls	r2, r3, #22
 800cc02:	d402      	bmi.n	800cc0a <_vfiprintf_r+0x32>
 800cc04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc06:	f000 fba5 	bl	800d354 <__retarget_lock_acquire_recursive>
 800cc0a:	89ab      	ldrh	r3, [r5, #12]
 800cc0c:	071b      	lsls	r3, r3, #28
 800cc0e:	d501      	bpl.n	800cc14 <_vfiprintf_r+0x3c>
 800cc10:	692b      	ldr	r3, [r5, #16]
 800cc12:	b9eb      	cbnz	r3, 800cc50 <_vfiprintf_r+0x78>
 800cc14:	4629      	mov	r1, r5
 800cc16:	4630      	mov	r0, r6
 800cc18:	f000 f96e 	bl	800cef8 <__swsetup_r>
 800cc1c:	b1c0      	cbz	r0, 800cc50 <_vfiprintf_r+0x78>
 800cc1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc20:	07dc      	lsls	r4, r3, #31
 800cc22:	d50e      	bpl.n	800cc42 <_vfiprintf_r+0x6a>
 800cc24:	f04f 30ff 	mov.w	r0, #4294967295
 800cc28:	b01d      	add	sp, #116	; 0x74
 800cc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc2e:	4b7b      	ldr	r3, [pc, #492]	; (800ce1c <_vfiprintf_r+0x244>)
 800cc30:	429d      	cmp	r5, r3
 800cc32:	d101      	bne.n	800cc38 <_vfiprintf_r+0x60>
 800cc34:	68b5      	ldr	r5, [r6, #8]
 800cc36:	e7df      	b.n	800cbf8 <_vfiprintf_r+0x20>
 800cc38:	4b79      	ldr	r3, [pc, #484]	; (800ce20 <_vfiprintf_r+0x248>)
 800cc3a:	429d      	cmp	r5, r3
 800cc3c:	bf08      	it	eq
 800cc3e:	68f5      	ldreq	r5, [r6, #12]
 800cc40:	e7da      	b.n	800cbf8 <_vfiprintf_r+0x20>
 800cc42:	89ab      	ldrh	r3, [r5, #12]
 800cc44:	0598      	lsls	r0, r3, #22
 800cc46:	d4ed      	bmi.n	800cc24 <_vfiprintf_r+0x4c>
 800cc48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc4a:	f000 fb84 	bl	800d356 <__retarget_lock_release_recursive>
 800cc4e:	e7e9      	b.n	800cc24 <_vfiprintf_r+0x4c>
 800cc50:	2300      	movs	r3, #0
 800cc52:	9309      	str	r3, [sp, #36]	; 0x24
 800cc54:	2320      	movs	r3, #32
 800cc56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc5e:	2330      	movs	r3, #48	; 0x30
 800cc60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ce24 <_vfiprintf_r+0x24c>
 800cc64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc68:	f04f 0901 	mov.w	r9, #1
 800cc6c:	4623      	mov	r3, r4
 800cc6e:	469a      	mov	sl, r3
 800cc70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc74:	b10a      	cbz	r2, 800cc7a <_vfiprintf_r+0xa2>
 800cc76:	2a25      	cmp	r2, #37	; 0x25
 800cc78:	d1f9      	bne.n	800cc6e <_vfiprintf_r+0x96>
 800cc7a:	ebba 0b04 	subs.w	fp, sl, r4
 800cc7e:	d00b      	beq.n	800cc98 <_vfiprintf_r+0xc0>
 800cc80:	465b      	mov	r3, fp
 800cc82:	4622      	mov	r2, r4
 800cc84:	4629      	mov	r1, r5
 800cc86:	4630      	mov	r0, r6
 800cc88:	f7ff ff93 	bl	800cbb2 <__sfputs_r>
 800cc8c:	3001      	adds	r0, #1
 800cc8e:	f000 80aa 	beq.w	800cde6 <_vfiprintf_r+0x20e>
 800cc92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc94:	445a      	add	r2, fp
 800cc96:	9209      	str	r2, [sp, #36]	; 0x24
 800cc98:	f89a 3000 	ldrb.w	r3, [sl]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	f000 80a2 	beq.w	800cde6 <_vfiprintf_r+0x20e>
 800cca2:	2300      	movs	r3, #0
 800cca4:	f04f 32ff 	mov.w	r2, #4294967295
 800cca8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccac:	f10a 0a01 	add.w	sl, sl, #1
 800ccb0:	9304      	str	r3, [sp, #16]
 800ccb2:	9307      	str	r3, [sp, #28]
 800ccb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccb8:	931a      	str	r3, [sp, #104]	; 0x68
 800ccba:	4654      	mov	r4, sl
 800ccbc:	2205      	movs	r2, #5
 800ccbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccc2:	4858      	ldr	r0, [pc, #352]	; (800ce24 <_vfiprintf_r+0x24c>)
 800ccc4:	f7f3 fa94 	bl	80001f0 <memchr>
 800ccc8:	9a04      	ldr	r2, [sp, #16]
 800ccca:	b9d8      	cbnz	r0, 800cd04 <_vfiprintf_r+0x12c>
 800cccc:	06d1      	lsls	r1, r2, #27
 800ccce:	bf44      	itt	mi
 800ccd0:	2320      	movmi	r3, #32
 800ccd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccd6:	0713      	lsls	r3, r2, #28
 800ccd8:	bf44      	itt	mi
 800ccda:	232b      	movmi	r3, #43	; 0x2b
 800ccdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cce0:	f89a 3000 	ldrb.w	r3, [sl]
 800cce4:	2b2a      	cmp	r3, #42	; 0x2a
 800cce6:	d015      	beq.n	800cd14 <_vfiprintf_r+0x13c>
 800cce8:	9a07      	ldr	r2, [sp, #28]
 800ccea:	4654      	mov	r4, sl
 800ccec:	2000      	movs	r0, #0
 800ccee:	f04f 0c0a 	mov.w	ip, #10
 800ccf2:	4621      	mov	r1, r4
 800ccf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccf8:	3b30      	subs	r3, #48	; 0x30
 800ccfa:	2b09      	cmp	r3, #9
 800ccfc:	d94e      	bls.n	800cd9c <_vfiprintf_r+0x1c4>
 800ccfe:	b1b0      	cbz	r0, 800cd2e <_vfiprintf_r+0x156>
 800cd00:	9207      	str	r2, [sp, #28]
 800cd02:	e014      	b.n	800cd2e <_vfiprintf_r+0x156>
 800cd04:	eba0 0308 	sub.w	r3, r0, r8
 800cd08:	fa09 f303 	lsl.w	r3, r9, r3
 800cd0c:	4313      	orrs	r3, r2
 800cd0e:	9304      	str	r3, [sp, #16]
 800cd10:	46a2      	mov	sl, r4
 800cd12:	e7d2      	b.n	800ccba <_vfiprintf_r+0xe2>
 800cd14:	9b03      	ldr	r3, [sp, #12]
 800cd16:	1d19      	adds	r1, r3, #4
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	9103      	str	r1, [sp, #12]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	bfbb      	ittet	lt
 800cd20:	425b      	neglt	r3, r3
 800cd22:	f042 0202 	orrlt.w	r2, r2, #2
 800cd26:	9307      	strge	r3, [sp, #28]
 800cd28:	9307      	strlt	r3, [sp, #28]
 800cd2a:	bfb8      	it	lt
 800cd2c:	9204      	strlt	r2, [sp, #16]
 800cd2e:	7823      	ldrb	r3, [r4, #0]
 800cd30:	2b2e      	cmp	r3, #46	; 0x2e
 800cd32:	d10c      	bne.n	800cd4e <_vfiprintf_r+0x176>
 800cd34:	7863      	ldrb	r3, [r4, #1]
 800cd36:	2b2a      	cmp	r3, #42	; 0x2a
 800cd38:	d135      	bne.n	800cda6 <_vfiprintf_r+0x1ce>
 800cd3a:	9b03      	ldr	r3, [sp, #12]
 800cd3c:	1d1a      	adds	r2, r3, #4
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	9203      	str	r2, [sp, #12]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	bfb8      	it	lt
 800cd46:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd4a:	3402      	adds	r4, #2
 800cd4c:	9305      	str	r3, [sp, #20]
 800cd4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ce34 <_vfiprintf_r+0x25c>
 800cd52:	7821      	ldrb	r1, [r4, #0]
 800cd54:	2203      	movs	r2, #3
 800cd56:	4650      	mov	r0, sl
 800cd58:	f7f3 fa4a 	bl	80001f0 <memchr>
 800cd5c:	b140      	cbz	r0, 800cd70 <_vfiprintf_r+0x198>
 800cd5e:	2340      	movs	r3, #64	; 0x40
 800cd60:	eba0 000a 	sub.w	r0, r0, sl
 800cd64:	fa03 f000 	lsl.w	r0, r3, r0
 800cd68:	9b04      	ldr	r3, [sp, #16]
 800cd6a:	4303      	orrs	r3, r0
 800cd6c:	3401      	adds	r4, #1
 800cd6e:	9304      	str	r3, [sp, #16]
 800cd70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd74:	482c      	ldr	r0, [pc, #176]	; (800ce28 <_vfiprintf_r+0x250>)
 800cd76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd7a:	2206      	movs	r2, #6
 800cd7c:	f7f3 fa38 	bl	80001f0 <memchr>
 800cd80:	2800      	cmp	r0, #0
 800cd82:	d03f      	beq.n	800ce04 <_vfiprintf_r+0x22c>
 800cd84:	4b29      	ldr	r3, [pc, #164]	; (800ce2c <_vfiprintf_r+0x254>)
 800cd86:	bb1b      	cbnz	r3, 800cdd0 <_vfiprintf_r+0x1f8>
 800cd88:	9b03      	ldr	r3, [sp, #12]
 800cd8a:	3307      	adds	r3, #7
 800cd8c:	f023 0307 	bic.w	r3, r3, #7
 800cd90:	3308      	adds	r3, #8
 800cd92:	9303      	str	r3, [sp, #12]
 800cd94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd96:	443b      	add	r3, r7
 800cd98:	9309      	str	r3, [sp, #36]	; 0x24
 800cd9a:	e767      	b.n	800cc6c <_vfiprintf_r+0x94>
 800cd9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cda0:	460c      	mov	r4, r1
 800cda2:	2001      	movs	r0, #1
 800cda4:	e7a5      	b.n	800ccf2 <_vfiprintf_r+0x11a>
 800cda6:	2300      	movs	r3, #0
 800cda8:	3401      	adds	r4, #1
 800cdaa:	9305      	str	r3, [sp, #20]
 800cdac:	4619      	mov	r1, r3
 800cdae:	f04f 0c0a 	mov.w	ip, #10
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdb8:	3a30      	subs	r2, #48	; 0x30
 800cdba:	2a09      	cmp	r2, #9
 800cdbc:	d903      	bls.n	800cdc6 <_vfiprintf_r+0x1ee>
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d0c5      	beq.n	800cd4e <_vfiprintf_r+0x176>
 800cdc2:	9105      	str	r1, [sp, #20]
 800cdc4:	e7c3      	b.n	800cd4e <_vfiprintf_r+0x176>
 800cdc6:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdca:	4604      	mov	r4, r0
 800cdcc:	2301      	movs	r3, #1
 800cdce:	e7f0      	b.n	800cdb2 <_vfiprintf_r+0x1da>
 800cdd0:	ab03      	add	r3, sp, #12
 800cdd2:	9300      	str	r3, [sp, #0]
 800cdd4:	462a      	mov	r2, r5
 800cdd6:	4b16      	ldr	r3, [pc, #88]	; (800ce30 <_vfiprintf_r+0x258>)
 800cdd8:	a904      	add	r1, sp, #16
 800cdda:	4630      	mov	r0, r6
 800cddc:	f7fd ffaa 	bl	800ad34 <_printf_float>
 800cde0:	4607      	mov	r7, r0
 800cde2:	1c78      	adds	r0, r7, #1
 800cde4:	d1d6      	bne.n	800cd94 <_vfiprintf_r+0x1bc>
 800cde6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cde8:	07d9      	lsls	r1, r3, #31
 800cdea:	d405      	bmi.n	800cdf8 <_vfiprintf_r+0x220>
 800cdec:	89ab      	ldrh	r3, [r5, #12]
 800cdee:	059a      	lsls	r2, r3, #22
 800cdf0:	d402      	bmi.n	800cdf8 <_vfiprintf_r+0x220>
 800cdf2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cdf4:	f000 faaf 	bl	800d356 <__retarget_lock_release_recursive>
 800cdf8:	89ab      	ldrh	r3, [r5, #12]
 800cdfa:	065b      	lsls	r3, r3, #25
 800cdfc:	f53f af12 	bmi.w	800cc24 <_vfiprintf_r+0x4c>
 800ce00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce02:	e711      	b.n	800cc28 <_vfiprintf_r+0x50>
 800ce04:	ab03      	add	r3, sp, #12
 800ce06:	9300      	str	r3, [sp, #0]
 800ce08:	462a      	mov	r2, r5
 800ce0a:	4b09      	ldr	r3, [pc, #36]	; (800ce30 <_vfiprintf_r+0x258>)
 800ce0c:	a904      	add	r1, sp, #16
 800ce0e:	4630      	mov	r0, r6
 800ce10:	f7fe fa34 	bl	800b27c <_printf_i>
 800ce14:	e7e4      	b.n	800cde0 <_vfiprintf_r+0x208>
 800ce16:	bf00      	nop
 800ce18:	0800dbac 	.word	0x0800dbac
 800ce1c:	0800dbcc 	.word	0x0800dbcc
 800ce20:	0800db8c 	.word	0x0800db8c
 800ce24:	0800da7a 	.word	0x0800da7a
 800ce28:	0800da84 	.word	0x0800da84
 800ce2c:	0800ad35 	.word	0x0800ad35
 800ce30:	0800cbb3 	.word	0x0800cbb3
 800ce34:	0800da80 	.word	0x0800da80

0800ce38 <__swbuf_r>:
 800ce38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce3a:	460e      	mov	r6, r1
 800ce3c:	4614      	mov	r4, r2
 800ce3e:	4605      	mov	r5, r0
 800ce40:	b118      	cbz	r0, 800ce4a <__swbuf_r+0x12>
 800ce42:	6983      	ldr	r3, [r0, #24]
 800ce44:	b90b      	cbnz	r3, 800ce4a <__swbuf_r+0x12>
 800ce46:	f000 f9e7 	bl	800d218 <__sinit>
 800ce4a:	4b21      	ldr	r3, [pc, #132]	; (800ced0 <__swbuf_r+0x98>)
 800ce4c:	429c      	cmp	r4, r3
 800ce4e:	d12b      	bne.n	800cea8 <__swbuf_r+0x70>
 800ce50:	686c      	ldr	r4, [r5, #4]
 800ce52:	69a3      	ldr	r3, [r4, #24]
 800ce54:	60a3      	str	r3, [r4, #8]
 800ce56:	89a3      	ldrh	r3, [r4, #12]
 800ce58:	071a      	lsls	r2, r3, #28
 800ce5a:	d52f      	bpl.n	800cebc <__swbuf_r+0x84>
 800ce5c:	6923      	ldr	r3, [r4, #16]
 800ce5e:	b36b      	cbz	r3, 800cebc <__swbuf_r+0x84>
 800ce60:	6923      	ldr	r3, [r4, #16]
 800ce62:	6820      	ldr	r0, [r4, #0]
 800ce64:	1ac0      	subs	r0, r0, r3
 800ce66:	6963      	ldr	r3, [r4, #20]
 800ce68:	b2f6      	uxtb	r6, r6
 800ce6a:	4283      	cmp	r3, r0
 800ce6c:	4637      	mov	r7, r6
 800ce6e:	dc04      	bgt.n	800ce7a <__swbuf_r+0x42>
 800ce70:	4621      	mov	r1, r4
 800ce72:	4628      	mov	r0, r5
 800ce74:	f000 f93c 	bl	800d0f0 <_fflush_r>
 800ce78:	bb30      	cbnz	r0, 800cec8 <__swbuf_r+0x90>
 800ce7a:	68a3      	ldr	r3, [r4, #8]
 800ce7c:	3b01      	subs	r3, #1
 800ce7e:	60a3      	str	r3, [r4, #8]
 800ce80:	6823      	ldr	r3, [r4, #0]
 800ce82:	1c5a      	adds	r2, r3, #1
 800ce84:	6022      	str	r2, [r4, #0]
 800ce86:	701e      	strb	r6, [r3, #0]
 800ce88:	6963      	ldr	r3, [r4, #20]
 800ce8a:	3001      	adds	r0, #1
 800ce8c:	4283      	cmp	r3, r0
 800ce8e:	d004      	beq.n	800ce9a <__swbuf_r+0x62>
 800ce90:	89a3      	ldrh	r3, [r4, #12]
 800ce92:	07db      	lsls	r3, r3, #31
 800ce94:	d506      	bpl.n	800cea4 <__swbuf_r+0x6c>
 800ce96:	2e0a      	cmp	r6, #10
 800ce98:	d104      	bne.n	800cea4 <__swbuf_r+0x6c>
 800ce9a:	4621      	mov	r1, r4
 800ce9c:	4628      	mov	r0, r5
 800ce9e:	f000 f927 	bl	800d0f0 <_fflush_r>
 800cea2:	b988      	cbnz	r0, 800cec8 <__swbuf_r+0x90>
 800cea4:	4638      	mov	r0, r7
 800cea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cea8:	4b0a      	ldr	r3, [pc, #40]	; (800ced4 <__swbuf_r+0x9c>)
 800ceaa:	429c      	cmp	r4, r3
 800ceac:	d101      	bne.n	800ceb2 <__swbuf_r+0x7a>
 800ceae:	68ac      	ldr	r4, [r5, #8]
 800ceb0:	e7cf      	b.n	800ce52 <__swbuf_r+0x1a>
 800ceb2:	4b09      	ldr	r3, [pc, #36]	; (800ced8 <__swbuf_r+0xa0>)
 800ceb4:	429c      	cmp	r4, r3
 800ceb6:	bf08      	it	eq
 800ceb8:	68ec      	ldreq	r4, [r5, #12]
 800ceba:	e7ca      	b.n	800ce52 <__swbuf_r+0x1a>
 800cebc:	4621      	mov	r1, r4
 800cebe:	4628      	mov	r0, r5
 800cec0:	f000 f81a 	bl	800cef8 <__swsetup_r>
 800cec4:	2800      	cmp	r0, #0
 800cec6:	d0cb      	beq.n	800ce60 <__swbuf_r+0x28>
 800cec8:	f04f 37ff 	mov.w	r7, #4294967295
 800cecc:	e7ea      	b.n	800cea4 <__swbuf_r+0x6c>
 800cece:	bf00      	nop
 800ced0:	0800dbac 	.word	0x0800dbac
 800ced4:	0800dbcc 	.word	0x0800dbcc
 800ced8:	0800db8c 	.word	0x0800db8c

0800cedc <__ascii_wctomb>:
 800cedc:	b149      	cbz	r1, 800cef2 <__ascii_wctomb+0x16>
 800cede:	2aff      	cmp	r2, #255	; 0xff
 800cee0:	bf85      	ittet	hi
 800cee2:	238a      	movhi	r3, #138	; 0x8a
 800cee4:	6003      	strhi	r3, [r0, #0]
 800cee6:	700a      	strbls	r2, [r1, #0]
 800cee8:	f04f 30ff 	movhi.w	r0, #4294967295
 800ceec:	bf98      	it	ls
 800ceee:	2001      	movls	r0, #1
 800cef0:	4770      	bx	lr
 800cef2:	4608      	mov	r0, r1
 800cef4:	4770      	bx	lr
	...

0800cef8 <__swsetup_r>:
 800cef8:	4b32      	ldr	r3, [pc, #200]	; (800cfc4 <__swsetup_r+0xcc>)
 800cefa:	b570      	push	{r4, r5, r6, lr}
 800cefc:	681d      	ldr	r5, [r3, #0]
 800cefe:	4606      	mov	r6, r0
 800cf00:	460c      	mov	r4, r1
 800cf02:	b125      	cbz	r5, 800cf0e <__swsetup_r+0x16>
 800cf04:	69ab      	ldr	r3, [r5, #24]
 800cf06:	b913      	cbnz	r3, 800cf0e <__swsetup_r+0x16>
 800cf08:	4628      	mov	r0, r5
 800cf0a:	f000 f985 	bl	800d218 <__sinit>
 800cf0e:	4b2e      	ldr	r3, [pc, #184]	; (800cfc8 <__swsetup_r+0xd0>)
 800cf10:	429c      	cmp	r4, r3
 800cf12:	d10f      	bne.n	800cf34 <__swsetup_r+0x3c>
 800cf14:	686c      	ldr	r4, [r5, #4]
 800cf16:	89a3      	ldrh	r3, [r4, #12]
 800cf18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf1c:	0719      	lsls	r1, r3, #28
 800cf1e:	d42c      	bmi.n	800cf7a <__swsetup_r+0x82>
 800cf20:	06dd      	lsls	r5, r3, #27
 800cf22:	d411      	bmi.n	800cf48 <__swsetup_r+0x50>
 800cf24:	2309      	movs	r3, #9
 800cf26:	6033      	str	r3, [r6, #0]
 800cf28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cf2c:	81a3      	strh	r3, [r4, #12]
 800cf2e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf32:	e03e      	b.n	800cfb2 <__swsetup_r+0xba>
 800cf34:	4b25      	ldr	r3, [pc, #148]	; (800cfcc <__swsetup_r+0xd4>)
 800cf36:	429c      	cmp	r4, r3
 800cf38:	d101      	bne.n	800cf3e <__swsetup_r+0x46>
 800cf3a:	68ac      	ldr	r4, [r5, #8]
 800cf3c:	e7eb      	b.n	800cf16 <__swsetup_r+0x1e>
 800cf3e:	4b24      	ldr	r3, [pc, #144]	; (800cfd0 <__swsetup_r+0xd8>)
 800cf40:	429c      	cmp	r4, r3
 800cf42:	bf08      	it	eq
 800cf44:	68ec      	ldreq	r4, [r5, #12]
 800cf46:	e7e6      	b.n	800cf16 <__swsetup_r+0x1e>
 800cf48:	0758      	lsls	r0, r3, #29
 800cf4a:	d512      	bpl.n	800cf72 <__swsetup_r+0x7a>
 800cf4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf4e:	b141      	cbz	r1, 800cf62 <__swsetup_r+0x6a>
 800cf50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cf54:	4299      	cmp	r1, r3
 800cf56:	d002      	beq.n	800cf5e <__swsetup_r+0x66>
 800cf58:	4630      	mov	r0, r6
 800cf5a:	f7ff fcd5 	bl	800c908 <_free_r>
 800cf5e:	2300      	movs	r3, #0
 800cf60:	6363      	str	r3, [r4, #52]	; 0x34
 800cf62:	89a3      	ldrh	r3, [r4, #12]
 800cf64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cf68:	81a3      	strh	r3, [r4, #12]
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	6063      	str	r3, [r4, #4]
 800cf6e:	6923      	ldr	r3, [r4, #16]
 800cf70:	6023      	str	r3, [r4, #0]
 800cf72:	89a3      	ldrh	r3, [r4, #12]
 800cf74:	f043 0308 	orr.w	r3, r3, #8
 800cf78:	81a3      	strh	r3, [r4, #12]
 800cf7a:	6923      	ldr	r3, [r4, #16]
 800cf7c:	b94b      	cbnz	r3, 800cf92 <__swsetup_r+0x9a>
 800cf7e:	89a3      	ldrh	r3, [r4, #12]
 800cf80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cf84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf88:	d003      	beq.n	800cf92 <__swsetup_r+0x9a>
 800cf8a:	4621      	mov	r1, r4
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	f000 fa09 	bl	800d3a4 <__smakebuf_r>
 800cf92:	89a0      	ldrh	r0, [r4, #12]
 800cf94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf98:	f010 0301 	ands.w	r3, r0, #1
 800cf9c:	d00a      	beq.n	800cfb4 <__swsetup_r+0xbc>
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	60a3      	str	r3, [r4, #8]
 800cfa2:	6963      	ldr	r3, [r4, #20]
 800cfa4:	425b      	negs	r3, r3
 800cfa6:	61a3      	str	r3, [r4, #24]
 800cfa8:	6923      	ldr	r3, [r4, #16]
 800cfaa:	b943      	cbnz	r3, 800cfbe <__swsetup_r+0xc6>
 800cfac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cfb0:	d1ba      	bne.n	800cf28 <__swsetup_r+0x30>
 800cfb2:	bd70      	pop	{r4, r5, r6, pc}
 800cfb4:	0781      	lsls	r1, r0, #30
 800cfb6:	bf58      	it	pl
 800cfb8:	6963      	ldrpl	r3, [r4, #20]
 800cfba:	60a3      	str	r3, [r4, #8]
 800cfbc:	e7f4      	b.n	800cfa8 <__swsetup_r+0xb0>
 800cfbe:	2000      	movs	r0, #0
 800cfc0:	e7f7      	b.n	800cfb2 <__swsetup_r+0xba>
 800cfc2:	bf00      	nop
 800cfc4:	20000128 	.word	0x20000128
 800cfc8:	0800dbac 	.word	0x0800dbac
 800cfcc:	0800dbcc 	.word	0x0800dbcc
 800cfd0:	0800db8c 	.word	0x0800db8c

0800cfd4 <abort>:
 800cfd4:	b508      	push	{r3, lr}
 800cfd6:	2006      	movs	r0, #6
 800cfd8:	f000 fa4c 	bl	800d474 <raise>
 800cfdc:	2001      	movs	r0, #1
 800cfde:	f7f5 f921 	bl	8002224 <_exit>
	...

0800cfe4 <__sflush_r>:
 800cfe4:	898a      	ldrh	r2, [r1, #12]
 800cfe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfea:	4605      	mov	r5, r0
 800cfec:	0710      	lsls	r0, r2, #28
 800cfee:	460c      	mov	r4, r1
 800cff0:	d458      	bmi.n	800d0a4 <__sflush_r+0xc0>
 800cff2:	684b      	ldr	r3, [r1, #4]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	dc05      	bgt.n	800d004 <__sflush_r+0x20>
 800cff8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	dc02      	bgt.n	800d004 <__sflush_r+0x20>
 800cffe:	2000      	movs	r0, #0
 800d000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d004:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d006:	2e00      	cmp	r6, #0
 800d008:	d0f9      	beq.n	800cffe <__sflush_r+0x1a>
 800d00a:	2300      	movs	r3, #0
 800d00c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d010:	682f      	ldr	r7, [r5, #0]
 800d012:	602b      	str	r3, [r5, #0]
 800d014:	d032      	beq.n	800d07c <__sflush_r+0x98>
 800d016:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d018:	89a3      	ldrh	r3, [r4, #12]
 800d01a:	075a      	lsls	r2, r3, #29
 800d01c:	d505      	bpl.n	800d02a <__sflush_r+0x46>
 800d01e:	6863      	ldr	r3, [r4, #4]
 800d020:	1ac0      	subs	r0, r0, r3
 800d022:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d024:	b10b      	cbz	r3, 800d02a <__sflush_r+0x46>
 800d026:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d028:	1ac0      	subs	r0, r0, r3
 800d02a:	2300      	movs	r3, #0
 800d02c:	4602      	mov	r2, r0
 800d02e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d030:	6a21      	ldr	r1, [r4, #32]
 800d032:	4628      	mov	r0, r5
 800d034:	47b0      	blx	r6
 800d036:	1c43      	adds	r3, r0, #1
 800d038:	89a3      	ldrh	r3, [r4, #12]
 800d03a:	d106      	bne.n	800d04a <__sflush_r+0x66>
 800d03c:	6829      	ldr	r1, [r5, #0]
 800d03e:	291d      	cmp	r1, #29
 800d040:	d82c      	bhi.n	800d09c <__sflush_r+0xb8>
 800d042:	4a2a      	ldr	r2, [pc, #168]	; (800d0ec <__sflush_r+0x108>)
 800d044:	40ca      	lsrs	r2, r1
 800d046:	07d6      	lsls	r6, r2, #31
 800d048:	d528      	bpl.n	800d09c <__sflush_r+0xb8>
 800d04a:	2200      	movs	r2, #0
 800d04c:	6062      	str	r2, [r4, #4]
 800d04e:	04d9      	lsls	r1, r3, #19
 800d050:	6922      	ldr	r2, [r4, #16]
 800d052:	6022      	str	r2, [r4, #0]
 800d054:	d504      	bpl.n	800d060 <__sflush_r+0x7c>
 800d056:	1c42      	adds	r2, r0, #1
 800d058:	d101      	bne.n	800d05e <__sflush_r+0x7a>
 800d05a:	682b      	ldr	r3, [r5, #0]
 800d05c:	b903      	cbnz	r3, 800d060 <__sflush_r+0x7c>
 800d05e:	6560      	str	r0, [r4, #84]	; 0x54
 800d060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d062:	602f      	str	r7, [r5, #0]
 800d064:	2900      	cmp	r1, #0
 800d066:	d0ca      	beq.n	800cffe <__sflush_r+0x1a>
 800d068:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d06c:	4299      	cmp	r1, r3
 800d06e:	d002      	beq.n	800d076 <__sflush_r+0x92>
 800d070:	4628      	mov	r0, r5
 800d072:	f7ff fc49 	bl	800c908 <_free_r>
 800d076:	2000      	movs	r0, #0
 800d078:	6360      	str	r0, [r4, #52]	; 0x34
 800d07a:	e7c1      	b.n	800d000 <__sflush_r+0x1c>
 800d07c:	6a21      	ldr	r1, [r4, #32]
 800d07e:	2301      	movs	r3, #1
 800d080:	4628      	mov	r0, r5
 800d082:	47b0      	blx	r6
 800d084:	1c41      	adds	r1, r0, #1
 800d086:	d1c7      	bne.n	800d018 <__sflush_r+0x34>
 800d088:	682b      	ldr	r3, [r5, #0]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d0c4      	beq.n	800d018 <__sflush_r+0x34>
 800d08e:	2b1d      	cmp	r3, #29
 800d090:	d001      	beq.n	800d096 <__sflush_r+0xb2>
 800d092:	2b16      	cmp	r3, #22
 800d094:	d101      	bne.n	800d09a <__sflush_r+0xb6>
 800d096:	602f      	str	r7, [r5, #0]
 800d098:	e7b1      	b.n	800cffe <__sflush_r+0x1a>
 800d09a:	89a3      	ldrh	r3, [r4, #12]
 800d09c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0a0:	81a3      	strh	r3, [r4, #12]
 800d0a2:	e7ad      	b.n	800d000 <__sflush_r+0x1c>
 800d0a4:	690f      	ldr	r7, [r1, #16]
 800d0a6:	2f00      	cmp	r7, #0
 800d0a8:	d0a9      	beq.n	800cffe <__sflush_r+0x1a>
 800d0aa:	0793      	lsls	r3, r2, #30
 800d0ac:	680e      	ldr	r6, [r1, #0]
 800d0ae:	bf08      	it	eq
 800d0b0:	694b      	ldreq	r3, [r1, #20]
 800d0b2:	600f      	str	r7, [r1, #0]
 800d0b4:	bf18      	it	ne
 800d0b6:	2300      	movne	r3, #0
 800d0b8:	eba6 0807 	sub.w	r8, r6, r7
 800d0bc:	608b      	str	r3, [r1, #8]
 800d0be:	f1b8 0f00 	cmp.w	r8, #0
 800d0c2:	dd9c      	ble.n	800cffe <__sflush_r+0x1a>
 800d0c4:	6a21      	ldr	r1, [r4, #32]
 800d0c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d0c8:	4643      	mov	r3, r8
 800d0ca:	463a      	mov	r2, r7
 800d0cc:	4628      	mov	r0, r5
 800d0ce:	47b0      	blx	r6
 800d0d0:	2800      	cmp	r0, #0
 800d0d2:	dc06      	bgt.n	800d0e2 <__sflush_r+0xfe>
 800d0d4:	89a3      	ldrh	r3, [r4, #12]
 800d0d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0da:	81a3      	strh	r3, [r4, #12]
 800d0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e0:	e78e      	b.n	800d000 <__sflush_r+0x1c>
 800d0e2:	4407      	add	r7, r0
 800d0e4:	eba8 0800 	sub.w	r8, r8, r0
 800d0e8:	e7e9      	b.n	800d0be <__sflush_r+0xda>
 800d0ea:	bf00      	nop
 800d0ec:	20400001 	.word	0x20400001

0800d0f0 <_fflush_r>:
 800d0f0:	b538      	push	{r3, r4, r5, lr}
 800d0f2:	690b      	ldr	r3, [r1, #16]
 800d0f4:	4605      	mov	r5, r0
 800d0f6:	460c      	mov	r4, r1
 800d0f8:	b913      	cbnz	r3, 800d100 <_fflush_r+0x10>
 800d0fa:	2500      	movs	r5, #0
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	bd38      	pop	{r3, r4, r5, pc}
 800d100:	b118      	cbz	r0, 800d10a <_fflush_r+0x1a>
 800d102:	6983      	ldr	r3, [r0, #24]
 800d104:	b90b      	cbnz	r3, 800d10a <_fflush_r+0x1a>
 800d106:	f000 f887 	bl	800d218 <__sinit>
 800d10a:	4b14      	ldr	r3, [pc, #80]	; (800d15c <_fflush_r+0x6c>)
 800d10c:	429c      	cmp	r4, r3
 800d10e:	d11b      	bne.n	800d148 <_fflush_r+0x58>
 800d110:	686c      	ldr	r4, [r5, #4]
 800d112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d0ef      	beq.n	800d0fa <_fflush_r+0xa>
 800d11a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d11c:	07d0      	lsls	r0, r2, #31
 800d11e:	d404      	bmi.n	800d12a <_fflush_r+0x3a>
 800d120:	0599      	lsls	r1, r3, #22
 800d122:	d402      	bmi.n	800d12a <_fflush_r+0x3a>
 800d124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d126:	f000 f915 	bl	800d354 <__retarget_lock_acquire_recursive>
 800d12a:	4628      	mov	r0, r5
 800d12c:	4621      	mov	r1, r4
 800d12e:	f7ff ff59 	bl	800cfe4 <__sflush_r>
 800d132:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d134:	07da      	lsls	r2, r3, #31
 800d136:	4605      	mov	r5, r0
 800d138:	d4e0      	bmi.n	800d0fc <_fflush_r+0xc>
 800d13a:	89a3      	ldrh	r3, [r4, #12]
 800d13c:	059b      	lsls	r3, r3, #22
 800d13e:	d4dd      	bmi.n	800d0fc <_fflush_r+0xc>
 800d140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d142:	f000 f908 	bl	800d356 <__retarget_lock_release_recursive>
 800d146:	e7d9      	b.n	800d0fc <_fflush_r+0xc>
 800d148:	4b05      	ldr	r3, [pc, #20]	; (800d160 <_fflush_r+0x70>)
 800d14a:	429c      	cmp	r4, r3
 800d14c:	d101      	bne.n	800d152 <_fflush_r+0x62>
 800d14e:	68ac      	ldr	r4, [r5, #8]
 800d150:	e7df      	b.n	800d112 <_fflush_r+0x22>
 800d152:	4b04      	ldr	r3, [pc, #16]	; (800d164 <_fflush_r+0x74>)
 800d154:	429c      	cmp	r4, r3
 800d156:	bf08      	it	eq
 800d158:	68ec      	ldreq	r4, [r5, #12]
 800d15a:	e7da      	b.n	800d112 <_fflush_r+0x22>
 800d15c:	0800dbac 	.word	0x0800dbac
 800d160:	0800dbcc 	.word	0x0800dbcc
 800d164:	0800db8c 	.word	0x0800db8c

0800d168 <std>:
 800d168:	2300      	movs	r3, #0
 800d16a:	b510      	push	{r4, lr}
 800d16c:	4604      	mov	r4, r0
 800d16e:	e9c0 3300 	strd	r3, r3, [r0]
 800d172:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d176:	6083      	str	r3, [r0, #8]
 800d178:	8181      	strh	r1, [r0, #12]
 800d17a:	6643      	str	r3, [r0, #100]	; 0x64
 800d17c:	81c2      	strh	r2, [r0, #14]
 800d17e:	6183      	str	r3, [r0, #24]
 800d180:	4619      	mov	r1, r3
 800d182:	2208      	movs	r2, #8
 800d184:	305c      	adds	r0, #92	; 0x5c
 800d186:	f7fd fd2d 	bl	800abe4 <memset>
 800d18a:	4b05      	ldr	r3, [pc, #20]	; (800d1a0 <std+0x38>)
 800d18c:	6263      	str	r3, [r4, #36]	; 0x24
 800d18e:	4b05      	ldr	r3, [pc, #20]	; (800d1a4 <std+0x3c>)
 800d190:	62a3      	str	r3, [r4, #40]	; 0x28
 800d192:	4b05      	ldr	r3, [pc, #20]	; (800d1a8 <std+0x40>)
 800d194:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d196:	4b05      	ldr	r3, [pc, #20]	; (800d1ac <std+0x44>)
 800d198:	6224      	str	r4, [r4, #32]
 800d19a:	6323      	str	r3, [r4, #48]	; 0x30
 800d19c:	bd10      	pop	{r4, pc}
 800d19e:	bf00      	nop
 800d1a0:	0800d4ad 	.word	0x0800d4ad
 800d1a4:	0800d4cf 	.word	0x0800d4cf
 800d1a8:	0800d507 	.word	0x0800d507
 800d1ac:	0800d52b 	.word	0x0800d52b

0800d1b0 <_cleanup_r>:
 800d1b0:	4901      	ldr	r1, [pc, #4]	; (800d1b8 <_cleanup_r+0x8>)
 800d1b2:	f000 b8af 	b.w	800d314 <_fwalk_reent>
 800d1b6:	bf00      	nop
 800d1b8:	0800d0f1 	.word	0x0800d0f1

0800d1bc <__sfmoreglue>:
 800d1bc:	b570      	push	{r4, r5, r6, lr}
 800d1be:	2268      	movs	r2, #104	; 0x68
 800d1c0:	1e4d      	subs	r5, r1, #1
 800d1c2:	4355      	muls	r5, r2
 800d1c4:	460e      	mov	r6, r1
 800d1c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d1ca:	f7ff fc09 	bl	800c9e0 <_malloc_r>
 800d1ce:	4604      	mov	r4, r0
 800d1d0:	b140      	cbz	r0, 800d1e4 <__sfmoreglue+0x28>
 800d1d2:	2100      	movs	r1, #0
 800d1d4:	e9c0 1600 	strd	r1, r6, [r0]
 800d1d8:	300c      	adds	r0, #12
 800d1da:	60a0      	str	r0, [r4, #8]
 800d1dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d1e0:	f7fd fd00 	bl	800abe4 <memset>
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	bd70      	pop	{r4, r5, r6, pc}

0800d1e8 <__sfp_lock_acquire>:
 800d1e8:	4801      	ldr	r0, [pc, #4]	; (800d1f0 <__sfp_lock_acquire+0x8>)
 800d1ea:	f000 b8b3 	b.w	800d354 <__retarget_lock_acquire_recursive>
 800d1ee:	bf00      	nop
 800d1f0:	20004235 	.word	0x20004235

0800d1f4 <__sfp_lock_release>:
 800d1f4:	4801      	ldr	r0, [pc, #4]	; (800d1fc <__sfp_lock_release+0x8>)
 800d1f6:	f000 b8ae 	b.w	800d356 <__retarget_lock_release_recursive>
 800d1fa:	bf00      	nop
 800d1fc:	20004235 	.word	0x20004235

0800d200 <__sinit_lock_acquire>:
 800d200:	4801      	ldr	r0, [pc, #4]	; (800d208 <__sinit_lock_acquire+0x8>)
 800d202:	f000 b8a7 	b.w	800d354 <__retarget_lock_acquire_recursive>
 800d206:	bf00      	nop
 800d208:	20004236 	.word	0x20004236

0800d20c <__sinit_lock_release>:
 800d20c:	4801      	ldr	r0, [pc, #4]	; (800d214 <__sinit_lock_release+0x8>)
 800d20e:	f000 b8a2 	b.w	800d356 <__retarget_lock_release_recursive>
 800d212:	bf00      	nop
 800d214:	20004236 	.word	0x20004236

0800d218 <__sinit>:
 800d218:	b510      	push	{r4, lr}
 800d21a:	4604      	mov	r4, r0
 800d21c:	f7ff fff0 	bl	800d200 <__sinit_lock_acquire>
 800d220:	69a3      	ldr	r3, [r4, #24]
 800d222:	b11b      	cbz	r3, 800d22c <__sinit+0x14>
 800d224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d228:	f7ff bff0 	b.w	800d20c <__sinit_lock_release>
 800d22c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d230:	6523      	str	r3, [r4, #80]	; 0x50
 800d232:	4b13      	ldr	r3, [pc, #76]	; (800d280 <__sinit+0x68>)
 800d234:	4a13      	ldr	r2, [pc, #76]	; (800d284 <__sinit+0x6c>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	62a2      	str	r2, [r4, #40]	; 0x28
 800d23a:	42a3      	cmp	r3, r4
 800d23c:	bf04      	itt	eq
 800d23e:	2301      	moveq	r3, #1
 800d240:	61a3      	streq	r3, [r4, #24]
 800d242:	4620      	mov	r0, r4
 800d244:	f000 f820 	bl	800d288 <__sfp>
 800d248:	6060      	str	r0, [r4, #4]
 800d24a:	4620      	mov	r0, r4
 800d24c:	f000 f81c 	bl	800d288 <__sfp>
 800d250:	60a0      	str	r0, [r4, #8]
 800d252:	4620      	mov	r0, r4
 800d254:	f000 f818 	bl	800d288 <__sfp>
 800d258:	2200      	movs	r2, #0
 800d25a:	60e0      	str	r0, [r4, #12]
 800d25c:	2104      	movs	r1, #4
 800d25e:	6860      	ldr	r0, [r4, #4]
 800d260:	f7ff ff82 	bl	800d168 <std>
 800d264:	68a0      	ldr	r0, [r4, #8]
 800d266:	2201      	movs	r2, #1
 800d268:	2109      	movs	r1, #9
 800d26a:	f7ff ff7d 	bl	800d168 <std>
 800d26e:	68e0      	ldr	r0, [r4, #12]
 800d270:	2202      	movs	r2, #2
 800d272:	2112      	movs	r1, #18
 800d274:	f7ff ff78 	bl	800d168 <std>
 800d278:	2301      	movs	r3, #1
 800d27a:	61a3      	str	r3, [r4, #24]
 800d27c:	e7d2      	b.n	800d224 <__sinit+0xc>
 800d27e:	bf00      	nop
 800d280:	0800d810 	.word	0x0800d810
 800d284:	0800d1b1 	.word	0x0800d1b1

0800d288 <__sfp>:
 800d288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d28a:	4607      	mov	r7, r0
 800d28c:	f7ff ffac 	bl	800d1e8 <__sfp_lock_acquire>
 800d290:	4b1e      	ldr	r3, [pc, #120]	; (800d30c <__sfp+0x84>)
 800d292:	681e      	ldr	r6, [r3, #0]
 800d294:	69b3      	ldr	r3, [r6, #24]
 800d296:	b913      	cbnz	r3, 800d29e <__sfp+0x16>
 800d298:	4630      	mov	r0, r6
 800d29a:	f7ff ffbd 	bl	800d218 <__sinit>
 800d29e:	3648      	adds	r6, #72	; 0x48
 800d2a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d2a4:	3b01      	subs	r3, #1
 800d2a6:	d503      	bpl.n	800d2b0 <__sfp+0x28>
 800d2a8:	6833      	ldr	r3, [r6, #0]
 800d2aa:	b30b      	cbz	r3, 800d2f0 <__sfp+0x68>
 800d2ac:	6836      	ldr	r6, [r6, #0]
 800d2ae:	e7f7      	b.n	800d2a0 <__sfp+0x18>
 800d2b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d2b4:	b9d5      	cbnz	r5, 800d2ec <__sfp+0x64>
 800d2b6:	4b16      	ldr	r3, [pc, #88]	; (800d310 <__sfp+0x88>)
 800d2b8:	60e3      	str	r3, [r4, #12]
 800d2ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d2be:	6665      	str	r5, [r4, #100]	; 0x64
 800d2c0:	f000 f847 	bl	800d352 <__retarget_lock_init_recursive>
 800d2c4:	f7ff ff96 	bl	800d1f4 <__sfp_lock_release>
 800d2c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d2cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d2d0:	6025      	str	r5, [r4, #0]
 800d2d2:	61a5      	str	r5, [r4, #24]
 800d2d4:	2208      	movs	r2, #8
 800d2d6:	4629      	mov	r1, r5
 800d2d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d2dc:	f7fd fc82 	bl	800abe4 <memset>
 800d2e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d2e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2ec:	3468      	adds	r4, #104	; 0x68
 800d2ee:	e7d9      	b.n	800d2a4 <__sfp+0x1c>
 800d2f0:	2104      	movs	r1, #4
 800d2f2:	4638      	mov	r0, r7
 800d2f4:	f7ff ff62 	bl	800d1bc <__sfmoreglue>
 800d2f8:	4604      	mov	r4, r0
 800d2fa:	6030      	str	r0, [r6, #0]
 800d2fc:	2800      	cmp	r0, #0
 800d2fe:	d1d5      	bne.n	800d2ac <__sfp+0x24>
 800d300:	f7ff ff78 	bl	800d1f4 <__sfp_lock_release>
 800d304:	230c      	movs	r3, #12
 800d306:	603b      	str	r3, [r7, #0]
 800d308:	e7ee      	b.n	800d2e8 <__sfp+0x60>
 800d30a:	bf00      	nop
 800d30c:	0800d810 	.word	0x0800d810
 800d310:	ffff0001 	.word	0xffff0001

0800d314 <_fwalk_reent>:
 800d314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d318:	4606      	mov	r6, r0
 800d31a:	4688      	mov	r8, r1
 800d31c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d320:	2700      	movs	r7, #0
 800d322:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d326:	f1b9 0901 	subs.w	r9, r9, #1
 800d32a:	d505      	bpl.n	800d338 <_fwalk_reent+0x24>
 800d32c:	6824      	ldr	r4, [r4, #0]
 800d32e:	2c00      	cmp	r4, #0
 800d330:	d1f7      	bne.n	800d322 <_fwalk_reent+0xe>
 800d332:	4638      	mov	r0, r7
 800d334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d338:	89ab      	ldrh	r3, [r5, #12]
 800d33a:	2b01      	cmp	r3, #1
 800d33c:	d907      	bls.n	800d34e <_fwalk_reent+0x3a>
 800d33e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d342:	3301      	adds	r3, #1
 800d344:	d003      	beq.n	800d34e <_fwalk_reent+0x3a>
 800d346:	4629      	mov	r1, r5
 800d348:	4630      	mov	r0, r6
 800d34a:	47c0      	blx	r8
 800d34c:	4307      	orrs	r7, r0
 800d34e:	3568      	adds	r5, #104	; 0x68
 800d350:	e7e9      	b.n	800d326 <_fwalk_reent+0x12>

0800d352 <__retarget_lock_init_recursive>:
 800d352:	4770      	bx	lr

0800d354 <__retarget_lock_acquire_recursive>:
 800d354:	4770      	bx	lr

0800d356 <__retarget_lock_release_recursive>:
 800d356:	4770      	bx	lr

0800d358 <__swhatbuf_r>:
 800d358:	b570      	push	{r4, r5, r6, lr}
 800d35a:	460e      	mov	r6, r1
 800d35c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d360:	2900      	cmp	r1, #0
 800d362:	b096      	sub	sp, #88	; 0x58
 800d364:	4614      	mov	r4, r2
 800d366:	461d      	mov	r5, r3
 800d368:	da08      	bge.n	800d37c <__swhatbuf_r+0x24>
 800d36a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d36e:	2200      	movs	r2, #0
 800d370:	602a      	str	r2, [r5, #0]
 800d372:	061a      	lsls	r2, r3, #24
 800d374:	d410      	bmi.n	800d398 <__swhatbuf_r+0x40>
 800d376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d37a:	e00e      	b.n	800d39a <__swhatbuf_r+0x42>
 800d37c:	466a      	mov	r2, sp
 800d37e:	f000 f8fb 	bl	800d578 <_fstat_r>
 800d382:	2800      	cmp	r0, #0
 800d384:	dbf1      	blt.n	800d36a <__swhatbuf_r+0x12>
 800d386:	9a01      	ldr	r2, [sp, #4]
 800d388:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d38c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d390:	425a      	negs	r2, r3
 800d392:	415a      	adcs	r2, r3
 800d394:	602a      	str	r2, [r5, #0]
 800d396:	e7ee      	b.n	800d376 <__swhatbuf_r+0x1e>
 800d398:	2340      	movs	r3, #64	; 0x40
 800d39a:	2000      	movs	r0, #0
 800d39c:	6023      	str	r3, [r4, #0]
 800d39e:	b016      	add	sp, #88	; 0x58
 800d3a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d3a4 <__smakebuf_r>:
 800d3a4:	898b      	ldrh	r3, [r1, #12]
 800d3a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d3a8:	079d      	lsls	r5, r3, #30
 800d3aa:	4606      	mov	r6, r0
 800d3ac:	460c      	mov	r4, r1
 800d3ae:	d507      	bpl.n	800d3c0 <__smakebuf_r+0x1c>
 800d3b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d3b4:	6023      	str	r3, [r4, #0]
 800d3b6:	6123      	str	r3, [r4, #16]
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	6163      	str	r3, [r4, #20]
 800d3bc:	b002      	add	sp, #8
 800d3be:	bd70      	pop	{r4, r5, r6, pc}
 800d3c0:	ab01      	add	r3, sp, #4
 800d3c2:	466a      	mov	r2, sp
 800d3c4:	f7ff ffc8 	bl	800d358 <__swhatbuf_r>
 800d3c8:	9900      	ldr	r1, [sp, #0]
 800d3ca:	4605      	mov	r5, r0
 800d3cc:	4630      	mov	r0, r6
 800d3ce:	f7ff fb07 	bl	800c9e0 <_malloc_r>
 800d3d2:	b948      	cbnz	r0, 800d3e8 <__smakebuf_r+0x44>
 800d3d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3d8:	059a      	lsls	r2, r3, #22
 800d3da:	d4ef      	bmi.n	800d3bc <__smakebuf_r+0x18>
 800d3dc:	f023 0303 	bic.w	r3, r3, #3
 800d3e0:	f043 0302 	orr.w	r3, r3, #2
 800d3e4:	81a3      	strh	r3, [r4, #12]
 800d3e6:	e7e3      	b.n	800d3b0 <__smakebuf_r+0xc>
 800d3e8:	4b0d      	ldr	r3, [pc, #52]	; (800d420 <__smakebuf_r+0x7c>)
 800d3ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800d3ec:	89a3      	ldrh	r3, [r4, #12]
 800d3ee:	6020      	str	r0, [r4, #0]
 800d3f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3f4:	81a3      	strh	r3, [r4, #12]
 800d3f6:	9b00      	ldr	r3, [sp, #0]
 800d3f8:	6163      	str	r3, [r4, #20]
 800d3fa:	9b01      	ldr	r3, [sp, #4]
 800d3fc:	6120      	str	r0, [r4, #16]
 800d3fe:	b15b      	cbz	r3, 800d418 <__smakebuf_r+0x74>
 800d400:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d404:	4630      	mov	r0, r6
 800d406:	f000 f8c9 	bl	800d59c <_isatty_r>
 800d40a:	b128      	cbz	r0, 800d418 <__smakebuf_r+0x74>
 800d40c:	89a3      	ldrh	r3, [r4, #12]
 800d40e:	f023 0303 	bic.w	r3, r3, #3
 800d412:	f043 0301 	orr.w	r3, r3, #1
 800d416:	81a3      	strh	r3, [r4, #12]
 800d418:	89a0      	ldrh	r0, [r4, #12]
 800d41a:	4305      	orrs	r5, r0
 800d41c:	81a5      	strh	r5, [r4, #12]
 800d41e:	e7cd      	b.n	800d3bc <__smakebuf_r+0x18>
 800d420:	0800d1b1 	.word	0x0800d1b1

0800d424 <_raise_r>:
 800d424:	291f      	cmp	r1, #31
 800d426:	b538      	push	{r3, r4, r5, lr}
 800d428:	4604      	mov	r4, r0
 800d42a:	460d      	mov	r5, r1
 800d42c:	d904      	bls.n	800d438 <_raise_r+0x14>
 800d42e:	2316      	movs	r3, #22
 800d430:	6003      	str	r3, [r0, #0]
 800d432:	f04f 30ff 	mov.w	r0, #4294967295
 800d436:	bd38      	pop	{r3, r4, r5, pc}
 800d438:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d43a:	b112      	cbz	r2, 800d442 <_raise_r+0x1e>
 800d43c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d440:	b94b      	cbnz	r3, 800d456 <_raise_r+0x32>
 800d442:	4620      	mov	r0, r4
 800d444:	f000 f830 	bl	800d4a8 <_getpid_r>
 800d448:	462a      	mov	r2, r5
 800d44a:	4601      	mov	r1, r0
 800d44c:	4620      	mov	r0, r4
 800d44e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d452:	f000 b817 	b.w	800d484 <_kill_r>
 800d456:	2b01      	cmp	r3, #1
 800d458:	d00a      	beq.n	800d470 <_raise_r+0x4c>
 800d45a:	1c59      	adds	r1, r3, #1
 800d45c:	d103      	bne.n	800d466 <_raise_r+0x42>
 800d45e:	2316      	movs	r3, #22
 800d460:	6003      	str	r3, [r0, #0]
 800d462:	2001      	movs	r0, #1
 800d464:	e7e7      	b.n	800d436 <_raise_r+0x12>
 800d466:	2400      	movs	r4, #0
 800d468:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d46c:	4628      	mov	r0, r5
 800d46e:	4798      	blx	r3
 800d470:	2000      	movs	r0, #0
 800d472:	e7e0      	b.n	800d436 <_raise_r+0x12>

0800d474 <raise>:
 800d474:	4b02      	ldr	r3, [pc, #8]	; (800d480 <raise+0xc>)
 800d476:	4601      	mov	r1, r0
 800d478:	6818      	ldr	r0, [r3, #0]
 800d47a:	f7ff bfd3 	b.w	800d424 <_raise_r>
 800d47e:	bf00      	nop
 800d480:	20000128 	.word	0x20000128

0800d484 <_kill_r>:
 800d484:	b538      	push	{r3, r4, r5, lr}
 800d486:	4d07      	ldr	r5, [pc, #28]	; (800d4a4 <_kill_r+0x20>)
 800d488:	2300      	movs	r3, #0
 800d48a:	4604      	mov	r4, r0
 800d48c:	4608      	mov	r0, r1
 800d48e:	4611      	mov	r1, r2
 800d490:	602b      	str	r3, [r5, #0]
 800d492:	f7f4 feb7 	bl	8002204 <_kill>
 800d496:	1c43      	adds	r3, r0, #1
 800d498:	d102      	bne.n	800d4a0 <_kill_r+0x1c>
 800d49a:	682b      	ldr	r3, [r5, #0]
 800d49c:	b103      	cbz	r3, 800d4a0 <_kill_r+0x1c>
 800d49e:	6023      	str	r3, [r4, #0]
 800d4a0:	bd38      	pop	{r3, r4, r5, pc}
 800d4a2:	bf00      	nop
 800d4a4:	20004230 	.word	0x20004230

0800d4a8 <_getpid_r>:
 800d4a8:	f7f4 bea4 	b.w	80021f4 <_getpid>

0800d4ac <__sread>:
 800d4ac:	b510      	push	{r4, lr}
 800d4ae:	460c      	mov	r4, r1
 800d4b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4b4:	f000 f894 	bl	800d5e0 <_read_r>
 800d4b8:	2800      	cmp	r0, #0
 800d4ba:	bfab      	itete	ge
 800d4bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d4be:	89a3      	ldrhlt	r3, [r4, #12]
 800d4c0:	181b      	addge	r3, r3, r0
 800d4c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d4c6:	bfac      	ite	ge
 800d4c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d4ca:	81a3      	strhlt	r3, [r4, #12]
 800d4cc:	bd10      	pop	{r4, pc}

0800d4ce <__swrite>:
 800d4ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4d2:	461f      	mov	r7, r3
 800d4d4:	898b      	ldrh	r3, [r1, #12]
 800d4d6:	05db      	lsls	r3, r3, #23
 800d4d8:	4605      	mov	r5, r0
 800d4da:	460c      	mov	r4, r1
 800d4dc:	4616      	mov	r6, r2
 800d4de:	d505      	bpl.n	800d4ec <__swrite+0x1e>
 800d4e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4e4:	2302      	movs	r3, #2
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	f000 f868 	bl	800d5bc <_lseek_r>
 800d4ec:	89a3      	ldrh	r3, [r4, #12]
 800d4ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d4f6:	81a3      	strh	r3, [r4, #12]
 800d4f8:	4632      	mov	r2, r6
 800d4fa:	463b      	mov	r3, r7
 800d4fc:	4628      	mov	r0, r5
 800d4fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d502:	f000 b817 	b.w	800d534 <_write_r>

0800d506 <__sseek>:
 800d506:	b510      	push	{r4, lr}
 800d508:	460c      	mov	r4, r1
 800d50a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d50e:	f000 f855 	bl	800d5bc <_lseek_r>
 800d512:	1c43      	adds	r3, r0, #1
 800d514:	89a3      	ldrh	r3, [r4, #12]
 800d516:	bf15      	itete	ne
 800d518:	6560      	strne	r0, [r4, #84]	; 0x54
 800d51a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d51e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d522:	81a3      	strheq	r3, [r4, #12]
 800d524:	bf18      	it	ne
 800d526:	81a3      	strhne	r3, [r4, #12]
 800d528:	bd10      	pop	{r4, pc}

0800d52a <__sclose>:
 800d52a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d52e:	f000 b813 	b.w	800d558 <_close_r>
	...

0800d534 <_write_r>:
 800d534:	b538      	push	{r3, r4, r5, lr}
 800d536:	4d07      	ldr	r5, [pc, #28]	; (800d554 <_write_r+0x20>)
 800d538:	4604      	mov	r4, r0
 800d53a:	4608      	mov	r0, r1
 800d53c:	4611      	mov	r1, r2
 800d53e:	2200      	movs	r2, #0
 800d540:	602a      	str	r2, [r5, #0]
 800d542:	461a      	mov	r2, r3
 800d544:	f7f4 fe95 	bl	8002272 <_write>
 800d548:	1c43      	adds	r3, r0, #1
 800d54a:	d102      	bne.n	800d552 <_write_r+0x1e>
 800d54c:	682b      	ldr	r3, [r5, #0]
 800d54e:	b103      	cbz	r3, 800d552 <_write_r+0x1e>
 800d550:	6023      	str	r3, [r4, #0]
 800d552:	bd38      	pop	{r3, r4, r5, pc}
 800d554:	20004230 	.word	0x20004230

0800d558 <_close_r>:
 800d558:	b538      	push	{r3, r4, r5, lr}
 800d55a:	4d06      	ldr	r5, [pc, #24]	; (800d574 <_close_r+0x1c>)
 800d55c:	2300      	movs	r3, #0
 800d55e:	4604      	mov	r4, r0
 800d560:	4608      	mov	r0, r1
 800d562:	602b      	str	r3, [r5, #0]
 800d564:	f7f4 fea1 	bl	80022aa <_close>
 800d568:	1c43      	adds	r3, r0, #1
 800d56a:	d102      	bne.n	800d572 <_close_r+0x1a>
 800d56c:	682b      	ldr	r3, [r5, #0]
 800d56e:	b103      	cbz	r3, 800d572 <_close_r+0x1a>
 800d570:	6023      	str	r3, [r4, #0]
 800d572:	bd38      	pop	{r3, r4, r5, pc}
 800d574:	20004230 	.word	0x20004230

0800d578 <_fstat_r>:
 800d578:	b538      	push	{r3, r4, r5, lr}
 800d57a:	4d07      	ldr	r5, [pc, #28]	; (800d598 <_fstat_r+0x20>)
 800d57c:	2300      	movs	r3, #0
 800d57e:	4604      	mov	r4, r0
 800d580:	4608      	mov	r0, r1
 800d582:	4611      	mov	r1, r2
 800d584:	602b      	str	r3, [r5, #0]
 800d586:	f7f4 fe9c 	bl	80022c2 <_fstat>
 800d58a:	1c43      	adds	r3, r0, #1
 800d58c:	d102      	bne.n	800d594 <_fstat_r+0x1c>
 800d58e:	682b      	ldr	r3, [r5, #0]
 800d590:	b103      	cbz	r3, 800d594 <_fstat_r+0x1c>
 800d592:	6023      	str	r3, [r4, #0]
 800d594:	bd38      	pop	{r3, r4, r5, pc}
 800d596:	bf00      	nop
 800d598:	20004230 	.word	0x20004230

0800d59c <_isatty_r>:
 800d59c:	b538      	push	{r3, r4, r5, lr}
 800d59e:	4d06      	ldr	r5, [pc, #24]	; (800d5b8 <_isatty_r+0x1c>)
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	4604      	mov	r4, r0
 800d5a4:	4608      	mov	r0, r1
 800d5a6:	602b      	str	r3, [r5, #0]
 800d5a8:	f7f4 fe9b 	bl	80022e2 <_isatty>
 800d5ac:	1c43      	adds	r3, r0, #1
 800d5ae:	d102      	bne.n	800d5b6 <_isatty_r+0x1a>
 800d5b0:	682b      	ldr	r3, [r5, #0]
 800d5b2:	b103      	cbz	r3, 800d5b6 <_isatty_r+0x1a>
 800d5b4:	6023      	str	r3, [r4, #0]
 800d5b6:	bd38      	pop	{r3, r4, r5, pc}
 800d5b8:	20004230 	.word	0x20004230

0800d5bc <_lseek_r>:
 800d5bc:	b538      	push	{r3, r4, r5, lr}
 800d5be:	4d07      	ldr	r5, [pc, #28]	; (800d5dc <_lseek_r+0x20>)
 800d5c0:	4604      	mov	r4, r0
 800d5c2:	4608      	mov	r0, r1
 800d5c4:	4611      	mov	r1, r2
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	602a      	str	r2, [r5, #0]
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	f7f4 fe94 	bl	80022f8 <_lseek>
 800d5d0:	1c43      	adds	r3, r0, #1
 800d5d2:	d102      	bne.n	800d5da <_lseek_r+0x1e>
 800d5d4:	682b      	ldr	r3, [r5, #0]
 800d5d6:	b103      	cbz	r3, 800d5da <_lseek_r+0x1e>
 800d5d8:	6023      	str	r3, [r4, #0]
 800d5da:	bd38      	pop	{r3, r4, r5, pc}
 800d5dc:	20004230 	.word	0x20004230

0800d5e0 <_read_r>:
 800d5e0:	b538      	push	{r3, r4, r5, lr}
 800d5e2:	4d07      	ldr	r5, [pc, #28]	; (800d600 <_read_r+0x20>)
 800d5e4:	4604      	mov	r4, r0
 800d5e6:	4608      	mov	r0, r1
 800d5e8:	4611      	mov	r1, r2
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	602a      	str	r2, [r5, #0]
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	f7f4 fe22 	bl	8002238 <_read>
 800d5f4:	1c43      	adds	r3, r0, #1
 800d5f6:	d102      	bne.n	800d5fe <_read_r+0x1e>
 800d5f8:	682b      	ldr	r3, [r5, #0]
 800d5fa:	b103      	cbz	r3, 800d5fe <_read_r+0x1e>
 800d5fc:	6023      	str	r3, [r4, #0]
 800d5fe:	bd38      	pop	{r3, r4, r5, pc}
 800d600:	20004230 	.word	0x20004230
 800d604:	00000000 	.word	0x00000000

0800d608 <cbrt>:
 800d608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d60c:	ec51 0b10 	vmov	r0, r1, d0
 800d610:	4a5b      	ldr	r2, [pc, #364]	; (800d780 <cbrt+0x178>)
 800d612:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d616:	4293      	cmp	r3, r2
 800d618:	ed2d 8b02 	vpush	{d8}
 800d61c:	ee10 2a10 	vmov	r2, s0
 800d620:	468a      	mov	sl, r1
 800d622:	d908      	bls.n	800d636 <cbrt+0x2e>
 800d624:	460b      	mov	r3, r1
 800d626:	f7f2 fe39 	bl	800029c <__adddf3>
 800d62a:	ecbd 8b02 	vpop	{d8}
 800d62e:	ec41 0b10 	vmov	d0, r0, r1
 800d632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d636:	431a      	orrs	r2, r3
 800d638:	d0f7      	beq.n	800d62a <cbrt+0x22>
 800d63a:	4a52      	ldr	r2, [pc, #328]	; (800d784 <cbrt+0x17c>)
 800d63c:	ea0a 0202 	and.w	r2, sl, r2
 800d640:	4619      	mov	r1, r3
 800d642:	4604      	mov	r4, r0
 800d644:	461d      	mov	r5, r3
 800d646:	2a00      	cmp	r2, #0
 800d648:	d17b      	bne.n	800d742 <cbrt+0x13a>
 800d64a:	4b4f      	ldr	r3, [pc, #316]	; (800d788 <cbrt+0x180>)
 800d64c:	2200      	movs	r2, #0
 800d64e:	f7f2 ffdb 	bl	8000608 <__aeabi_dmul>
 800d652:	2203      	movs	r2, #3
 800d654:	fbb1 f3f2 	udiv	r3, r1, r2
 800d658:	f103 5725 	add.w	r7, r3, #692060160	; 0x29400000
 800d65c:	f507 177d 	add.w	r7, r7, #4145152	; 0x3f4000
 800d660:	f507 5762 	add.w	r7, r7, #14464	; 0x3880
 800d664:	4606      	mov	r6, r0
 800d666:	3713      	adds	r7, #19
 800d668:	4632      	mov	r2, r6
 800d66a:	463b      	mov	r3, r7
 800d66c:	4630      	mov	r0, r6
 800d66e:	4639      	mov	r1, r7
 800d670:	f7f2 ffca 	bl	8000608 <__aeabi_dmul>
 800d674:	4622      	mov	r2, r4
 800d676:	462b      	mov	r3, r5
 800d678:	f7f3 f8f0 	bl	800085c <__aeabi_ddiv>
 800d67c:	4632      	mov	r2, r6
 800d67e:	463b      	mov	r3, r7
 800d680:	f7f2 ffc2 	bl	8000608 <__aeabi_dmul>
 800d684:	a334      	add	r3, pc, #208	; (adr r3, 800d758 <cbrt+0x150>)
 800d686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d68a:	f7f2 fe07 	bl	800029c <__adddf3>
 800d68e:	a334      	add	r3, pc, #208	; (adr r3, 800d760 <cbrt+0x158>)
 800d690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d694:	4680      	mov	r8, r0
 800d696:	4689      	mov	r9, r1
 800d698:	f7f2 fe00 	bl	800029c <__adddf3>
 800d69c:	4642      	mov	r2, r8
 800d69e:	464b      	mov	r3, r9
 800d6a0:	ec41 0b18 	vmov	d8, r0, r1
 800d6a4:	a130      	add	r1, pc, #192	; (adr r1, 800d768 <cbrt+0x160>)
 800d6a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6aa:	f7f3 f8d7 	bl	800085c <__aeabi_ddiv>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	ec51 0b18 	vmov	r0, r1, d8
 800d6b6:	f7f2 fdf1 	bl	800029c <__adddf3>
 800d6ba:	4602      	mov	r2, r0
 800d6bc:	460b      	mov	r3, r1
 800d6be:	a12c      	add	r1, pc, #176	; (adr r1, 800d770 <cbrt+0x168>)
 800d6c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6c4:	f7f3 f8ca 	bl	800085c <__aeabi_ddiv>
 800d6c8:	a32b      	add	r3, pc, #172	; (adr r3, 800d778 <cbrt+0x170>)
 800d6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ce:	f7f2 fde5 	bl	800029c <__adddf3>
 800d6d2:	4632      	mov	r2, r6
 800d6d4:	463b      	mov	r3, r7
 800d6d6:	f7f2 ff97 	bl	8000608 <__aeabi_dmul>
 800d6da:	2600      	movs	r6, #0
 800d6dc:	1c4f      	adds	r7, r1, #1
 800d6de:	4632      	mov	r2, r6
 800d6e0:	463b      	mov	r3, r7
 800d6e2:	4630      	mov	r0, r6
 800d6e4:	4639      	mov	r1, r7
 800d6e6:	f7f2 ff8f 	bl	8000608 <__aeabi_dmul>
 800d6ea:	4602      	mov	r2, r0
 800d6ec:	460b      	mov	r3, r1
 800d6ee:	4620      	mov	r0, r4
 800d6f0:	4629      	mov	r1, r5
 800d6f2:	f7f3 f8b3 	bl	800085c <__aeabi_ddiv>
 800d6f6:	4632      	mov	r2, r6
 800d6f8:	463b      	mov	r3, r7
 800d6fa:	4680      	mov	r8, r0
 800d6fc:	4689      	mov	r9, r1
 800d6fe:	f7f2 fdcb 	bl	8000298 <__aeabi_dsub>
 800d702:	4632      	mov	r2, r6
 800d704:	460d      	mov	r5, r1
 800d706:	4604      	mov	r4, r0
 800d708:	463b      	mov	r3, r7
 800d70a:	4630      	mov	r0, r6
 800d70c:	4639      	mov	r1, r7
 800d70e:	f7f2 fdc5 	bl	800029c <__adddf3>
 800d712:	4642      	mov	r2, r8
 800d714:	464b      	mov	r3, r9
 800d716:	f7f2 fdc1 	bl	800029c <__adddf3>
 800d71a:	4602      	mov	r2, r0
 800d71c:	460b      	mov	r3, r1
 800d71e:	4620      	mov	r0, r4
 800d720:	4629      	mov	r1, r5
 800d722:	f7f3 f89b 	bl	800085c <__aeabi_ddiv>
 800d726:	4632      	mov	r2, r6
 800d728:	463b      	mov	r3, r7
 800d72a:	f7f2 ff6d 	bl	8000608 <__aeabi_dmul>
 800d72e:	463b      	mov	r3, r7
 800d730:	4632      	mov	r2, r6
 800d732:	f7f2 fdb3 	bl	800029c <__adddf3>
 800d736:	f00a 4300 	and.w	r3, sl, #2147483648	; 0x80000000
 800d73a:	ea43 0501 	orr.w	r5, r3, r1
 800d73e:	4629      	mov	r1, r5
 800d740:	e773      	b.n	800d62a <cbrt+0x22>
 800d742:	2203      	movs	r2, #3
 800d744:	fbb3 f3f2 	udiv	r3, r3, r2
 800d748:	f103 572c 	add.w	r7, r3, #721420288	; 0x2b000000
 800d74c:	f5a7 07c1 	sub.w	r7, r7, #6324224	; 0x608000
 800d750:	2600      	movs	r6, #0
 800d752:	f2a7 776d 	subw	r7, r7, #1901	; 0x76d
 800d756:	e787      	b.n	800d668 <cbrt+0x60>
 800d758:	f15f15f1 	.word	0xf15f15f1
 800d75c:	3fe15f15 	.word	0x3fe15f15
 800d760:	0ea0ea0f 	.word	0x0ea0ea0f
 800d764:	3ff6a0ea 	.word	0x3ff6a0ea
 800d768:	2532c834 	.word	0x2532c834
 800d76c:	bfe691de 	.word	0xbfe691de
 800d770:	6db6db6e 	.word	0x6db6db6e
 800d774:	3ff9b6db 	.word	0x3ff9b6db
 800d778:	b6db6db7 	.word	0xb6db6db7
 800d77c:	3fd6db6d 	.word	0x3fd6db6d
 800d780:	7fefffff 	.word	0x7fefffff
 800d784:	7ff00000 	.word	0x7ff00000
 800d788:	43500000 	.word	0x43500000

0800d78c <_init>:
 800d78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d78e:	bf00      	nop
 800d790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d792:	bc08      	pop	{r3}
 800d794:	469e      	mov	lr, r3
 800d796:	4770      	bx	lr

0800d798 <_fini>:
 800d798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d79a:	bf00      	nop
 800d79c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d79e:	bc08      	pop	{r3}
 800d7a0:	469e      	mov	lr, r3
 800d7a2:	4770      	bx	lr
